/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:50:19 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.tanh();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.log();
      double double0 = complex3.NaN.abs();
      ComplexField complexField1 = complex3.getField();
      Complex complex4 = complex2.I.asin();
      Complex complex5 = complex4.ONE.log();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.I.subtract(complex0);
      int int1 = complex6.hashCode();
      Complex complex8 = complex0.multiply(complex2);
      Complex complex9 = complex8.ONE.divide(complex3);
      Object object0 = complex6.readResolve();
      List<Complex> list0 = complex0.nthRoot(1671);
      Complex complex10 = complex3.atan();
      Object object1 = complex6.readResolve();
      Complex complex11 = complex6.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex2.I.tan();
      int int0 = complex0.hashCode();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.I.conjugate();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex2.acos();
      Complex complex11 = complex4.ZERO.exp();
      Complex complex12 = complex11.ONE.asin();
      Complex complex13 = complex10.I.subtract(complex5);
      Complex complex14 = complex13.asin();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex13.ZERO.divide(complex2);
      Complex complex17 = complex1.ONE.cos();
      Complex complex18 = complex4.sinh();
      Complex complex19 = complex8.asin();
      double double0 = complex18.getArgument();
      Complex complex20 = complex8.sqrt();
      ComplexField complexField0 = complex18.getField();
      Complex complex21 = complex0.I.asin();
      Complex complex22 = complex6.createComplex(0.0, 5.58160449);
      Complex complex23 = complex8.tanh();
      Complex complex24 = complex23.ONE.createComplex(0.0, 0.0);
      try { 
        complex15.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.INF.pow(complex0);
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex2.ONE.cos();
      Complex complex7 = complex2.ONE.negate();
      Complex complex8 = complex3.ONE.add(complex2);
      ComplexField complexField0 = complex0.ZERO.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex3.atan();
      double double2 = complex10.abs();
      double double3 = complex1.getReal();
      Complex complex11 = complex2.tan();
      Complex complex12 = complex2.sqrt();
      Complex complex13 = Complex.ONE;
      boolean boolean1 = complex6.equals(complex13);
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.sqrt();
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.INF.divide(complex2);
      double double1 = complex0.INF.getArgument();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.49999999999999994, 0.49999999999999994);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.ONE.createComplex(0.49999999999999994, 0.49999999999999994);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.NaN.conjugate();
      String string0 = complex1.toString();
      Complex complex6 = complex1.subtract(complex0);
      ComplexField complexField0 = complex6.ONE.getField();
      ComplexField complexField1 = complex4.INF.getField();
      Complex complex7 = complex5.ZERO.sqrt1z();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.I.divide(complex4);
      Complex complex10 = complex5.NaN.subtract(complex8);
      Complex complex11 = complex1.subtract(complex0);
      Complex complex12 = complex11.ZERO.multiply(0.49999999999999994);
      Complex complex13 = complex1.acos();
      Complex complex14 = complex12.I.tanh();
      Complex complex15 = complex5.pow(complex0);
      int int1 = complex11.hashCode();
      boolean boolean1 = complex8.isNaN();
      Complex complex16 = complex0.sin();
      Complex complex17 = complex16.ZERO.acos();
      boolean boolean2 = complex13.isNaN();
      Complex complex18 = complex0.INF.sqrt();
      Complex complex19 = complex12.cosh();
      double double0 = complex19.NaN.abs();
      boolean boolean3 = complex3.equals((Object) null);
      boolean boolean4 = complex2.equals(complex14);
      Complex complex20 = complex19.createComplex(0.49999999999999994, 0.49999999999999994);
      Complex complex21 = complex20.I.sqrt();
      Object object0 = complex10.readResolve();
      Complex complex22 = complex12.log();
      Complex complex23 = complex11.subtract(complex14);
      Complex complex24 = complex20.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.ZERO.pow(complex4);
      Complex complex6 = complex3.NaN.sqrt1z();
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex3.tan();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex9 = complex0.acos();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.ONE.negate();
      ComplexField complexField0 = complex10.I.getField();
      Complex complex12 = complex10.I.cosh();
      Complex complex13 = complex1.ONE.divide(complex10);
      ComplexField complexField1 = complex3.I.getField();
      Complex complex14 = complex8.multiply((-526.777434963));
      Complex complex15 = complex4.subtract(complex6);
      Complex complex16 = complex14.acos();
      Complex complex17 = complex5.NaN.sin();
      Complex complex18 = complex16.ZERO.tanh();
      Complex complex19 = complex6.multiply((-526.777434963));
      Complex complex20 = complex16.cosh();
      Complex complex21 = complex20.I.sqrt1z();
      Object object0 = complex6.readResolve();
      Complex complex22 = complex2.negate();
      double double0 = complex7.abs();
      Complex complex23 = complex2.acos();
      Complex complex24 = complex8.atan();
      Complex complex25 = complex1.sinh();
      Complex complex26 = complex25.ZERO.cosh();
      boolean boolean1 = complex22.isNaN();
      double double1 = complex5.getImaginary();
      Complex complex27 = complex15.createComplex((-526.777434963), 137.9306652);
      double double2 = complex26.getReal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2782.18, (-0.2499999997677497));
      Complex complex1 = complex0.I.createComplex(146.089971, 146.089971);
      ComplexField complexField0 = complex0.ONE.getField();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex4.ZERO.divide(complex3);
      Complex complex7 = complex2.tanh();
      Object object1 = complex5.INF.readResolve();
      Complex complex8 = complex5.ONE.multiply((-1.0));
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.ONE.multiply(complex9);
      Complex complex12 = complex5.negate();
      Complex complex13 = complex4.sqrt1z();
      Complex complex14 = complex3.divide(complex11);
      Complex complex15 = complex1.log();
      Complex complex16 = complex7.INF.negate();
      Complex complex17 = complex14.sin();
      String string0 = complex17.toString();
      Complex complex18 = complex4.multiply((-0.2499999997677497));
      Complex complex19 = complex18.tanh();
      Complex complex20 = complex12.sqrt1z();
      Complex complex21 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.ZERO.conjugate();
      double double0 = complex1.INF.abs();
      Complex complex4 = complex2.NaN.log();
      double double1 = complex1.NaN.getArgument();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex2.INF.add(complex4);
      Complex complex6 = complex1.createComplex(Double.POSITIVE_INFINITY, 1.225743062930824E-8);
      int int0 = complex6.ONE.hashCode();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.createComplex(0.0, 604.4934);
      Complex complex3 = complex0.asin();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex1.ONE.pow(complex2);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex6.subtract(complex8);
      Complex complex11 = complex7.INF.atan();
      double double1 = complex11.INF.abs();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex12.NaN.sqrt();
      Complex complex14 = complex11.ONE.conjugate();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex15 = complex1.INF.sqrt();
      double double2 = complex7.ZERO.abs();
      int int0 = complex2.hashCode();
      Complex complex16 = complex1.createComplex(0.0, 604.4934);
      Complex complex17 = complex1.createComplex(604.4934, 2.0);
      Complex complex18 = complex6.exp();
      double double3 = complex2.getReal();
      List<Complex> list0 = complex0.ZERO.nthRoot(3439);
      Complex complex19 = complex1.divide(complex0);
      String string0 = complex19.toString();
      int int1 = complex7.hashCode();
      int int2 = complex5.hashCode();
      int int3 = complex7.hashCode();
      Complex complex20 = complex14.createComplex(1491.71, 0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1823.870335216), (-2386.726236801));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.tan();
      List<Complex> list0 = complex5.NaN.nthRoot(3457);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.I.createComplex(376.455, (-2386.726236801));
      Complex complex8 = complex6.I.sqrt();
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex2.ZERO.pow(complex1);
      double double0 = complex3.getArgument();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex11.ONE.createComplex(0.0, (-2386.726236801));
      Complex complex13 = complex9.add(complex2);
      Complex complex14 = complex13.NaN.tanh();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      double double0 = complex0.abs();
      double double1 = complex1.ONE.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.I.negate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex0.ONE.sqrt1z();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.add(complex6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      double double1 = complex0.ONE.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.NaN.createComplex(0.0, (-2672.3));
      Complex complex5 = complex4.createComplex(0.0, 26.23312);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.NaN.add(complex6);
      Complex complex8 = complex4.ONE.sqrt1z();
      Complex complex9 = complex8.log();
      Complex complex10 = complex1.ZERO.sin();
      Complex complex11 = complex1.ZERO.sqrt();
      Complex complex12 = complex11.I.asin();
      Complex complex13 = complex12.cos();
      Complex complex14 = complex1.asin();
      boolean boolean0 = complex3.equals(complex1);
      Complex complex15 = complex1.tanh();
      double double2 = complex10.abs();
      String string0 = complex3.toString();
      Complex complex16 = complex13.NaN.sqrt();
      int int0 = complex15.hashCode();
      ComplexField complexField0 = complex1.getField();
      double double3 = complex13.getImaginary();
      Complex complex17 = complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex4.ZERO.cosh();
      List<Complex> list0 = complex6.I.nthRoot(1);
      Complex complex7 = complex5.ONE.multiply(Double.NaN);
      boolean boolean0 = complex2.isNaN();
      Object object0 = complex2.ONE.readResolve();
      Complex complex8 = complex2.multiply(complex5);
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = complex3.sqrt1z();
      boolean boolean1 = complex0.isInfinite();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex0.acos();
      Complex complex13 = complex10.sqrt();
      Complex complex14 = complex13.atan();
      Complex complex15 = complex13.cosh();
      Complex complex16 = complex12.log();
      Complex complex17 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.sin();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.ZERO.acos();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex8.acos();
      boolean boolean0 = complex7.equals(complex8);
      Complex complex10 = complex8.subtract(complex7);
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex5.multiply(1043.0);
      Complex complex13 = complex12.I.atan();
      Complex complex14 = complex13.INF.sqrt();
      Complex complex15 = complex7.sinh();
      Complex complex16 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex4.negate();
      String string0 = complex0.toString();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1346.46448, 1346.46448);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.I.asin();
      ComplexField complexField0 = complex2.I.getField();
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.add(complex1);
      double double0 = complex6.getImaginary();
      String string1 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2310.76, 0.10526403784751892);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Object object0 = complex0.NaN.readResolve();
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.log();
      Object object0 = complex2.NaN.readResolve();
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex4.INF.log();
      double double0 = complex6.I.abs();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex2.I.sinh();
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex1.ONE.subtract(complex2);
      Complex complex11 = complex9.ZERO.tanh();
      Complex complex12 = new Complex(0.4342944622039795, Double.NaN);
      Complex complex13 = complex9.exp();
      Complex complex14 = complex12.INF.divide(complex4);
      Complex complex15 = complex11.ZERO.tan();
      int int1 = complex15.I.hashCode();
      Complex complex16 = complex9.pow(complex12);
      int int2 = complex16.hashCode();
      boolean boolean0 = complex1.isInfinite();
      Complex complex17 = complex11.tanh();
      double double1 = complex11.getReal();
      Complex complex18 = complex1.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1638.104897734416), (-1638.104897734416));
      Complex complex1 = new Complex((-5065.66118987866), 0);
      Complex complex2 = complex0.ONE.pow(complex1);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      int int0 = complex0.I.hashCode();
      Complex complex1 = new Complex(912.987, 912.987);
      Complex complex2 = complex1.NaN.asin();
      List<Complex> list0 = complex2.NaN.nthRoot(1505);
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex1.NaN.tan();
      double double1 = complex0.getArgument();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.NaN.sinh();
      Object object0 = complex0.readResolve();
      double double2 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      List<Complex> list0 = complex0.I.nthRoot(7);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply((-101.0));
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex0.INF.subtract(complex1);
      boolean boolean0 = complex0.equals("Loess expects at least 1 point");
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex8.log();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex2.sin();
      double double0 = complex0.getArgument();
      Complex complex12 = complex9.log();
      Complex complex13 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-3597.9042693), (-3597.9042693));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.INF.subtract(complex3);
      Complex complex6 = complex4.ONE.exp();
      Complex complex7 = complex4.ZERO.sqrt1z();
      Complex complex8 = complex7.subtract(complex2);
      Complex complex9 = complex5.I.multiply(1992.47012523);
      double double0 = complex5.I.abs();
      Complex complex10 = complex4.ONE.add(complex0);
      Complex complex11 = complex0.INF.cosh();
      double double1 = complex0.getReal();
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex12.ZERO.negate();
      double double2 = complex1.getImaginary();
      Complex complex14 = complex1.INF.tan();
      Complex complex15 = complex4.tanh();
      List<Complex> list0 = complex15.NaN.nthRoot(277);
      Complex complex16 = complex15.I.multiply(0.0);
      double double3 = complex0.getArgument();
      Complex complex17 = complex16.atan();
      Complex complex18 = complex0.atan();
      try { 
        complex18.I.nthRoot((-1709));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,709
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = null;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(0.0, 6.283185307179586);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = complex5.I.log();
      double double0 = complex5.ZERO.abs();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.INF.cos();
      ComplexField complexField0 = complex7.getField();
      String string0 = complex0.toString();
      Complex complex11 = complex8.cos();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex12.I.negate();
      Complex complex14 = complex10.createComplex(1318.9023177581, (-2641.0));
      Complex complex15 = complex6.multiply(0.0);
      Object object0 = complex14.ZERO.readResolve();
      double double1 = complex11.getImaginary();
      String string1 = complex5.toString();
      Complex complex16 = complex14.cosh();
      Complex complex17 = complex13.pow(complex15);
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex1.createComplex(0.0, 0.0);
      Complex complex20 = complex0.negate();
      Complex complex21 = complex12.tan();
      Complex complex22 = complex18.exp();
      Complex complex23 = complex18.add(complex13);
      Complex complex24 = complex1.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex1.ZERO.cos();
      Complex complex6 = complex0.tanh();
      List<Complex> list0 = complex6.nthRoot(1107);
      Complex complex7 = complex5.I.pow(complex6);
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      String string0 = complex1.toString();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ONE.asin();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.getField();
      Object object1 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex3.NaN.createComplex((-2337.31778207559), (-2337.31778207559));
      Complex complex5 = complex4.ZERO.createComplex((-2337.31778207559), 0.0);
      Complex complex6 = complex0.multiply((-389.3371225001284));
      Complex complex7 = complex3.log();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.atan();
      String string0 = complex9.toString();
      double double0 = complex2.abs();
      List<Complex> list0 = complex1.nthRoot(266);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.conjugate();
      double double0 = complex1.getArgument();
      Complex complex5 = complex2.log();
      Complex complex6 = complex1.tan();
      double double1 = complex4.getReal();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(1579.85);
      Complex complex2 = complex0.exp();
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.add(complex1);
      String string0 = complex2.toString();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.pow(complex1);
      Complex complex8 = complex6.ZERO.acos();
      boolean boolean0 = complex2.equals(complex6);
      boolean boolean1 = complex3.equals(complex6);
      Complex complex9 = complex4.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.NaN.multiply(complex6);
      int int0 = complex6.ZERO.hashCode();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.INF.cosh();
      int int1 = complex0.ZERO.hashCode();
      Complex complex10 = complex8.INF.sinh();
      double double0 = complex6.getImaginary();
      Complex complex11 = complex8.exp();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex13.I.multiply(complex11);
      Complex complex15 = complex6.conjugate();
      Complex complex16 = complex8.sin();
      Complex complex17 = complex16.ZERO.sqrt();
      Complex complex18 = complex0.cos();
      List<Complex> list0 = complex18.ZERO.nthRoot(7);
      Complex complex19 = complex0.conjugate();
      Complex complex20 = complex8.multiply(complex18);
      Complex complex21 = complex12.add(complex15);
      Complex complex22 = Complex.ONE;
      Complex complex23 = complex10.ZERO.divide(complex22);
      Complex complex24 = complex8.sqrt1z();
      Complex complex25 = complex10.atan();
      boolean boolean0 = complex21.isNaN();
      Complex complex26 = complex12.log();
      double double1 = complex17.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(4317.4205, 4317.4205);
      double double0 = complex0.ONE.abs();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.NaN.sqrt();
      double double1 = complex2.getReal();
      double double2 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.pow(complex1);
      int int0 = complex2.INF.hashCode();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.sqrt1z();
      try { 
        complex5.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.INF.nthRoot(2969);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      double double0 = complex0.ONE.abs();
      Complex complex2 = new Complex(2016.146898525, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.multiply(complex3);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex1.subtract(complex0);
      Complex complex9 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(213.002523006783, 213.002523006783);
      Complex complex1 = complex0.conjugate();
      String string0 = complex0.toString();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(763.08, (-3505.02));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.log();
      String string0 = complex2.toString();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-4271.930202772808), 0.0);
      Complex complex1 = Complex.ZERO;
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.ONE.divide(complex2);
      Complex complex6 = complex4.sqrt1z();
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex7 = complex4.add(complex1);
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex3.exp();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-0.761594155955765), 1.2958646899018938E-9);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      double double0 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.NaN.cos();
      double double0 = complex0.ONE.getArgument();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      ComplexField complexField0 = complex0.ZERO.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = complex2.I.sqrt();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex1.NaN.tan();
      Complex complex9 = complex7.INF.sqrt();
      Complex complex10 = complex4.INF.asin();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex10.NaN.negate();
      Complex complex14 = complex7.atan();
      Complex complex15 = complex1.cosh();
      Complex complex16 = complex1.conjugate();
      Complex complex17 = complex9.multiply(complex4);
      Complex complex18 = complex0.sqrt1z();
      Complex complex19 = complex6.sin();
      Complex complex20 = complex0.exp();
      double double0 = complex20.INF.getArgument();
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.multiply(942.98649838735);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.ZERO.subtract(complex0);
      Complex complex6 = complex3.ZERO.tan();
      int int1 = complex6.ZERO.hashCode();
      boolean boolean0 = complex1.equals(complex3);
      Complex complex7 = complex4.NaN.tan();
      String string0 = complex3.toString();
      double double1 = complex5.abs();
      Complex complex8 = complex5.multiply(0.0);
      Object object0 = complex3.ONE.readResolve();
      Complex complex9 = complex0.ONE.divide(complex4);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.INF.pow(complex10);
      Complex complex12 = complex0.INF.sqrt1z();
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex13.NaN.sqrt();
      Complex complex15 = complex4.INF.tanh();
      Complex complex16 = complex6.multiply(2285.21962947194);
      boolean boolean1 = complex5.equals(complex4);
      double double2 = complex0.abs();
      Complex complex17 = complex1.I.multiply(complex0);
      Object object1 = complex3.readResolve();
      Complex complex18 = complex13.createComplex(1515.0, 0.0);
      String string1 = complex15.toString();
      Complex complex19 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-2490.846544358), (-2490.846544358));
      Complex complex2 = complex0.sin();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex4.ZERO.add(complex2);
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex2.INF.add(complex0);
      Complex complex8 = complex7.ZERO.add(complex5);
      Complex complex9 = complex0.pow(complex2);
      Complex complex10 = complex2.ZERO.createComplex((-2490.846544358), 0.0);
      Complex complex11 = complex1.exp();
      Complex complex12 = complex0.ONE.multiply(complex9);
      Complex complex13 = complex2.sqrt1z();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex14.INF.createComplex((-2490.846544358), (-156.29344229421));
      Object object1 = complex0.readResolve();
      Complex complex16 = complex10.ZERO.divide(complex13);
      Complex complex17 = complex16.ONE.createComplex((-2490.846544358), (-2490.846544358));
      Complex complex18 = complex13.acos();
      List<Complex> list0 = complex1.ONE.nthRoot(17);
      Complex complex19 = complex0.NaN.negate();
      Complex complex20 = complex0.acos();
      Object object2 = complex20.ONE.readResolve();
      Complex complex21 = complex20.cos();
      Complex complex22 = complex9.asin();
      Complex complex23 = complex1.INF.negate();
      Complex complex24 = complex21.divide(complex12);
      Complex complex25 = complex11.sqrt();
      boolean boolean0 = complex23.isInfinite();
      double double0 = complex6.getImaginary();
      Complex complex26 = complex20.subtract(complex10);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.ZERO.divide(complex1);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex2.ONE.acos();
      double double0 = complex4.getArgument();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.NaN.cosh();
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex2.INF.cos();
      Complex complex10 = complex1.multiply(complex7);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex8.sqrt1z();
      String string1 = complex8.toString();
      Complex complex13 = complex11.INF.sinh();
      Complex complex14 = complex7.I.tan();
      Complex complex15 = complex12.INF.asin();
      List<Complex> list0 = complex10.nthRoot(2794);
      Object object0 = complex11.readResolve();
      Complex complex16 = complex1.subtract(complex2);
      boolean boolean0 = complex2.isInfinite();
      Complex complex17 = complex4.sinh();
      boolean boolean1 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.subtract(complex2);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex4.I.negate();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex3.ZERO.sqrt1z();
      Complex complex10 = complex0.ONE.multiply(complex8);
      boolean boolean0 = complex1.equals(list0);
      ComplexField complexField0 = complex0.getField();
      List<Complex> list1 = complex3.nthRoot(275);
      Complex complex11 = complex8.multiply(0.0);
      Complex complex12 = complex11.subtract(complex4);
      boolean boolean1 = complex3.isNaN();
      Complex complex13 = complex2.cosh();
      double double0 = complex13.ZERO.getArgument();
      Object object0 = complex2.readResolve();
      boolean boolean2 = complex1.equals(object0);
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex14.I.log();
      Complex complex16 = complex10.pow(complex14);
      boolean boolean3 = complex2.isInfinite();
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex11.sqrt1z();
      Complex complex19 = complex18.INF.add(complex14);
      ComplexField complexField1 = complex9.getField();
      double double1 = complex6.getImaginary();
      boolean boolean4 = complex2.equals(complex15);
      String string0 = complex5.toString();
      Complex complex20 = complex16.sqrt1z();
      Complex complex21 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.nthRoot(2373);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.multiply((double) 2373);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = complex0.pow(complex4);
      Complex complex7 = complex6.I.pow(complex0);
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex4.ONE.cosh();
      double double0 = complex6.getReal();
      List<Complex> list1 = complex0.I.nthRoot(919);
      double double1 = complex6.abs();
      String string0 = complex4.toString();
      ComplexField complexField1 = complex8.INF.getField();
      Complex complex10 = complex0.multiply(Double.NaN);
      String string1 = complex8.toString();
      Complex complex11 = complex10.createComplex(919, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(824.30314586131, 824.30314586131);
      Complex complex2 = complex1.ONE.sqrt1z();
      List<Complex> list0 = complex2.I.nthRoot(946);
      Complex complex3 = complex1.NaN.divide(complex0);
      List<Complex> list1 = complex3.I.nthRoot(17);
      Complex complex4 = complex0.I.add(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.NaN.subtract(complex6);
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex0.conjugate();
      int int0 = complex10.hashCode();
      double double0 = complex1.getArgument();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex12.ONE.conjugate();
      Complex complex15 = complex0.ONE.acos();
      Complex complex16 = complex1.NaN.multiply(0.7853981633974483);
      Complex complex17 = complex8.negate();
      double double1 = complex8.getImaginary();
      Complex complex18 = complex9.createComplex(0.7853981633974483, 13.079466037068405);
      Complex complex19 = complex1.negate();
      Complex complex20 = complex11.log();
      Complex complex21 = complex2.createComplex(13.079466037068405, (-3039.9313049985085));
      Complex complex22 = complex2.sqrt1z();
      Complex complex23 = complex12.multiply((double) 17);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.INF.sqrt1z();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = new Complex((-1950.39210942), (-1950.39210942));
      Complex complex9 = complex3.ONE.cosh();
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex1.I.conjugate();
      Complex complex12 = complex1.INF.asin();
      Complex complex13 = complex11.negate();
      Complex complex14 = complex0.add(complex8);
      Complex complex15 = complex3.sin();
      Complex complex16 = complex15.ONE.multiply((-1950.39210942));
      Complex complex17 = complex14.sinh();
      Complex complex18 = complex0.acos();
      try { 
        complex18.ONE.nthRoot((-4282));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,282
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.pow(complex0);
      String string0 = complex0.NaN.toString();
      double double0 = complex3.INF.getArgument();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex6.I.multiply(0.7853981633974483);
      Complex complex9 = complex8.ZERO.createComplex(0.0, 0.0);
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex10.divide(complex6);
      boolean boolean0 = complex5.isInfinite();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.2675934823758863E-8);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.conjugate();
      ComplexField complexField0 = complex2.NaN.getField();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex4.I.cosh();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.I.sqrt();
      double double0 = complex3.getImaginary();
      Complex complex10 = complex9.add(complex2);
      Complex complex11 = complex10.I.multiply((-3829.0413));
      Complex complex12 = complex6.sinh();
      double double1 = complex4.abs();
      Complex complex13 = complex6.asin();
      Complex complex14 = complex0.tan();
      Complex complex15 = complex14.cos();
      Complex complex16 = complex15.ZERO.createComplex(1.0, 1.2675934823758863E-8);
      boolean boolean0 = complex9.equals(complex1);
      Complex complex17 = complex6.log();
      Complex complex18 = complex0.divide(complex8);
  }
}
