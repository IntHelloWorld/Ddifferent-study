/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:50:18 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.createComplex((-554.96), (-1697.724369237495));
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.NaN.divide(complex1);
      Complex complex7 = complex3.INF.cosh();
      Complex complex8 = complex7.INF.divide(complex4);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.INF.atan();
      ComplexField complexField0 = complex9.NaN.getField();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex3.cos();
      Object object1 = complex10.readResolve();
      Complex complex12 = complex10.ZERO.divide(complex2);
      Complex complex13 = complex11.exp();
      Complex complex14 = complex13.I.acos();
      Complex complex15 = complex11.ZERO.atan();
      Complex complex16 = complex3.tanh();
      double double0 = complex16.getArgument();
      Object object2 = complex10.readResolve();
      double double1 = complex10.abs();
      boolean boolean0 = complex11.isInfinite();
      Complex complex17 = complex11.sin();
      Object object3 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1609.149786), (-1609.149786));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.multiply((-1609.149786));
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.add(complex2);
      String string0 = complex3.I.toString();
      Complex complex7 = complex1.ONE.atan();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex3.INF.asin();
      Complex complex10 = complex9.ONE.multiply(complex8);
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex5.negate();
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex5.I.tan();
      Complex complex14 = complex7.ZERO.createComplex(275.7069, (-1609.149786));
      Complex complex15 = complex5.tanh();
      Object object0 = complex15.NaN.readResolve();
      Complex complex16 = complex7.divide(complex6);
      Object object1 = complex16.NaN.readResolve();
      Complex complex17 = complex3.pow(complex0);
      Complex complex18 = complex7.ONE.sin();
      Complex complex19 = complex8.tan();
      Complex complex20 = Complex.INF;
      Complex complex21 = complex19.pow(complex20);
      Complex complex22 = complex16.divide(complex12);
      Complex complex23 = complex22.ZERO.tan();
      Complex complex24 = complex19.ONE.asin();
      Complex complex25 = complex1.pow(complex5);
      double double0 = complex19.abs();
      Complex complex26 = complex9.cos();
      Object object2 = complex26.readResolve();
      Complex complex27 = complex26.sqrt1z();
      Complex complex28 = complex2.tan();
      Complex complex29 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      int int1 = complex0.hashCode();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = new Complex(0.0, 2150.4881308148324);
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex5.INF.createComplex(0.0, 0.6931470632553101);
      double double0 = complex3.ZERO.abs();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex0.NaN.exp();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex0.I.multiply(0.0);
      Complex complex12 = complex11.INF.tan();
      Complex complex13 = complex8.sqrt();
      Complex complex14 = complex13.INF.sqrt1z();
      double double1 = complex1.abs();
      boolean boolean0 = complex1.isInfinite();
      Complex complex15 = complex11.I.sqrt();
      Complex complex16 = complex11.divide(complex0);
      Complex complex17 = complex16.NaN.conjugate();
      boolean boolean1 = complex3.isNaN();
      Complex complex18 = complex16.asin();
      Complex complex19 = complex17.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.asin();
      String string0 = complex0.I.toString();
      Complex complex4 = complex3.NaN.createComplex((-1496.245106), (-1496.245106));
      int int0 = complex0.INF.hashCode();
      Complex complex5 = complex0.tanh();
      double double0 = complex4.ZERO.getArgument();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.multiply(1195.781975917);
      String string1 = complex0.toString();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex4.exp();
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex8.add(complex2);
      Complex complex13 = complex12.ZERO.sinh();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex14 = complex10.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.negate();
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex2.NaN.exp();
      Complex complex7 = complex6.NaN.exp();
      double double0 = complex5.I.abs();
      double double1 = complex4.ZERO.abs();
      Complex complex8 = complex5.I.multiply(complex0);
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex9.I.exp();
      int int0 = complex9.hashCode();
      List<Complex> list0 = complex1.nthRoot(4540);
      Complex complex12 = complex2.INF.subtract(complex8);
      Complex complex13 = complex4.cos();
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex14 = complex3.log();
      Complex complex15 = complex14.I.asin();
      Complex complex16 = complex3.ONE.negate();
      String string0 = complex4.toString();
      Complex complex17 = complex5.atan();
      Complex complex18 = complex5.conjugate();
      int int1 = complex4.hashCode();
      Complex complex19 = complex10.subtract(complex4);
      boolean boolean0 = complex18.equals(complex19);
      Complex complex20 = complex13.multiply(complex12);
      Complex complex21 = complex6.sqrt();
      Complex complex22 = complex14.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      double double0 = complex0.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.multiply(949.5163125111142);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex2.NaN.divide(complex4);
      Complex complex10 = complex9.I.divide(complex0);
      Complex complex11 = complex0.ZERO.tanh();
      Complex complex12 = complex2.tan();
      Complex complex13 = complex0.log();
      double double1 = complex8.abs();
      Complex complex14 = complex12.atan();
      Complex complex15 = complex13.cosh();
      Complex complex16 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.NaN.asin();
      double double0 = complex0.getImaginary();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex0.ZERO.cos();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex4 = complex1.atan();
      ComplexField complexField2 = complex0.getField();
      Complex complex5 = complex4.asin();
      Object object0 = complex5.INF.readResolve();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex5.tanh();
      String string0 = complex1.toString();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.createComplex(5.669184079525E-24, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1.2246467991473532E-16, (-1226.83471075716));
      int int0 = complex0.hashCode();
      String string0 = complex0.toString();
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex0.multiply((-1226.83471075716));
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.ZERO.exp();
      String string1 = complex0.toString();
      Complex complex5 = complex3.ZERO.pow(complex1);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex3.ZERO.multiply(complex2);
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex6.divide(complex3);
      Complex complex11 = complex6.tan();
      boolean boolean1 = complex6.isInfinite();
      Complex complex12 = complex0.createComplex(0.0, 0.2857142686843872);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.0), 820.06372874303);
      List<Complex> list0 = complex1.I.nthRoot(532);
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.log();
      double double1 = complex2.ZERO.abs();
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex1.ZERO.cosh();
      Complex complex6 = complex2.ONE.multiply(complex5);
      Complex complex7 = complex3.NaN.createComplex(0.0, (-976.0));
      ComplexField complexField0 = complex7.I.getField();
      String string0 = complex1.I.toString();
      Complex complex8 = complex2.ZERO.createComplex(919.969063465572, 0.0);
      Complex complex9 = complex5.I.sinh();
      Complex complex10 = complex5.subtract(complex0);
      Complex complex11 = complex10.tan();
      double double2 = complex0.getArgument();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex1.pow(complex6);
      Complex complex14 = complex11.sqrt1z();
      Complex complex15 = complex2.sinh();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 1562.957309514;
      Complex complex1 = new Complex(1562.957309514, 2.0);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex0.ONE.multiply(complex1);
      Complex complex6 = complex5.INF.asin();
      int int0 = complex6.I.hashCode();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1086.596), (-1086.596));
      Complex complex1 = new Complex((-1086.596), (-857.5087290828));
      Complex complex2 = complex0.INF.pow(complex1);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.ONE.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.ZERO.add(complex2);
      Complex complex10 = complex5.tan();
      int int0 = complex6.hashCode();
      Complex complex11 = complex3.negate();
      int int1 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.sqrt1z();
      double double0 = complex1.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex3.I.pow(complex4);
      Complex complex6 = complex2.ONE.subtract(complex0);
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex4.NaN.add(complex2);
      Complex complex9 = complex7.INF.exp();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex10.I.exp();
      Complex complex12 = complex6.NaN.log();
      Complex complex13 = complex3.asin();
      Complex complex14 = complex1.ONE.tanh();
      Complex complex15 = complex2.NaN.sinh();
      Complex complex16 = complex13.INF.subtract(complex5);
      Complex complex17 = complex16.NaN.pow(complex4);
      boolean boolean0 = complex1.equals(complex4);
      Complex complex18 = complex1.pow(complex2);
      Complex complex19 = complex1.asin();
      double double1 = complex16.getArgument();
      int int0 = complex12.hashCode();
      Complex complex20 = complex18.asin();
      Complex complex21 = complex20.NaN.asin();
      Complex complex22 = complex2.exp();
      String string0 = complex20.toString();
      Complex complex23 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.ONE.add(complex4);
      List<Complex> list0 = complex5.ONE.nthRoot(389);
      Complex complex7 = complex0.INF.acos();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex8.I.multiply(0.0);
      boolean boolean0 = complex0.equals(complex3);
      Complex complex10 = complex8.I.add(complex3);
      Complex complex11 = complex3.sqrt();
      Complex complex12 = complex4.multiply(complex8);
      Complex complex13 = complex10.subtract(complex9);
      Complex complex14 = complex10.pow(complex4);
      Complex complex15 = complex13.I.conjugate();
      Complex complex16 = complex11.NaN.pow(complex3);
      Complex complex17 = complex9.tan();
      Complex complex18 = complex15.subtract(complex13);
      Complex complex19 = complex18.sqrt();
      Complex complex20 = complex19.INF.atan();
      // Undeclared exception!
      try { 
        complex19.INF.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.getReal();
      Complex complex3 = complex1.I.multiply(Double.NaN);
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.I.subtract(complex2);
      Complex complex9 = complex7.log();
      Complex complex10 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.abs();
      Complex complex2 = complex1.sqrt();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.divide(complex0);
      double double1 = complex4.getImaginary();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.negate();
      String string0 = complex6.I.toString();
      Complex complex7 = complex0.sin();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex6.multiply(complex0);
      Complex complex9 = complex5.tanh();
      boolean boolean0 = complex9.isInfinite();
      double double2 = complex5.getArgument();
      Complex complex10 = complex6.add(complex7);
      boolean boolean1 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-333.078547462481));
      Complex complex1 = complex0.atan();
      double double0 = complex1.abs();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.subtract(complex2);
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1470.4, 0.0);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex4.INF.cosh();
      boolean boolean0 = complex3.isInfinite();
      boolean boolean1 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ZERO.sqrt1z();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex2.ZERO.conjugate();
      Complex complex5 = complex0.ONE.subtract(complex1);
      Complex complex6 = complex5.ZERO.multiply((-590.69));
      Complex complex7 = complex5.ONE.asin();
      String string0 = complex0.ONE.toString();
      Complex complex8 = complex1.INF.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.exp();
      double double0 = complex10.ONE.getArgument();
      double double1 = complex10.ZERO.getArgument();
      ComplexField complexField0 = complex10.getField();
      double double2 = complex1.getArgument();
      Complex complex11 = complex0.acos();
      try { 
        complex1.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.exp();
      double double1 = complex2.getReal();
      Complex complex3 = complex2.tan();
      double double2 = complex0.getArgument();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.subtract(complex1);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex4.NaN.add(complex3);
      Complex complex8 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex9 = complex4.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex10 = complex2.divide(complex1);
      Complex complex11 = complex2.createComplex(0.0, 0.0);
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex9.conjugate();
      Complex complex14 = complex10.asin();
      double double1 = complex4.getArgument();
      Complex complex15 = complex8.sin();
      Complex complex16 = complex6.exp();
      Complex complex17 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex1.ZERO.subtract(complex2);
      List<Complex> list0 = complex1.ONE.nthRoot(24);
      String string0 = complex0.NaN.toString();
      Complex complex5 = complex0.conjugate();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.equals(list0);
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex4.multiply(complex5);
      Complex complex8 = complex0.multiply((-447.4877));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.multiply((-1238.2));
      Complex complex4 = complex3.INF.createComplex((-1238.2), (-1238.2));
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex0.NaN.cosh();
      double double0 = complex3.ONE.abs();
      ComplexField complexField0 = complex1.I.getField();
      double double1 = complex2.ONE.getArgument();
      List<Complex> list0 = complex2.INF.nthRoot(60);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.NaN.divide(complex6);
      double double2 = complex2.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex4.add(complex1);
      Complex complex10 = complex1.sinh();
      double double3 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      double double0 = complex1.getArgument();
      Complex complex3 = complex2.ONE.atan();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.cos();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.divide(complex7);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = new Complex(1861.1968, Double.NaN);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.I.subtract(complex1);
      double double0 = complex0.NaN.getArgument();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex1.multiply(0.0);
      int int0 = complex0.hashCode();
      String string0 = complex5.toString();
      Complex complex6 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.multiply((-1275.398));
      Complex complex5 = complex0.createComplex((-1275.398), (-1275.398));
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex3.multiply(0.5039018405998233);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.subtract(complex0);
      double double0 = complex1.abs();
      Complex complex5 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex5.INF.exp();
      Complex complex9 = complex5.ZERO.exp();
      Complex complex10 = complex9.subtract(complex2);
      Complex complex11 = complex1.ONE.exp();
      double double1 = complex9.I.getArgument();
      Complex complex12 = complex0.asin();
      int int0 = complex12.hashCode();
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex13.atan();
      boolean boolean0 = complex1.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.acos();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex2.I.log();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex1.pow(complex2);
      String string0 = complex7.INF.toString();
      Complex complex8 = complex4.log();
      String string1 = complex8.INF.toString();
      Complex complex9 = complex8.multiply(complex3);
      Complex complex10 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.INF.cos();
      Complex complex5 = complex2.I.log();
      Complex complex6 = complex1.pow(complex2);
      String string0 = complex6.INF.toString();
      Complex complex7 = Complex.ZERO;
      String string1 = complex7.INF.toString();
      Complex complex8 = complex7.multiply(complex3);
      Complex complex9 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.createComplex((-1372.213605), 1245.5);
      Complex complex3 = complex0.INF.divide(complex1);
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.I.divide(complex7);
      Complex complex9 = complex0.multiply(complex7);
      Complex complex10 = complex7.I.exp();
      int int1 = complex10.ZERO.hashCode();
      Complex complex11 = complex1.INF.tan();
      boolean boolean0 = complex9.isNaN();
      Complex complex12 = complex7.sinh();
      ComplexField complexField0 = complex1.getField();
      boolean boolean1 = complex0.isNaN();
      Complex complex13 = complex9.sin();
      String string0 = complex13.I.toString();
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex2.sin();
      List<Complex> list0 = complex4.nthRoot(388);
      Complex complex16 = complex1.sqrt1z();
      Complex complex17 = complex4.cos();
      Complex complex18 = complex6.atan();
      ComplexField complexField1 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-392.47557), (-392.47557));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex1.ONE.multiply(complex0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.I.pow(complex2);
      Complex complex7 = complex1.NaN.negate();
      Complex complex8 = complex7.INF.log();
      String string0 = complex7.INF.toString();
      String string1 = complex5.toString();
      boolean boolean0 = complex0.isInfinite();
      int int0 = (-496);
      try { 
        complex1.nthRoot((-496));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -496
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.multiply(452.99);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex1.sqrt();
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
      Complex complex7 = complex3.NaN.divide(complex6);
      Complex complex8 = complex1.negate();
      Complex complex9 = complex1.ONE.negate();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.ZERO.acos();
      Complex complex12 = complex1.asin();
      double double2 = complex12.I.abs();
      Complex complex13 = complex0.multiply(complex1);
      Complex complex14 = complex9.ZERO.sin();
      Complex complex15 = complex6.INF.add(complex3);
      Complex complex16 = complex13.ONE.pow(complex6);
      Complex complex17 = complex8.multiply(complex10);
      Complex complex18 = complex16.sqrt1z();
      Complex complex19 = complex18.NaN.sqrt1z();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex9.isNaN();
      Complex complex20 = complex12.tan();
      Complex complex21 = complex20.tan();
      Complex complex22 = complex0.exp();
      Complex complex23 = complex7.asin();
      Complex complex24 = complex0.sinh();
      Complex complex25 = complex5.sqrt();
      Complex complex26 = complex17.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex0.I.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.NaN.asin();
      Complex complex6 = complex4.negate();
      String string0 = complex0.toString();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.I.pow(complex6);
      Complex complex9 = complex3.tan();
      int int0 = complex1.hashCode();
      boolean boolean1 = complex4.isInfinite();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex4.atan();
      Complex complex9 = complex1.subtract(complex6);
      Complex complex10 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex4.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ONE.add(complex1);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.subtract(complex5);
      Complex complex9 = complex7.exp();
      Complex complex10 = complex8.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex7.ONE.sqrt1z();
      ComplexField complexField0 = complex9.I.getField();
      Complex complex12 = complex5.acos();
      Complex complex13 = complex7.ONE.subtract(complex5);
      Complex complex14 = complex8.add(complex9);
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex17 = complex16.atan();
      Complex complex18 = complex16.INF.pow(complex2);
      Complex complex19 = complex16.NaN.sin();
      Complex complex20 = complex5.asin();
      Complex complex21 = Complex.NaN;
      double double0 = complex21.getArgument();
      Complex complex22 = complex15.pow(complex21);
      double double1 = complex12.getReal();
      Object object0 = complex12.readResolve();
      Complex complex23 = Complex.ONE;
      Complex complex24 = complex19.multiply(complex23);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex3 = complex2.INF.divide(complex1);
      ComplexField complexField1 = complex1.NaN.getField();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.INF.tanh();
      double double0 = complex0.ONE.abs();
      Complex complex7 = complex4.tanh();
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.multiply(2.479773539153719E-5);
      Complex complex4 = complex2.INF.exp();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex1.sqrt1z();
      double double1 = complex2.getReal();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      double double0 = complex1.I.getArgument();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.divide(complex0);
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ZERO.multiply(0.0);
      Complex complex5 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex3.I.tanh();
      try { 
        complex3.nthRoot((-2709));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,709
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-988.91154), (-988.91154));
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.subtract(complex1);
      Object object0 = complex1.ONE.readResolve();
      Complex complex4 = complex1.createComplex((-4688.03), 0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.sqrt();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.NaN.atan();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.I.log();
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex1.I.sin();
      Object object0 = complex4.ONE.readResolve();
      Complex complex7 = complex1.log();
      double double0 = complex3.getArgument();
      Complex complex8 = complex3.atan();
      String string1 = complex7.toString();
      double double1 = complex7.getReal();
      String string2 = complex7.toString();
      Complex complex9 = complex1.multiply(complex0);
      Complex complex10 = complex9.INF.conjugate();
      String string3 = complex4.toString();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex1.sin();
      String string4 = complex1.toString();
      double double2 = complex12.getReal();
      double double3 = complex2.getReal();
      int int1 = complex11.hashCode();
      Complex complex13 = complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex3.NaN.multiply(complex4);
      Complex complex7 = complex1.INF.tan();
      Complex complex8 = complex7.NaN.sinh();
      Object object0 = complex0.I.readResolve();
      List<Complex> list0 = complex1.INF.nthRoot(147);
      Complex complex9 = complex1.ZERO.log();
      Complex complex10 = complex1.INF.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex4.I.sinh();
      Complex complex12 = complex10.cos();
      int int0 = complex12.ONE.hashCode();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(1790.88);
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex2.multiply((-788.0));
      List<Complex> list0 = complex2.nthRoot(7);
      ComplexField complexField0 = complex1.getField();
      String string0 = complex3.toString();
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.createComplex(20.0, 1313.6);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.INF.negate();
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex7.INF.divide(complex5);
      Complex complex9 = complex5.multiply(1313.6);
      Complex complex10 = complex5.I.exp();
      Complex complex11 = complex4.ZERO.createComplex(20.0, 1313.6);
      double double0 = complex7.INF.abs();
      ComplexField complexField0 = complex2.NaN.getField();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex12 = complex0.I.createComplex(20.0, 1313.6);
      double double1 = complex4.abs();
      boolean boolean1 = complex8.isNaN();
      Complex complex13 = complex6.sqrt();
      double double2 = complex9.abs();
      Complex complex14 = complex9.negate();
      double double3 = complex1.abs();
      Object object0 = new Object();
      boolean boolean2 = complex7.equals(object0);
      double double4 = complex0.getArgument();
      Complex complex15 = complex0.conjugate();
      ComplexField complexField1 = complex15.getField();
      List<Complex> list0 = complex15.nthRoot(96);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.log();
      Object object0 = complex1.I.readResolve();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.INF.add(complex2);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.INF.asin();
      ComplexField complexField0 = complex4.getField();
      Complex complex9 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ZERO.conjugate();
      Complex complex4 = complex2.ONE.sin();
      String string0 = complex4.I.toString();
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex0.divide(complex2);
      double double0 = complex6.I.getArgument();
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = complex0.ZERO.subtract(complex4);
      Complex complex9 = complex7.ONE.multiply(complex1);
      Complex complex10 = complex1.multiply(0.0);
      double double1 = complex5.abs();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex2.pow(complex5);
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex13.NaN.multiply(complex6);
      Complex complex15 = complex5.multiply(complex0);
      Complex complex16 = complex6.sinh();
      double double2 = complex5.getReal();
      Complex complex17 = complex15.cosh();
      Complex complex18 = complex4.multiply(2978.46);
      Complex complex19 = complex7.cos();
      Complex complex20 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = new Complex(1936.3114515157595, 0.0);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.I.multiply(complex2);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex6.subtract(complex0);
      Complex complex10 = complex9.log();
      double double0 = complex2.getArgument();
      Object object0 = complex1.readResolve();
      Object object1 = complex6.readResolve();
      Complex complex11 = complex7.NaN.divide(complex6);
      Complex complex12 = complex1.atan();
      Complex complex13 = complex8.createComplex(0.0, (-439.2));
      Complex complex14 = complex13.cosh();
      Complex complex15 = complex5.acos();
      Complex complex16 = complex15.NaN.acos();
      Complex complex17 = complex4.acos();
      Complex complex18 = complex17.NaN.tan();
      Complex complex19 = complex16.asin();
      Complex complex20 = complex19.tanh();
      Complex complex21 = complex3.sinh();
      Complex complex22 = complex16.sin();
      Complex complex23 = complex3.cosh();
      String string0 = complex23.toString();
      Complex complex24 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.INF.getArgument();
      int int0 = complex0.INF.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.ONE.multiply(complex3);
      Complex complex5 = complex0.I.sin();
      Complex complex6 = complex5.ONE.divide(complex0);
      Complex complex7 = complex5.INF.exp();
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex5.ZERO.multiply(complex6);
      String string0 = complex0.toString();
      Complex complex10 = complex0.createComplex((-4573.860719126264), (-4573.860719126264));
      double double1 = complex10.getReal();
      Complex complex11 = complex10.divide(complex7);
      Complex complex12 = complex9.acos();
      double double2 = complex9.getImaginary();
      Complex complex13 = complex8.acos();
      Complex complex14 = complex12.negate();
      double double3 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = Complex.ZERO;
      Object object0 = complex2.readResolve();
      double double0 = complex5.I.abs();
      Complex complex6 = complex3.INF.sin();
      Complex complex7 = complex4.subtract(complex5);
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex0.multiply(0.0036);
      Complex complex10 = complex9.ONE.acos();
      Complex complex11 = complex5.INF.pow(complex4);
      Complex complex12 = complex4.NaN.sinh();
      Complex complex13 = complex10.asin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex14 = complex10.pow(complex7);
      Complex complex15 = complex14.NaN.sqrt1z();
      Complex complex16 = complex9.exp();
      Complex complex17 = complex4.sin();
      ComplexField complexField0 = complex17.getField();
      double double1 = complex10.ONE.getArgument();
      Complex complex18 = complex13.ZERO.pow(complex17);
      Object object1 = complex0.readResolve();
      Complex complex19 = complex3.multiply(complex13);
      Complex complex20 = complex16.sqrt();
      double double2 = complex1.getArgument();
      Complex complex21 = complex13.sqrt();
      String string0 = complex3.toString();
      int int0 = complex17.hashCode();
      boolean boolean1 = complex19.isNaN();
      Complex complex22 = complex10.cosh();
      Complex complex23 = complex19.sinh();
      int int1 = complex19.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-928.923209));
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex1.INF.tan();
      Complex complex8 = complex0.INF.tanh();
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex9.NaN.multiply(complex2);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex12.NaN.log();
      String string0 = complex13.toString();
      Complex complex14 = complex4.pow(complex12);
      Complex complex15 = complex13.atan();
      Complex complex16 = complex15.NaN.asin();
      Complex complex17 = complex16.I.atan();
      Complex complex18 = complex12.ZERO.cos();
      Complex complex19 = complex17.ONE.log();
      Complex complex20 = complex3.exp();
      Complex complex21 = complex17.INF.log();
      ComplexField complexField0 = complex15.getField();
      String string1 = complex2.toString();
      boolean boolean0 = complex2.isNaN();
      Complex complex22 = complex12.log();
      Complex complex23 = complex22.I.tan();
      boolean boolean1 = complex9.isNaN();
      Complex complex24 = complex2.I.sinh();
      Complex complex25 = complex19.negate();
      Complex complex26 = complex4.tan();
      Complex complex27 = complex11.sinh();
      List<Complex> list0 = complex5.nthRoot(177);
  }
}
