/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:57:16 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(2491.24, 2491.24);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.pow(complex0);
      List<Complex> list0 = complex1.I.nthRoot(2001);
      Complex complex3 = complex0.tanh();
      double double0 = complex3.ONE.abs();
      List<Complex> list1 = complex3.I.nthRoot(2001);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = new Complex((-5241.6937064), 2491.24);
      Complex complex6 = complex4.ZERO.negate();
      double double1 = complex3.I.getArgument();
      Complex complex7 = complex4.divide(complex5);
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex7.multiply(1.5707963267948966);
      Complex complex11 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-181.0), 621.044910408);
      Complex complex1 = complex0.INF.tan();
      String string0 = complex1.toString();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex2.I.exp();
      Complex complex7 = complex3.multiply(621.044910408);
      double double0 = complex0.getArgument();
      double double1 = complex7.INF.getArgument();
      double double2 = complex0.abs();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex8.NaN.divide(complex2);
      Complex complex11 = complex7.exp();
      Complex complex12 = complex3.multiply(complex7);
      Complex complex13 = complex0.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.createComplex(927.0, 927.0);
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.NaN.tanh();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex0.createComplex(2257.2377, 2257.2377);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.ONE.multiply(2257.2377);
      ComplexField complexField1 = complex6.NaN.getField();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex7.INF.tanh();
      double double0 = complex1.getArgument();
      Complex complex10 = complex3.NaN.tanh();
      Complex complex11 = complex4.multiply(complex1);
      Complex complex12 = complex3.add(complex1);
      double double1 = complex9.abs();
      ComplexField complexField2 = complex11.getField();
      Complex complex13 = complex1.pow(complex11);
      Complex complex14 = complex10.exp();
      Complex complex15 = complex12.negate();
      boolean boolean0 = complex5.isNaN();
      Complex complex16 = complex4.subtract(complex1);
      Complex complex17 = complex14.log();
      Complex complex18 = complex17.NaN.negate();
      Complex complex19 = complex17.tanh();
      Complex complex20 = complex19.NaN.createComplex(1738.44585895, Double.POSITIVE_INFINITY);
      boolean boolean1 = complex16.isNaN();
      Complex complex21 = complex19.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2425.0), 0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex1.cos();
      Complex complex11 = complex2.subtract(complex3);
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1738.44354547903), 1.0);
      Complex complex1 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.createComplex(1.0, 0.0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.log();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex4.I.multiply(complex0);
      try { 
        complex5.nthRoot((-24));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -24
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex3.ONE.subtract(complex0);
      List<Complex> list0 = complex2.I.nthRoot(37);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex6.NaN.log();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex5.createComplex(37, 37);
      Complex complex11 = complex4.exp();
      Complex complex12 = complex2.ZERO.asin();
      Complex complex13 = complex10.exp();
      Complex complex14 = complex13.ONE.tan();
      int int0 = complex2.hashCode();
      Complex complex15 = complex5.tanh();
      Complex complex16 = complex13.NaN.sqrt();
      List<Complex> list1 = complex10.nthRoot(37);
      ComplexField complexField0 = complex2.getField();
      Complex complex17 = complex4.cos();
      double double0 = complex3.getArgument();
      Complex complex18 = complex15.cos();
      ComplexField complexField1 = complex4.getField();
      ComplexField complexField2 = complex3.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex19 = complex4.log();
      Complex complex20 = complex19.sqrt();
      Complex complex21 = complex13.sqrt();
      ComplexField complexField3 = complex14.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex1.INF.createComplex(1.073741824E9, 1.7029898543501842E-8);
      Complex complex3 = complex0.NaN.createComplex(4551.55918321131, 4551.55918321131);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2323.44401, 2323.44401);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ZERO.multiply(2323.44401);
      int int0 = complex1.INF.hashCode();
      List<Complex> list0 = complex2.nthRoot(242);
      Complex complex3 = complex2.divide(complex1);
      Object object0 = complex1.I.readResolve();
      Complex complex4 = complex0.multiply(2323.44401);
      Complex complex5 = complex4.ZERO.createComplex(2323.44401, (-2643.239936));
      Complex complex6 = complex4.INF.asin();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.NaN.asin();
      double double0 = complex3.NaN.abs();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.negate();
      boolean boolean0 = complex1.isNaN();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex5.log();
      Complex complex8 = complex0.asin();
      int int1 = complex1.hashCode();
      Complex complex9 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex1.ZERO.multiply((-1791.244710683));
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.createComplex(1463.53966, (-2247.0));
      double double1 = complex0.getArgument();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex5.conjugate();
      double double2 = complex2.getReal();
      Complex complex9 = complex8.multiply((-1791.244710683));
      Complex complex10 = complex6.sin();
      List<Complex> list0 = complex9.nthRoot(2518);
      Complex complex11 = complex4.atan();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex7.equals(object0);
      Complex complex12 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.ZERO.createComplex(0.0, 1035.6098693960696);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.ZERO.asin();
      double double0 = complex4.abs();
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 247.0283);
      Complex complex1 = new Complex(0.0, (-2623.39));
      List<Complex> list0 = complex1.nthRoot(7);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.ZERO.tan();
      List<Complex> list1 = complex3.ONE.nthRoot(4143);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex2.ZERO.multiply(complex5);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex5.ZERO.tan();
      Complex complex9 = complex5.createComplex(6.283185307179586, (-4230.1105));
      boolean boolean0 = complex9.isInfinite();
      Complex complex10 = complex2.subtract(complex5);
      Complex complex11 = complex10.INF.tanh();
      double double0 = complex1.getArgument();
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.ONE.asin();
      Complex complex14 = complex2.negate();
      boolean boolean1 = complex0.isNaN();
      double double1 = complex5.getReal();
      Complex complex15 = complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.ZERO.multiply((-2452.32977828653));
      Complex complex4 = complex2.NaN.tanh();
      boolean boolean0 = complex0.equals("jaaEi>fU7Xj,]nl8jvE");
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-638.0));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.INF.divide(complex0);
      String string0 = complex0.toString();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex2.INF.conjugate();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.I.log();
      String string1 = complex9.ZERO.toString();
      Complex complex10 = complex5.NaN.divide(complex2);
      Complex complex11 = complex4.ZERO.cosh();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex3.INF.sinh();
      Complex complex14 = complex12.ZERO.sqrt();
      ComplexField complexField0 = complex12.getField();
      Complex complex15 = complex5.INF.pow(complex14);
      int int0 = complex5.ZERO.hashCode();
      Complex complex16 = complex12.acos();
      Complex complex17 = complex16.INF.tan();
      Complex complex18 = complex3.INF.cos();
      Complex complex19 = complex17.ZERO.negate();
      Complex complex20 = complex17.NaN.log();
      String string2 = complex6.toString();
      Complex complex21 = complex16.acos();
      Complex complex22 = complex21.sqrt();
      Complex complex23 = complex22.INF.sqrt1z();
      Complex complex24 = complex0.asin();
      Complex complex25 = complex21.asin();
      Complex complex26 = complex13.pow(complex20);
      Complex complex27 = complex9.asin();
      Complex complex28 = complex25.acos();
      Complex complex29 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.INF.sqrt1z();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex0.negate();
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.NaN.tanh();
      double double0 = complex6.ZERO.abs();
      Complex complex7 = complex6.INF.divide(complex4);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex4.INF.atan();
      ComplexField complexField2 = complex2.getField();
      double double1 = complex4.getReal();
      int int0 = complex4.hashCode();
      Complex complex10 = complex3.tanh();
      List<Complex> list0 = complex4.nthRoot(1);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex11 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.add(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex5.I.divide(complex1);
      Complex complex7 = complex1.INF.conjugate();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex9.INF.log();
      Complex complex11 = complex9.ZERO.multiply(complex10);
      List<Complex> list0 = complex10.NaN.nthRoot(8);
      Complex complex12 = complex0.sqrt();
      double double0 = complex1.getImaginary();
      Complex complex13 = complex12.I.asin();
      int int0 = complex0.hashCode();
      Complex complex14 = complex0.sin();
      Complex complex15 = complex14.subtract(complex12);
      double double1 = complex0.getReal();
      Complex complex16 = complex1.acos();
      Complex complex17 = complex16.sin();
      String string0 = complex13.toString();
      Complex complex18 = complex12.atan();
      Complex complex19 = complex15.multiply((-943.2873041));
      Object object0 = complex0.readResolve();
      Complex complex20 = complex16.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = new Complex(226.6915233934277, 226.6915233934277);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = complex8.NaN.negate();
      Complex complex10 = complex7.tan();
      boolean boolean0 = complex7.isInfinite();
      double double0 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(2713.03, 9.313225746154785E-10);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ZERO.cos();
      double double0 = complex2.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.INF.multiply(complex3);
      Complex complex5 = complex0.I.tanh();
      double double1 = complex0.getArgument();
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex3.pow(complex5);
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex9.NaN.log();
      ComplexField complexField1 = complex10.INF.getField();
      Complex complex11 = complex6.multiply(0.0);
      double double2 = complex0.getImaginary();
      Complex complex12 = complex5.createComplex(1.0, 0.0);
      int int0 = complex3.hashCode();
      Complex complex13 = complex2.createComplex(2713.03, 9.313225746154785E-10);
      Complex complex14 = complex8.pow(complex6);
      Complex complex15 = Complex.ONE;
      boolean boolean0 = complex14.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(6.283185307179586);
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.ZERO.add(complex1);
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.I.acos();
      double double0 = complex5.INF.abs();
      Complex complex8 = complex5.asin();
      double double1 = complex0.getImaginary();
      String string0 = complex2.toString();
      boolean boolean0 = complex1.isInfinite();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex6.tanh();
      boolean boolean1 = complex9.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.exp();
      List<Complex> list0 = complex0.nthRoot(2362);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(979.25509008, 0.0);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Object object0 = complex0.INF.readResolve();
      List<Complex> list0 = complex0.I.nthRoot(17);
      int int0 = complex0.I.hashCode();
      List<Complex> list1 = complex0.nthRoot(218);
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex1.I.asin();
      double double1 = complex3.INF.abs();
      double double2 = complex1.getReal();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.NaN.sin();
      double double3 = complex2.getReal();
      double double4 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-506.15514940053043), 2725.7779548);
      Complex complex1 = complex0.multiply(2290.83776599);
      Complex complex2 = complex1.ONE.sinh();
      List<Complex> list0 = complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.I.divide(complex0);
      double double0 = complex3.I.abs();
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.subtract(complex2);
      double double1 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.INF.pow(complex1);
      double double0 = complex2.ZERO.getArgument();
      int int0 = complex2.hashCode();
      double double1 = complex1.I.getArgument();
      Complex complex6 = complex0.INF.log();
      List<Complex> list0 = complex1.nthRoot(107);
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.ZERO.pow(complex7);
      Complex complex10 = complex6.INF.sin();
      double double2 = complex10.ZERO.abs();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.ZERO.multiply(0.0);
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex7.multiply(3468.7612);
      Complex complex15 = complex11.tanh();
      double double3 = complex5.getImaginary();
      Complex complex16 = complex2.acos();
      Object object0 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex((-685.231379799), (-1.5707963267948966));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = complex4.divide(complex8);
      boolean boolean0 = complex2.isNaN();
      Complex complex11 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.createComplex((-155.303336954), (-4.9E-324));
      Complex complex3 = complex1.ZERO.conjugate();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.createComplex(0.0, 0.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.I.divide(complex5);
      Complex complex7 = complex0.divide(complex4);
      ComplexField complexField0 = complex7.I.getField();
      Complex complex8 = complex1.sqrt1z();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.createComplex(4448.91957748, 0.0);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex4.ZERO.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.createComplex(2956.46, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex3.I.createComplex(0.0, 1.986821492305628E-8);
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex2.cos();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-63.486913));
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex5.sqrt1z();
      double double1 = complex1.getImaginary();
      double double2 = complex4.getReal();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex4.multiply(complex5);
      Complex complex9 = complex8.cosh();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.getArgument();
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2306.29194), (-2306.29194));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ONE.multiply(1357.1034);
      Complex complex6 = complex0.sinh();
      double double0 = complex4.getImaginary();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(complex0);
      String string0 = complex1.toString();
      Complex complex3 = complex0.ZERO.log();
      int int0 = complex3.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.acos();
      String string1 = complex4.toString();
      Complex complex5 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1386.28617672));
      Complex complex1 = complex0.createComplex(0.0, (-1386.28617672));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-3868.7), 995.46250178625);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.NaN.subtract(complex1);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex5.NaN.sqrt();
      double double0 = complex5.NaN.abs();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      String string0 = complex1.toString();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.NaN.sin();
      double double0 = complex2.NaN.abs();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex0.sinh();
      String string0 = complex1.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = Complex.I;
      boolean boolean1 = complex3.equals(complex8);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex9.createComplex(0.0, 0.0);
      Complex complex12 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.INF.acos();
      List<Complex> list0 = complex3.ONE.nthRoot(1860);
      Complex complex5 = complex1.I.cos();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.I.subtract(complex0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.INF.createComplex(1809.52, 1809.52);
      double double1 = complex0.getImaginary();
      Complex complex4 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(complex0);
      ComplexField complexField0 = complex2.INF.getField();
      Object object0 = complex2.ZERO.readResolve();
      ComplexField complexField1 = complex0.INF.getField();
      boolean boolean0 = complex1.equals(complex0);
      double double0 = complex0.getReal();
      Complex complex3 = complex0.log();
      boolean boolean1 = complex0.isInfinite();
      Complex complex4 = complex3.tan();
      double double1 = complex0.getReal();
      Complex complex5 = complex1.I.atan();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.cos();
      int int0 = complex6.hashCode();
      Object object0 = complex3.ONE.readResolve();
      Object object1 = new Object();
      Complex complex7 = complex2.NaN.log();
      boolean boolean0 = complex0.equals(object1);
      Complex complex8 = complex3.subtract(complex5);
      Complex complex9 = complex8.cos();
      Object object2 = complex8.readResolve();
      Complex complex10 = complex0.atan();
      double double0 = complex1.abs();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex11.cos();
      int int1 = complex12.ONE.hashCode();
      Object object3 = complex12.ONE.readResolve();
      Complex complex13 = complex12.I.add(complex11);
      String string0 = complex11.toString();
      Complex complex14 = complex0.atan();
      double double1 = complex14.INF.abs();
      Complex complex15 = complex4.cosh();
      Complex complex16 = complex1.divide(complex4);
      Complex complex17 = complex4.atan();
      Complex complex18 = Complex.NaN;
      Complex complex19 = complex5.multiply(complex18);
      Complex complex20 = complex19.ONE.multiply(complex5);
      try { 
        complex19.INF.nthRoot((-5624));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,624
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.INF;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.ZERO.pow(complex1);
      ComplexField complexField1 = complex0.getField();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.sinh();
      double double0 = complex1.ZERO.abs();
      Complex complex7 = complex1.INF.divide(complex5);
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex5.INF.atan();
      double double1 = complex5.getReal();
      List<Complex> list0 = complex5.nthRoot(1);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex10 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.multiply(Double.NaN);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.ZERO.nthRoot(7);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex0.subtract(complex4);
      double double0 = complex1.abs();
      Complex complex6 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.I.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.multiply(1426.6);
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex2.ONE.sqrt1z();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(667.8, 667.8);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.cosh();
      double double0 = complex0.abs();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.I.createComplex(944.4118169527529, 2007.1198);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex6.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.INF.asin();
      ComplexField complexField0 = complex1.ZERO.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.sqrt();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      double double0 = complex0.abs();
      Complex complex2 = complex0.divide(complex1);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex1.multiply((-1925.6957138));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex0);
      List<Complex> list0 = complex1.nthRoot(6);
      Complex complex2 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex(0.42319912171599805, 0.42319912171599805);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-299.904108708805), (-3723.35511151));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.multiply(0.16666666666745392);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.pow(complex2);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      double double0 = complex3.getArgument();
      Complex complex5 = complex1.multiply(complex4);
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex2.acos();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex4.pow(complex11);
      String string0 = complex12.toString();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.createComplex(0.0, (-1834.6));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.ZERO;
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.I.exp();
      Complex complex6 = complex5.ZERO.add(complex0);
      double double1 = complex5.ONE.abs();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex7 = complex4.sinh();
      boolean boolean1 = complex6.equals(complex7);
      Complex complex8 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(773.491924062395, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.createComplex(0.0, 0.008333333333329196);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.ZERO.createComplex(0.008333333333329196, Double.NaN);
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex2.ONE.asin();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex0.acos();
      int int0 = complex9.hashCode();
      Complex complex10 = complex7.ONE.multiply(0.008333333333329196);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex0.cos();
      Complex complex13 = complex2.divide(complex7);
      Object object0 = complex13.ONE.readResolve();
      List<Complex> list0 = complex12.nthRoot(37);
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.INF.log();
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex2.I.subtract(complex3);
      Complex complex11 = complex2.ONE.cosh();
      boolean boolean1 = complex9.isNaN();
      Complex complex12 = complex2.subtract(complex8);
      ComplexField complexField0 = complex2.getField();
      double double0 = complex11.getReal();
      Complex complex13 = complex2.subtract(complex11);
      Complex complex14 = complex7.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.ONE.log();
      int int0 = complex3.ONE.hashCode();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex1.ZERO.add(complex0);
      Complex complex7 = complex2.ONE.sinh();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex4.INF.negate();
      Complex complex10 = complex3.divide(complex5);
      Complex complex11 = complex8.ONE.multiply(0.0);
      Complex complex12 = complex10.createComplex((-4605.6044802391), 1026.0);
      Complex complex13 = complex4.sqrt1z();
      double double0 = complex1.ZERO.abs();
      double double1 = complex8.getImaginary();
      boolean boolean0 = complex0.isNaN();
      Complex complex14 = complex13.ZERO.add(complex2);
      Complex complex15 = complex3.pow(complex2);
      Complex complex16 = complex13.ONE.cosh();
      List<Complex> list0 = complex15.nthRoot(2);
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex3.pow(complex17);
      Complex complex19 = complex12.sqrt();
      double double2 = complex13.INF.getArgument();
      Complex complex20 = complex1.sqrt();
      ComplexField complexField0 = complex13.getField();
      Complex complex21 = complex1.cosh();
      int int1 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      double double0 = complex3.ZERO.abs();
      Complex complex4 = Complex.INF;
      boolean boolean0 = complex0.equals(complex4);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.createComplex(2.0, 0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex2.I.negate();
      ComplexField complexField1 = complex1.NaN.getField();
      Complex complex8 = complex2.sqrt();
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex8.I.cos();
      double double1 = complex2.abs();
      Complex complex10 = complex0.exp();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex10.INF.multiply(complex11);
      Complex complex13 = complex10.INF.cos();
      Complex complex14 = complex5.conjugate();
      Complex complex15 = complex14.ONE.sin();
      Complex complex16 = complex14.ZERO.negate();
      Complex complex17 = complex10.cos();
      Complex complex18 = complex17.ONE.add(complex5);
      Complex complex19 = complex2.cosh();
      Complex complex20 = complex4.multiply(complex14);
      Complex complex21 = complex19.createComplex(201.11114105409, 625.314);
  }
}
