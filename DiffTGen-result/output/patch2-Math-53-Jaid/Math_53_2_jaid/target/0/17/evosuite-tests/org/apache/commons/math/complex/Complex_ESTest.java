/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:53:49 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(2173.521, 3.9736429850260626E-8);
      Complex complex1 = null;
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(75.0, 0.0);
      int int0 = complex0.hashCode();
      String string0 = complex0.ONE.toString();
      List<Complex> list0 = complex0.INF.nthRoot(2033);
      int int1 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      String string1 = complex0.toString();
      Complex complex1 = complex0.I.tan();
      double double0 = complex0.abs();
      boolean boolean1 = complex0.equals(object0);
      Complex complex2 = complex0.INF.conjugate();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ZERO.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.multiply(0.0);
      // Undeclared exception!
      complex5.nthRoot(8388608);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isInfinite();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ONE.conjugate();
      double double0 = complex1.I.getArgument();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = complex4.ONE.pow(complex1);
      Complex complex6 = complex0.multiply(833.0);
      Complex complex7 = complex6.ZERO.multiply(complex5);
      Complex complex8 = complex2.INF.acos();
      String string0 = complex4.toString();
      String string1 = complex6.ONE.toString();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex0.I.add(complex8);
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex12.ZERO.multiply(833.0);
      double double1 = complex6.getArgument();
      Complex complex14 = complex9.createComplex(833.0, 833.0);
      Complex complex15 = complex8.sinh();
      Complex complex16 = complex14.exp();
      Complex complex17 = complex6.divide(complex15);
      Complex complex18 = complex6.sin();
      Complex complex19 = complex16.pow(complex4);
      Complex complex20 = complex7.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.log();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.I.add(complex1);
      double double1 = complex1.getArgument();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.INF.exp();
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex8.I.add(complex7);
      Complex complex12 = complex0.add(complex6);
      Complex complex13 = complex12.pow(complex2);
      double double2 = complex13.I.abs();
      Complex complex14 = complex12.divide(complex7);
      Object object0 = complex12.readResolve();
      Complex complex15 = complex2.NaN.sin();
      double double3 = complex1.getReal();
      Complex complex16 = complex11.exp();
      Complex complex17 = complex11.exp();
      Complex complex18 = complex14.sinh();
      Complex complex19 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.tan();
      try { 
        complex2.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.I.atan();
      ComplexField complexField0 = complex3.INF.getField();
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex1.INF.sqrt1z();
      Complex complex6 = complex4.ZERO.pow(complex3);
      Complex complex7 = complex4.I.exp();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex0.ZERO.multiply(complex8);
      int int0 = complex4.I.hashCode();
      Complex complex10 = complex4.ZERO.cos();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex13 = complex7.cosh();
      Complex complex14 = complex11.createComplex((-1716.85641), Double.NaN);
      Complex complex15 = complex10.subtract(complex7);
      Object object0 = complex2.readResolve();
      Complex complex16 = complex4.sqrt1z();
      double double1 = complex0.getImaginary();
      Object object1 = complex3.readResolve();
      Complex complex17 = complex16.negate();
      Complex complex18 = complex8.subtract(complex12);
      Complex complex19 = complex8.I.pow(complex17);
      Complex complex20 = complex18.ZERO.acos();
      Complex complex21 = complex9.negate();
      Complex complex22 = complex21.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Complex complex4 = complex3.INF.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.add(complex2);
      double double0 = complex2.getImaginary();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex1.sqrt();
      List<Complex> list0 = complex4.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex1.I.createComplex((-4.503599627370496E15), 3924.5228);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex2.divide(complex4);
      Object object0 = complex1.readResolve();
      Complex complex9 = complex2.conjugate();
      int int0 = complex2.hashCode();
      ComplexField complexField0 = complex6.I.getField();
      Complex complex10 = complex4.multiply(complex8);
      Complex complex11 = complex10.INF.atan();
      ComplexField complexField1 = complex10.getField();
      String string0 = complex8.toString();
      Object object1 = complex4.ONE.readResolve();
      Complex complex12 = complex10.negate();
      ComplexField complexField2 = complex4.getField();
      Complex complex13 = complex9.I.sinh();
      String string1 = complex7.toString();
      boolean boolean0 = complex6.isNaN();
      Complex complex14 = complex6.NaN.acos();
      Complex complex15 = complex8.subtract(complex9);
      Complex complex16 = complex8.log();
      double double0 = complex4.getArgument();
      Complex complex17 = complex3.multiply(complex16);
      double double1 = complex17.INF.abs();
      double double2 = complex0.abs();
      Complex complex18 = complex0.subtract(complex9);
      Complex complex19 = complex7.cos();
      Complex complex20 = complex19.ZERO.asin();
      boolean boolean1 = complex0.isInfinite();
      Complex complex21 = complex6.asin();
      Complex complex22 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-995.9662963));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex4.ONE.createComplex((-2100.77740083318), Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.subtract(complex4);
      String string0 = complex3.INF.toString();
      Complex complex8 = complex6.sinh();
      String string1 = complex0.INF.toString();
      String string2 = complex7.toString();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex0.ZERO.sinh();
      Object object0 = complex6.ONE.readResolve();
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex6.log();
      Complex complex12 = complex11.ONE.divide(complex6);
      Complex complex13 = Complex.ZERO;
      Object object1 = complex13.readResolve();
      boolean boolean1 = complex8.equals(object1);
      double double1 = complex0.getArgument();
      Complex complex14 = complex9.ZERO.acos();
      Complex complex15 = complex13.cos();
      Complex complex16 = complex3.pow(complex5);
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex6.multiply(0.0);
      double double2 = complex7.getReal();
      Complex complex19 = complex8.log();
      String string3 = complex13.toString();
      Object object2 = complex15.readResolve();
      Complex complex20 = complex12.atan();
      Complex complex21 = complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = new Complex((-418.73948446015), (-418.73948446015));
      Complex complex4 = complex1.INF.pow(complex3);
      Complex complex5 = complex2.INF.negate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex1.sin();
      double double0 = complex7.getReal();
      Complex complex8 = complex4.createComplex((-546.16618404), 578.0093498986924);
      Complex complex9 = complex1.log();
      Complex complex10 = complex3.divide(complex8);
      Object object0 = complex3.readResolve();
      Complex complex11 = complex3.sqrt();
      double double1 = complex5.abs();
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex12.INF.pow(complex7);
      Complex complex14 = complex9.add(complex6);
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.add(complex0);
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
      List<Complex> list0 = complex0.nthRoot(636);
      Complex complex3 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.NaN.createComplex((-1047.6171330571642), 1474.31);
      Complex complex4 = complex0.multiply((-2469.908424495936));
      Complex complex5 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex4.ONE.sin();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.I.exp();
      int int0 = complex3.I.hashCode();
      Complex complex9 = complex0.multiply((-3561.7516853619686));
      Complex complex10 = complex9.multiply(complex2);
      Complex complex11 = complex10.I.createComplex(0.0, (-3561.7516853619686));
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex12.NaN.atan();
      Complex complex14 = complex12.ONE.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = complex9.subtract(complex1);
      Complex complex16 = complex15.INF.atan();
      double double1 = complex11.getArgument();
      Object object0 = complex16.readResolve();
      Complex complex17 = complex16.pow(complex0);
      double double2 = complex17.ONE.getArgument();
      double double3 = complex1.getImaginary();
      Complex complex18 = complex9.log();
      Complex complex19 = complex2.cos();
      Complex complex20 = complex16.add(complex9);
      Object object1 = complex16.readResolve();
      Complex complex21 = complex6.multiply(complex10);
      int int1 = complex21.I.hashCode();
      int int2 = complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1977.468, 738.429158);
      Complex complex1 = complex0.createComplex(738.429158, 911.0);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex1.createComplex(738.429158, 0.0);
      double double0 = complex1.INF.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex6.ONE.log();
      try { 
        complex6.nthRoot((-3133));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,133
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.I.pow(complex0);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex1.log();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-805.3870801), (-805.3870801));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.INF.atan();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex5 = complex0.I.divide(complex3);
      Complex complex6 = complex5.NaN.log();
      int int0 = complex5.I.hashCode();
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.atan();
      ComplexField complexField0 = complex8.NaN.getField();
      double double1 = complex0.abs();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex0.multiply(complex9);
      ComplexField complexField1 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.subtract(complex1);
      int int0 = complex2.INF.hashCode();
      int int1 = complex2.hashCode();
      Complex complex3 = complex0.tanh();
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex3.ONE.cosh();
      ComplexField complexField0 = complex3.getField();
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex6.cos();
      List<Complex> list0 = complex5.ONE.nthRoot(2941);
      Complex complex8 = complex0.ZERO.sinh();
      Complex complex9 = complex3.createComplex((-453.4168170513137), Double.NaN);
      Complex complex10 = complex5.add(complex2);
      Complex complex11 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-3229.56057644), 2.7553817452272217E-6);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.createComplex((-1553.9), 3571.1457036052);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.ZERO.log();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.sqrt1z();
      double double0 = complex8.ONE.abs();
      Complex complex9 = complex8.add(complex0);
      Complex complex10 = complex8.I.multiply(complex6);
      Complex complex11 = complex9.negate();
      Complex complex12 = complex0.tanh();
      boolean boolean0 = complex9.isInfinite();
      Complex complex13 = complex1.cos();
      Complex complex14 = complex4.cosh();
      Complex complex15 = complex9.ONE.cosh();
      Complex complex16 = complex7.ZERO.conjugate();
      Complex complex17 = complex15.INF.atan();
      Complex complex18 = complex13.sqrt();
      double double1 = complex1.getImaginary();
      List<Complex> list0 = complex7.ZERO.nthRoot(138);
      double double2 = complex5.getArgument();
      Complex complex19 = complex4.tan();
      Complex complex20 = complex19.NaN.tanh();
      Complex complex21 = complex19.NaN.sinh();
      Complex complex22 = complex11.sin();
      Complex complex23 = complex5.negate();
      Complex complex24 = complex23.INF.asin();
      boolean boolean1 = complex16.isInfinite();
      Complex complex25 = complex1.multiply(3692.79439876);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.exp();
      int int0 = complex2.hashCode();
      Complex complex4 = complex2.sin();
      Complex complex5 = new Complex((-227.687), 4068.1041566779);
      Complex complex6 = complex2.ZERO.add(complex5);
      Complex complex7 = complex4.ZERO.multiply(4068.1041566779);
      Complex complex8 = complex4.ZERO.log();
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.ONE.add(complex9);
      Complex complex11 = complex10.I.multiply((-227.687));
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.ONE.multiply(1.0);
      Complex complex8 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2406.451554057));
      Complex complex1 = complex0.I.negate();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex1.ZERO.divide(complex0);
      int int0 = complex2.INF.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.ZERO.multiply(complex4);
      Complex complex6 = complex5.ZERO.add(complex4);
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex1.abs();
      double double1 = complex1.getArgument();
      Complex complex7 = complex2.cosh();
      ComplexField complexField1 = complex2.getField();
      Complex complex8 = complex7.negate();
      Object object1 = complex1.NaN.readResolve();
      Complex complex9 = complex8.INF.sqrt();
      double double2 = complex2.getImaginary();
      boolean boolean1 = complex8.equals(complex1);
      Object object2 = complex1.readResolve();
      int int1 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.ZERO.exp();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex3.tanh();
      int int0 = complex4.INF.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex0.ZERO.sinh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.NaN.add(complex0);
      Complex complex8 = complex6.NaN.asin();
      double double2 = complex8.NaN.getArgument();
      double double3 = complex8.NaN.abs();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex7.asin();
      Complex complex12 = complex7.atan();
      boolean boolean0 = complex7.isNaN();
      Complex complex13 = complex12.multiply(2.0);
      boolean boolean1 = complex6.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(3649.900443327678, 3649.900443327678);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex1.ZERO.multiply(complex0);
      Object object0 = complex0.I.readResolve();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.cosh();
      ComplexField complexField0 = complex5.getField();
      Complex complex7 = complex3.multiply(3.562773508);
      Complex complex8 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.008336750013465571, 66.6);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = new Complex(0.008336750013465571, 2.0);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex0.multiply(complex3);
      int int0 = complex3.hashCode();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex5.atan();
      List<Complex> list0 = complex7.ZERO.nthRoot(2471);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      double double1 = complex0.abs();
      Complex complex1 = complex0.INF.log();
      Object object0 = new Object();
      Complex complex2 = complex1.ZERO.add(complex0);
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.multiply(1.0);
      Complex complex4 = complex3.ONE.cosh();
      String string0 = complex0.toString();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex3.I.add(complex1);
      Complex complex7 = complex4.NaN.multiply(1.0);
      double double2 = complex0.getArgument();
      Complex complex8 = complex1.pow(complex4);
      List<Complex> list0 = complex8.NaN.nthRoot(2961);
      Complex complex9 = complex6.sinh();
      double double3 = complex5.abs();
      Complex complex10 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ONE.multiply((-1367.1855268332));
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex2.I.exp();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.cos();
      Complex complex10 = complex9.add(complex5);
      Complex complex11 = complex6.sin();
      List<Complex> list0 = complex2.ONE.nthRoot(159);
      double double0 = complex11.ONE.abs();
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      double double0 = complex1.getImaginary();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2273.5968455, 2273.5968455);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.multiply(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.sin();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.multiply(2273.5968455);
      Complex complex5 = complex4.cosh();
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = null;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.pow(complex1);
      double double0 = complex2.getReal();
      List<Complex> list0 = complex3.nthRoot(228);
      double double1 = complex1.getImaginary();
      Complex complex4 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.NaN.sqrt1z();
      double double1 = complex0.INF.getArgument();
      Complex complex5 = complex4.NaN.negate();
      Object object0 = complex3.ONE.readResolve();
      Complex complex6 = complex0.I.createComplex(2.404307984052299E-9, 3473.9);
      Complex complex7 = complex4.ONE.negate();
      Object object1 = complex1.I.readResolve();
      Complex complex8 = complex3.NaN.asin();
      double double2 = complex3.getArgument();
      Complex complex9 = complex2.ZERO.createComplex(Double.NaN, Double.NaN);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex1.multiply(complex4);
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex12.I.cosh();
      ComplexField complexField0 = complex8.getField();
      double double3 = complex11.getImaginary();
      double double4 = complex5.getArgument();
      double double5 = complex7.getArgument();
      Complex complex14 = complex0.pow(complex3);
      double double6 = complex1.getImaginary();
      double double7 = complex11.abs();
      Complex complex15 = complex7.createComplex(1.0, 0.7853981633974483);
      Object object2 = complex15.readResolve();
      boolean boolean0 = complex5.isNaN();
      Complex complex16 = complex2.atan();
      double double8 = complex16.getArgument();
      Complex complex17 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1870.0), (-1870.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = complex2.NaN.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.INF.createComplex((-1870.0), (-1870.0));
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex2.acos();
      Object object1 = complex2.readResolve();
      Complex complex6 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      double double0 = complex0.ONE.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.multiply(complex2);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex2.ONE.divide(complex0);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.INF.acos();
      double double1 = complex6.NaN.abs();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.add(complex6);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex8.ONE.tan();
      Complex complex12 = complex9.ONE.multiply(complex10);
      Complex complex13 = complex6.sinh();
      double double2 = complex8.getImaginary();
      Complex complex14 = complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-3441.01361), (-730.86));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1086.625546872, 0.0);
      String string0 = complex0.I.toString();
      double double0 = complex0.ZERO.getArgument();
      String string1 = complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex3 = complex2.add(complex1);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.ZERO.sqrt();
      try { 
        complex5.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex0.createComplex((-2203.827721913956), 0.0952233225107193);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-1290.915440252026));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      String string0 = complex1.I.toString();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.NaN.sqrt1z();
      double double1 = complex0.INF.getArgument();
      Complex complex5 = complex4.NaN.negate();
      Object object0 = complex3.ONE.readResolve();
      Complex complex6 = complex0.I.createComplex(2.404307984052299E-9, 3473.9);
      Complex complex7 = complex4.ONE.negate();
      Object object1 = complex1.I.readResolve();
      Complex complex8 = complex3.NaN.asin();
      double double2 = complex3.getArgument();
      Complex complex9 = complex2.ZERO.createComplex(Double.NaN, Double.NaN);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex1.multiply(complex4);
      Complex complex12 = complex4.cosh();
      Complex complex13 = complex12.I.cosh();
      ComplexField complexField0 = complex8.getField();
      double double3 = complex11.getImaginary();
      double double4 = complex5.getArgument();
      double double5 = complex7.getArgument();
      Complex complex14 = complex0.pow(complex3);
      double double6 = complex1.getImaginary();
      double double7 = complex11.abs();
      Complex complex15 = complex7.createComplex(1.0, 0.7853981633974483);
      Object object2 = complex15.readResolve();
      boolean boolean0 = complex5.isNaN();
      Complex complex16 = complex2.atan();
      Complex complex17 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.ONE;
      boolean boolean0 = complex2.equals(complex4);
      Complex complex5 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.multiply(complex3);
      Complex complex6 = complex5.asin();
      int int0 = complex1.hashCode();
      Complex complex7 = complex4.negate();
      int int1 = complex3.hashCode();
      Complex complex8 = complex4.sqrt1z();
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.I.multiply((-0.33333333333333287));
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = complex0.I.subtract(complex1);
      int int0 = complex1.ONE.hashCode();
      Complex complex8 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      double double0 = complex0.getArgument();
      Complex complex2 = new Complex((-562.6972359356478), 0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.sinh();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.ZERO.exp();
      String string0 = complex0.toString();
      double double0 = complex2.abs();
      Complex complex5 = complex3.tan();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = (-768.77595);
      Complex complex0 = new Complex((-768.77595), (-768.77595));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.ZERO.multiply(complex0);
      try { 
        complex3.nthRoot((-2010));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,010
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex2.INF.multiply(1271.03840005);
      double double0 = complex1.getImaginary();
      Complex complex5 = complex0.I.asin();
      List<Complex> list0 = complex2.nthRoot(17);
      Object object0 = complex2.readResolve();
      Complex complex6 = complex0.I.sqrt1z();
      List<Complex> list1 = complex6.I.nthRoot(9);
      Complex complex7 = complex2.INF.createComplex(17, Double.NaN);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex8.ONE.tanh();
      Complex complex11 = complex8.INF.tanh();
      Object object1 = complex5.readResolve();
      Complex complex12 = complex0.ZERO.multiply((-1223.0));
      Complex complex13 = complex5.divide(complex2);
      Complex complex14 = complex9.ZERO.sqrt1z();
      Complex complex15 = complex8.cosh();
      Complex complex16 = complex15.I.acos();
      Complex complex17 = complex16.tan();
      Object object2 = complex1.readResolve();
      Complex complex18 = complex0.NaN.multiply(1271.03840005);
      List<Complex> list2 = complex0.nthRoot(17);
      Complex complex19 = complex0.asin();
      double double1 = complex5.getImaginary();
      Complex complex20 = complex11.conjugate();
      int int0 = complex4.hashCode();
      double double2 = complex9.getReal();
      Complex complex21 = complex20.cos();
      Complex complex22 = complex21.sin();
      String string0 = complex22.toString();
      Complex complex23 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.multiply((-2630.037764031874));
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.I.atan();
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ONE.acos();
      int int1 = complex0.hashCode();
      int int2 = complex1.hashCode();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex1.NaN.pow(complex2);
      Complex complex6 = complex0.createComplex((-270.453187), (-270.453187));
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex6.NaN.multiply(0.0);
      Object object0 = complex6.I.readResolve();
      Complex complex9 = complex0.ZERO.conjugate();
      Object object1 = complex6.ZERO.readResolve();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex3.log();
      ComplexField complexField1 = complex11.ZERO.getField();
      Complex complex12 = new Complex((-270.453187), (-270.453187));
      Complex complex13 = complex2.subtract(complex12);
      Complex complex14 = complex13.INF.add(complex9);
      Object object2 = complex3.readResolve();
      Complex complex15 = complex4.sinh();
      double double1 = complex15.getArgument();
      Complex complex16 = complex15.NaN.multiply(complex11);
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex17.I.sin();
      Complex complex19 = complex15.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex20 = complex11.sqrt();
      Complex complex21 = complex9.createComplex((-270.453187), 0.0);
      Complex complex22 = complex11.cos();
      Complex complex23 = complex19.exp();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.ONE.nthRoot(773);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex4.pow(complex0);
      Object object0 = new Object();
      double double0 = complex5.ZERO.getArgument();
      Complex complex6 = complex3.INF.tan();
      Complex complex7 = complex2.I.cos();
      ComplexField complexField0 = complex2.INF.getField();
      int int0 = complex1.NaN.hashCode();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex1.cosh();
      double double1 = complex3.getReal();
      Complex complex9 = complex6.INF.subtract(complex2);
      Complex complex10 = complex0.NaN.acos();
      ComplexField complexField1 = complex4.getField();
      Complex complex11 = complex2.exp();
      Complex complex12 = new Complex((-1484.3559728195), 773);
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex5.divide(complex12);
      Complex complex15 = complex4.sin();
      List<Complex> list1 = complex15.I.nthRoot(773);
      List<Complex> list2 = complex2.nthRoot(1);
      int int1 = complex12.hashCode();
      Complex complex16 = complex11.multiply(complex6);
      Complex complex17 = complex16.INF.subtract(complex3);
      boolean boolean1 = complex16.isNaN();
      Complex complex18 = complex1.sqrt1z();
      boolean boolean2 = complex11.isNaN();
      Complex complex19 = complex6.subtract(complex18);
      boolean boolean3 = complex12.isNaN();
      Complex complex20 = complex17.subtract(complex5);
      boolean boolean4 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.INF.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.ONE.sinh();
      Complex complex7 = complex5.ZERO.pow(complex2);
      Complex complex8 = complex7.NaN.atan();
      String string0 = complex7.I.toString();
      int int0 = complex8.ZERO.hashCode();
      boolean boolean1 = complex1.isInfinite();
      Complex complex9 = complex1.ONE.multiply(2672.661672458484);
      String string1 = complex8.toString();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex2.pow(complex5);
      try { 
        complex6.nthRoot((-394));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -394
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex4.INF.pow(complex0);
      Complex complex6 = complex4.ZERO.subtract(complex3);
      Complex complex7 = complex5.NaN.multiply((-980.1925580960401));
      double double0 = complex7.ONE.getArgument();
      Complex complex8 = complex5.ZERO.createComplex((-980.1925580960401), (-980.1925580960401));
      Complex complex9 = complex1.multiply(1.1730463525082348E-7);
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.I.sqrt1z();
      Complex complex13 = complex12.I.createComplex(0.0, 1433.9503112177154);
      Complex complex14 = complex12.ZERO.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = complex1.tanh();
      int int0 = complex10.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex16 = complex1.NaN.acos();
      double double1 = complex8.getArgument();
      Complex complex17 = complex0.divide(complex9);
      Complex complex18 = complex8.tan();
      Complex complex19 = complex9.sinh();
      Complex complex20 = complex15.sin();
      Complex complex21 = complex8.exp();
      Complex complex22 = complex4.sinh();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex23 = complex1.divide(complex4);
      Complex complex24 = complex2.pow(complex6);
      Complex complex25 = complex8.conjugate();
      int int1 = complex0.hashCode();
      Complex complex26 = complex8.divide(complex20);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.atan();
      int int0 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex2.INF.pow(complex0);
      String string1 = complex5.toString();
      int int1 = complex5.I.hashCode();
      double double0 = complex1.abs();
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.INF;
      boolean boolean0 = complex4.equals(complex7);
      Complex complex8 = complex1.cosh();
      double double1 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex3.INF.divide(complex1);
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex6.I.add(complex3);
      int int0 = complex1.ONE.hashCode();
      Complex complex9 = complex2.cosh();
      List<Complex> list0 = complex0.nthRoot(1);
      int int1 = complex0.hashCode();
      Complex complex10 = complex0.cos();
      String string0 = complex2.toString();
      Complex complex11 = complex0.I.negate();
      Complex complex12 = complex11.I.createComplex(1784.43, (-1022.5073));
      Complex complex13 = complex0.atan();
      Complex complex14 = complex13.I.log();
      Complex complex15 = complex0.sin();
      Complex complex16 = complex15.ZERO.multiply(complex11);
      boolean boolean0 = complex2.equals(complex15);
      Complex complex17 = complex13.subtract(complex1);
      Object object0 = complex2.readResolve();
      Complex complex18 = complex3.tan();
      Complex complex19 = complex15.createComplex(0.0, 1);
      Complex complex20 = complex2.cosh();
      double double0 = complex19.getArgument();
      Complex complex21 = complex19.subtract(complex17);
      Object object1 = complex1.readResolve();
      Complex complex22 = complex1.atan();
      Complex complex23 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.acos();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.asin();
      double double1 = complex0.I.getArgument();
      Complex complex4 = complex0.cosh();
      List<Complex> list0 = complex3.ONE.nthRoot(37);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex1.ZERO.multiply(complex2);
      int int0 = complex1.INF.hashCode();
      Complex complex8 = complex6.NaN.createComplex(0.0, 0.0);
      int int1 = complex3.hashCode();
      Complex complex9 = complex4.multiply(complex2);
      double double2 = complex1.getImaginary();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex9.I.sin();
      Complex complex11 = complex1.divide(complex3);
      Complex complex12 = complex6.cos();
      Complex complex13 = complex12.ZERO.cosh();
      Object object1 = complex9.readResolve();
      Complex complex14 = complex12.conjugate();
      Complex complex15 = complex3.conjugate();
      Complex complex16 = complex15.tanh();
  }
}
