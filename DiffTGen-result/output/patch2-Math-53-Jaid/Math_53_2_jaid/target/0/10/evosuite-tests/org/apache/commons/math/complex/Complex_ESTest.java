/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:50:20 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      Complex complex4 = complex3.multiply(complex3);
      Complex complex5 = complex0.NaN.divide(complex1);
      Complex complex6 = complex3.INF.cos();
      int int0 = complex0.hashCode();
      Complex complex7 = complex3.NaN.log();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex2.NaN.pow(complex4);
      Complex complex10 = complex0.negate();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex11.INF.conjugate();
      Complex complex13 = complex2.sqrt();
      Complex complex14 = complex6.tanh();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex14.ONE.subtract(complex15);
      boolean boolean1 = complex10.isNaN();
      Object object0 = complex0.I.readResolve();
      boolean boolean2 = complex0.isInfinite();
      boolean boolean3 = complex2.isNaN();
      Complex complex17 = complex2.add(complex10);
      Complex complex18 = complex0.add(complex17);
      Complex complex19 = complex18.ZERO.exp();
      Complex complex20 = complex11.atan();
      List<Complex> list0 = complex12.nthRoot(754);
      ComplexField complexField0 = complex19.getField();
      Complex complex21 = complex17.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = null;
      Complex complex4 = complex0.log();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.log();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.createComplex((-2405.7), (-2405.7));
      boolean boolean0 = complex2.equals(complex3);
      Complex complex4 = complex1.sin();
      double double1 = complex2.getArgument();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.INF.cosh();
      boolean boolean1 = complex3.isNaN();
      double double2 = complex5.getArgument();
      Complex complex8 = complex1.negate();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(357.42136659, 0.0);
      Complex complex2 = complex0.INF.exp();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      Object object0 = complex3.INF.readResolve();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex6.INF.log();
      double double0 = complex7.I.getArgument();
      Complex complex8 = complex7.INF.add(complex3);
      Complex complex9 = complex1.ONE.divide(complex5);
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = complex1.INF.cosh();
      Complex complex11 = complex10.INF.atan();
      Complex complex12 = complex0.divide(complex1);
      Complex complex13 = complex0.negate();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex10.conjugate();
      int int1 = complex5.hashCode();
      boolean boolean0 = complex5.isInfinite();
      Complex complex16 = complex12.sin();
      Complex complex17 = complex16.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ZERO.sinh();
      double double0 = complex1.getArgument();
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.createComplex(0.1111111111111111, 0.1111111111111111);
      Complex complex4 = complex3.exp();
      double double1 = complex3.getArgument();
      Complex complex5 = complex2.sinh();
      double double2 = complex2.getArgument();
      Complex complex6 = complex1.sin();
      Complex complex7 = new Complex(0.1111111111111111, 1015.378);
      Complex complex8 = complex4.pow(complex7);
      Complex complex9 = complex1.ONE.sqrt();
      Complex complex10 = complex9.I.cos();
      Complex complex11 = complex4.subtract(complex5);
      double double3 = complex0.getArgument();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex6.multiply(complex12);
      Complex complex14 = complex13.subtract(complex4);
      Complex complex15 = complex13.createComplex(0.7853981633974483, 603.2586497681534);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex((-2640.0), (-2640.0));
      double double0 = complex0.getImaginary();
      double double1 = complex1.getImaginary();
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex3.negate();
      ComplexField complexField0 = complex8.ZERO.getField();
      Complex complex9 = complex0.subtract(complex2);
      Complex complex10 = complex9.NaN.tan();
      Complex complex11 = complex10.I.exp();
      double double2 = complex0.getReal();
      ComplexField complexField1 = complex4.getField();
      Complex complex12 = complex0.ONE.tan();
      Complex complex13 = complex12.I.cosh();
      Complex complex14 = complex4.subtract(complex0);
      Complex complex15 = complex7.log();
      Complex complex16 = complex15.log();
      Complex complex17 = complex1.INF.sin();
      double double3 = complex4.getReal();
      Complex complex18 = complex15.acos();
      Complex complex19 = complex1.I.exp();
      Complex complex20 = complex18.ZERO.sqrt();
      Complex complex21 = complex20.NaN.add(complex19);
      Object object0 = complex7.ZERO.readResolve();
      Object object1 = complex1.NaN.readResolve();
      Complex complex22 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex23 = complex14.add(complex22);
      Complex complex24 = Complex.INF;
      Complex complex25 = complex13.multiply(Double.POSITIVE_INFINITY);
      Object object2 = complex9.readResolve();
      Complex complex26 = complex19.createComplex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = new Complex((-3564.61732657), 543.2508);
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex5.INF.tanh();
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex8.INF.pow(complex1);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex0.add(complex7);
      Complex complex12 = complex4.divide(complex8);
      Complex complex13 = complex9.cosh();
      Complex complex14 = complex11.atan();
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex15.ZERO.tanh();
      Complex complex17 = complex9.divide(complex11);
      Complex complex18 = complex0.createComplex(0.0, (-771.3937729451));
      double double1 = complex1.abs();
      Object object1 = complex4.readResolve();
      double double2 = complex9.getImaginary();
      Complex complex19 = complex4.exp();
      double double3 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex((-761.86839), (-1423.234));
      Complex complex2 = complex0.ONE.createComplex(1.997844754509471E-9, 1.997844754509471E-9);
      Complex complex3 = complex2.pow(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.asin();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex0.negate();
      double double1 = complex0.ZERO.abs();
      Complex complex10 = complex7.I.tan();
      Complex complex11 = complex9.INF.cos();
      String string0 = complex7.toString();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.abs();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.add(complex2);
      Complex complex5 = complex4.NaN.multiply(261.53);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex1.I.multiply(complex0);
      Complex complex8 = complex4.NaN.sqrt1z();
      Complex complex9 = complex1.NaN.cos();
      Complex complex10 = complex3.INF.exp();
      Complex complex11 = complex0.I.asin();
      List<Complex> list0 = complex11.nthRoot(142);
      Complex complex12 = complex11.NaN.sqrt1z();
      int int0 = complex9.ZERO.hashCode();
      int int1 = 0;
      Complex complex13 = complex1.NaN.conjugate();
      Object object0 = complex13.INF.readResolve();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex4.I.log();
      int int0 = complex2.hashCode();
      Complex complex6 = complex2.NaN.createComplex((-491.0), (-491.0));
      Complex complex7 = complex0.ONE.sin();
      Complex complex8 = complex7.NaN.cos();
      int int1 = complex2.ONE.hashCode();
      Complex complex9 = complex2.sin();
      List<Complex> list0 = complex9.ONE.nthRoot(1);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.divide(complex5);
      Complex complex12 = complex10.ONE.negate();
      Complex complex13 = complex9.ZERO.acos();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex2.cos();
      Complex complex16 = complex15.ZERO.conjugate();
      double double0 = complex9.getArgument();
      boolean boolean0 = complex2.isInfinite();
      double double1 = complex14.getArgument();
      double double2 = complex2.getArgument();
      String string0 = complex3.toString();
      Object object1 = complex3.readResolve();
      Complex complex17 = complex0.tanh();
      double double3 = complex9.getReal();
      Complex complex18 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.createComplex((-1469.788826246), (-1469.788826246));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.I.pow(complex1);
      Complex complex6 = complex4.I.createComplex((-268.12982818), 1304.2599421634);
      Complex complex7 = complex4.I.acos();
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex8.I.cos();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex5.asin();
      Complex complex14 = complex11.log();
      boolean boolean0 = complex11.isNaN();
      Complex complex15 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1958.501419226376), (-1958.501419226376));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.ONE.createComplex((-1958.501419226376), 6.123233995736766E-17);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.INF.asin();
      double double0 = complex0.getImaginary();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.ONE.multiply((-206.19860553));
      List<Complex> list0 = complex9.INF.nthRoot(2132);
      Complex complex10 = complex8.I.tan();
      Complex complex11 = complex0.cos();
      double double1 = complex4.getReal();
      Complex complex12 = complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.INF.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1116.46035), 6.283185307179586);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = complex0.ONE.log();
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex0.NaN.multiply(1.633123935319537E16);
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.pow(complex6);
      Complex complex9 = complex2.add(complex6);
      Complex complex10 = complex7.add(complex3);
      Complex complex11 = complex3.divide(complex9);
      Complex complex12 = complex0.tan();
      Complex complex13 = complex10.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.NaN.sin();
      double double0 = complex3.I.abs();
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex0.createComplex(2349.609252555017, Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.sqrt();
      double double1 = complex1.getImaginary();
      Complex complex8 = complex2.pow(complex1);
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex6.log();
      Complex complex11 = complex0.createComplex(0.0, 581.57856772246);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = complex0.acos();
      double double0 = complex1.getArgument();
      boolean boolean0 = complex0.equals(complex1);
      String string0 = complex2.ZERO.toString();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.ONE.tan();
      int int0 = complex10.ZERO.hashCode();
      Complex complex11 = complex2.conjugate();
      int int1 = complex0.hashCode();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex9.sinh();
      double double1 = complex6.getArgument();
      Complex complex14 = complex9.sqrt();
      double double2 = complex7.getArgument();
      Complex complex15 = complex12.sqrt1z();
      Complex complex16 = complex13.divide(complex0);
      Complex complex17 = complex11.add(complex15);
      Complex complex18 = Complex.ONE;
      Complex complex19 = complex8.divide(complex18);
      String string1 = complex7.I.toString();
      Complex complex20 = complex19.ZERO.cos();
      Complex complex21 = complex7.cos();
      double double3 = complex17.getImaginary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex2.ZERO.cosh();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex7.ONE.createComplex((-3980.141), 6.283185307179586);
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex10.NaN.exp();
      Complex complex12 = complex7.NaN.multiply(complex6);
      Complex complex13 = complex12.I.cosh();
      Complex complex14 = complex7.I.cosh();
      Complex complex15 = complex14.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex16 = complex15.acos();
      Object object0 = complex15.INF.readResolve();
      boolean boolean1 = complex7.isInfinite();
      String string0 = complex1.toString();
      Complex complex17 = complex6.acos();
      try { 
        complex17.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex3.INF.cosh();
      double double0 = complex6.ZERO.getArgument();
      Complex complex7 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = complex7.negate();
      Complex complex11 = complex0.add(complex5);
      Object object1 = new Object();
      boolean boolean0 = complex10.equals(object1);
      Complex complex12 = Complex.I;
      boolean boolean1 = complex10.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.I.cos();
      double double1 = complex3.ZERO.getArgument();
      Complex complex4 = complex1.ONE.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.multiply((-1.0));
      Complex complex6 = complex2.sin();
      Complex complex7 = complex3.multiply(complex5);
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex2.multiply((-1.0));
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.createComplex((-1226.03549), (-1226.03549));
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex2.sinh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-2820.99116), (-2820.99116));
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.ZERO.log();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex3.I.multiply(complex2);
      Complex complex7 = complex4.ZERO.divide(complex3);
      Complex complex8 = complex4.NaN.acos();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.NaN.multiply(3989.48395780661);
      Complex complex11 = complex10.ZERO.cos();
      Complex complex12 = complex10.pow(complex3);
      double double1 = complex2.abs();
      ComplexField complexField1 = complex2.getField();
      Complex complex13 = complex0.cos();
      boolean boolean0 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.INF.multiply(4461.363181271718);
      Complex complex2 = complex1.INF.add(complex0);
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.INF.tanh();
      Complex complex7 = complex2.I.multiply((-1947.38840873));
      Complex complex8 = complex5.ZERO.negate();
      Complex complex9 = complex5.divide(complex1);
      Complex complex10 = complex9.sin();
      Complex complex11 = complex0.atan();
      Complex complex12 = complex10.I.divide(complex0);
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex1.I.conjugate();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex4.log();
      double double0 = complex7.getArgument();
      double double1 = complex3.getReal();
      Object object0 = new Object();
      boolean boolean0 = complex6.equals(object0);
      Complex complex8 = complex2.negate();
      int int1 = complex8.hashCode();
      Complex complex9 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-20.0187083449253), (-4.503599627370496E15));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.createComplex((-4.503599627370496E15), 883.498270094);
      Complex complex2 = complex0.NaN.cosh();
      ComplexField complexField0 = complex2.getField();
      List<Complex> list1 = complex0.nthRoot(37);
      List<Complex> list2 = complex0.nthRoot(37);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = Complex.NaN;
      List<Complex> list3 = complex7.I.nthRoot(2689);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1524.719400106722), (-1524.719400106722));
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.INF.acos();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.acos();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.conjugate();
      boolean boolean0 = complex4.equals(complex1);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex6.ONE.acos();
      Complex complex9 = complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex4.ONE.cosh();
      int int0 = complex0.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex3.createComplex(191.9441104730458, 191.9441104730458);
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 491.9495612795);
      Complex complex1 = complex0.tanh();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.add(complex1);
      double double1 = complex2.ZERO.abs();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.NaN.sin();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex1.INF.cosh();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex1.I.conjugate();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex0.sqrt1z();
      double double2 = complex8.abs();
      double double3 = complex9.I.abs();
      Complex complex10 = complex0.pow(complex9);
      Complex complex11 = complex10.NaN.divide(complex1);
      Complex complex12 = complex9.sqrt1z();
      boolean boolean0 = complex3.isNaN();
      int int0 = complex5.hashCode();
      String string1 = complex5.toString();
      int int1 = complex6.hashCode();
      boolean boolean1 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.subtract(complex0);
      int int0 = complex0.hashCode();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(1173.564974498, 1173.564974498);
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex0.INF.atan();
      Complex complex7 = complex3.ONE.sqrt1z();
      Complex complex8 = complex6.I.multiply(1173.564974498);
      Complex complex9 = complex2.ONE.createComplex(Double.NaN, 1173.564974498);
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.add(complex4);
      Complex complex12 = complex10.ZERO.multiply(Double.NaN);
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex10.ONE.acos();
      Complex complex15 = complex4.INF.createComplex(Double.NaN, 1325.882028726531);
      Complex complex16 = complex4.cos();
      Complex complex17 = complex5.sqrt();
      ComplexField complexField0 = complex10.getField();
      double double1 = complex11.abs();
      Complex complex18 = complex4.cos();
      double double2 = complex16.getArgument();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.divide(complex0);
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex0.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex3.exp();
      double double1 = complex1.getArgument();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.pow(complex4);
      boolean boolean0 = complex1.isInfinite();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex4.NaN.createComplex(Double.NaN, 1314.0);
      double double2 = complex6.ONE.abs();
      ComplexField complexField0 = complex6.getField();
      Complex complex10 = complex6.divide(complex4);
      Complex complex11 = complex6.add(complex4);
      String string1 = complex4.toString();
      Complex complex12 = complex0.divide(complex10);
      Complex complex13 = complex10.tanh();
      Complex complex14 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-2778.594411), 570.553169275419);
      Complex complex1 = complex0.I.acos();
      double double0 = complex0.getImaginary();
      Complex complex2 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex2);
      double double1 = complex2.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.multiply(Double.NaN);
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.cos();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2778.594411), 570.553169275419);
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex1.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(6.283185307179586);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.ONE.asin();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex5 = complex2.pow(complex1);
      List<Complex> list0 = complex1.nthRoot(974);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex2.ZERO.asin();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.I.subtract(complex1);
      Complex complex10 = complex1.INF.sinh();
      Complex complex11 = complex10.asin();
      double double0 = complex8.INF.getArgument();
      Complex complex12 = complex6.asin();
      Complex complex13 = complex6.atan();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex14.ONE.pow(complex12);
      Complex complex16 = complex13.INF.multiply(complex14);
      Complex complex17 = complex1.sin();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.add((Complex) null);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.I.pow(complex0);
      Complex complex5 = complex4.I.pow(complex3);
      Complex complex6 = complex5.INF.sqrt();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex0.multiply(complex2);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      double double0 = complex0.I.abs();
      double double1 = complex0.ZERO.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.INF.pow(complex2);
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.conjugate();
      double double0 = complex0.getArgument();
      double double1 = complex2.getImaginary();
      Complex complex4 = complex0.createComplex((-2.356194490192345), (-1974.05533346));
      Complex complex5 = complex2.I.createComplex((-1.0), (-2.356194490192345));
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.ONE.add(complex4);
      Complex complex8 = complex0.INF.createComplex((-2.356194490192345), (-2.356194490192345));
      Complex complex9 = new Complex((-2.356194490192345), (-0.9888977057628651));
      Complex complex10 = complex8.NaN.divide(complex9);
      Complex complex11 = complex4.tan();
      Complex complex12 = complex6.pow(complex11);
      Complex complex13 = complex7.add(complex11);
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.tan();
      List<Complex> list0 = complex0.nthRoot(2848);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.createComplex((-103.609481728171), (-1126.43420070618));
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.multiply((-1.0));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.NaN.sin();
      Object object0 = complex1.readResolve();
      Complex complex4 = ((Complex) object0).INF.multiply((-2123.6975334));
      String string0 = complex0.toString();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.tan();
      Object object0 = complex1.readResolve();
      String string0 = complex0.toString();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-591.158620047261));
      Complex complex2 = Complex.ZERO;
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex2.INF.acos();
      int int0 = complex3.hashCode();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex2.log();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.cosh();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-594.86808), 0.19999998807907104);
      Complex complex1 = complex0.I.sqrt1z();
      Object object0 = complex1.NaN.readResolve();
      Object object1 = new Object();
      boolean boolean0 = complex0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.49999999999999994, 0.0);
      Complex complex2 = complex0.pow(complex1);
      try { 
        complex2.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(675.10329, 675.10329);
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.createComplex((-280.673274), (-280.673274));
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex1.asin();
      boolean boolean0 = complex2.isNaN();
      double double0 = complex2.getArgument();
      Complex complex5 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex1.ZERO.getArgument();
      double double1 = complex0.getImaginary();
      String string0 = complex0.toString();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(3257.88591, 3257.88591);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.I.add(complex0);
      Complex complex6 = complex5.NaN.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.multiply((-1.0));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.createComplex(734.88305517806, 39.64693159013181);
      Object object0 = complex1.INF.readResolve();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-2045.0479), 35.882070423);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.createComplex(35.882070423, 0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(6.0, (-1414.078076114474));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.INF.sin();
      Object object0 = complex0.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.subtract(complex0);
      double double1 = complex0.getArgument();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex0.createComplex(0.0, (-1.5665533050729443));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.atan();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.atan();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex3.atan();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.multiply((-117.746835));
      double double0 = complex1.getArgument();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex0.multiply(complex1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex5 = complex1.log();
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex1.INF.negate();
      Complex complex6 = complex4.NaN.negate();
      Object object0 = complex6.readResolve();
      Object object1 = complex2.ZERO.readResolve();
      Complex complex7 = complex4.NaN.asin();
      Complex complex8 = complex4.I.sqrt();
      List<Complex> list0 = complex4.ZERO.nthRoot(181);
      Complex complex9 = complex1.tan();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex3.multiply(complex10);
      Complex complex13 = complex2.exp();
      Complex complex14 = complex9.NaN.add(complex1);
      int int0 = 0;
      Object object2 = complex2.INF.readResolve();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-3207.4807129), (-3207.4807129));
      try { 
        complex0.nthRoot((-2993));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,993
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.asin();
      Object object0 = complex0.NaN.readResolve();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.INF.cosh();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      double double2 = complex0.abs();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(2255.940508622669, 2255.940508622669);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.tan();
      double double0 = complex6.abs();
      Complex complex7 = complex1.divide(complex4);
      List<Complex> list0 = complex6.nthRoot(889516852);
      Complex complex8 = complex6.divide(complex4);
      ComplexField complexField0 = complex8.getField();
      String string0 = complex1.toString();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex4.subtract(complex9);
      Complex complex13 = complex3.multiply(complex0);
      Complex complex14 = complex10.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
      double double0 = complex0.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.atan();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-2197.3667885546), 944.653859646638);
      Complex complex1 = complex0.ONE.cos();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.sinh();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex4.isNaN();
      Complex complex5 = complex3.acos();
      boolean boolean2 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.negate();
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.ONE.tanh();
      Complex complex7 = complex6.I.tan();
      boolean boolean0 = complex0.equals(object0);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex9.pow(complex3);
      String string0 = complex4.toString();
      Complex complex11 = complex0.exp();
      boolean boolean1 = complex11.equals(complex1);
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex0.negate();
      List<Complex> list1 = complex12.nthRoot(204);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = Complex.ONE;
      double double0 = complex0.getReal();
      int int1 = complex1.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex4.I.add(complex1);
      Complex complex7 = complex2.INF.subtract(complex3);
      double double1 = complex2.getArgument();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex6.multiply(complex3);
      Complex complex11 = complex9.sinh();
      boolean boolean0 = complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex1.NaN.acos();
      Object object0 = complex1.ZERO.readResolve();
      double double0 = complex0.getReal();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = complex1.ZERO.sqrt1z();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = complex0.I.divide(complex7);
      Complex complex10 = complex7.INF.conjugate();
      Complex complex11 = complex9.INF.tanh();
      Complex complex12 = complex3.I.multiply(complex7);
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex4.sinh();
      boolean boolean0 = complex3.equals(complex4);
      Complex complex15 = complex13.negate();
      Complex complex16 = complex4.createComplex(1.0, -0.0);
      Complex complex17 = complex8.multiply(1.0);
      Complex complex18 = complex2.sinh();
      Complex complex19 = complex11.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.INF.subtract(complex2);
      Complex complex7 = complex6.INF.atan();
      List<Complex> list0 = complex0.nthRoot(150);
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex3.cosh();
      ComplexField complexField0 = complex8.INF.getField();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.pow(complex3);
      double double1 = complex3.getReal();
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex4.ZERO.sin();
      Object object0 = complex1.readResolve();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex6.NaN.sqrt();
      Complex complex10 = complex8.multiply(complex5);
      Complex complex11 = complex10.ONE.sinh();
      Object object1 = complex1.readResolve();
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex12.subtract(complex4);
      Complex complex14 = complex6.negate();
      Complex complex15 = complex8.sin();
      Complex complex16 = complex12.sqrt();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.NaN.createComplex(2906.0, 0.0);
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex0.ONE.multiply(0.0);
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex6.ZERO.asin();
      boolean boolean0 = complex3.isNaN();
      String string0 = complex3.NaN.toString();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex4.multiply(0.0);
      Complex complex12 = complex6.exp();
      boolean boolean1 = complex6.isInfinite();
      boolean boolean2 = complex2.isInfinite();
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex14.ZERO.acos();
      Complex complex16 = complex14.multiply(complex13);
      Complex complex17 = complex12.exp();
      boolean boolean3 = complex7.isInfinite();
      boolean boolean4 = complex11.isInfinite();
      String string1 = complex13.toString();
      int int0 = complex15.hashCode();
      Complex complex18 = complex13.add(complex7);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.sin();
      double double0 = complex4.I.abs();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex0.createComplex(2349.609252555017, Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.sqrt();
      double double1 = complex2.getImaginary();
      Complex complex9 = complex3.pow(complex2);
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex0.createComplex(0.0, 581.57856772246);
  }
}
