/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:57:09 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = new Complex(Double.NaN, Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2068.085143807723), 0.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.NaN.atan();
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex0.I.nthRoot(273);
      double double1 = complex0.getReal();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.ZERO.multiply(complex3);
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.ZERO.asin();
      Object object0 = complex0.readResolve();
      double double0 = complex2.ONE.getArgument();
      boolean boolean1 = complex0.isNaN();
      double double1 = complex2.getImaginary();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.pow(complex2);
      int int0 = complex9.NaN.hashCode();
      double double2 = complex7.ZERO.abs();
      Complex complex11 = complex8.NaN.tanh();
      double double3 = complex11.abs();
      Complex complex12 = complex2.negate();
      Complex complex13 = complex12.INF.acos();
      Complex complex14 = complex8.tan();
      Complex complex15 = complex1.I.sinh();
      List<Complex> list0 = complex4.nthRoot(1);
      String string0 = complex4.toString();
      Complex complex16 = complex3.NaN.sin();
      Complex complex17 = complex5.createComplex(Double.POSITIVE_INFINITY, 1703.1);
      double double4 = complex0.getReal();
      Complex complex18 = complex17.sqrt();
      double double5 = complex18.I.getArgument();
      Complex complex19 = complex1.exp();
      Complex complex20 = complex0.sqrt1z();
      Complex complex21 = complex10.pow(complex5);
      Complex complex22 = complex17.atan();
      Complex complex23 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(5119.29529, Double.NaN);
      Complex complex1 = null;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.cos();
      double double0 = complex0.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.tanh();
      List<Complex> list0 = complex4.nthRoot(23);
      Complex complex6 = complex5.ZERO.multiply(1664.991357);
      Complex complex7 = complex5.ZERO.asin();
      ComplexField complexField0 = complex7.ZERO.getField();
      Complex complex8 = complex7.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex7.log();
      boolean boolean0 = complex4.isInfinite();
      double double1 = complex5.abs();
      Complex complex12 = complex6.conjugate();
      ComplexField complexField1 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4084.292923082647), (-4084.292923082647));
      Complex complex2 = complex1.INF.multiply((-4084.292923082647));
      Complex complex3 = complex2.NaN.sin();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.createComplex(0.0, 0.04168701738764507);
      Complex complex9 = complex7.sqrt();
      boolean boolean0 = complex9.equals(complex6);
      Complex complex10 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex1.ONE.divide(complex8);
      Complex complex10 = complex8.ONE.atan();
      String string0 = complex10.I.toString();
      Complex complex11 = complex10.NaN.subtract(complex2);
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex2.divide(complex5);
      try { 
        complex5.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.createComplex(3580.8650500389576, 1117.0);
      int int0 = complex2.ONE.hashCode();
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex0.INF.pow(complex1);
      Complex complex6 = complex2.ZERO.pow(complex1);
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.sqrt1z();
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex1.sqrt();
      int int1 = complex12.I.hashCode();
      Complex complex13 = complex4.asin();
      Complex complex14 = complex13.I.multiply(0.0);
      Complex complex15 = complex8.multiply(complex12);
      Complex complex16 = complex13.negate();
      Complex complex17 = complex16.ONE.multiply(complex13);
      boolean boolean0 = complex4.equals(complex3);
      Complex complex18 = complex16.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1323.4219838), 0.0875862700108075);
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.ONE.tan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.sin();
      Object object0 = complex5.readResolve();
      int int0 = complex0.ZERO.hashCode();
      Complex complex6 = complex3.NaN.createComplex(688.0684442562371, (-8.0E298));
      String string0 = complex5.toString();
      Complex complex7 = complex5.INF.add(complex4);
      Complex complex8 = complex5.negate();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex3.multiply(complex9);
      Complex complex11 = complex10.INF.add(complex7);
      Object object1 = complex10.readResolve();
      boolean boolean1 = complex5.equals(object1);
      int int1 = complex3.hashCode();
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex0.createComplex((-8.0E298), 688.0684442562371);
      Complex complex14 = complex13.atan();
      double double0 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 3025.5);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex3.I.log();
      double double0 = complex3.abs();
      Complex complex7 = complex3.INF.multiply(Double.POSITIVE_INFINITY);
      String string0 = complex0.toString();
      Complex complex8 = complex2.acos();
      double double1 = complex0.getArgument();
      double double2 = complex2.getImaginary();
      double double3 = complex1.abs();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex8.pow(complex4);
      Complex complex13 = complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-558.5208703349159), (-558.5208703349159));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.negate();
      boolean boolean0 = complex4.isInfinite();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex3.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(5.0, 0.008333333333333333);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.INF.sinh();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.multiply(5.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-6.663542893624021E-14), (-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.asin();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.ZERO.sin();
      String string0 = complex4.toString();
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex0.INF.divide(complex3);
      Complex complex8 = complex0.tan();
      Object object0 = complex8.ZERO.readResolve();
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex10.INF.multiply(complex9);
      Complex complex12 = complex11.I.sqrt();
      Complex complex13 = complex7.ZERO.sin();
      Complex complex14 = complex3.ONE.cos();
      Complex complex15 = complex0.conjugate();
      Complex complex16 = complex15.tan();
      String string1 = complex0.toString();
      double double0 = complex7.getArgument();
      int int0 = complex1.hashCode();
      Complex complex17 = complex2.conjugate();
      Complex complex18 = complex8.multiply(Double.NaN);
      Complex complex19 = complex15.add(complex7);
      Complex complex20 = complex15.cosh();
      boolean boolean1 = complex4.isNaN();
      ComplexField complexField0 = complex2.getField();
      Complex complex21 = complex9.tan();
      Complex complex22 = complex18.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      String string0 = complex1.INF.toString();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex complex6 = complex3.ZERO.createComplex(2.0, 2.0);
      Complex complex7 = complex3.sin();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex8.asin();
      Complex complex11 = complex1.sqrt();
      String string1 = complex2.toString();
      Complex complex12 = complex3.negate();
      Complex complex13 = complex11.log();
      Complex complex14 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.pow(complex4);
      Complex complex6 = complex2.INF.sqrt();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.ZERO.pow(complex6);
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex10.log();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex9.NaN.tan();
      List<Complex> list0 = complex1.nthRoot(1236);
      Complex complex14 = complex0.NaN.tanh();
      List<Complex> list1 = complex1.nthRoot(37);
      Complex complex15 = complex9.asin();
      double double0 = complex15.INF.abs();
      Complex complex16 = complex9.sin();
      Complex complex17 = complex16.INF.tanh();
      Complex complex18 = complex12.createComplex(37, Double.POSITIVE_INFINITY);
      Complex complex19 = complex16.cos();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 3787.2767);
      Complex complex1 = complex0.acos();
      double double0 = 4447.2525883743365;
      Complex complex2 = complex1.I.createComplex(Double.POSITIVE_INFINITY, 4447.2525883743365);
      Complex complex3 = complex0.cosh();
      try { 
        complex3.nthRoot((-1588));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,588
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3965.9977), 1482.217037198209);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.INF.conjugate();
      double double0 = complex4.getArgument();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.log();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.multiply(Double.NaN);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-435.36), 171.5716);
      Object object0 = complex0.ONE.readResolve();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.createComplex(171.5716, 0.0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      Complex complex4 = complex0.subtract(complex3);
      Object object1 = complex0.readResolve();
      Complex complex5 = complex0.cos();
      Object object2 = complex5.readResolve();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(3081.56, 2094.13596);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2515.7255301352884));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex1.multiply(2990.687355513158);
      List<Complex> list0 = complex0.nthRoot(383);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.pow(complex1);
      Complex complex8 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.I.subtract(complex1);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex0.ONE.acos();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex1.NaN.subtract(complex0);
      double double0 = complex3.I.abs();
      Object object0 = complex1.readResolve();
      double double1 = complex1.INF.abs();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.acos();
      boolean boolean1 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.ONE.tan();
      double double0 = complex3.getReal();
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex4.log();
      Complex complex8 = complex6.ZERO.sqrt();
      boolean boolean0 = complex4.equals(complex5);
      Complex complex9 = complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.ONE.divide(complex0);
      String string0 = complex2.NaN.toString();
      Complex complex5 = complex2.ONE.cosh();
      Complex complex6 = complex0.subtract(complex2);
      double double1 = complex6.getImaginary();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex0.createComplex(2364.740551616, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex1.multiply((-1232.095));
      Complex complex5 = complex1.ONE.divide(complex0);
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex6.multiply((-1232.095));
      Complex complex8 = complex6.INF.log();
      Complex complex9 = complex6.add(complex1);
      Complex complex10 = complex5.NaN.exp();
      Complex complex11 = complex5.I.acos();
      double double0 = complex11.NaN.getArgument();
      Complex complex12 = complex0.multiply(complex1);
      Complex complex13 = complex12.multiply(779.0);
      Complex complex14 = complex10.INF.sqrt();
      String string0 = complex10.toString();
      Complex complex15 = complex10.sinh();
      double double1 = complex1.getImaginary();
      Complex complex16 = complex10.tanh();
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex5.atan();
      Complex complex19 = complex2.add(complex12);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.ONE.multiply((-1590.2493362814291));
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex1.ZERO.negate();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex4.ZERO.cos();
      Complex complex7 = complex3.add(complex4);
      Complex complex8 = complex2.cosh();
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2561.5676077931, (-3402.82675991));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-1344.12168811), (-1344.12168811));
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex1.NaN.nthRoot(829);
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex4.I.pow(complex2);
      Complex complex6 = complex0.cos();
      double double1 = complex6.getImaginary();
      double double2 = complex6.getArgument();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.conjugate();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex8.NaN.sin();
      boolean boolean0 = complex6.isInfinite();
      int int0 = complex6.hashCode();
      Complex complex10 = complex0.createComplex(927.3284369498901, (-2153.25));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2159.82379787942), (-2159.82379787942));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.negate();
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.I.multiply(complex1);
      Complex complex6 = new Complex(3571.9442297, 2276.3376837);
      boolean boolean0 = complex3.equals(complex6);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex3.multiply(complex1);
      Complex complex9 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex1.nthRoot(583);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex2.INF.negate();
      String string0 = complex2.INF.toString();
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex0.NaN.sqrt1z();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.pow(complex4);
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.subtract(complex0);
      double double0 = complex2.getArgument();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.I.createComplex((-3663.6216148), (-3650.0));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.createComplex((-3663.6216148), 0.0);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.I.sqrt();
      Complex complex10 = complex4.multiply(complex1);
      boolean boolean0 = complex10.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tanh();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.sqrt();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = complex0.log();
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex3.isNaN();
      String string0 = complex2.toString();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.log();
      Complex complex7 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex6.NaN.asin();
      Object object0 = complex8.NaN.readResolve();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex6.isNaN();
      Complex complex9 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.log();
      String string0 = complex4.ZERO.toString();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex0.ONE.acos();
      double double0 = complex6.getArgument();
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex6.atan();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex11.sin();
      Complex complex14 = complex11.sqrt1z();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex11.ONE.pow(complex3);
      Complex complex17 = complex15.NaN.subtract(complex12);
      Complex complex18 = complex1.pow(complex15);
      try { 
        complex12.nthRoot((-3671));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,671
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.INF.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex0.sin();
      boolean boolean1 = complex0.isInfinite();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = complex5.I.log();
      try { 
        complex3.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(complex0);
      double double0 = complex3.abs();
      int int0 = complex0.ZERO.hashCode();
      Complex complex4 = complex2.NaN.divide(complex0);
      Complex complex5 = complex0.NaN.createComplex(0.0, 0.0);
      double double1 = complex0.getArgument();
      double double2 = complex0.abs();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex5.negate();
      String string0 = complex5.toString();
      Complex complex9 = complex3.multiply(complex8);
      int int0 = complex9.I.hashCode();
      Complex complex10 = complex2.I.tan();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex6.add(complex7);
      Complex complex13 = complex2.asin();
      Complex complex14 = complex13.ONE.multiply(145.0);
      Complex complex15 = complex13.cosh();
      Complex complex16 = complex13.multiply(2.0243359763700317);
      Complex complex17 = complex4.exp();
      double double0 = complex0.abs();
      Complex complex18 = complex9.tanh();
      Object object0 = complex12.readResolve();
      Complex complex19 = complex2.pow(complex13);
      Complex complex20 = complex8.multiply(complex17);
      Complex complex21 = complex6.subtract(complex4);
      Complex complex22 = complex21.conjugate();
      Complex complex23 = complex19.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.add(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.INF.log();
      try { 
        complex4.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2073.92896835962, 2073.92896835962);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.NaN.multiply(2073.92896835962);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex4.NaN.log();
      Complex complex8 = complex4.conjugate();
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex4.pow(complex0);
      Complex complex10 = complex9.ZERO.sinh();
      double double0 = complex8.abs();
      String string0 = complex2.I.toString();
      Complex complex11 = complex1.I.pow(complex7);
      Complex complex12 = complex4.ZERO.pow(complex10);
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex4.multiply(2073.92896835962);
      Complex complex14 = complex4.ZERO.pow(complex12);
      boolean boolean1 = complex13.equals(complex4);
      String string1 = complex13.toString();
      Complex complex15 = complex9.sin();
      Complex complex16 = complex1.acos();
      double double1 = complex16.getImaginary();
      String string2 = complex10.toString();
      Complex complex17 = complex10.multiply(complex3);
      boolean boolean2 = complex7.equals(complex6);
      Complex complex18 = complex5.log();
      Complex complex19 = complex1.sin();
      Complex complex20 = complex6.tanh();
      Complex complex21 = complex3.asin();
      Complex complex22 = complex17.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.NaN.sqrt();
      int int0 = complex3.INF.hashCode();
      Complex complex5 = complex3.sqrt();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(complex0);
      Complex complex2 = complex0.NaN.multiply(2776.2836564);
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.I.pow(complex1);
      Complex complex6 = complex0.NaN.sqrt();
      double double0 = complex6.I.getArgument();
      double double1 = complex0.getReal();
      Complex complex7 = complex0.ONE.conjugate();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex0.INF.sqrt1z();
      double double2 = complex7.INF.getArgument();
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex0.I.conjugate();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex11.tanh();
      double double3 = complex14.abs();
      Complex complex15 = complex9.atan();
      Complex complex16 = complex7.tan();
      Complex complex17 = complex16.INF.asin();
      Complex complex18 = complex6.negate();
      Complex complex19 = complex9.acos();
      ComplexField complexField0 = complex9.getField();
      Complex complex20 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.cos();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex1.ONE.negate();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.conjugate();
      double double1 = complex7.getReal();
      Complex complex8 = complex1.tanh();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex6.add(complex9);
      Complex complex13 = complex5.cosh();
      Complex complex14 = complex7.NaN.sqrt1z();
      Complex complex15 = complex12.exp();
      double double2 = complex7.getReal();
      Complex complex16 = complex7.createComplex(145.0, 0.0);
      Complex complex17 = complex16.INF.multiply(complex11);
      Complex complex18 = complex16.sqrt();
      Complex complex19 = complex1.cosh();
      List<Complex> list1 = complex9.nthRoot(1);
      double double3 = complex7.getImaginary();
      Complex complex20 = complex6.acos();
      Complex complex21 = complex20.ZERO.sinh();
      double double4 = complex12.getReal();
      double double5 = complex5.getReal();
      Complex complex22 = complex8.cosh();
      Complex complex23 = Complex.ZERO;
      Complex complex24 = complex22.I.divide(complex23);
      Complex complex25 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.createComplex((-3180.09308), (-3180.09308));
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.ONE.multiply(0.0);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = new Complex(0.0, 1557.786561);
      Complex complex8 = complex3.subtract(complex7);
      Complex complex9 = complex4.exp();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getArgument();
      double double1 = complex0.I.getArgument();
      Complex complex1 = complex0.INF.createComplex(0.0, (-225.08809));
      double double2 = complex0.getImaginary();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.pow(complex0);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex3.INF.log();
      double double3 = complex3.getReal();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex4.NaN.createComplex(Double.POSITIVE_INFINITY, (-1615.0));
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex2.log();
      double double0 = complex2.INF.abs();
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex0.NaN.acos();
      List<Complex> list0 = complex1.NaN.nthRoot(285);
      Object object0 = complex1.readResolve();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.cos();
      Complex complex9 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex5.createComplex(Double.POSITIVE_INFINITY, (-3596.8));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex0.ONE.asin();
      Complex complex5 = complex1.INF.atan();
      Complex complex6 = complex4.ZERO.divide(complex0);
      Complex complex7 = complex6.ONE.multiply(complex4);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex0.INF.cosh();
      Complex complex10 = complex0.negate();
      String string1 = complex10.INF.toString();
      double double0 = complex3.getArgument();
      double double1 = complex10.getArgument();
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex1.multiply(complex10);
      Complex complex12 = complex8.ZERO.acos();
      String string2 = complex11.ONE.toString();
      Complex complex13 = complex3.subtract(complex4);
      double double2 = complex0.abs();
      double double3 = complex13.getReal();
      boolean boolean1 = complex3.isNaN();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex0.sin();
      Complex complex16 = complex15.NaN.sinh();
      String string3 = complex13.toString();
      Complex complex17 = complex9.createComplex(2604.1295, Double.NaN);
      Complex complex18 = complex3.tan();
      Complex complex19 = complex8.asin();
      int int0 = complex14.hashCode();
      Complex complex20 = complex3.subtract(complex14);
  }
}
