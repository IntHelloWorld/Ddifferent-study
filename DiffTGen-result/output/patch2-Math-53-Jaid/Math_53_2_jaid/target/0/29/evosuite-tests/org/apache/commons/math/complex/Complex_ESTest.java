/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:57:20 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 0.0;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.ZERO.divide(complex2);
      Complex complex6 = complex3.NaN.sin();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex6.ZERO.tan();
      Complex complex9 = complex3.NaN.tan();
      Complex complex10 = complex9.INF.cosh();
      int int0 = complex2.ONE.hashCode();
      double double1 = 1543.664395;
      Complex complex11 = complex1.createComplex((-1977.5109810966458), 1543.664395);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = new Complex((-1280.3196159487154), 1024.0);
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex0.INF.atan();
      String string0 = complex0.ONE.toString();
      Complex complex5 = complex2.ZERO.sqrt1z();
      Object object0 = complex2.readResolve();
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex6.ONE.createComplex(1024.0, (-1280.3196159487154));
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex3.log();
      Complex complex9 = complex0.ONE.asin();
      double double0 = complex1.getArgument();
      Complex complex10 = complex3.pow(complex2);
      Complex complex11 = complex4.createComplex(1024.0, (-1280.3196159487154));
      Complex complex12 = complex1.conjugate();
      double double1 = complex10.getReal();
      boolean boolean1 = complex7.equals(complex11);
      Complex complex13 = complex11.createComplex(0.625, (-1280.3196159487154));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.tan();
      String string0 = complex1.NaN.toString();
      double double1 = complex0.I.getArgument();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex3.NaN.tanh();
      List<Complex> list0 = complex0.NaN.nthRoot(8388607);
      Complex complex5 = complex0.I.log();
      Complex complex6 = complex2.NaN.asin();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.I.asin();
      Complex complex9 = complex2.ONE.log();
      Complex complex10 = complex8.ONE.tan();
      ComplexField complexField0 = complex1.ONE.getField();
      int int0 = complex2.ZERO.hashCode();
      Complex complex11 = complex8.createComplex(8388607, 8388607);
      Complex complex12 = complex7.I.sqrt1z();
      Complex complex13 = complex12.negate();
      Complex complex14 = complex13.ZERO.sqrt1z();
      Complex complex15 = complex12.INF.atan();
      Complex complex16 = complex2.exp();
      // Undeclared exception!
      complex16.I.nthRoot(8388607);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3916.103742226436, 3916.103742226436);
      Complex complex1 = complex0.acos();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = new Complex(3916.103742226436, 1.0);
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex2.INF.subtract(complex0);
      Complex complex7 = complex2.INF.tanh();
      double double0 = complex0.getImaginary();
      Object object1 = complex5.readResolve();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex7.sinh();
      double double1 = complex9.abs();
      Complex complex10 = complex7.add(complex5);
      Complex complex11 = complex10.ONE.exp();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex10.exp();
      Complex complex14 = complex12.atan();
      List<Complex> list0 = complex5.nthRoot(3305);
      double double2 = complex14.abs();
      Complex complex15 = complex5.atan();
      Complex complex16 = complex11.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.ZERO.tan();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex0.sqrt1z();
      ComplexField complexField0 = complex3.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.subtract(complex4);
      Object object1 = complex1.INF.readResolve();
      List<Complex> list0 = complex5.nthRoot(1);
      double double0 = complex5.getReal();
      double double1 = complex5.getArgument();
      boolean boolean1 = complex1.isInfinite();
      List<Complex> list1 = complex4.nthRoot(1);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex0.conjugate();
      ComplexField complexField1 = complex3.getField();
      Complex complex8 = complex1.atan();
      ComplexField complexField2 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.ONE.createComplex(552.39559974, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1215.0));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.INF.multiply((-1215.0));
      List<Complex> list0 = complex5.ONE.nthRoot(547);
      Complex complex7 = complex2.ZERO.sqrt1z();
      Complex complex8 = complex3.ONE.multiply(complex7);
      Complex complex9 = complex0.log();
      Complex complex10 = complex5.cosh();
      ComplexField complexField0 = complex3.getField();
      int int0 = complex5.hashCode();
      ComplexField complexField1 = complex4.getField();
      Object object0 = complex8.readResolve();
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex11.NaN.acos();
      Complex complex13 = complex12.INF.cos();
      Complex complex14 = complex11.ONE.asin();
      String string0 = complex14.toString();
      Complex complex15 = complex11.negate();
      double double0 = complex9.getArgument();
      String string1 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(0.07842259109020233, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.createComplex(2485.767263453311, 0.07842259109020233);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.ONE.sin();
      Complex complex6 = complex2.NaN.createComplex(Double.POSITIVE_INFINITY, 1943.5343);
      Complex complex7 = complex2.ONE.divide(complex0);
      List<Complex> list0 = complex6.ZERO.nthRoot(3);
      double double0 = complex1.INF.abs();
      Object object0 = complex2.INF.readResolve();
      Complex complex8 = complex1.I.asin();
      Complex complex9 = complex1.createComplex(0.07842259109020233, 2485.767263453311);
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex1.multiply(1682.3112450399103);
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex10.INF.sqrt();
      String string0 = complex9.toString();
      Complex complex13 = complex1.divide(complex0);
      Complex complex14 = complex10.asin();
      Object object1 = new Object();
      boolean boolean0 = complex6.equals(object1);
      Object object2 = complex7.readResolve();
      Complex complex15 = complex3.multiply(0.0);
      Complex complex16 = complex1.atan();
      Complex complex17 = complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Complex complex1 = complex0.ZERO.log();
      String string0 = complex0.toString();
      Complex complex2 = complex0.acos();
      double double0 = complex2.NaN.abs();
      int int0 = complex2.hashCode();
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.log();
      double double0 = complex1.I.getArgument();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.multiply(complex3);
      int int0 = complex0.NaN.hashCode();
      Complex complex6 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex3.ONE.acos();
      String string0 = complex3.toString();
      Complex complex8 = complex7.INF.add(complex6);
      double double1 = complex8.NaN.abs();
      Complex complex9 = complex1.ONE.acos();
      Complex complex10 = complex3.divide(complex2);
      Complex complex11 = complex10.I.sqrt();
      double double2 = complex1.abs();
      Complex complex12 = complex3.NaN.asin();
      Complex complex13 = complex7.add(complex2);
      Complex complex14 = complex13.multiply(Double.NaN);
      Complex complex15 = complex13.NaN.atan();
      Complex complex16 = complex6.log();
      Complex complex17 = complex11.sqrt();
      try { 
        complex3.nthRoot((-2846));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,846
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cosh();
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex3.add(complex1);
      String string0 = complex3.NaN.toString();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex1.createComplex(1455.7448, 6.283185307179586);
      int int1 = complex3.hashCode();
      Complex complex10 = complex1.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1.5707963267948966), (-1636.054828));
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.ONE.multiply(complex1);
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex1.I.multiply((-1.5707963267948966));
      Complex complex7 = complex0.sin();
      Complex complex8 = complex6.INF.cosh();
      int int0 = complex7.ZERO.hashCode();
      Complex complex9 = complex7.I.exp();
      int int1 = complex8.I.hashCode();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.I.multiply(complex7);
      Complex complex12 = complex11.asin();
      Complex complex13 = complex6.sqrt();
      Complex complex14 = complex2.log();
      Complex complex15 = complex7.sin();
      String string0 = complex3.toString();
      Complex complex16 = complex6.multiply((-1757.0));
      Complex complex17 = complex2.negate();
      Complex complex18 = complex8.multiply(complex9);
      Complex complex19 = complex0.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(670.62, 670.62);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.createComplex(670.62, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex1.ZERO.createComplex(670.62, Double.POSITIVE_INFINITY);
      double double0 = complex1.abs();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex6.INF.asin();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex9.atan();
      Complex complex11 = complex9.ONE.acos();
      ComplexField complexField1 = complex4.I.getField();
      int int0 = complex0.hashCode();
      Complex complex12 = complex7.createComplex((-298.0), 8.82135821829366E290);
      double double1 = complex3.getArgument();
      Complex complex13 = complex0.cos();
      Complex complex14 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = null;
      double double1 = complex0.ONE.getArgument();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2430.6, 726.04062078);
      Complex complex1 = complex0.atan();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.I.asin();
      double double0 = complex4.ZERO.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.ZERO.acos();
      Complex complex7 = complex0.NaN.divide(complex1);
      Complex complex8 = complex7.ZERO.multiply((double) 1);
      List<Complex> list0 = complex0.nthRoot(1);
      ComplexField complexField0 = complex4.getField();
      boolean boolean1 = complex3.isInfinite();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.multiply(complex9);
      Complex complex11 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex1.INF.tan();
      double double0 = complex1.ZERO.getArgument();
      Complex complex4 = complex0.divide(complex1);
      double double1 = complex0.getImaginary();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.ZERO.negate();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.sqrt1z();
      Object object0 = complex5.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = complex2.negate();
      boolean boolean0 = complex6.isInfinite();
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(2552.601699937, 2552.601699937);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1768.11135), (-1768.11135));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.createComplex((-1768.11135), (-1768.11135));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.ZERO.multiply((-1768.11135));
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex6.INF.sqrt1z();
      Complex complex10 = complex9.I.sqrt();
      boolean boolean0 = complex3.isInfinite();
      ComplexField complexField0 = complex9.getField();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex9.INF.negate();
      Complex complex12 = complex5.multiply(complex2);
      double double0 = complex2.getArgument();
      double double1 = complex12.I.abs();
      Complex complex13 = complex3.sinh();
      Complex complex14 = complex13.subtract(complex12);
      Object object1 = complex5.readResolve();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex0.asin();
      Complex complex17 = complex2.asin();
      Complex complex18 = complex17.acos();
      Complex complex19 = complex2.createComplex((-1768.11135), (-2075.7348415617444));
      double double2 = complex10.getReal();
      int int0 = complex9.hashCode();
      Object object2 = complex9.readResolve();
      Complex complex20 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.createComplex(1.1730463525082348E-7, 1.1730463525082348E-7);
      double double0 = complex0.NaN.getArgument();
      Complex complex3 = complex0.log();
      double double1 = complex3.getArgument();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      Complex complex6 = complex5.INF.multiply(complex3);
      Complex complex7 = complex3.acos();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(213.354, 213.354);
      List<Complex> list0 = complex0.ONE.nthRoot(956);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex0.tanh();
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex4.equals(complexField0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.sin();
      List<Complex> list0 = complex1.I.nthRoot(583);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.ZERO.cosh();
      ComplexField complexField0 = complex3.getField();
      boolean boolean0 = complex3.equals(complex1);
      ComplexField complexField1 = complex3.getField();
      List<Complex> list1 = complex1.nthRoot(583);
      Complex complex5 = complex3.INF.sin();
      boolean boolean1 = complex3.isNaN();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.createComplex(583, 0.0);
      List<Complex> list2 = complex0.nthRoot(1);
      double double1 = complex1.getImaginary();
      Object object0 = new Object();
      boolean boolean2 = complex1.equals(object0);
      double double2 = complex5.getImaginary();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.createComplex((-300.42910714), 583);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(659.17976681924, 659.17976681924);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex0.exp();
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex5.equals(object0);
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1356.4015618022), (-1356.4015618022));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.ONE.sqrt();
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex2.ONE.atan();
      Complex complex6 = complex5.acos();
      double double1 = complex0.INF.abs();
      Complex complex7 = new Complex((-1356.4015618022), (-0.3058015757857271));
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex0.divide(complex7);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex7.cosh();
      double double2 = complex10.getImaginary();
      Complex complex12 = complex9.cos();
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-1225.9561994), (-1106.7132781142127));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.I.sqrt1z();
      double double0 = (-386.54);
      Complex complex3 = new Complex((-671.4778045911784), (-386.54));
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex0.subtract(complex3);
      int int0 = complex3.hashCode();
      try { 
        complex3.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-299.17452304));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex1.INF.tan();
      double double0 = complex1.ZERO.getArgument();
      Complex complex4 = complex0.divide(complex1);
      double double1 = complex0.getImaginary();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.ZERO.negate();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.sqrt1z();
      Object object0 = complex5.readResolve();
      Object object1 = complex1.readResolve();
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = complex2.negate();
      boolean boolean0 = complex6.isInfinite();
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.NaN.negate();
      double double0 = complex3.INF.getArgument();
      double double1 = complex1.getArgument();
      Complex complex4 = complex2.ZERO.conjugate();
      double double2 = complex2.ZERO.abs();
      Complex complex5 = complex0.ONE.log();
      double double3 = complex0.getImaginary();
      Complex complex6 = complex5.log();
      ComplexField complexField0 = complex6.getField();
      Object object0 = complex6.INF.readResolve();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex7 = complex5.INF.cosh();
      int int0 = complex6.hashCode();
      double double4 = complex6.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex0.I.add(complex3);
      Complex complex12 = complex6.atan();
      double double5 = complex7.abs();
      Complex complex13 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals("V_t,");
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex1.ZERO.sin();
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex3.I.negate();
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex6 = complex2.ZERO.acos();
      String string0 = complex0.NaN.toString();
      Complex complex7 = complex0.sin();
      String string1 = complex7.NaN.toString();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex9.ONE.cosh();
      double double0 = complex3.abs();
      Complex complex12 = complex2.tan();
      Complex complex13 = complex11.NaN.tanh();
      try { 
        complex11.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      ComplexField complexField0 = complex0.I.getField();
      List<Complex> list0 = complex1.INF.nthRoot(245);
      Complex complex2 = complex0.sinh();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = complex2.createComplex((-1781.440181798509), (-1781.440181798509));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.multiply(3345.49);
      Complex complex5 = complex4.sqrt();
      ComplexField complexField0 = complex4.getField();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex5.ZERO.createComplex(3345.49, 313.648927656269);
      Complex complex8 = Complex.I;
      Complex complex9 = complex2.conjugate();
      double double0 = complex0.getReal();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex10.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.cosh();
      double double1 = complex1.INF.abs();
      int int0 = complex1.I.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.I.sqrt();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.ZERO.add(complex2);
      double double1 = complex0.abs();
      Complex complex8 = complex2.ONE.subtract(complex4);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex0.divide(complex2);
      ComplexField complexField0 = complex10.ZERO.getField();
      double double2 = complex2.INF.abs();
      String string0 = complex9.toString();
      Complex complex11 = complex3.asin();
      Complex complex12 = complex10.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.tanh();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-1623.6099832663604));
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ONE.pow(complex1);
      boolean boolean0 = complex0.equals((Object) null);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1381.673159373), (-1381.673159373));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.NaN.acos();
      double double0 = complex2.getArgument();
      Complex complex4 = complex1.tan();
      double double1 = complex4.NaN.abs();
      Complex complex5 = Complex.NaN;
      boolean boolean0 = complex1.equals(complex5);
      Complex complex6 = complex5.log();
      Object object0 = complex4.readResolve();
      boolean boolean1 = complex4.equals(object0);
      Complex complex7 = complex1.divide(complex5);
      Object object1 = complex1.readResolve();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.subtract(complex5);
      boolean boolean2 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex4.ZERO.cos();
      Complex complex7 = complex6.I.exp();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.pow(complex8);
      Complex complex10 = complex0.atan();
      Complex complex11 = complex4.acos();
      Complex complex12 = complex11.ONE.sqrt();
      Complex complex13 = complex2.multiply(complex10);
      Complex complex14 = complex5.log();
      Complex complex15 = complex2.asin();
      ComplexField complexField0 = complex12.getField();
      double double1 = complex14.getArgument();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ONE.sqrt();
      double double0 = complex2.getArgument();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      Object object0 = new Object();
      Complex complex2 = complex1.INF.exp();
      String string0 = complex2.ZERO.toString();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.createComplex(2773.75, 2773.75);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.cos();
      double double0 = complex1.getReal();
      int int0 = complex1.I.hashCode();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex8.sinh();
      double double1 = complex7.INF.getArgument();
      Complex complex12 = complex1.divide(complex0);
      Complex complex13 = complex10.sqrt();
      Complex complex14 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.subtract(complex3);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.isNaN();
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex2.tan();
      int int1 = complex5.INF.hashCode();
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.INF.pow(complex7);
      Complex complex9 = complex8.ONE.add(complex5);
      Complex complex10 = complex8.I.sinh();
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex0.exp();
      boolean boolean1 = complex5.isNaN();
      Complex complex14 = complex0.cosh();
      ComplexField complexField0 = complex14.ONE.getField();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex6.cosh();
      Complex complex17 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.negate();
      int int0 = complex2.hashCode();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.createComplex(0.0, Double.NaN);
      String string0 = complex5.toString();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex6.acos();
      double double1 = complex9.abs();
      Complex complex10 = complex3.createComplex(1118.60634028, (-1091.6165972365718));
      Complex complex11 = complex3.multiply(complex10);
      Complex complex12 = complex8.add(complex10);
      Complex complex13 = complex12.ZERO.sinh();
      Complex complex14 = complex3.tan();
      Complex complex15 = complex0.multiply(2120.152);
      Complex complex16 = complex15.cos();
      Complex complex17 = Complex.INF;
      Complex complex18 = complex4.subtract(complex17);
      Complex complex19 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2033.0), (-2033.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.I.createComplex((-1206.535), 544.0);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex5 = complex0.ONE.pow(complex1);
      double double0 = complex1.getArgument();
      try { 
        complex1.nthRoot((-819));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -819
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      int int0 = complex0.I.hashCode();
      Object object0 = complex1.ONE.readResolve();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex1.sqrt();
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.multiply(Double.NaN);
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, Double.NaN);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.getArgument();
      String string0 = complex0.toString();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = new Complex(3001.62887273534, 0.0);
      Complex complex3 = complex0.multiply(complex2);
      List<Complex> list0 = complex1.nthRoot(2052);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.multiply((-2858.745996284443));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex(0.5299979321041707, 2322.4);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex7.multiply(complex0);
      Complex complex10 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.createComplex((-1172.7289125), (-1172.7289125));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.ZERO.atan();
      double double0 = complex3.I.abs();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.625, 0.625);
      Complex complex2 = complex0.I.multiply(complex1);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.getArgument();
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.multiply((-1325.7448993368));
      List<Complex> list0 = complex0.nthRoot(1);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.INF.conjugate();
      double double0 = complex1.ZERO.getArgument();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.I.acos();
      String string0 = complex4.toString();
      Complex complex6 = complex0.acos();
      String string1 = complex0.toString();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-351.548572550941), (-351.548572550941));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.sinh();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex((-1348.198), (-1348.198));
      Complex complex2 = complex0.I.tanh();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.sin();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.tan();
      String string0 = complex0.NaN.toString();
      double double0 = complex1.I.abs();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.tanh();
      ComplexField complexField0 = complex0.ONE.getField();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = new Complex(3685.723, 3685.723);
      Complex complex5 = complex3.INF.multiply(complex4);
      double double0 = complex2.NaN.getArgument();
      Complex complex6 = complex5.ONE.add(complex1);
      double double1 = (-1912.4466935758458);
      Complex complex7 = complex3.NaN.createComplex((-2606.722), (-1912.4466935758458));
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex6.tan();
      try { 
        complex11.INF.nthRoot((-3205));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,205
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.ZERO.sqrt();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.INF.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.sqrt();
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex3.ONE.conjugate();
      String string1 = complex4.ZERO.toString();
      Complex complex5 = complex3.NaN.pow(complex0);
      Complex complex6 = complex0.ONE.cosh();
      Complex complex7 = complex0.conjugate();
      String string2 = complex3.toString();
      boolean boolean0 = complex3.isNaN();
      int int1 = complex6.hashCode();
      List<Complex> list0 = complex3.nthRoot(1675);
      Complex complex8 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex6.asin();
      int int0 = complex8.ONE.hashCode();
      Complex complex9 = complex3.multiply(Double.NaN);
      Complex complex10 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex4.NaN.cos();
      boolean boolean0 = complex1.isNaN();
      int int0 = complex3.hashCode();
      double double1 = complex1.getArgument();
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex2.equals(object0);
      boolean boolean2 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.ONE.nthRoot(2194);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex1.ZERO.sin();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex0.I.exp();
      ComplexField complexField0 = complex0.getField();
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex1.I.asin();
      double double0 = complex10.ONE.getArgument();
      Complex complex11 = complex8.sqrt();
      Complex complex12 = complex4.divide(complex11);
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex2.NaN.cosh();
      Complex complex6 = complex4.ZERO.add(complex3);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.ONE.conjugate();
      Complex complex9 = complex8.I.subtract(complex0);
      Complex complex10 = complex5.I.tan();
      Complex complex11 = complex1.I.add(complex4);
      Complex complex12 = complex11.log();
      Complex complex13 = complex3.NaN.cos();
      Complex complex14 = complex13.INF.tanh();
      Complex complex15 = complex13.ZERO.tanh();
      Complex complex16 = complex13.negate();
      int int0 = (-747);
      try { 
        complex0.nthRoot((-747));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -747
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.INF.hashCode();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex2.ZERO.subtract(complex3);
      List<Complex> list0 = complex4.NaN.nthRoot(1030);
      Complex complex6 = complex4.I.sin();
      Complex complex7 = complex2.I.tan();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex4.ONE.negate();
      Complex complex10 = complex0.multiply(3269.658113874);
      Complex complex11 = complex0.NaN.tan();
      Complex complex12 = complex11.conjugate();
      double double0 = complex4.ZERO.getArgument();
      double double1 = complex2.getArgument();
      double double2 = complex6.abs();
      Complex complex13 = complex12.INF.asin();
      boolean boolean1 = complex2.isInfinite();
      Complex complex14 = complex9.divide(complex3);
      Object object0 = complex2.readResolve();
      Complex complex15 = complex0.tanh();
      Complex complex16 = complex8.add(complex3);
      Complex complex17 = complex12.acos();
      String string0 = complex0.toString();
      Complex complex18 = complex9.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.ONE.tanh();
      double double1 = complex0.getArgument();
      double double2 = complex2.abs();
      Complex complex5 = complex2.conjugate();
      double double3 = complex5.ONE.abs();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex2.log();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex4.subtract(complex3);
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(3183);
      Complex complex1 = complex0.INF.multiply(520.0);
      double double0 = complex1.INF.abs();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.sin();
      double double1 = complex0.NaN.getArgument();
      int int0 = complex1.INF.hashCode();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.NaN.multiply((-1.5707963267948966));
      double double2 = complex0.getReal();
      double double3 = complex5.getImaginary();
      Complex complex8 = complex5.add(complex0);
      Complex complex9 = complex8.NaN.asin();
      Complex complex10 = complex0.exp();
      String string1 = complex10.NaN.toString();
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex0.sqrt();
      double double4 = complex7.getArgument();
      Complex complex13 = complex9.subtract(complex5);
      Complex complex14 = complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(228.19, (-1726.7));
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex3.INF.atan();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex7.I.multiply(complex4);
      double double0 = complex6.INF.getArgument();
      Complex complex9 = complex2.INF.conjugate();
      Complex complex10 = complex6.ZERO.sinh();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex10.cos();
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex2.ZERO.atan();
      Complex complex15 = complex5.multiply(228.19);
      Complex complex16 = complex15.NaN.sinh();
      Complex complex17 = complex2.exp();
      Object object0 = complex6.ONE.readResolve();
      Complex complex18 = complex17.ZERO.multiply(0.0);
      int int0 = complex4.hashCode();
      boolean boolean0 = complex4.isNaN();
      Complex complex19 = complex0.pow(complex2);
      int int1 = complex19.hashCode();
      String string1 = complex19.toString();
      Complex complex20 = complex3.sqrt();
      ComplexField complexField0 = complex20.getField();
      Complex complex21 = complex12.asin();
      Complex complex22 = complex10.add(complex0);
      Complex complex23 = complex6.cos();
      double double1 = complex0.getArgument();
      Complex complex24 = complex13.asin();
      Complex complex25 = complex0.multiply(0.7853981633974483);
      boolean boolean1 = complex21.isInfinite();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.ONE.exp();
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex2.ONE.createComplex(2718.793834991933, 821.9093614458784);
      Complex complex6 = complex2.ONE.multiply(376.70786757);
      Complex complex7 = complex6.sinh();
      try { 
        complex1.NaN.nthRoot((-93));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -93
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
