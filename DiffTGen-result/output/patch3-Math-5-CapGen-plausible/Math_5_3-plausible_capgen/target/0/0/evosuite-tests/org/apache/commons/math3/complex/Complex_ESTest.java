/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:06:15 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex1.INF.subtract(2.0);
      boolean boolean0 = complex1.isInfinite();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex1.subtract(complex3);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex5.add(2.0);
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = complex0.multiply(complex4);
      Complex complex10 = complex4.multiply(2.0);
      String string0 = complex10.toString();
      Complex complex11 = complex10.tan();
      double double0 = complex3.abs();
      Complex complex12 = complex0.acos();
      Complex complex13 = complex7.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.pow(complex2);
      Object object1 = complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1763));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.I.subtract((double) (-1763));
      Complex complex4 = complex2.INF.atan();
      double double0 = complex0.getReal();
      Complex complex5 = complex1.NaN.createComplex(1.0, (-1763));
      double double1 = complex3.NaN.getArgument();
      double double2 = complex1.getArgument();
      Complex complex6 = complex2.INF.multiply(complex0);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.ONE.createComplex(Double.NaN, (-363.0321155642));
      double double3 = complex2.getArgument();
      Complex complex9 = Complex.valueOf(Double.NaN, 1661.15564);
      Complex complex10 = Complex.valueOf(0.0, Double.NaN);
      int int0 = complex10.INF.hashCode();
      int int1 = complex9.INF.hashCode();
      Complex complex11 = complex7.pow(complex8);
      Complex complex12 = complex9.divide(complex6);
      Complex complex13 = complex7.pow(Double.NaN);
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(197.035527943, 197.035527943);
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex1.INF.pow(Double.NaN);
      Complex complex3 = complex0.log();
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex5.INF.tan();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.divide(complex8);
      Complex complex10 = complex7.INF.atan();
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex2.abs();
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex3.tan();
      Complex complex13 = complex3.atan();
      String string0 = complex5.toString();
      Complex complex14 = complex11.createComplex((-16.989), Double.NaN);
      Complex complex15 = complex14.ONE.conjugate();
      Complex complex16 = Complex.valueOf(Double.NaN);
      ComplexField complexField1 = complex15.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex1 = Complex.ONE;
      ComplexField complexField0 = complex1.NaN.getField();
      int int0 = complex1.INF.hashCode();
      boolean boolean1 = complex0.equals(complex1);
      double double0 = complex1.abs();
      double double1 = complex0.abs();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex2.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex1.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.7375090618655787E103), (-1.7375090618655787E103));
      Complex complex1 = new Complex((-1.7375090618655787E103), (-1830.1));
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex7.I.acos();
      Complex complex9 = Complex.valueOf(6.283185307179586);
      Complex complex10 = complex7.ONE.multiply(0.0);
      Complex complex11 = complex4.divide(0.0);
      Complex complex12 = complex11.divide(complex0);
      Complex complex13 = Complex.valueOf((-670.749295442249), (-147.1261982263));
      Complex complex14 = new Complex((-147.1261982263), Double.NaN);
      Complex complex15 = complex13.I.multiply(complex14);
      Complex complex16 = complex0.subtract((-670.749295442249));
      Complex complex17 = complex6.divide(complex11);
      Complex complex18 = complex1.multiply((-260));
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      Complex complex20 = complex12.divide((-147.1261982263));
      Complex complex21 = complex1.log();
      ComplexField complexField0 = complex21.getField();
      Complex complex22 = complex21.ZERO.subtract(complex16);
      Complex complex23 = complex5.tan();
      Complex complex24 = complex6.pow(complex0);
      double double0 = complex10.getImaginary();
      Complex complex25 = complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex0.I.pow((-3426.4));
      Complex complex5 = complex1.ZERO.multiply(0);
      Complex complex6 = complex0.multiply((-3426.4));
      Complex complex7 = complex4.ZERO.add(complex0);
      Complex complex8 = complex6.reciprocal();
      boolean boolean0 = complex6.equals(")");
      Complex complex9 = complex4.ONE.subtract(complex6);
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex10.INF.log();
      Complex complex12 = complex1.log();
      Complex complex13 = complex12.ONE.log();
      Complex complex14 = complex12.INF.conjugate();
      Complex complex15 = complex10.asin();
      double double0 = complex2.abs();
      Complex complex16 = complex4.multiply(complex15);
      Complex complex17 = complex16.ONE.sin();
      double double1 = complex8.getReal();
      Complex complex18 = complex10.pow(complex11);
      String string0 = complex1.toString();
      Complex complex19 = complex0.atan();
      boolean boolean1 = complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1724.3357923108), 263.14);
      Complex complex2 = complex1.ONE.divide(0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex3.I.multiply((-519));
      Complex complex6 = complex0.subtract((-1724.3357923108));
      int int0 = complex3.hashCode();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex4.add(complex1);
      Object object0 = complex6.readResolve();
      Complex complex9 = complex6.multiply((-519));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.pow(345.319423863807);
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
      double double0 = complex1.getImaginary();
      Complex complex3 = complex1.multiply(1325);
      Complex complex4 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2134.3873344));
      Complex complex2 = complex1.ONE.divide(complex0);
      List<Complex> list0 = complex1.INF.nthRoot(3093);
      Complex complex3 = complex2.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.divide(2493.085736);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex2.INF.sqrt1z();
      Complex complex8 = complex6.multiply(146.073854237);
      String string0 = complex1.INF.toString();
      Complex complex9 = Complex.valueOf((-2134.3873344));
      Complex complex10 = complex2.ZERO.pow(complex9);
      Complex complex11 = complex1.divide((-1619.9983021));
      Complex complex12 = complex3.cos();
      Complex complex13 = complex6.conjugate();
      Complex complex14 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex15 = complex10.divide(2493.085736);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.I.equals("-");
      Complex complex1 = null;
      int int0 = complex0.INF.hashCode();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = new Complex(1.0, 1850.021014289);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex1.INF.add(complex0);
      Complex complex5 = complex0.multiply(complex1);
      double double1 = complex5.NaN.getArgument();
      Complex complex6 = complex5.pow(1850.021014289);
      String string0 = complex4.toString();
      Complex complex7 = complex5.NaN.conjugate();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex7.multiply(1.0);
      Complex complex10 = complex8.ZERO.divide(1.0);
      String string1 = complex8.INF.toString();
      Complex complex11 = complex0.pow(complex1);
      Complex complex12 = complex11.I.asin();
      Complex complex13 = complex1.acos();
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = complex14.NaN.multiply(2703.770277);
      Complex complex16 = complex5.NaN.divide(complex4);
      boolean boolean0 = complex4.equals(complex13);
      Complex complex17 = complex6.NaN.divide(complex0);
      boolean boolean1 = complex4.isInfinite();
      Complex complex18 = complex0.pow(complex6);
      Complex complex19 = complex5.atan();
      Complex complex20 = complex0.sinh();
      boolean boolean2 = complex20.NaN.equals(complex18);
      double double2 = complex17.abs();
      Complex complex21 = complex1.conjugate();
      Complex complex22 = complex4.exp();
      Complex complex23 = complex22.multiply(276.0821);
      Complex complex24 = complex17.tan();
      Complex complex25 = complex18.subtract(complex23);
      Complex complex26 = complex2.asin();
      Complex complex27 = complex23.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.I.exp();
      Complex complex6 = complex3.asin();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.NaN.subtract(complex6);
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = complex3.divide((double) 1);
      Object object0 = complex11.readResolve();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex1.add(complex7);
      int int0 = complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3532.072270677605));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.subtract(complex1);
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.ONE.multiply((-4358));
      Complex complex5 = complex4.pow((-3532.072270677605));
      Complex complex6 = complex1.I.multiply(0.0);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.divide(complex7);
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.tanh();
      int int1 = complex5.hashCode();
      Complex complex11 = complex4.sqrt();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1199.332850345718));
      Complex complex1 = complex0.ZERO.exp();
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.multiply(complex0);
      Complex complex4 = complex2.ONE.subtract((-1199.332850345718));
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.ZERO.negate();
      Complex complex8 = complex4.ZERO.cosh();
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex7.I.divide(complex5);
      Complex complex11 = complex10.ZERO.subtract(complex5);
      Complex complex12 = Complex.valueOf(1956.5291741092626);
      List<Complex> list0 = complex4.NaN.nthRoot(1215);
      Complex complex13 = complex0.multiply(1215);
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex14 = complex13.ZERO.sin();
      Complex complex15 = complex6.NaN.multiply(1);
      Complex complex16 = complex13.I.tanh();
      Complex complex17 = complex16.INF.subtract(4250.42839793);
      Complex complex18 = Complex.valueOf(1956.5291741092626);
      double double0 = complex2.getReal();
      String string0 = complex6.toString();
      double double1 = complex1.getArgument();
      double double2 = complex1.getImaginary();
      Complex complex19 = complex5.pow(complex14);
      Complex complex20 = complex5.exp();
      double double3 = complex20.ONE.abs();
      Complex complex21 = complex11.atan();
      Complex complex22 = complex13.negate();
      Complex complex23 = complex11.divide(complex12);
      double double4 = complex14.abs();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2852.5491633), (-2852.5491633));
      Complex complex1 = complex0.atan();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.ZERO.asin();
      Complex complex5 = complex3.ONE.log();
      Complex complex6 = complex3.ZERO.multiply(291.6136546);
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = Complex.valueOf(1299.0, 291.6136546);
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex4.ZERO.divide(1299.0);
      Complex complex13 = complex11.ZERO.tan();
      Complex complex14 = complex8.reciprocal();
      int int1 = complex14.INF.hashCode();
      Complex complex15 = Complex.valueOf(291.6136546);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex1.ZERO.pow(complex2);
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex3.ONE.reciprocal();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex0.multiply(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex7.I.multiply(2.0);
      Complex complex9 = complex8.ONE.pow(0.0);
      Object object0 = complex2.INF.readResolve();
      Complex complex10 = Complex.valueOf((-334.642682));
      double double0 = complex10.NaN.abs();
      Complex complex11 = Complex.valueOf(Double.NaN);
      List<Complex> list0 = complex2.nthRoot(37);
      Object object1 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2537635160762597E296), (-2.2537635160762597E296));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.multiply(0);
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.reciprocal();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = Complex.valueOf((-1071.814216));
      Complex complex5 = complex4.I.cosh();
      boolean boolean1 = complex2.NaN.equals(complex1);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.INF.acos();
      double double0 = complex1.ZERO.abs();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex6.cos();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex9.ONE.pow(complex10);
      Complex complex12 = complex2.asin();
      Complex complex13 = Complex.valueOf((-1.1918070206953359E-228));
      Complex complex14 = complex6.conjugate();
      double double1 = complex5.getArgument();
      ComplexField complexField0 = complex14.getField();
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = Complex.valueOf(0.0, 1.0640404096769032E-9);
      Complex complex17 = complex14.sqrt1z();
      Complex complex18 = complex0.sin();
      Complex complex19 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = complex3.NaN.multiply(complex4);
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex6.sinh();
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(284.4624778, (-1.0));
      Complex complex1 = Complex.valueOf((-831.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.I.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.multiply(273.56283);
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex6.pow(complex1);
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex3.createComplex((-831.0), (-831.0));
      Complex complex11 = complex3.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex11.tan();
      double double0 = complex7.abs();
      Complex complex15 = complex12.createComplex(0.0, (-831.0));
      Complex complex16 = complex0.subtract(complex3);
      Complex complex17 = complex10.sin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-3816.0304413));
      Complex complex1 = Complex.valueOf((-3816.0304413), (-3816.0304413));
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex0.ZERO.multiply((-3816.0304413));
      double double0 = complex3.ONE.getArgument();
      int int0 = complex3.INF.hashCode();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.createComplex((-4552.21144), (-4552.21144));
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.I.pow((-3816.0304413));
      Complex complex8 = complex0.ZERO.sinh();
      double double1 = complex1.getImaginary();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex8.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(991.28382866);
      Complex complex1 = complex0.subtract((-952.687182));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.I.multiply(complex2);
      Complex complex4 = complex3.ONE.tan();
      int int0 = complex4.I.hashCode();
      double double0 = complex0.getArgument();
      double double1 = complex0.ONE.abs();
      double double2 = complex0.getImaginary();
      Complex complex5 = complex2.sin();
      Object object0 = complex5.INF.readResolve();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex6.I.reciprocal();
      Complex complex9 = complex6.divide(complex0);
      Complex complex10 = complex1.subtract((-2705.95174));
      Complex complex11 = complex5.divide(complex2);
      Complex complex12 = complex11.divide(991.28382866);
      Complex complex13 = complex12.NaN.add(0.0);
      Complex complex14 = complex10.ONE.sinh();
      Complex complex15 = complex11.I.asin();
      boolean boolean0 = complex11.equals(object0);
      Complex complex16 = complex9.sinh();
      Complex complex17 = complex1.pow(0.0);
      int int1 = complex17.I.hashCode();
      Complex complex18 = complex10.reciprocal();
      Complex complex19 = complex16.acos();
      Complex complex20 = complex19.NaN.asin();
      double double3 = complex10.getImaginary();
      boolean boolean1 = complex5.isNaN();
      ComplexField complexField0 = complex11.getField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-2066.25), (-1819.0256322911));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.NaN.pow(0.0);
      Complex complex5 = Complex.valueOf((-202.81074835));
      List<Complex> list0 = complex3.ONE.nthRoot(1154);
      Complex complex6 = complex0.NaN.cos();
      Complex complex7 = Complex.valueOf((double) 1154, 1796.17863388);
      double double0 = complex6.INF.abs();
      Complex complex8 = complex6.I.acos();
      Complex complex9 = complex0.divide(0.0);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      int int0 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-1350.734130997));
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.tan();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.multiply(37);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex(1.5748463788034308E-137, (-1234.205764));
      boolean boolean0 = complex7.INF.equals(complex8);
      Complex complex9 = complex5.reciprocal();
      int int0 = complex9.NaN.hashCode();
      Complex complex10 = complex6.atan();
      Complex complex11 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.I.log();
      double double1 = complex1.ONE.abs();
      Object object0 = new Object();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex3.ZERO.conjugate();
      Object object1 = complex3.I.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Complex complex5 = complex0.I.sqrt();
      double double2 = complex1.getArgument();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex8.exp();
      Complex complex11 = complex1.subtract(1.5707963267948966);
      Complex complex12 = complex8.add(Double.POSITIVE_INFINITY);
      Complex complex13 = complex9.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex14 = complex1.reciprocal();
      String string0 = complex0.toString();
      Complex complex15 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-29.4111989892567));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.divide((-29.4111989892567));
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.11168810725212097);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.add((-29.4111989892567));
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex5.tanh();
      String string0 = complex9.toString();
      Complex complex10 = complex0.subtract(complex8);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex9.equals(object0);
      Complex complex11 = complex10.ZERO.exp();
      Complex complex12 = complex10.I.asin();
      Complex complex13 = complex12.ONE.multiply(3222);
      Complex complex14 = complex1.exp();
      Complex complex15 = complex14.ONE.createComplex(0.0, (-8.054981263802322E-8));
      Complex complex16 = complex11.NaN.pow(0.0);
      Complex complex17 = complex9.sin();
      double double0 = complex1.abs();
      Complex complex18 = complex8.pow(complex11);
      boolean boolean1 = complex6.isInfinite();
      Complex complex19 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.INF.reciprocal();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.ZERO.multiply(0.0);
      double double0 = complex0.getArgument();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex0.log();
      int int0 = complex8.hashCode();
      boolean boolean1 = complex5.isNaN();
      Complex complex10 = complex5.multiply(complex0);
      Complex complex11 = complex1.tanh();
      Complex complex12 = complex11.ZERO.createComplex(0.0, (-1751.2858));
      Complex complex13 = complex11.ONE.sinh();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex1.multiply(complex14);
      Complex complex16 = complex0.cos();
      Complex complex17 = complex0.INF.tan();
      Complex complex18 = complex14.conjugate();
      Complex complex19 = complex0.conjugate();
      Complex complex20 = complex19.NaN.tanh();
      Complex complex21 = complex15.ONE.atan();
      boolean boolean2 = complex10.equals("");
      boolean boolean3 = complex14.isInfinite();
      Complex complex22 = complex2.subtract(0.0);
      boolean boolean4 = complex15.isInfinite();
      Complex complex23 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1200.68273344877, 1200.68273344877);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.sin();
      String string0 = complex5.toString();
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-478.4217368989));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = Complex.valueOf((-478.4217368989), (-478.4217368989));
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.INF.log();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex8 = complex0.ONE.add(247.004495228518);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex8.isInfinite();
      Complex complex9 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex10 = complex8.pow(complex9);
      Complex complex11 = complex10.NaN.subtract((-478.4217368989));
      Complex complex12 = complex8.acos();
      boolean boolean1 = complex10.equals(complex0);
      Complex complex13 = complex5.asin();
      Complex complex14 = complex11.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = Complex.valueOf((-172.6));
      Complex complex10 = complex9.ONE.subtract(1756.35759);
      Complex complex11 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-382.184913371));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.negate();
      String string0 = complex4.ZERO.toString();
      double double0 = complex4.INF.getArgument();
      Complex complex5 = Complex.valueOf((-382.184913371), (-382.184913371));
      Complex complex6 = complex5.ONE.multiply(complex0);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex6.createComplex((-382.184913371), (-5074.2496793));
      Complex complex9 = complex1.negate();
      Complex complex10 = complex5.pow((-382.184913371));
      Complex complex11 = complex10.divide(3815.377153135178);
      int int0 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.INF.equals(object0);
      Complex complex1 = complex0.ONE.divide((-525.86169462));
      Complex complex2 = complex1.NaN.cosh();
      int int0 = complex1.ONE.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex3 = Complex.valueOf((-525.86169462));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 2870.84;
      Complex complex1 = Complex.valueOf(2870.84);
      Complex complex2 = complex1.I.divide(complex0);
      double double1 = (-2863.1482004326);
      Complex complex3 = Complex.valueOf(2870.84, (-2863.1482004326));
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex2.NaN.exp();
      Complex complex6 = complex1.NaN.exp();
      Complex complex7 = complex1.ONE.multiply(complex2);
      Complex complex8 = complex6.ZERO.sin();
      int int0 = (-1126);
      try { 
        complex0.ZERO.nthRoot((-1126));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,126
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.NaN.subtract(0.5063233375549316);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.NaN.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex0.ONE.pow(complex3);
      double double0 = complex0.getImaginary();
      Complex complex9 = complex0.add(Double.POSITIVE_INFINITY);
      double double1 = complex3.abs();
      Complex complex10 = complex4.log();
      try { 
        complex10.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.createComplex(1.0, 6.865714679174435E-165);
      Complex complex2 = complex1.INF.subtract(6.865714679174435E-165);
      Complex complex3 = complex2.NaN.divide((-2184.614379));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.valueOf((-44.9437760638));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.INF.multiply(complex7);
      Object object0 = complex4.readResolve();
      List<Complex> list0 = complex7.INF.nthRoot(7);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.add(complex4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.I.divide((-20.0));
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex1.I.add(0.0);
      int int0 = complex0.INF.hashCode();
      String string0 = complex0.toString();
      double double0 = complex1.getReal();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.INF.multiply(0.0);
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = Complex.valueOf((-20.0));
      Complex complex10 = complex9.tan();
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex7.subtract(complex6);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex4.pow(complex12);
      Complex complex14 = Complex.INF;
      boolean boolean1 = complex2.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-400.8785), (-1594.30452007));
      Complex complex1 = complex0.INF.subtract(2.2164316177368164);
      Complex complex2 = complex0.multiply((-1594.30452007));
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex9.I.exp();
      Complex complex11 = new Complex(2.2164316177368164, 2129.5774604);
      Complex complex12 = complex8.NaN.subtract(complex11);
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.asin();
      Complex complex15 = complex14.I.acos();
      double double0 = complex1.getReal();
      ComplexField complexField0 = complex1.getField();
      Complex complex16 = complex6.sqrt();
      Complex complex17 = Complex.valueOf(3.444406231880653E-285, (-1594.30452007));
      Complex complex18 = Complex.valueOf(0.0, 400.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.ONE.pow(148.896422);
      Complex complex5 = complex0.tan();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.log();
      double double0 = complex1.getArgument();
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4192.362));
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex3.multiply((-4192.362));
      String string0 = complex5.ONE.toString();
      Complex complex6 = complex1.divide((-4192.362));
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.ONE.divide(complex0);
      Complex complex10 = complex9.I.acos();
      try { 
        complex4.nthRoot((-661));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -661
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.divide(1.0);
      Complex complex4 = complex2.ZERO.divide(complex3);
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex2.multiply((-2987));
      String string0 = complex4.toString();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-2401.5162249818018), 203.1628876);
      Complex complex1 = Complex.valueOf((-2401.5162249818018));
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex1.INF.subtract((-2401.5162249818018));
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      double double0 = complex6.I.abs();
      double double1 = complex6.getArgument();
      Complex complex8 = Complex.valueOf(1.1815196363705356E-8);
      Complex complex9 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(7);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = new Complex((-2423.9584092));
      Complex complex6 = complex5.INF.cosh();
      boolean boolean0 = complex4.ZERO.equals(complex5);
      List<Complex> list0 = complex1.nthRoot(302);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.518315366841937E55), (-4.518315366841937E55));
      Complex complex1 = complex0.ZERO.pow((-4.518315366841937E55));
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex1.NaN.tan();
      Object object0 = complex2.NaN.readResolve();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.ONE.subtract(complex5);
      Complex complex7 = complex2.ZERO.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex8 = complex1.ONE.exp();
      int int0 = complex1.hashCode();
      Complex complex9 = complex7.add(complex3);
      String string0 = complex9.ZERO.toString();
      Complex complex10 = complex8.acos();
      Object object1 = complex10.NaN.readResolve();
      double double1 = complex10.abs();
      Complex complex11 = complex8.multiply(complex5);
      Complex complex12 = complex8.sqrt();
      Complex complex13 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.divide(21.91967323884);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.ONE.pow(0.0);
      Complex complex5 = complex0.INF.pow(2.9479464287605006E-8);
      Complex complex6 = complex2.NaN.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.INF.atan();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-100.02058094477), (-100.02058094477));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.multiply((-100.02058094477));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.multiply((-1848.6808692434593));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtract(20.0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.createComplex(0.0, 1708.8728898254);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-864.532));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1323.612222), 2042.520030477467);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.NaN.divide(0.3777405619621277);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.multiply(0.3777405619621277);
      Complex complex6 = Complex.valueOf(0.3777405619621277);
      Complex complex7 = complex6.ZERO.multiply(1);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(179.53, 284.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.NaN.pow(284.0);
      Complex complex4 = complex0.INF.tanh();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.ZERO.add(0.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex0.ZERO.sqrt();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex3.multiply((-491));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.INF.multiply(2588);
      Complex complex5 = complex0.I.subtract(complex4);
      Complex complex6 = complex4.I.tanh();
      Complex complex7 = complex3.ONE.reciprocal();
      Complex complex8 = complex3.multiply(0.0);
      String string0 = complex8.ZERO.toString();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex8.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1.0);
      Complex complex2 = complex0.add(1.0);
      Complex complex3 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3930.502108530399, Double.NaN);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.createComplex((-1.0), (-1.0));
      Complex complex4 = complex3.subtract((-2468.48955190725));
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.tanh();
      int int0 = complex0.hashCode();
      Complex complex6 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.createComplex(6.283185307179586, 0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.divide(3670.375931);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = 2.655990315697216E-10;
      Complex complex0 = Complex.valueOf(2.655990315697216E-10, 2.655990315697216E-10);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4239.29, 4239.29);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.multiply((-2847.968796687));
      Complex complex3 = complex2.INF.sinh();
      double double0 = complex0.INF.getArgument();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = new Complex(0.7853981633974483, 4239.29);
      boolean boolean0 = complex4.I.equals(complex5);
      Complex complex6 = complex4.ZERO.multiply(complex1);
      double double1 = complex6.getArgument();
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.valueOf(4239.29, (-1.0));
      Object object0 = complex8.INF.readResolve();
      Object object1 = complex5.readResolve();
      boolean boolean1 = complex8.ZERO.equals(object1);
      Complex complex9 = complex7.divide(complex0);
      Complex complex10 = complex7.sin();
      Complex complex11 = complex0.I.sinh();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex5.multiply(complex10);
      Complex complex14 = Complex.valueOf(4239.29);
      Complex complex15 = complex0.log();
      Complex complex16 = complex15.NaN.sinh();
      Complex complex17 = complex13.negate();
      Complex complex18 = new Complex((-2221), Double.POSITIVE_INFINITY);
      boolean boolean2 = complex10.NaN.equals(complex18);
      Complex complex19 = complex17.multiply((-2221));
      Complex complex20 = complex5.pow(complex13);
      Complex complex21 = complex9.subtract(922.0);
      Complex complex22 = complex21.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex1.ZERO.nthRoot(37);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(3021.190972705459);
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex2 = complex1.I.multiply(1652);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.ONE.subtract(complex0);
      int int0 = complex3.hashCode();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(2.829168201470791E294);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.I.pow((-1509.1617665561407));
      Complex complex4 = complex3.INF.pow(2.0);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.INF.pow(complex0);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex1.INF.reciprocal();
      Complex complex9 = new Complex((-1509.1617665561407));
      Complex complex10 = complex1.pow(complex9);
      Complex complex11 = complex9.cos();
      Complex complex12 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2426.841), (-2426.841));
      Complex complex1 = complex0.negate();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.tan();
      Object object0 = complex1.I.readResolve();
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = Complex.valueOf((-2426.841), 2.6102792042257208E-23);
      List<Complex> list0 = complex4.ONE.nthRoot(645);
      Object object1 = complex2.readResolve();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex1.subtract((-2426.841));
      Complex complex8 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.multiply(0.2531573176383972);
      Complex complex3 = complex1.add(1.2297456769063303E-80);
      Complex complex4 = complex3.ZERO.tan();
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.multiply((-1442));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.059959203156465E-8, 5.059959203156465E-8);
      Complex complex1 = Complex.valueOf(5.059959203156465E-8);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.divide(5.059959203156465E-8);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      double double0 = complex0.abs();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.INF.subtract(complex2);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex3.I.sin();
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex8.ZERO.subtract(1942.70024861);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.I.sin();
      Complex complex13 = complex11.ZERO.cosh();
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex4.I.log();
      Complex complex16 = complex1.cos();
      Complex complex17 = complex1.divide(complex5);
      Complex complex18 = Complex.valueOf(1525.0, (-1847.85384024006));
      Complex complex19 = complex4.createComplex(0.0, 1525.0);
      double double0 = complex5.abs();
      Complex complex20 = complex1.ZERO.negate();
      boolean boolean0 = complex17.ONE.equals("");
      String string0 = complex1.toString();
      Complex complex21 = complex3.add(1942.70024861);
      Complex complex22 = complex16.divide(0.30917787551879883);
      Complex complex23 = complex5.pow((-3216.646879813));
      boolean boolean1 = complex18.isNaN();
      Complex complex24 = Complex.valueOf(0.30917787551879883);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-820.1642360184302));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.I.multiply(1);
      Complex complex4 = complex2.INF.subtract((-820.1642360184302));
      List<Complex> list0 = complex4.ZERO.nthRoot(1270);
      Complex complex5 = Complex.valueOf((-820.1642360184302));
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.divide(2803.9793085966203);
      Complex complex8 = Complex.valueOf((-820.1642360184302));
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex8.acos();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex10.ZERO.pow(4640.35591);
      Object object1 = complex6.readResolve();
      Complex complex13 = complex1.multiply(1270);
      Complex complex14 = complex6.divide(0.0);
      Complex complex15 = complex9.sin();
      boolean boolean0 = complex2.equals(complex14);
      Complex complex16 = complex1.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex2.NaN.sinh();
      double double0 = complex0.abs();
      Complex complex5 = complex1.ONE.subtract(complex4);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex2.add(0.0);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex9.I.acos();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex11.NaN.divide(0.0);
      Complex complex13 = complex6.atan();
      Complex complex14 = complex13.asin();
      Complex complex15 = complex14.ZERO.asin();
      Complex complex16 = complex15.INF.negate();
      Complex complex17 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 4016.3743);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex4.I.pow(4016.3743);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.multiply(complex0);
      Complex complex8 = complex1.subtract(complex2);
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex0.ZERO.pow(complex6);
      Complex complex11 = complex6.log();
      Complex complex12 = complex11.add(6.283185307179586);
      Complex complex13 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.ZERO.sin();
      Complex complex15 = complex13.ONE.subtract(complex9);
      Complex complex16 = complex13.sqrt();
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = Complex.valueOf(4055.704958);
      Complex complex19 = Complex.valueOf(2.0);
      Complex complex20 = complex16.sin();
      Complex complex21 = complex4.negate();
      Complex complex22 = complex21.sqrt1z();
      Complex complex23 = complex19.add(complex20);
      double double0 = complex2.getArgument();
      double double1 = complex7.getArgument();
      Complex complex24 = complex20.reciprocal();
      Complex complex25 = complex24.ZERO.reciprocal();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.ZERO.multiply(2355.975824947);
      Complex complex4 = Complex.valueOf(1340.41063, 1340.41063);
      Complex complex5 = Complex.valueOf(2355.975824947);
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex5.log();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.INF.pow(complex5);
      double double0 = complex9.getArgument();
      Complex complex10 = complex0.I.multiply(95);
      Complex complex11 = complex0.atan();
      Complex complex12 = complex11.cos();
      Complex complex13 = Complex.valueOf((-890.1053136));
      Complex complex14 = complex12.INF.subtract((-504.4691529873));
      Complex complex15 = complex11.atan();
      Complex complex16 = complex14.ZERO.divide(complex10);
      Object object0 = complex10.readResolve();
      boolean boolean0 = complex12.isNaN();
      double double1 = complex4.getImaginary();
      Complex complex17 = complex12.add(complex0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-565.547036));
      Complex complex1 = complex0.divide((-1531.383751663));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.ONE.atan();
      double double1 = complex0.getReal();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.ONE.acos();
      boolean boolean0 = complex1.isNaN();
      double double2 = complex1.INF.getArgument();
      double double3 = complex3.getArgument();
      Complex complex6 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.subtract((-3482.524251928));
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = Complex.valueOf(1492.9944, 1492.9944);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex2.ZERO.add(complex3);
      Complex complex6 = complex5.ZERO.multiply(complex0);
      int int1 = complex0.hashCode();
      Complex complex7 = Complex.NaN;
      boolean boolean0 = complex2.NaN.equals(complex7);
      Complex complex8 = complex4.divide((-20.0));
      Complex complex9 = complex3.log();
      Complex complex10 = complex4.subtract(complex2);
      Complex complex11 = complex0.add(complex2);
      int int2 = complex10.hashCode();
      Complex complex12 = complex10.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex2.ZERO.cos();
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.add(complex1);
      int int0 = complex4.I.hashCode();
      double double1 = complex4.abs();
      Complex complex5 = Complex.valueOf((-2225.62));
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex5.ZERO.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex4.equals(object0);
      double double2 = complex4.getReal();
      Complex complex8 = complex0.ZERO.sin();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex4.pow(complex9);
      Complex complex11 = complex10.multiply(complex4);
      Complex complex12 = complex11.ONE.multiply(3.2188292385399854E205);
      String string0 = complex10.ONE.toString();
      double double3 = complex10.abs();
      Complex complex13 = complex11.multiply(complex4);
      Complex complex14 = complex11.asin();
      Complex complex15 = complex0.asin();
      double double4 = complex11.getReal();
      Complex complex16 = complex11.pow(0.0);
      double double5 = complex0.getImaginary();
      Complex complex17 = complex15.pow((-894.3216064468986));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = Complex.ONE;
      Object object0 = new Object();
      boolean boolean0 = complex0.NaN.equals(object0);
      double double1 = (-4613.209822008);
      Complex complex2 = Complex.valueOf((-4613.209822008));
      Complex complex3 = complex0.ZERO.multiply(0.0);
      Complex complex4 = complex0.subtract(complex1);
      int int0 = 0;
      try { 
        complex0.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
