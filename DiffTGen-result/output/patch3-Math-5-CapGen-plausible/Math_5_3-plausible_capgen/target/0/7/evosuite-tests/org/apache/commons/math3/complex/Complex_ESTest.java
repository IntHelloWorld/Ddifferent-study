/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:06:13 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2091497144395591E-85));
      Complex complex1 = Complex.valueOf((-1.2091497144395591E-85));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex1.add((-3160.4));
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex0.createComplex(1320.5, 1521.7);
      Complex complex6 = complex5.ZERO.subtract(1521.7);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex1.ONE.atan();
      Complex complex9 = complex6.I.subtract(complex2);
      Complex complex10 = complex6.NaN.sqrt1z();
      ComplexField complexField0 = complex10.INF.getField();
      String string0 = complex10.toString();
      Complex complex11 = complex0.divide((-2182.004293));
      double double0 = complex11.INF.abs();
      Complex complex12 = complex11.INF.acos();
      String string1 = complex6.toString();
      Complex complex13 = complex5.sqrt1z();
      double double1 = complex1.getImaginary();
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide((-1704.2));
      String string0 = complex1.INF.toString();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = complex7.multiply(0.0);
      Complex complex10 = complex9.NaN.multiply(20.0);
      Complex complex11 = complex9.ZERO.tanh();
      String string1 = complex11.INF.toString();
      Complex complex12 = complex5.ONE.sinh();
      Complex complex13 = complex12.I.divide(complex10);
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex6.reciprocal();
      Complex complex16 = complex14.ZERO.add(complex8);
      Complex complex17 = complex14.ZERO.cos();
      int int0 = complex14.ONE.hashCode();
      Complex complex18 = complex7.INF.pow(complex1);
      Complex complex19 = complex1.subtract((-4651.25005));
      Complex complex20 = complex5.atan();
      Complex complex21 = complex7.sin();
      String string2 = complex21.ZERO.toString();
      Complex complex22 = complex16.pow(0.0);
      Complex complex23 = Complex.valueOf(1.075991153717041, (-1704.2));
      Complex complex24 = complex17.multiply(1878.43352903);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-941.6), (-941.6));
      Complex complex1 = complex0.NaN.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.sqrt();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.divide(complex2);
      Object object0 = complex1.readResolve();
      boolean boolean1 = complex2.equals(complex0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.ZERO.cosh();
      Object object1 = complex5.readResolve();
      Complex complex9 = complex1.pow(0.0);
      Complex complex10 = complex2.INF.conjugate();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.I.exp();
      ComplexField complexField0 = complex12.ONE.getField();
      Complex complex13 = complex11.ZERO.asin();
      Complex complex14 = complex13.ZERO.tan();
      Complex complex15 = complex11.INF.multiply(1004);
      Complex complex16 = complex15.NaN.createComplex(1.080202341079712, 7.586808748646825E-281);
      Complex complex17 = Complex.valueOf((-2736.494157575165));
      ComplexField complexField1 = complex5.getField();
      Complex complex18 = complex12.reciprocal();
      Complex complex19 = complex9.log();
      Complex complex20 = complex16.multiply(complex13);
      List<Complex> list0 = complex18.nthRoot(1);
      Complex complex21 = complex13.sin();
      Complex complex22 = complex2.exp();
      Complex complex23 = complex12.multiply((double) 1004);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1758.72179));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = Complex.NaN;
      double double0 = complex3.getArgument();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex5.INF.createComplex(7.502618487550056E-238, Double.NaN);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex4.NaN.multiply(Double.NaN);
      ComplexField complexField0 = complex8.ONE.getField();
      ComplexField complexField1 = complex0.INF.getField();
      ComplexField complexField2 = complex3.getField();
      int int0 = complex3.ZERO.hashCode();
      double double1 = complex3.getImaginary();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex1.NaN.exp();
      int int1 = complex8.hashCode();
      Complex complex11 = complex2.divide(complex4);
      Complex complex12 = complex11.ZERO.conjugate();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex4.ONE.equals(object0);
      Complex complex13 = complex2.sqrt1z();
      Complex complex14 = complex1.createComplex(Double.NaN, (-1758.72179));
      Complex complex15 = complex8.atan();
      Complex complex16 = complex1.sqrt1z();
      String string0 = complex6.toString();
      Complex complex17 = complex16.exp();
      Complex complex18 = complex4.subtract(4.544122762558404E223);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.multiply(3462.436928);
      Complex complex3 = complex2.divide(990.7709);
      boolean boolean0 = complex3.I.equals("F0:H?<2a6og33Qa5|O1");
      Complex complex4 = complex3.I.divide(1236.29);
      Complex complex5 = complex3.ONE.cos();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex0.divide(3462.436928);
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex0.pow(3462.436928);
      Complex complex11 = complex9.exp();
      Complex complex12 = Complex.valueOf(8.472965161251656E-169);
      Complex complex13 = complex0.ZERO.tan();
      Complex complex14 = Complex.valueOf(990.7709);
      Object object1 = complex2.readResolve();
      boolean boolean2 = complex10.equals(object1);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.ONE.multiply(187);
      Complex complex4 = complex2.INF.divide(complex3);
      Complex complex5 = complex3.ZERO.sqrt();
      Object object0 = complex3.ZERO.readResolve();
      Object object1 = complex3.readResolve();
      boolean boolean0 = complex3.ONE.equals(object1);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.tanh();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex8 = complex6.INF.cosh();
      Complex complex9 = complex7.NaN.subtract(complex0);
      Complex complex10 = complex9.ONE.sin();
      double double0 = complex10.ZERO.abs();
      Complex complex11 = complex7.INF.divide(complex3);
      Complex complex12 = complex11.I.divide(complex1);
      Complex complex13 = complex12.INF.sin();
      Complex complex14 = complex13.ZERO.acos();
      boolean boolean1 = complex6.isInfinite();
      Complex complex15 = Complex.valueOf((-1288.38367304391), (-1288.38367304391));
      Complex complex16 = complex4.tan();
      Object object2 = complex7.readResolve();
      Complex complex17 = complex3.multiply(Double.NaN);
      Complex complex18 = Complex.valueOf(0.0, Double.NaN);
      boolean boolean2 = complex7.isInfinite();
      double double1 = complex8.getImaginary();
      Complex complex19 = complex9.negate();
      ComplexField complexField1 = complex19.ZERO.getField();
      Complex complex20 = complex10.createComplex((-1288.38367304391), 187);
      Complex complex21 = complex15.sqrt();
      Object object3 = complex0.readResolve();
      boolean boolean3 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1.1691184043884277, 8.929153091001965E-8);
      Complex complex1 = complex0.createComplex(1.1691184043884277, (-346.5978881));
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex2.INF.toString();
      double double0 = complex1.NaN.getArgument();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.log();
      int int0 = complex4.ONE.hashCode();
      Complex complex6 = complex3.INF.divide(complex4);
      Complex complex7 = complex3.NaN.tan();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex2.INF.sin();
      int int1 = complex9.hashCode();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex8.asin();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex2.INF.multiply(complex9);
      Complex complex15 = complex11.reciprocal();
      Complex complex16 = complex11.NaN.acos();
      Complex complex17 = complex13.NaN.conjugate();
      Complex complex18 = complex13.atan();
      Complex complex19 = complex18.ONE.pow(1.1691184043884277);
      Complex complex20 = complex19.I.multiply(0);
      Complex complex21 = complex18.INF.multiply(1660.405276);
      Complex complex22 = complex2.log();
      double double1 = complex8.getImaginary();
      boolean boolean0 = complex9.isNaN();
      Complex complex23 = complex13.divide((-1.5536658521931418E118));
      Complex complex24 = complex22.tan();
      Complex complex25 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2685.747789);
      Complex complex1 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.NaN.divide(complex4);
      boolean boolean1 = complex5.equals(complexField0);
      Complex complex6 = complex2.pow(2685.747789);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.ONE.add(2685.747789);
      double double0 = complex2.abs();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.exp();
      double double1 = complex4.I.getArgument();
      Complex complex11 = complex10.NaN.divide(1.0);
      Complex complex12 = Complex.valueOf(2685.747789);
      Complex complex13 = Complex.valueOf(2685.747789);
      Complex complex14 = complex13.ONE.reciprocal();
      Complex complex15 = complex1.sin();
      Complex complex16 = new Complex(1.0, 2685.747789);
      String string0 = complex16.NaN.toString();
      Complex complex17 = complex16.ZERO.multiply(0);
      Complex complex18 = complex9.pow(complex16);
      Complex complex19 = complex9.asin();
      Complex complex20 = complex0.INF.multiply(2318);
      Complex complex21 = complex8.NaN.pow(complex2);
      Complex complex22 = complex8.multiply(Double.POSITIVE_INFINITY);
      String string1 = complex16.toString();
      boolean boolean2 = complex4.equals(complex12);
      Complex complex23 = complex8.add(83.3346809743);
      int int0 = complex18.hashCode();
      Complex complex24 = complex14.asin();
      Complex complex25 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-945.7266348891211), 0.0);
      Complex complex1 = new Complex((-945.7266348891211));
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex0.ONE.conjugate();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      double double0 = complex5.INF.abs();
      Complex complex6 = complex5.subtract((-945.7266348891211));
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex6.ONE.createComplex((-945.7266348891211), 0.0);
      Complex complex9 = complex0.pow(2806.4476);
      Complex complex10 = complex9.ZERO.subtract((-9.522726334561169E100));
      boolean boolean0 = complex6.equals("");
      Complex complex11 = complex0.createComplex(395.2357, 1174.5068047352);
      Complex complex12 = complex9.ZERO.sqrt1z();
      Complex complex13 = complex10.NaN.log();
      Complex complex14 = complex10.multiply(37);
      Complex complex15 = complex13.multiply(0.0);
      boolean boolean1 = complex9.isInfinite();
      Complex complex16 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.I.add(complex4);
      Complex complex6 = new Complex((-1.0), 1055.988639);
      Complex complex7 = complex3.ZERO.subtract(complex6);
      boolean boolean0 = complex1.ZERO.equals(complex2);
      Complex complex8 = complex1.ONE.negate();
      Complex complex9 = complex8.add(1957.55395906);
      double double0 = complex0.ZERO.abs();
      double double1 = complex8.getArgument();
      double double2 = complex0.getImaginary();
      Complex complex10 = complex8.tanh();
      Complex complex11 = Complex.valueOf(0.6420594453811646);
      Complex complex12 = complex3.add((-1043.0));
      List<Complex> list0 = complex12.nthRoot(928);
      Complex complex13 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1955.3566, 1955.3566);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex2.NaN.pow(3640.24115908967);
      Complex complex5 = complex1.INF.multiply(complex3);
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.NaN.pow(0.0);
      double double0 = complex7.I.abs();
      int int0 = complex7.ZERO.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex3.pow(0.0);
      Complex complex9 = complex6.divide(0.0);
      Complex complex10 = complex9.ONE.multiply((-1));
      ComplexField complexField1 = complex5.getField();
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex0.createComplex(4198.78, (-2824.412487));
      Complex complex13 = complex5.I.log();
      Complex complex14 = complex12.subtract(complex2);
      boolean boolean0 = complex3.equals(complex11);
      Complex complex15 = complex10.reciprocal();
      Complex complex16 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 552.3578226706);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.INF.atan();
      double double0 = complex3.INF.abs();
      boolean boolean0 = complex2.ZERO.equals(complex0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex2.INF.atan();
      Complex complex7 = complex4.pow(complex0);
      double double1 = (-9.522726334561169E100);
      Complex complex8 = complex2.ZERO.cos();
      Complex complex9 = complex0.subtract((-9.522726334561169E100));
      int int0 = (-1128);
      int int1 = complex2.INF.hashCode();
      Complex complex10 = complex4.ONE.sin();
      Complex complex11 = complex0.NaN.divide(19.388633835);
      Complex complex12 = complex1.NaN.log();
      try { 
        complex9.I.nthRoot((-1128));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,128
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.add((-1723.11629));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.atan();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex5.add((-1723.11629));
      Complex complex7 = complex6.INF.exp();
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = Complex.valueOf((-1723.11629), 0.0);
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = Complex.valueOf(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.pow((-1163.02));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.INF.asin();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex5.ONE.tan();
      boolean boolean0 = complex8.equals(complex0);
      Complex complex10 = complex8.pow(Double.POSITIVE_INFINITY);
      double double0 = complex10.abs();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex3.divide(complex2);
      String string0 = complex12.toString();
      double double1 = complex3.abs();
      Complex complex13 = complex2.atan();
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = complex14.INF.createComplex((-461.3097), Double.NaN);
      Complex complex16 = complex1.acos();
      Complex complex17 = complex16.tanh();
      double double2 = complex6.getArgument();
      Complex complex18 = complex8.pow(complex9);
      Complex complex19 = complex12.pow(complex11);
      Complex complex20 = complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.divide((-2924.1344115));
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex4.ONE.atan();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex7 = complex4.multiply(complex5);
      Complex complex8 = complex0.INF.cosh();
      Complex complex9 = complex4.add(complex0);
      Complex complex10 = complex3.createComplex(0.0, 0.0);
      Complex complex11 = Complex.valueOf((-2924.1344115));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1792.9, 1792.9);
      Complex complex1 = complex0.INF.sinh();
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.INF.subtract(complex1);
      Complex complex6 = complex2.INF.reciprocal();
      int int0 = complex1.hashCode();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex7.NaN.log();
      double double1 = complex5.abs();
      Complex complex11 = Complex.valueOf(1.0, 2.4400089062515914E-8);
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = Complex.valueOf(2.4400089062515914E-8, 2.689237594604492);
      double double2 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cos();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.pow(1016.392);
      boolean boolean1 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.NaN.createComplex(403.54745854263, 0.0);
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex0.I.asin();
      String string0 = complex0.toString();
      Complex complex5 = complex0.subtract(Double.NaN);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex7.cosh();
      Object object0 = complex1.readResolve();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex5.ZERO.log();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex7 = complex0.ZERO.asin();
      Complex complex8 = complex7.ZERO.negate();
      double double0 = complex0.getReal();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex11.ZERO.negate();
      Complex complex13 = complex9.multiply(complex3);
      Complex complex14 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex15 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex16 = complex7.multiply(complex15);
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex17 = Complex.valueOf(3994.5891513, Double.POSITIVE_INFINITY);
      Complex complex18 = complex0.sin();
      Complex complex19 = complex18.reciprocal();
      Complex complex20 = complex18.acos();
      Complex complex21 = complex1.exp();
      Complex complex22 = complex11.subtract(complex8);
      Complex complex23 = complex15.pow(3994.5891513);
      Complex complex24 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex0.I.add(0.0);
      Complex complex5 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-214.184));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.NaN.exp();
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = complex0.divide((-3924.1132));
      Complex complex4 = complex0.INF.asin();
      Complex complex5 = complex4.ONE.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex4.NaN.multiply(complex3);
      Complex complex7 = complex1.NaN.sqrt1z();
      Complex complex8 = complex7.I.log();
      double double1 = complex7.getArgument();
      Complex complex9 = complex4.createComplex(0.0, 0.0);
      Complex complex10 = Complex.valueOf((-9.83920263200211E-9));
      Complex complex11 = complex9.acos();
      Complex complex12 = complex1.createComplex((-3924.1132), (-214.184));
      Complex complex13 = complex9.sqrt1z();
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = complex11.sqrt1z();
      Complex complex16 = complex4.subtract(0.0);
      double double2 = complex7.getImaginary();
      Complex complex17 = complex10.NaN.multiply(complex9);
      Complex complex18 = complex17.I.conjugate();
      Complex complex19 = complex9.NaN.cosh();
      Complex complex20 = complex11.ZERO.atan();
      Complex complex21 = complex14.asin();
      Complex complex22 = Complex.valueOf((-214.184));
      Complex complex23 = complex22.I.multiply(Double.NaN);
      Complex complex24 = complex13.divide(complex11);
      Complex complex25 = complex10.multiply(complex12);
      Complex complex26 = complex25.tanh();
      double double3 = complex6.getImaginary();
      Complex complex27 = complex19.log();
      Complex complex28 = complex19.multiply(1151);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-5396.390725139094), Double.NaN);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.NaN.sqrt1z();
      double double0 = complex0.ONE.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.atan();
      List<Complex> list0 = complex3.nthRoot(270);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = new Complex((-20.0));
      int int1 = complex3.NaN.hashCode();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.NaN.multiply((-20.0));
      Complex complex6 = complex5.ONE.add((double) 1);
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex7 = complex4.divide(6.65688196961235E66);
      Complex complex8 = complex5.negate();
      Complex complex9 = Complex.valueOf((-2961.3742175566645), (double) 1);
      Complex complex10 = complex8.atan();
      double double0 = complex9.INF.abs();
      List<Complex> list1 = complex5.nthRoot(535);
      Complex complex11 = complex9.tan();
      Complex complex12 = complex11.subtract(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.ONE.subtract((double) 535);
      boolean boolean0 = complex8.equals(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = new Complex((-849.9784410224987), 1.0);
      Complex complex5 = complex1.ZERO.subtract(complex4);
      Complex complex6 = complex0.INF.asin();
      boolean boolean0 = complex0.ZERO.equals(complex4);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex7.NaN.divide(complex1);
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex10.ZERO.add(1.0);
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow((-1279.6575302516662));
      Complex complex2 = complex0.ONE.log();
      double double0 = complex1.INF.abs();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-716.113349113467);
      Complex complex0 = new Complex(0.0, (-716.113349113467));
      Complex complex1 = complex0.ONE.sqrt1z();
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.2117127164185917E-77), (-3.2117127164185917E-77));
      Complex complex1 = complex0.ZERO.conjugate();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.add(895.96899921598);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.ZERO.createComplex(1685.32137, 1685.32137);
      double double0 = complex2.getArgument();
      String string0 = complex4.toString();
      Complex complex6 = complex3.add((-3.2117127164185917E-77));
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.valueOf((-2.076027209), 487.162700508105);
      Complex complex9 = complex7.exp();
      Complex complex10 = complex4.pow(complex2);
      Complex complex11 = complex10.divide(complex4);
      Complex complex12 = complex0.sin();
      ComplexField complexField0 = complex7.getField();
      Complex complex13 = complex12.add(4400.469022);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1538.55621258861);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.pow((-3524.4289));
      Complex complex2 = complex1.ZERO.subtract((-3524.4289));
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.createComplex(2132.09, 0.0);
      double double0 = complex1.abs();
      List<Complex> list0 = complex2.nthRoot(512);
      Complex complex5 = complex1.asin();
      Complex complex6 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1039.0));
      Complex complex1 = complex0.ZERO.createComplex((-2650.616747711093), 2453.3330818);
      ComplexField complexField0 = complex1.INF.getField();
      String string0 = complex0.NaN.toString();
      Complex complex2 = Complex.valueOf(649.0984278, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex4.ZERO.pow(complex0);
      Complex complex8 = complex3.INF.pow(complex1);
      Complex complex9 = complex8.INF.subtract(complex3);
      Complex complex10 = complex0.multiply(complex2);
      Complex complex11 = complex10.add(0.0);
      ComplexField complexField1 = complex11.getField();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex12.INF.exp();
      double double0 = complex12.abs();
      int int0 = complex1.hashCode();
      Complex complex14 = complex7.reciprocal();
      Complex complex15 = complex13.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1.9437762419688045E-8, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.subtract(1.9437762419688045E-8);
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.INF.multiply(3.444406231880653E-285);
      Complex complex3 = complex1.ZERO.pow(0.0);
      double double0 = complex0.ZERO.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.ZERO.createComplex((-1760.124), (-460.5));
      boolean boolean0 = complex3.equals(object0);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex3.acos();
      String string0 = complex4.ONE.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.multiply((-3374));
      Complex complex9 = complex2.multiply(complex4);
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex10.INF.subtract((-697.802399473435));
      String string1 = complex3.toString();
      Complex complex12 = complex0.tan();
      Complex complex13 = complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1497.2198363));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.NaN.divide(complex2);
      Complex complex9 = complex6.sin();
      ComplexField complexField0 = complex9.ONE.getField();
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex6.ZERO.cos();
      Complex complex12 = complex0.divide(783.313696);
      Complex complex13 = complex6.divide(193.8);
      Complex complex14 = complex1.sin();
      Complex complex15 = complex14.add(complex13);
      Complex complex16 = complex4.asin();
      Complex complex17 = complex16.ONE.sin();
      Complex complex18 = complex14.I.createComplex(193.8, 783.313696);
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex14.equals(object0);
      Complex complex19 = Complex.valueOf(783.313696);
      Complex complex20 = complex0.divide(complex19);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1380.908, 1380.908);
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex3.ZERO.negate();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex0.INF.sin();
      Complex complex10 = complex5.INF.multiply(complex7);
      Complex complex11 = complex6.pow(Double.NaN);
      Complex complex12 = complex5.I.divide(1380.908);
      int int1 = complex2.hashCode();
      Complex complex13 = complex2.ONE.cosh();
      Complex complex14 = complex6.divide(Double.NaN);
      Complex complex15 = Complex.valueOf(1380.908, 412.8920234243653);
      Complex complex16 = complex2.reciprocal();
      Complex complex17 = complex5.multiply(complex3);
      Complex complex18 = complex17.asin();
      Complex complex19 = complex18.ZERO.divide(412.8920234243653);
      double double0 = complex7.ZERO.abs();
      Complex complex20 = complex7.reciprocal();
      Complex complex21 = Complex.valueOf(1380.908);
      Complex complex22 = complex21.INF.exp();
      Complex complex23 = complex6.sin();
      boolean boolean0 = complex20.isInfinite();
      double double1 = complex12.getArgument();
      Complex complex24 = complex23.sqrt1z();
      Complex complex25 = Complex.valueOf(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.80875, (-967.315641754133));
      Complex complex1 = complex0.INF.multiply((-66));
      Complex complex2 = complex1.divide(20.0);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex0.pow(complex4);
      int int0 = complex0.I.hashCode();
      double double0 = complex0.INF.abs();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.log();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex5.tanh();
      Complex complex12 = complex11.ZERO.divide(2519.9903);
      Complex complex13 = complex12.log();
      double double1 = complex11.getReal();
      Complex complex14 = complex1.createComplex(121.8, 121.8);
      Object object1 = complex1.INF.readResolve();
      Complex complex15 = complex5.divide(complex11);
      Complex complex16 = complex1.divide(complex13);
      Complex complex17 = complex11.multiply(complex0);
      Complex complex18 = Complex.valueOf(1684.4889);
      Complex complex19 = complex5.add(complex18);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, 1625.958395);
      Complex complex6 = complex4.ZERO.subtract(1625.958395);
      Complex complex7 = complex0.multiply((-1980.56236));
      Complex complex8 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1783.90631457906), 1956.5);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.multiply(8.891090288030614E-265);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex4.ZERO.sinh();
      Complex complex8 = complex7.INF.multiply((-1783.90631457906));
      String string0 = complex0.toString();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex8.pow((-1783.90631457906));
      Complex complex11 = complex9.createComplex(1956.5, (-1783.90631457906));
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex10.add(complex8);
      Complex complex14 = Complex.I;
      Complex complex15 = complex11.add(complex14);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-4459.60098071301));
      Complex complex1 = complex0.NaN.subtract((-4459.60098071301));
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.createComplex(3381.001135, 20.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.NaN.add(complex4);
      String string0 = complex3.ZERO.toString();
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex1.ONE.createComplex((-3.807794163054899E-8), (-3.807794163054899E-8));
      String string1 = complex1.INF.toString();
      List<Complex> list0 = complex2.nthRoot(12);
      String string2 = complex5.toString();
      Complex complex9 = complex2.subtract(complex3);
      Complex complex10 = Complex.valueOf((-4459.60098071301), 240.237960418);
      ComplexField complexField0 = complex10.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = complex0.add(complex9);
      Complex complex12 = complex11.sin();
      ComplexField complexField1 = complex5.getField();
      Complex complex13 = complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-123.50425088), 2562.084153753172);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex1.I.log();
      double double0 = complex0.getArgument();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex0.INF.sin();
      Complex complex7 = complex2.ONE.subtract(complex6);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.sqrt();
      boolean boolean0 = complex3.isInfinite();
      Complex complex10 = complex8.atan();
      Complex complex11 = Complex.valueOf(1.6189636448908031);
      Complex complex12 = complex2.divide(complex11);
      Complex complex13 = complex12.I.multiply(17);
      Complex complex14 = complex10.divide(1.6189636448908031);
      boolean boolean1 = complex12.isNaN();
      Complex complex15 = complex11.I.divide(0.0);
      Object object0 = complex12.readResolve();
      boolean boolean2 = complex0.equals(object0);
      Complex complex16 = complex3.add(complex0);
      Complex complex17 = complex3.exp();
      String string0 = complex2.toString();
      Complex complex18 = Complex.ONE;
      Complex complex19 = complex7.add(complex18);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(complex1);
      int int0 = complex0.hashCode();
      Complex complex3 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.INF.add(1639.242591);
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.divide((-1.4611908070155308E-8));
      Complex complex6 = complex1.cos();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex5.NaN.sqrt();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex7.ONE.sqrt();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex11.NaN.tanh();
      Complex complex14 = complex13.subtract(complex10);
      ComplexField complexField0 = complex0.getField();
      Complex complex15 = complex0.add(1639.242591);
      Complex complex16 = complex15.NaN.pow(complex11);
      Complex complex17 = complex8.tanh();
      Complex complex18 = complex17.ZERO.sin();
      Complex complex19 = complex17.subtract(complex9);
      Complex complex20 = complex19.INF.cosh();
      Complex complex21 = complex7.negate();
      Complex complex22 = complex19.acos();
      Complex complex23 = complex3.sin();
      double double1 = complex18.getImaginary();
      Complex complex24 = complex5.sinh();
      Complex complex25 = complex1.subtract(0.0);
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex26 = complex22.add(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.cos();
      boolean boolean0 = complex0.ZERO.equals(complexField0);
      double double0 = complex2.abs();
      double double1 = complex2.getArgument();
      Complex complex3 = complex1.pow(-0.0);
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = complex3.ZERO.subtract(-0.0);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.INF.reciprocal();
      Complex complex11 = complex10.NaN.add(complex2);
      Complex complex12 = complex9.I.add(complex6);
      Complex complex13 = Complex.valueOf(-0.0);
      Object object0 = complex13.INF.readResolve();
      boolean boolean1 = complex4.isInfinite();
      Complex complex14 = complex2.subtract(0.0);
      Complex complex15 = complex14.INF.conjugate();
      Complex complex16 = complex14.ZERO.asin();
      Complex complex17 = complex14.add(-0.0);
      Complex complex18 = complex10.log();
      try { 
        complex15.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(17);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.INF.tan();
      Complex complex5 = complex1.INF.divide(complex2);
      Complex complex6 = complex2.I.pow(0.0);
      Complex complex7 = complex6.ZERO.add(complex2);
      double double0 = complex2.INF.abs();
      Complex complex8 = complex6.I.divide(complex0);
      int int0 = complex6.NaN.hashCode();
      Complex complex9 = complex1.divide((double) 17);
      Complex complex10 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3262.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = Complex.valueOf(3262.0, 3262.0);
      double double0 = complex0.getArgument();
      Object object1 = complex1.readResolve();
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex5.ZERO.subtract(3262.0);
      boolean boolean1 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.167203426361084, 2.167203426361084);
      Complex complex1 = complex0.I.sin();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.I.divide(complex1);
      List<Complex> list0 = complex4.I.nthRoot(1334);
      Complex complex5 = complex2.NaN.acos();
      List<Complex> list1 = complex4.I.nthRoot(17);
      Object object0 = complex5.NaN.readResolve();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex2.multiply(1);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex2.add(2.167203426361084);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex1.ONE.acos();
      Complex complex12 = complex0.add(2.167203426361084);
      Complex complex13 = complex1.ONE.atan();
      Complex complex14 = complex0.divide(complex1);
      Complex complex15 = complex12.divide(complex4);
      Complex complex16 = complex12.tanh();
      Complex complex17 = complex16.ONE.subtract((double) 1);
      Complex complex18 = complex17.NaN.log();
      Complex complex19 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.I.cosh();
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex4.NaN.pow(0.0);
      Complex complex6 = complex1.createComplex(0.0, 0.0);
      boolean boolean0 = complex6.ZERO.equals("Array contains an infinite element, {0} at index {1}");
      Complex complex7 = complex1.log();
      int int0 = complex4.hashCode();
      double double1 = complex4.getReal();
      double double2 = complex7.abs();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex2.pow(complex4);
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-1667.519279025), (-1667.519279025));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.INF.divide(complex0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex2.log();
      Complex complex7 = complex5.ONE.subtract((-20.0));
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex2.cos();
      Complex complex10 = Complex.valueOf((-1667.519279025));
      Complex complex11 = complex5.tanh();
      boolean boolean0 = complex7.equals(complex9);
      Complex complex12 = complex4.sin();
      Complex complex13 = complex0.multiply(734.9376302685);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1127.58676);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply((-3555.379140200413));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.acos();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex5.nthRoot(233);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex3.ONE.exp();
      double double0 = complex5.getArgument();
      double double1 = complex2.abs();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract((-477.153));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.subtract((-3197.20339));
      Complex complex2 = Complex.valueOf((-903.1296712506733), (-42.011204));
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex0.ONE.add(0.0);
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex5.ONE.exp();
      Complex complex9 = Complex.valueOf(1379.83803557, 1379.83803557);
      Complex complex10 = Complex.valueOf(1379.83803557);
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-939.32768149408));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex4.subtract((-1825.73297));
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      List<Complex> list0 = complex0.ZERO.nthRoot(1957);
      Complex complex1 = complex0.pow(864.3);
      Complex complex2 = complex1.ZERO.tanh();
      String string0 = complex1.toString();
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex1.INF.divide((double) 1957);
      double double0 = complex1.abs();
      Complex complex6 = complex2.ZERO.pow((-1235.2941542));
      List<Complex> list1 = complex6.nthRoot(1);
      double double1 = complex1.getArgument();
      double double2 = complex2.getReal();
      double double3 = complex1.getArgument();
      double double4 = complex5.getImaginary();
      Complex complex7 = complex5.pow(complex4);
      double double5 = complex4.abs();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(289.97, 6.283185307179586);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.NaN.sinh();
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex1.divide((-1953.26642754));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(369.88881169);
      Complex complex1 = complex0.asin();
      double double0 = complex0.getReal();
      Complex complex2 = Complex.valueOf((-995.29));
      Complex complex3 = complex0.divide((-995.29));
      Complex complex4 = complex0.multiply(1277);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 15.0);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex1.exp();
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-1.4010540194086646E-8), (-1.4010540194086646E-8));
      Complex complex1 = complex0.exp();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex2 = Complex.valueOf((-994.8984612563373));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.ONE.negate();
      String string0 = complex4.INF.toString();
      Complex complex5 = Complex.valueOf((-1.4010540194086646E-8), 461.2448266573);
      String string1 = complex0.toString();
      Complex complex6 = complex5.createComplex((-1.4010540194086646E-8), 2.3663015365600586);
      Complex complex7 = complex6.ZERO.reciprocal();
      double double0 = complex6.getArgument();
      Complex complex8 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-1647.5418578), (-1.4494150014095534E-8));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf(2197.19);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1317);
      double double0 = complex0.ONE.getArgument();
      Object object0 = complex0.readResolve();
      double double1 = complex0.NaN.abs();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.I.add((double) 1317);
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex3 = complex0.add((-1745.4820444846923));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex0.add(Double.NaN);
      Complex complex7 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.add(Double.POSITIVE_INFINITY);
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(7.868447965383903E-63);
      Complex complex2 = complex1.multiply(complex0);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex((-1888.836));
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.NaN.createComplex((-1.0), (-4834.0));
      double double0 = complex3.I.getArgument();
      int int0 = complex0.hashCode();
      Complex complex4 = complex3.divide((-1.0));
      Complex complex5 = Complex.valueOf(0.0);
      boolean boolean0 = complex5.equals(complex2);
      double double1 = complex5.getReal();
      Complex complex6 = complex5.sinh();
      ComplexField complexField0 = complex2.ZERO.getField();
      double double2 = complex6.abs();
      Complex complex7 = complex1.log();
      boolean boolean1 = complex6.isNaN();
      double double3 = complex2.getArgument();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.subtract(complex8);
      Complex complex10 = complex8.log();
      Complex complex11 = complex7.subtract(complex8);
      Complex complex12 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ONE.subtract(0.0);
      Complex complex7 = complex5.ONE.asin();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex5.sqrt();
      double double0 = complex8.getReal();
      Complex complex9 = complex5.pow(1.0707499980926514);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1353.0607), (-1353.0607));
      Complex complex1 = complex0.divide((-1353.0607));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-2709.74200474));
      int int0 = complex0.INF.hashCode();
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.valueOf((-2709.74200474), (-2503.3806146673937));
      Complex complex2 = complex0.multiply(2769.70538);
      Complex complex3 = complex2.ONE.multiply((-1003));
      Complex complex4 = complex0.INF.asin();
      double double0 = complex2.ZERO.getArgument();
      boolean boolean0 = complex2.equals(complex0);
      double double1 = complex2.abs();
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(38.26362828);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.cos();
      boolean boolean0 = complex1.ZERO.equals(complex2);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.ZERO.pow(38.26362828);
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex4.multiply(562.2149731358627);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex5.negate();
      Complex complex11 = complex8.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      try { 
        complex0.nthRoot((-929));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -929
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.691100820545433E-8), (-3.691100820545433E-8));
      Complex complex1 = complex0.sqrt1z();
      int int0 = 0;
      double double0 = 0.0;
      Complex complex2 = complex1.I.pow(0.0);
      int int1 = complex0.hashCode();
      try { 
        complex1.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply((-505));
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex((-73.3));
      Complex complex3 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      double double0 = complex0.ZERO.abs();
      Object object0 = new Object();
      double double1 = complex1.NaN.abs();
      boolean boolean0 = complex1.I.equals(object0);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.I.conjugate();
      String string0 = complex1.ZERO.toString();
      Object object1 = complex1.readResolve();
      double double2 = complex0.abs();
      Complex complex4 = complex2.ONE.conjugate();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.sqrt();
      ComplexField complexField0 = complex2.getField();
      Complex complex7 = complex0.divide(0.0);
      Object object2 = complex1.readResolve();
      double double3 = complex5.getArgument();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.I.multiply(1386.3737658);
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex10.ZERO.sqrt();
      Complex complex12 = complex2.asin();
      double double4 = complex6.getImaginary();
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex1.divide(complex8);
      double double5 = complex14.getArgument();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.2602433110285232E-7);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.subtract(0.0);
      Complex complex3 = Complex.valueOf(857.12, 354.0);
      List<Complex> list0 = complex1.nthRoot(913);
      Complex complex4 = complex2.divide(2.2602433110285232E-7);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(4079);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.NaN.createComplex(1.985773325073412E-7, (-267.78));
      Complex complex7 = complex4.INF.multiply(4079);
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = Complex.valueOf((double) 4079);
      Complex complex10 = complex4.ZERO.tanh();
      Complex complex11 = complex1.ZERO.cos();
      Complex complex12 = Complex.valueOf((double) 4079, 0.0);
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex1.sin();
      Complex complex15 = complex11.divide(0.0);
      Complex complex16 = complex14.I.multiply(0);
      Complex complex17 = complex1.createComplex(0.0, 4079);
      Complex complex18 = complex3.acos();
      Complex complex19 = complex1.asin();
      Complex complex20 = complex19.I.reciprocal();
      Complex complex21 = complex12.asin();
      String string0 = complex21.toString();
      Complex complex22 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.subtract(52.212694991);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex2.ZERO.pow(52.212694991);
      boolean boolean1 = complex3.INF.equals(complex1);
      Complex complex4 = Complex.valueOf(52.212694991, 52.212694991);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex2.multiply(complex4);
      Complex complex7 = Complex.valueOf((-3371.898257), (-3437.209476441));
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex4.atan();
      boolean boolean2 = complex9.INF.equals(complex1);
      Complex complex10 = complex6.reciprocal();
      double double0 = complex5.getReal();
      Complex complex11 = complex2.add(complex4);
      Complex complex12 = complex2.exp();
      Complex complex13 = complex12.ONE.pow(1.0);
      int int0 = complex13.hashCode();
      String string0 = complex4.toString();
      Complex complex14 = complex2.createComplex(0.2058066427707672, 0.6456501483917236);
      Complex complex15 = Complex.valueOf(0.2058066427707672);
      double double1 = complex5.abs();
      Complex complex16 = complex7.createComplex((-2550.222532800671), (-2550.222532800671));
      double double2 = complex16.NaN.getArgument();
      Complex complex17 = complex9.tan();
      Complex complex18 = complex17.subtract(complex6);
      boolean boolean3 = complex8.isInfinite();
      Complex complex19 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double double0 = 1.324784755706787;
      Complex complex0 = Complex.valueOf(1.324784755706787, 1.324784755706787);
      Complex complex1 = complex0.log();
      int int0 = (-615);
      try { 
        complex0.nthRoot((-615));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -615
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1565.71934151, 1565.71934151);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex2.ZERO.pow(complex1);
      Complex complex5 = complex2.ONE.createComplex((-2182.81237), 1.001616104682875E-7);
      Complex complex6 = complex0.createComplex(1565.71934151, (-306.0));
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.INF.multiply(1);
      ComplexField complexField0 = complex7.NaN.getField();
      boolean boolean0 = complex6.isNaN();
      ComplexField complexField1 = complex2.getField();
      double double0 = complex2.getImaginary();
      Complex complex9 = new Complex((-1959.2110589), 0.0);
      Complex complex10 = complex5.subtract(complex9);
      Complex complex11 = complex6.exp();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex5.tanh();
      int int0 = complex4.hashCode();
      Complex complex14 = complex11.sqrt();
      Complex complex15 = complex3.negate();
      Complex complex16 = complex1.reciprocal();
      Complex complex17 = complex11.INF.negate();
      boolean boolean1 = complex15.isInfinite();
      String string0 = complex11.toString();
      Complex complex18 = complex4.tan();
      ComplexField complexField2 = complex7.getField();
      Complex complex19 = complex1.multiply(complex11);
      Complex complex20 = complex18.divide(complex19);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.NaN.createComplex(321.894, 321.894);
      Complex complex6 = complex4.NaN.multiply(complex1);
      Complex complex7 = complex2.ZERO.subtract(1.0);
      int int0 = (-1666);
      Complex complex8 = complex2.ZERO.multiply((-1666));
      Complex complex9 = Complex.valueOf(1.0, (double) (-1666));
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(1565.554951422, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.valueOf((-338.5022674277941));
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex1.ONE.getArgument();
      double double1 = complex2.INF.getArgument();
      double double2 = complex0.getReal();
      Complex complex3 = complex1.I.reciprocal();
      double double3 = complex2.getArgument();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex2.reciprocal();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.ONE.log();
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.add((-170.171860917));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.NaN.divide(complex6);
      int int0 = complex1.INF.hashCode();
      Complex complex8 = Complex.valueOf((-170.171860917), 0.0);
      Complex complex9 = complex8.I.add(0.0);
      Complex complex10 = complex9.I.negate();
      double double0 = complex1.abs();
      Complex complex11 = complex1.multiply(20.0);
      Complex complex12 = complex1.ONE.sinh();
      Complex complex13 = complex9.divide(0.0);
      double double1 = complex1.getArgument();
      Object object0 = complex7.readResolve();
      String string0 = complex0.toString();
      Complex complex14 = complex10.atan();
  }
}
