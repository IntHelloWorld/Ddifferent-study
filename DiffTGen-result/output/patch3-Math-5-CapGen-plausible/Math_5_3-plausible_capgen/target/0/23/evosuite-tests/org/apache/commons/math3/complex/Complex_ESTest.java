/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:13:59 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.237807655758373E-100, (-279.9679556));
      Complex complex1 = complex0.add((-279.9679556));
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.I.divide(complex4);
      String string0 = complex1.toString();
      Complex complex6 = Complex.valueOf(1927.3325, 1927.3325);
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex2.exp();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.ZERO.createComplex(0.0, (-279.9679556));
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex0.sin();
      String string1 = complex12.I.toString();
      Complex complex14 = complex6.multiply(complex0);
      ComplexField complexField0 = complex12.getField();
      Complex complex15 = complex1.multiply(1);
      Complex complex16 = complex8.atan();
      Complex complex17 = complex2.negate();
      Complex complex18 = complex17.cosh();
      Complex complex19 = complex15.multiply(7);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex8.getArgument();
      Complex complex20 = complex19.cosh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1179.25));
      double double0 = complex0.ZERO.abs();
      Complex complex1 = new Complex(6411.49997763);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex2.cos();
      boolean boolean0 = complex1.equals("elements cannot be retrieved from a negative array index {0}");
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.I.createComplex(3806.4348447547, 0.0);
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex5.I.createComplex(3197.531953280482, (-1179.25));
      Complex complex9 = complex8.ONE.pow(0.0);
      Complex complex10 = Complex.valueOf((-393.7510973999651));
      Complex complex11 = complex10.I.subtract(complex3);
      Complex complex12 = complex5.NaN.subtract(complex0);
      Complex complex13 = complex1.INF.asin();
      Complex complex14 = complex13.I.sqrt1z();
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      Complex complex16 = complex13.divide(complex15);
      List<Complex> list0 = complex4.nthRoot(17);
      Complex complex17 = complex5.reciprocal();
      Complex complex18 = complex12.multiply(690);
      int int1 = complex7.hashCode();
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex14.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex1.I.equals(complex0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = new Complex(1832.813761, Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.ONE.add(complex4);
      Complex complex6 = complex2.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.negate();
      double double0 = complex6.getReal();
      Complex complex8 = complex7.NaN.pow((-887.8159531857787));
      double double1 = complex2.abs();
      Complex complex9 = complex6.INF.sqrt1z();
      boolean boolean1 = complex7.equals(complex0);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex11 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4500.5062829447, (-1076.0));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = new Complex(280.426);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.I.atan();
      Complex complex7 = complex0.ONE.pow(0.0);
      Complex complex8 = complex6.ONE.sin();
      Complex complex9 = complex8.INF.createComplex(280.426, 0.0);
      Complex complex10 = complex5.NaN.tanh();
      Complex complex11 = complex0.createComplex(4500.5062829447, 0.0);
      Complex complex12 = complex11.negate();
      Complex complex13 = complex6.subtract(complex5);
      Complex complex14 = complex13.ONE.add(complex1);
      Complex complex15 = complex14.ZERO.multiply((-1508));
      double double0 = complex12.getImaginary();
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex16.INF.negate();
      int int0 = complex3.hashCode();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.exp();
      double double0 = complex2.INF.abs();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.subtract(complex4);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex8.log();
      Complex complex10 = complex7.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.pow(Double.POSITIVE_INFINITY);
      int int0 = complex0.NaN.hashCode();
      Complex complex12 = complex9.cos();
      boolean boolean0 = complex12.equals(complex5);
      Complex complex13 = complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.35677260160446167, 9.420348186357043E-9);
      List<Complex> list0 = complex0.ONE.nthRoot(564);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex1.divide(complex0);
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.pow((-1447.496482096926));
      Complex complex6 = complex5.INF.divide((-1447.496482096926));
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex0.tan();
      double double0 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3656.283799402, (-169.55953148471));
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.subtract((-50.07));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.sin();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.sqrt1z();
      ComplexField complexField1 = complex3.getField();
      Complex complex4 = complex3.ZERO.multiply(2157);
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex4.multiply(complex1);
      double double0 = complex2.NaN.getArgument();
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex7.tanh();
      Complex complex9 = Complex.valueOf(20.0);
      double double1 = complex2.getImaginary();
      double double2 = complex5.getArgument();
      Complex complex10 = complex9.conjugate();
      ComplexField complexField2 = complex10.getField();
      Complex complex11 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1513.73625783134);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.multiply((-3187.015186));
      Complex complex3 = complex1.negate();
      double double0 = complex1.I.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.NaN.exp();
      boolean boolean0 = complex5.INF.equals(complex0);
      Object object0 = complex4.INF.readResolve();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.ZERO.multiply(4338.558917386427);
      Complex complex7 = complex0.tanh();
      String string0 = complex7.toString();
      Complex complex8 = Complex.valueOf(2.601412773132324, 2.601412773132324);
      Complex complex9 = complex8.negate();
      Complex complex10 = Complex.valueOf(4338.558917386427, 1513.73625783134);
      Complex complex11 = complex4.asin();
      Complex complex12 = complex11.sinh();
      ComplexField complexField0 = complex11.getField();
      Complex complex13 = complex8.sqrt1z();
      Complex complex14 = complex12.sin();
      double double1 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(1);
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.INF.sin();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex4.NaN.createComplex(1483.4, 1483.4);
      Complex complex10 = complex2.ONE.subtract((double) 1);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.sin();
      String string0 = complex11.NaN.toString();
      Complex complex13 = complex11.I.pow(1483.4);
      Complex complex14 = complex11.INF.atan();
      Complex complex15 = complex6.ONE.multiply(complex2);
      Complex complex16 = complex4.sqrt();
      boolean boolean0 = complex4.isInfinite();
      Complex complex17 = complex8.sinh();
      Complex complex18 = complex17.ONE.divide(1483.4);
      Complex complex19 = complex9.subtract((-706.33597368));
      Complex complex20 = complex0.pow((-706.33597368));
      Complex complex21 = complex19.NaN.acos();
      Complex complex22 = complex2.acos();
      Complex complex23 = complex21.conjugate();
      String string1 = complex10.toString();
      double double1 = complex22.getArgument();
      Complex complex24 = complex6.subtract(0.0);
      Complex complex25 = complex10.sqrt1z();
      Complex complex26 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1298.93593824), (-1298.93593824));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex1.ZERO.pow((-1298.93593824));
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex2.ZERO.reciprocal();
      Complex complex8 = complex7.ZERO.multiply((-2761));
      Complex complex9 = complex1.NaN.acos();
      Complex complex10 = complex9.ZERO.sqrt1z();
      Complex complex11 = complex1.multiply(complex2);
      Complex complex12 = complex2.INF.log();
      Complex complex13 = complex11.exp();
      double double0 = complex11.ONE.getArgument();
      int int0 = complex2.ZERO.hashCode();
      double double1 = complex0.ONE.getArgument();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      Complex complex15 = complex13.NaN.sqrt();
      Complex complex16 = complex11.cosh();
      Complex complex17 = complex15.INF.sin();
      Complex complex18 = complex13.multiply((-1374));
      Complex complex19 = complex1.tan();
      double double2 = complex11.getArgument();
      double double3 = complex2.getReal();
      Complex complex20 = complex18.I.createComplex(1.0, 0.0);
      Complex complex21 = complex11.log();
      Object object0 = complex19.readResolve();
      Complex complex22 = complex11.atan();
      Complex complex23 = complex12.add(3.046207992408485);
      Complex complex24 = complex23.I.log();
      Complex complex25 = complex5.cos();
      Complex complex26 = complex25.ZERO.multiply(249.014261);
      double double4 = complex18.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(338.8879665551, 275.0);
      Complex complex1 = Complex.valueOf((-20.0), 338.8879665551);
      Complex complex2 = complex0.NaN.multiply(275.0);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.NaN.subtract(338.8879665551);
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex1.I.acos();
      Complex complex7 = complex0.I.subtract(complex5);
      Complex complex8 = complex5.INF.cos();
      Complex complex9 = complex5.negate();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex9.equals(complex1);
      Complex complex10 = complex0.ZERO.exp();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex5.ONE.cos();
      Complex complex13 = complex4.INF.sqrt();
      ComplexField complexField0 = complex2.getField();
      List<Complex> list0 = complex8.nthRoot(2594);
      ComplexField complexField1 = complex4.getField();
      Complex complex14 = complex3.add(complex4);
      Complex complex15 = complex14.INF.cos();
      Complex complex16 = complex2.divide((-1397.788912));
      boolean boolean1 = complex3.isNaN();
      Complex complex17 = complex8.I.add(complex15);
      Complex complex18 = complex1.atan();
      boolean boolean2 = complex7.isInfinite();
      int int0 = complex9.hashCode();
      Complex complex19 = complex6.add(0.0);
      Complex complex20 = complex8.tan();
      Complex complex21 = complex17.subtract(0.681700412084173);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex4.ZERO.add(Double.NaN);
      Complex complex6 = complex4.I.subtract(complex1);
      Complex complex7 = complex0.INF.reciprocal();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.INF.createComplex(Double.NaN, (-4191.2756));
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.log();
      ComplexField complexField1 = complex2.INF.getField();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.INF.divide(0.0);
      Complex complex7 = complex2.INF.pow(complex5);
      int int0 = complex2.hashCode();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex5.negate();
      Complex complex12 = complex11.INF.subtract(complex3);
      Complex complex13 = complex11.ZERO.sqrt();
      Complex complex14 = complex13.ZERO.pow(complex7);
      Complex complex15 = complex7.acos();
      Complex complex16 = complex11.tanh();
      int int1 = complex4.hashCode();
      String string0 = complex6.toString();
      Complex complex17 = complex9.asin();
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex18 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex1.I.equals(complex0);
      double double0 = 0.0;
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ONE.subtract(complex2);
      double double1 = 152.2461;
      Complex complex5 = complex2.pow(152.2461);
      Complex complex6 = Complex.valueOf(566.56985207, 8.696863522320578E-8);
      double double2 = complex6.getImaginary();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex8.I.add(8.696863522320578E-8);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.I.add((-1.0));
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex2.multiply(1768);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex6.I.cosh();
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex0.createComplex((-1.0), 509.4305289333466);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex9.ONE.sin();
      double double0 = complex10.getArgument();
      double double1 = complex11.getArgument();
      double double2 = complex10.ONE.abs();
      Object object1 = complex10.readResolve();
      Complex complex12 = complex9.pow(complex10);
      int int0 = complex9.hashCode();
      Complex complex13 = complex1.subtract((double) 1768);
      Complex complex14 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = Complex.valueOf((-1360.2071), 4822.0);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.valueOf((-2862.277948925881));
      Complex complex9 = complex7.exp();
      Complex complex10 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.ZERO.equals("");
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex2.ZERO.subtract(1746.0997475128552);
      int int0 = complex3.hashCode();
      Complex complex5 = complex2.INF.tanh();
      Complex complex6 = complex5.ZERO.pow(complex3);
      Complex complex7 = complex2.ONE.divide(1746.0997475128552);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.divide(1746.0997475128552);
      double double0 = (-1.0);
      Complex complex10 = complex1.pow((-1.0));
      Complex complex11 = Complex.I;
      boolean boolean1 = complex2.equals(complex11);
      Complex complex12 = Complex.I;
      int int1 = 0;
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.divide(complex2);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ZERO.sqrt1z();
      int int1 = (-2190);
      try { 
        complex0.nthRoot((-2190));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,190
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 327.61647565);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.divide(complex0);
      String string0 = complex0.ONE.toString();
      String string1 = complex0.INF.toString();
      Complex complex3 = Complex.valueOf((-853.364301561), 327.61647565);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.INF.divide((-9.868269632073771E-8));
      Complex complex6 = complex4.ZERO.add((-2008.37422018007));
      Complex complex7 = complex6.I.multiply(complex0);
      Complex complex8 = complex4.ONE.atan();
      Complex complex9 = complex6.I.multiply((-2008.37422018007));
      Complex complex10 = complex7.I.sqrt();
      Complex complex11 = complex10.ONE.add(complex1);
      Complex complex12 = complex3.multiply((-853.364301561));
      Complex complex13 = complex12.ONE.sqrt1z();
      boolean boolean0 = complex12.I.equals(complex0);
      Complex complex14 = Complex.valueOf((-853.364301561), 0.0);
      double double0 = complex2.getImaginary();
      Complex complex15 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.atan();
      String string0 = complex3.toString();
      Complex complex4 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.atan();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex5 = complex3.subtract(complex4);
      String string0 = complex1.toString();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex6.INF.sin();
      Complex complex12 = complex6.negate();
      Complex complex13 = complex4.add(complex12);
      Complex complex14 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-50.77373526), 20.0);
      Complex complex1 = complex0.pow((-50.77373526));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.cos();
      double double0 = complex1.getImaginary();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf((-50.77373526));
      Complex complex6 = complex0.multiply(1125);
      Complex complex7 = complex6.createComplex(0.0, (-50.77373526));
      Complex complex8 = complex6.NaN.tanh();
      Complex complex9 = Complex.valueOf((-50.77373526), (-2012.9895645450817));
      Complex complex10 = complex6.NaN.multiply(complex9);
      Complex complex11 = complex10.I.sqrt();
      double double1 = complex3.getImaginary();
      Complex complex12 = complex5.acos();
      Complex complex13 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.ZERO.createComplex((-1540.7352061482788), 0.0);
      Complex complex5 = complex4.ZERO.multiply((-1370));
      Complex complex6 = complex4.ZERO.multiply(2800);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex7.INF.multiply(Double.NaN);
      Complex complex9 = complex7.INF.acos();
      Complex complex10 = complex7.ONE.subtract((double) 2800);
      Complex complex11 = complex1.createComplex(0.0, 0.0);
      Complex complex12 = complex11.multiply(complex9);
      Complex complex13 = complex12.ONE.divide(complex1);
      Complex complex14 = Complex.valueOf((-1.0902938113007961E-8), (-1478.635));
      Complex complex15 = complex11.NaN.multiply(complex7);
      String string0 = complex12.toString();
      ComplexField complexField0 = complex11.getField();
      Complex complex16 = complex5.atan();
      boolean boolean0 = complex9.isNaN();
      Complex complex17 = complex1.acos();
      double double0 = complex12.getArgument();
      boolean boolean1 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.ZERO.multiply(complex3);
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.I.sin();
      Complex complex8 = complex1.add((-2868.0));
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex2.negate();
      Complex complex11 = complex3.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2050.90741529364));
      Complex complex2 = complex1.ZERO.multiply((-2114));
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex0.pow(complex1);
      double double0 = complex4.getArgument();
      Complex complex5 = complex0.asin();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex6 = complex1.ONE.sqrt();
      Complex complex7 = Complex.valueOf((double) (-2114), (-2050.90741529364));
      Complex complex8 = complex7.cos();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex9 = complex5.I.multiply((-2114));
      Complex complex10 = Complex.valueOf(Double.NaN, (-900.7200025));
      Complex complex11 = complex9.NaN.subtract(complex6);
      String string0 = complex1.toString();
      Complex complex12 = complex10.ONE.atan();
      ComplexField complexField1 = complex10.getField();
      Complex complex13 = complex12.ONE.log();
      Complex complex14 = complex5.subtract(complex10);
      double double1 = complex0.abs();
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex12.equals(object1);
      Complex complex15 = complex3.cos();
      double double2 = complex10.getReal();
      Complex complex16 = complex13.add((double) (-2114));
      Complex complex17 = complex8.multiply((-2050.90741529364));
      Complex complex18 = complex9.add(complex17);
      String string1 = complex13.toString();
      Complex complex19 = complex15.subtract((-900.7200025));
      Complex complex20 = complex7.subtract((-2050.90741529364));
      ComplexField complexField2 = complex9.getField();
      String string2 = complex17.toString();
      Complex complex21 = complex4.multiply(1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.INF.atan();
      List<Complex> list0 = complex0.nthRoot(89);
      Complex complex4 = complex1.INF.sqrt();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.NaN.tan();
      double double0 = complex3.ZERO.abs();
      Complex complex7 = complex5.INF.cos();
      Complex complex8 = complex1.tanh();
      Complex complex9 = Complex.valueOf((double) 89, Double.NaN);
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex9.I.cosh();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex12.ONE.sinh();
      Complex complex14 = complex1.subtract(0.0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex15 = complex3.atan();
      Complex complex16 = Complex.valueOf((double) 89, 0.0);
      Complex complex17 = complex6.cos();
      Complex complex18 = complex17.subtract(0.6155023574829102);
      int int0 = complex16.hashCode();
      double double1 = complex1.getReal();
      Complex complex19 = complex18.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4894.8018391895);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.pow((-2281.67));
      double double0 = complex2.ZERO.abs();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex2.add(complex0);
      Complex complex8 = complex2.negate();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex2.createComplex(Double.NaN, 1.0);
      Complex complex11 = complex7.divide(complex4);
      Complex complex12 = complex3.subtract(complex8);
      Complex complex13 = complex8.pow(complex6);
      Complex complex14 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.createComplex(Double.NaN, (-1985.253487));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.log();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Object object1 = complex2.INF.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex4 = complex0.subtract(complex1);
      Object object3 = complex4.INF.readResolve();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex3.I.divide(complex0);
      try { 
        complex8.INF.nthRoot((-3247));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,247
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ONE.subtract((-1659.65127333917));
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex0.createComplex((-3870.6), (-3870.6));
      Complex complex5 = Complex.valueOf((-250.14759662585));
      Complex complex6 = complex4.log();
      Complex complex7 = complex0.ONE.pow(complex1);
      Complex complex8 = new Complex(0.0);
      boolean boolean0 = complex7.equals(complex8);
      Complex complex9 = complex7.INF.negate();
      Complex complex10 = complex9.ONE.subtract(complex6);
      Complex complex11 = complex6.cosh();
      boolean boolean1 = complex4.equals("<ecygX>m![v2W,ey");
      double double0 = complex6.getReal();
      Complex complex12 = complex0.exp();
      boolean boolean2 = complex4.isNaN();
      Complex complex13 = complex12.pow(20.0);
      try { 
        complex3.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.divide(1406.4531364984337);
      Complex complex3 = complex2.ZERO.createComplex(1406.4531364984337, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-2572.7268198881825), (-20.0));
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex8.multiply(complex0);
      double double0 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.ONE.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply((-2362));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = complex0.pow((-3.791840683760427E173));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(61.0412236470156);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex3.INF.multiply(2742.9323);
      Complex complex7 = complex3.multiply(984.3970371512976);
      Complex complex8 = complex2.ZERO.tan();
      double double0 = complex7.NaN.abs();
      Complex complex9 = complex7.INF.subtract(0.0);
      Complex complex10 = complex9.negate();
      double double1 = complex0.getArgument();
      double double2 = complex0.abs();
      Complex complex11 = complex3.multiply(5.106228040084293E259);
      double double3 = complex11.abs();
      Complex complex12 = Complex.valueOf(0.0, 2742.9323);
      Complex complex13 = complex4.multiply(complex3);
      boolean boolean0 = complex6.equals(complex4);
      Complex complex14 = complex5.sqrt();
      ComplexField complexField0 = complex2.getField();
      double double4 = complex11.getArgument();
      double double5 = complex1.abs();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cosh();
      double double0 = complex0.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.NaN.subtract(0.0);
      double double1 = complex3.abs();
      Complex complex5 = complex1.NaN.divide(complex0);
      double double2 = complex4.getArgument();
      Complex complex6 = complex1.sinh();
      double double3 = complex5.abs();
      Complex complex7 = complex5.createComplex(Double.POSITIVE_INFINITY, (-1093.297197));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.ONE.createComplex((-3679.5999231), 20.0);
      Complex complex4 = complex3.ZERO.divide((-2327.715258981));
      Complex complex5 = complex1.INF.multiply(1);
      double double0 = complex0.INF.abs();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      double double1 = complex6.I.getArgument();
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex5.conjugate();
      Complex complex9 = complex4.sqrt1z();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(4.6562769567905925E256, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.isInfinite();
      String string0 = complex0.toString();
      Complex complex3 = complex1.pow(4.6562769567905925E256);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex0.subtract(541.7731);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex3.NaN.subtract(3033.99);
      Complex complex5 = complex3.I.subtract((-6578.6));
      Complex complex6 = complex3.createComplex(0.0, (-1.0));
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.NaN.multiply(3033.99);
      Complex complex10 = complex8.ZERO.tan();
      Complex complex11 = complex6.INF.cos();
      Complex complex12 = complex3.ONE.divide(complex4);
      Complex complex13 = complex0.multiply(1664.1852253245008);
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex14.ZERO.sinh();
      Complex complex16 = Complex.ZERO;
      Complex complex17 = complex16.I.divide(complex5);
      Complex complex18 = complex6.divide(complex16);
      Complex complex19 = complex8.ZERO.subtract(0.0);
      Complex complex20 = complex4.conjugate();
      double double0 = complex6.ZERO.abs();
      Complex complex21 = complex14.pow(complex1);
      Complex complex22 = complex18.sin();
      Complex complex23 = complex10.ZERO.sqrt();
      double double1 = complex16.getReal();
      Complex complex24 = complex3.add(0.0);
      Complex complex25 = complex13.acos();
      Complex complex26 = complex3.add(0.0);
      Complex complex27 = complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(555.106325, 0.0);
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(555.106325);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2156.7));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.ZERO.add(0.0);
      Complex complex5 = complex4.ZERO.pow((-2341.3630297781765));
      Complex complex6 = Complex.valueOf((-2156.7), (-2203.1788781082));
      Complex complex7 = complex1.divide(1.651944637298584);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(1.4815967715704613E-8, (-1321.543636638));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.subtract(1.4815967715704613E-8);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex2.acos();
      double double0 = complex7.ONE.abs();
      Complex complex8 = complex7.pow(1027.5062);
      Complex complex9 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      boolean boolean0 = complex0.NaN.equals(complexField0);
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.divide(1444.388);
      Complex complex3 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex1.I.getArgument();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.subtract(1.5707963267948966);
      String string0 = complex6.toString();
      String string1 = complex4.toString();
      Complex complex7 = complex0.pow(0.0);
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex5.divide(complex1);
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex5.divide((-4488.012906));
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex0.log();
      Complex complex14 = Complex.valueOf(0.12384103238582611);
      Complex complex15 = complex10.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1172.789421385));
      Complex complex2 = complex1.NaN.subtract(958.779667706748);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.cosh();
      try { 
        complex0.nthRoot((-1919));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,919
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.createComplex(0.0, 0.0);
      boolean boolean0 = complex2.ONE.equals(complex0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.valueOf((-280.0));
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.valueOf((-280.0));
      List<Complex> list0 = complex5.nthRoot(241);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1264.4728));
      Complex complex1 = complex0.atan();
      double double0 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.asin();
      int int0 = complex1.hashCode();
      double double1 = complex0.abs();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.INF.pow(1098.13);
      Complex complex7 = complex4.subtract((-1264.4728));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-210.0554508), (-210.0554508));
      Complex complex1 = complex0.ZERO.subtract((-210.0554508));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.valueOf((-210.0554508), 0.0);
      Complex complex7 = Complex.valueOf((-210.0554508));
      int int0 = complex3.hashCode();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.add(complex8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.asin();
      ComplexField complexField0 = complex0.I.getField();
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.pow(0.0);
      int int0 = complex3.hashCode();
      Complex complex6 = complex4.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(2597.69);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.acos();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex(0.0, 20.0);
      Complex complex2 = complex0.I.createComplex(0.0, 1659.222914);
      Complex complex3 = Complex.INF;
      boolean boolean0 = complex1.INF.equals(complex3);
      String string0 = complex0.toString();
      Complex complex4 = complex3.add(2326.7);
      String string1 = complex4.NaN.toString();
      double double0 = complex1.getImaginary();
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex3.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.ZERO.add(complex6);
      Complex complex8 = complex0.cos();
      String string0 = complex8.ONE.toString();
      Complex complex9 = complex3.divide(0.0);
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex11.ONE.multiply(550);
      String string1 = complex12.ONE.toString();
      Complex complex13 = complex11.cosh();
      Complex complex14 = Complex.valueOf((-2495.7399022114037));
      Complex complex15 = complex1.sqrt();
      ComplexField complexField0 = complex15.getField();
      Complex complex16 = complex4.tan();
      int int0 = complex16.ZERO.hashCode();
      Complex complex17 = complex3.tan();
      Complex complex18 = complex2.tanh();
      Complex complex19 = complex11.negate();
      Complex complex20 = complex0.atan();
      String string2 = complex20.INF.toString();
      boolean boolean0 = complex10.equals("(1.0, 0.0)");
      Complex complex21 = complex14.tanh();
      Complex complex22 = Complex.valueOf((-2495.7399022114037));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(885.91);
      Complex complex1 = complex0.ZERO.atan();
      double double0 = complex0.getArgument();
      Complex complex2 = new Complex(885.91);
      Complex complex3 = complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.NaN.subtract(0.0);
      Complex complex4 = complex0.multiply((-165.13715));
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex((-2040.963043115144), (-2040.963043115144));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.add(2.053884626293416E-85);
      double double0 = complex1.getImaginary();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.acos();
      double double0 = complex1.I.abs();
      Complex complex5 = complex0.sqrt();
      try { 
        complex1.NaN.nthRoot((-2598));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,598
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow(Double.NaN);
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-246.30791));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.INF.multiply((-2342));
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ZERO.acos();
      double double1 = complex0.getReal();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.multiply(790);
      Complex complex2 = complex0.reciprocal();
      double double1 = complex2.getReal();
      Complex complex3 = complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-4075.854545), 4008.076106955);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = Complex.ZERO;
      String string0 = complex8.ZERO.toString();
      Complex complex9 = Complex.valueOf((-4075.854545));
      Complex complex10 = complex1.add(complex8);
      boolean boolean0 = complex10.isInfinite();
      ComplexField complexField0 = complex5.getField();
      double double0 = complex4.getArgument();
      Complex complex11 = complex8.I.conjugate();
      Complex complex12 = complex2.acos();
      Complex complex13 = complex8.multiply((-2618));
      Complex complex14 = complex6.divide(complex9);
      String string1 = complex14.toString();
      Complex complex15 = complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex1.ONE.sin();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.conjugate();
      int int0 = complex5.hashCode();
      Complex complex8 = complex5.ONE.cos();
      Complex complex9 = complex6.INF.exp();
      Complex complex10 = complex9.NaN.sqrt1z();
      Complex complex11 = complex0.subtract(complex7);
      Complex complex12 = complex11.ONE.pow((-845.923879333892));
      Complex complex13 = Complex.valueOf((-20.0));
      Complex complex14 = complex12.I.negate();
      Complex complex15 = complex13.NaN.divide(0.0);
      Complex complex16 = complex6.divide((-3853.78969));
      Complex complex17 = Complex.valueOf((-3428.31273));
      Complex complex18 = complex15.sqrt();
      Complex complex19 = complex11.sqrt1z();
      Complex complex20 = complex12.sqrt1z();
      Complex complex21 = complex4.reciprocal();
      Complex complex22 = complex13.subtract(complex12);
      Object object1 = complex15.INF.readResolve();
      Complex complex23 = complex15.cos();
      int int1 = complex12.hashCode();
      Complex complex24 = complex18.exp();
      Complex complex25 = complex21.add((-5.002774317612589E-8));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2783.566877002866), (-2783.566877002866));
      Complex complex1 = complex0.NaN.subtract((-2703.8396501714014));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.ONE.add(0.0);
      Complex complex5 = complex3.INF.reciprocal();
      List<Complex> list0 = complex1.I.nthRoot(37);
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex3.I.multiply(0.07073719799518585);
      boolean boolean0 = complex7.ZERO.equals(complex1);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex1.multiply((-2703.8396501714014));
      Complex complex12 = complex8.cos();
      double double0 = complex11.getImaginary();
      Complex complex13 = complex2.divide(Double.NaN);
      Complex complex14 = complex13.ONE.add(4.546040329134E-311);
      Complex complex15 = complex14.I.sqrt1z();
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = complex16.I.log();
      List<Complex> list1 = complex11.nthRoot(7);
      Complex complex18 = complex16.reciprocal();
      Complex complex19 = complex1.negate();
      List<Complex> list2 = complex2.nthRoot(7);
      Complex complex20 = complex0.tan();
      Complex complex21 = complex20.I.reciprocal();
      String string0 = complex15.toString();
      Complex complex22 = complex17.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = Complex.valueOf(2390.2, 5.672812341879918E178);
      Complex complex6 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.multiply((-1589));
      Complex complex4 = complex3.acos();
      Complex complex5 = new Complex((-1589));
      Complex complex6 = complex0.NaN.add((double) (-1589));
      Complex complex7 = complex6.INF.multiply((-1589));
      boolean boolean0 = complex4.INF.equals(complex5);
      double double0 = complex4.ZERO.abs();
      String string0 = complex3.toString();
      Complex complex8 = complex5.multiply(complex4);
      Complex complex9 = complex5.ZERO.add(complex0);
      Complex complex10 = Complex.valueOf((-1675.2524), 4247.9978169319);
      Complex complex11 = complex10.NaN.log();
      ComplexField complexField1 = complex5.getField();
      Complex complex12 = complex0.pow(2208.70949);
      Complex complex13 = complex1.log();
      Complex complex14 = complex5.sin();
      String string1 = complex3.toString();
      Complex complex15 = complex12.divide((double) (-1589));
      Complex complex16 = Complex.valueOf((double) (-1589), 1539.6100074244);
      Complex complex17 = complex7.conjugate();
      double double1 = complex5.getImaginary();
      Complex complex18 = complex16.cos();
      Complex complex19 = complex9.createComplex(0.0, 1517.19994617093);
      Complex complex20 = complex17.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-1528.4947515));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.add(complex0);
      Complex complex7 = complex4.multiply((-1528.4947515));
      boolean boolean0 = complex3.isNaN();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(4.9436516047443576E-154);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex2.ZERO.tanh();
      Complex complex6 = complex0.exp();
      int int0 = complex0.ZERO.hashCode();
      Complex complex7 = complex0.ZERO.multiply(1.1795268640216787E-8);
      Complex complex8 = Complex.valueOf((-2226.3724), 1827.576963);
      Complex complex9 = complex5.multiply(941);
      Complex complex10 = complex9.multiply(complex5);
      double double0 = complex0.getArgument();
      Complex complex11 = complex2.pow(1758.0487448);
      Complex complex12 = complex11.sinh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex13 = complex6.divide(1758.0487448);
      boolean boolean1 = complex1.I.equals(complex13);
      Complex complex14 = complex7.pow((-700.126));
      Complex complex15 = complex2.multiply((-3620.871013));
      Complex complex16 = complex14.ZERO.tanh();
      Complex complex17 = complex2.tanh();
      List<Complex> list0 = complex7.nthRoot(941);
      Complex complex18 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      String string0 = complex1.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-5.67996159922899E-5);
      Complex complex1 = Complex.valueOf((-5.67996159922899E-5), (-5.67996159922899E-5));
      Complex complex2 = complex1.I.createComplex((-5.67996159922899E-5), (-5.67996159922899E-5));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex0.ZERO.equals(object0);
      double double1 = 3848.648344;
      Complex complex3 = Complex.valueOf(3848.648344, 0.3764009475708008);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex0.NaN.tanh();
      Complex complex6 = complex5.I.tanh();
      try { 
        complex5.INF.nthRoot((-2280));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,280
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.subtract(0.36426329612731934);
      Complex complex2 = complex1.INF.divide(0.36426329612731934);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.INF.cos();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.subtract(complex2);
      int int0 = complex2.ONE.hashCode();
      Complex complex8 = complex1.pow(1129.7722201962);
      Complex complex9 = complex1.pow(1129.7722201962);
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex10.INF.add(1129.7722201962);
      ComplexField complexField0 = complex10.I.getField();
      Complex complex12 = complex8.multiply(0.36426329612731934);
      Complex complex13 = complex12.NaN.add(complex9);
      Object object0 = complex6.readResolve();
      Complex complex14 = complex3.sqrt();
      double double0 = complex6.getImaginary();
      Complex complex15 = complex2.createComplex(1129.7722201962, 1129.7722201962);
      Complex complex16 = complex0.add(0.36426329612731934);
      Complex complex17 = complex8.subtract(Double.NaN);
  }
}
