/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:14:00 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.INF.subtract(6.283185307179586);
      Complex complex5 = complex1.INF.cosh();
      boolean boolean0 = complex0.I.equals(object0);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex0.I.createComplex(1489.51067723, Double.NaN);
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex8.I.log();
      Complex complex10 = complex1.subtract(558.94664);
      double double2 = complex10.INF.abs();
      Complex complex11 = complex1.ONE.conjugate();
      Complex complex12 = complex7.INF.sinh();
      Complex complex13 = complex7.multiply((-1277));
      Complex complex14 = complex13.NaN.sin();
      Complex complex15 = complex13.asin();
      Complex complex16 = complex12.conjugate();
      Complex complex17 = complex16.NaN.log();
      double double3 = complex14.getReal();
      Complex complex18 = complex13.INF.log();
      Complex complex19 = complex5.sin();
      Complex complex20 = complex14.createComplex(1489.51067723, Double.NaN);
      Complex complex21 = complex11.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1.6038109389511792E-28);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.add(1.6038109389511792E-28);
      Complex complex2 = complex0.pow(1.6038109389511792E-28);
      Complex complex3 = complex1.NaN.multiply(1814);
      int int1 = complex3.hashCode();
      Complex complex4 = complex1.I.multiply(1814);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.ONE.pow(complex8);
      Complex complex10 = complex6.ONE.pow((-4838.651295714172));
      Complex complex11 = complex1.ZERO.cos();
      Complex complex12 = complex1.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex7.getArgument();
      Complex complex13 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.createComplex((-4838.651295714172), (-407.01689849));
      String string0 = complex1.toString();
      double double1 = complex13.abs();
      Complex complex15 = complex3.acos();
      double double2 = complex9.getArgument();
      Complex complex16 = complex1.cos();
      double double3 = complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex3.INF.asin();
      Complex complex7 = complex2.I.exp();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex0.add(complex2);
      int int0 = complex3.hashCode();
      Complex complex10 = complex9.NaN.reciprocal();
      Complex complex11 = complex9.ONE.multiply(0.0);
      Complex complex12 = complex10.I.atan();
      ComplexField complexField0 = complex9.INF.getField();
      Complex complex13 = complex9.multiply((-1051.68));
      Complex complex14 = complex13.NaN.subtract((-1051.68));
      double double0 = complex4.getReal();
      Complex complex15 = complex2.ONE.reciprocal();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex7.add(complex9);
      Complex complex18 = complex3.multiply((-2557));
      Complex complex19 = complex3.tanh();
      Complex complex20 = complex6.divide((-1484.89672863));
      Complex complex21 = complex16.multiply(1);
      Complex complex22 = complex3.createComplex(1, 0.041666663879186654);
      Complex complex23 = complex20.conjugate();
      Complex complex24 = complex18.sinh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2329.6502572178674);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.multiply(796);
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex3.divide((-1109.256322));
      Complex complex7 = complex0.NaN.createComplex(0.0, (-537.0));
      Complex complex8 = Complex.valueOf((-1109.256322), (-1109.256322));
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex7.NaN.tanh();
      Complex complex10 = complex7.INF.exp();
      Complex complex11 = complex7.NaN.tanh();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex7.asin();
      Object object0 = complex7.readResolve();
      Object object1 = complex12.ZERO.readResolve();
      Complex complex14 = complex12.atan();
      Complex complex15 = complex12.ONE.multiply(0);
      boolean boolean0 = complex7.isInfinite();
      Complex complex16 = complex7.multiply(complex12);
      boolean boolean1 = complex16.ZERO.equals((Object) null);
      double double1 = complex9.getReal();
      Complex complex17 = complex2.I.log();
      Complex complex18 = complex4.cosh();
      double double2 = complex7.getArgument();
      Complex complex19 = complex7.divide(complex0);
      Complex complex20 = complex5.add(complex0);
      Complex complex21 = Complex.valueOf(0.0);
      Complex complex22 = complex20.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex2.NaN.tan();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex1.add(complex0);
      double double1 = complex4.getArgument();
      double double2 = complex5.getReal();
      Complex complex6 = complex1.INF.multiply(0);
      Complex complex7 = complex5.multiply((-642));
      Complex complex8 = complex7.ZERO.add(Double.NaN);
      Complex complex9 = complex7.ONE.add(complex3);
      Complex complex10 = complex1.ZERO.exp();
      Complex complex11 = Complex.valueOf(0.0, (double) (-642));
      Complex complex12 = complex1.INF.createComplex((-1203.247), 0.0);
      Complex complex13 = complex10.INF.divide(complex8);
      Complex complex14 = complex4.negate();
      int int0 = complex3.hashCode();
      Complex complex15 = new Complex(975.704);
      Complex complex16 = complex14.NaN.pow(complex15);
      Complex complex17 = complex5.reciprocal();
      Complex complex18 = complex17.cos();
      Complex complex19 = complex14.subtract(3740.85);
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-1037.01156230868));
      Complex complex2 = complex0.divide(1309.3344);
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex1.ONE.divide(complex0);
      Object object0 = complex0.I.readResolve();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-1382.783);
      Complex complex0 = Complex.valueOf((-1382.783));
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex2 = complex0.I.pow(complex1);
      try { 
        complex2.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Object object0 = complex1.ONE.readResolve();
      String string0 = complex0.toString();
      Complex complex2 = complex0.pow(968.48998420789);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.add(complex1);
      double double0 = complex3.getReal();
      Complex complex4 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.621509038251498E-9, (-11.33400420337));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.multiply((-11.33400420337));
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.ZERO.cosh();
      Complex complex5 = complex2.INF.add(complex3);
      Complex complex6 = Complex.valueOf((-1169.76334246204), 5.621509038251498E-9);
      Complex complex7 = complex6.NaN.pow(1.0);
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex0.log();
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3457.026716947));
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.sin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.ZERO.createComplex(3598.285594, 0.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.ONE.multiply(1);
      Complex complex7 = complex0.INF.atan();
      Complex complex8 = complex5.sin();
      Complex complex9 = Complex.valueOf((-3457.026716947));
      Complex complex10 = complex9.INF.multiply(complex1);
      Complex complex11 = complex5.pow((double) 1);
      Complex complex12 = complex2.pow(complex8);
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex12.atan();
      Complex complex15 = complex8.multiply(0.0);
      double double1 = complex12.abs();
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.reciprocal();
      ComplexField complexField1 = complex0.ZERO.getField();
      boolean boolean0 = complex3.I.equals(complexField0);
      String string0 = complex3.toString();
      Complex complex4 = Complex.valueOf(5123.1026457439, 0.3333333333333333);
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1.378919824418909E-7);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.add(1.378919824418909E-7);
      List<Complex> list0 = complex2.ONE.nthRoot(1);
      Complex complex4 = complex0.I.createComplex(1.378919824418909E-7, (-226.18421581));
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.asin();
      boolean boolean1 = complex6.equals("P}H@");
      double double0 = complex0.abs();
      Complex complex7 = complex0.sin();
      Complex complex8 = Complex.valueOf((double) 1, Double.NaN);
      Complex complex9 = complex6.sin();
      Complex complex10 = complex0.multiply(4.2035646586788297E-246);
      Complex complex11 = complex4.multiply(complex10);
      Object object1 = complex2.readResolve();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.NaN.add(complex1);
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex5.I.acos();
      boolean boolean0 = complex5.I.equals(complex0);
      double double0 = complex0.abs();
      boolean boolean1 = complex0.isNaN();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf(136.2905063);
      Complex complex9 = complex1.createComplex(0.0, 0.0);
      List<Complex> list0 = complex9.NaN.nthRoot(3338);
      Complex complex10 = Complex.valueOf(136.2905063, (-834.345946));
      Complex complex11 = complex9.pow(396.1105156929476);
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex2.ONE.sqrt1z();
      Complex complex7 = complex6.I.add(complex0);
      Complex complex8 = complex5.INF.negate();
      Complex complex9 = complex8.NaN.add(0.0);
      Complex complex10 = complex9.ONE.conjugate();
      int int0 = complex0.I.hashCode();
      List<Complex> list0 = complex5.INF.nthRoot(1);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex8.multiply(complex11);
      double double0 = complex2.getImaginary();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex9.multiply(complex10);
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1812.08063);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.divide(1812.08063);
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex0.ONE.tan();
      List<Complex> list0 = complex2.ONE.nthRoot(671);
      int int0 = complex3.NaN.hashCode();
      Complex complex6 = complex3.INF.tanh();
      Complex complex7 = Complex.valueOf(1812.08063, 1812.08063);
      Complex complex8 = complex2.ZERO.sqrt1z();
      Object object0 = complex3.readResolve();
      Complex complex9 = complex2.conjugate();
      List<Complex> list1 = complex9.I.nthRoot(505);
      Complex complex10 = complex9.ONE.multiply((-1180));
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.ZERO.sqrt1z();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex10.sqrt();
      Complex complex15 = complex14.acos();
      Complex complex16 = complex7.divide(complex3);
      double double0 = complex9.getReal();
      Complex complex17 = complex11.subtract((-1047.015964035));
      Complex complex18 = complex15.acos();
      Complex complex19 = complex4.pow(2625.025732233454);
      Complex complex20 = Complex.valueOf((-1047.015964035));
      Complex complex21 = complex2.createComplex(1.1551692104697154E-8, 0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.I.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.subtract(complex0);
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex5 = complex0.INF.multiply((double) 1);
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex0.I.createComplex((-5.47315553588771E-8), 0.0);
      Complex complex10 = complex1.ZERO.subtract(complex5);
      int int1 = complex8.NaN.hashCode();
      Complex complex11 = complex2.add(complex1);
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex3.INF.multiply(0.0);
      Complex complex15 = complex2.add(complex0);
      double double0 = complex3.abs();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 3326.4454745283;
      Complex complex0 = Complex.valueOf(3326.4454745283, 3326.4454745283);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.ONE.equals(complex1);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.subtract(0.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.NaN.multiply(65);
      Complex complex6 = Complex.valueOf(0.0);
      Object object0 = complex3.readResolve();
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex3.multiply(0.0);
      Complex complex10 = complex7.sinh();
      double double0 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(4819.538617124282, 4819.538617124282);
      Complex complex1 = complex0.divide(4819.538617124282);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex3.I.subtract(2.325337720526947E133);
      Complex complex6 = Complex.valueOf(4819.538617124282);
      Complex complex7 = complex0.createComplex(2.325337720526947E133, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.asin();
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex0.tan();
      String string0 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2401.673952), (-2401.673952));
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex3.subtract(complex2);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.pow(complex0);
      double double2 = complex6.ONE.getArgument();
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex6.I.multiply((-2.356194490192345));
      double double3 = complex0.getImaginary();
      boolean boolean1 = complex6.equals("(");
      Complex complex8 = complex1.createComplex((-2123.45613), 0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.I.add(0.0);
      Complex complex3 = Complex.valueOf(0.0, 568.1471835876848);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex4.isNaN();
      boolean boolean1 = complex0.isInfinite();
      double double0 = complex5.getImaginary();
      Complex complex7 = complex3.divide(complex4);
      Complex complex8 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(9.086660081726823E-80, 0.657863974571228);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.pow(9.086660081726823E-80);
      Complex complex3 = complex1.cosh();
      String string0 = complex3.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = Complex.ZERO;
      boolean boolean1 = complex2.equals(complex4);
      double double0 = complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1457.7370660404029, (-995.83861));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.acos();
      Object object0 = new Object();
      boolean boolean0 = complex1.ONE.equals(object0);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      boolean boolean1 = complex0.INF.equals(complex4);
      Complex complex5 = complex4.ZERO.multiply(0.0);
      Complex complex6 = complex5.ZERO.multiply(0.0);
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex8.add(1457.7370660404029);
      Complex complex10 = complex9.ONE.tan();
      int int0 = complex9.hashCode();
      Complex complex11 = complex2.add(complex9);
      double double0 = complex9.abs();
      Complex complex12 = complex8.multiply(complex2);
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex2.log();
      String string0 = complex0.toString();
      Object object1 = complex8.readResolve();
      try { 
        complex3.nthRoot((-2240));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,240
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      String string0 = complex2.ONE.toString();
      double double1 = complex0.abs();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.ONE.add(complex0);
      Complex complex7 = complex4.ZERO.subtract(complex1);
      Complex complex8 = complex2.add(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex8.ZERO.getField();
      Complex complex9 = complex2.acos();
      double double2 = complex4.abs();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex11 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(Double.NaN);
      Complex complex2 = complex0.NaN.add(Double.NaN);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex2.multiply(complex0);
      double double0 = complex0.getArgument();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.I.sinh();
      double double1 = complex6.I.abs();
      double double2 = complex5.getImaginary();
      Complex complex7 = complex4.INF.subtract(1.0);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex9.ZERO.acos();
      boolean boolean0 = complex2.isNaN();
      List<Complex> list0 = complex8.nthRoot(7);
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex0.subtract(complex11);
      Complex complex13 = complex7.log();
      Complex complex14 = complex7.cos();
      Complex complex15 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.exp();
      double double0 = complex1.INF.abs();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex1.NaN.multiply(17);
      Complex complex4 = complex3.ZERO.acos();
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex5 = complex1.sqrt();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex6 = complex0.ONE.multiply(7);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ZERO.divide(complex5);
      Complex complex9 = Complex.valueOf((double) 17);
      Object object0 = complex5.readResolve();
      boolean boolean1 = complex1.isInfinite();
      Complex complex10 = complex2.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-754.962509), (-754.962509));
      Complex complex1 = complex0.INF.add((-754.962509));
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(1.0);
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-781.675142763489));
      Complex complex1 = complex0.NaN.add((-781.675142763489));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex1.ZERO.pow((-781.675142763489));
      Complex complex5 = complex3.NaN.createComplex(1176.9312462659, 1176.9312462659);
      Complex complex6 = complex1.NaN.asin();
      List<Complex> list0 = complex0.nthRoot(1);
      double double0 = complex0.getImaginary();
      Complex complex7 = complex0.add((-781.675142763489));
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex0.log();
      double double1 = complex1.getReal();
      Complex complex10 = complex9.asin();
      Complex complex11 = complex10.ONE.cos();
      Object object0 = complex11.NaN.readResolve();
      Complex complex12 = complex1.add((double) 1);
      Complex complex13 = complex8.sqrt();
      Complex complex14 = complex12.divide((-2560.939290938));
      Complex complex15 = complex13.atan();
      Complex complex16 = Complex.valueOf(9.813901863427107E161, 1176.9312462659);
      Complex complex17 = complex5.pow(1176.9312462659);
      Complex complex18 = complex17.atan();
      Complex complex19 = complex0.multiply(0.0);
      Complex complex20 = complex19.cos();
      double double2 = complex7.getArgument();
      Complex complex21 = complex20.sinh();
      Complex complex22 = complex12.asin();
      Complex complex23 = complex14.add((-2560.939290938));
      Object object1 = complex19.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-101.45), (-101.45));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf((-101.45), (-101.45));
      boolean boolean0 = complex1.INF.equals(complex2);
      Complex complex3 = complex0.exp();
      int int0 = complex2.NaN.hashCode();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.ONE.reciprocal();
      String string0 = complex3.NaN.toString();
      Complex complex7 = complex0.ONE.multiply((-101.45));
      Complex complex8 = complex0.I.multiply(20.0);
      Complex complex9 = complex2.add(0.0);
      boolean boolean1 = complex3.equals("(NaN, NaN)");
      Complex complex10 = complex9.divide(Double.POSITIVE_INFINITY);
      int int1 = complex1.ZERO.hashCode();
      Complex complex11 = complex4.subtract(complex0);
      double double0 = complex5.getArgument();
      Complex complex12 = Complex.valueOf((-101.45));
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex11.divide(Double.POSITIVE_INFINITY);
      int int2 = complex11.hashCode();
      Complex complex16 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.sqrt();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex1.add(2273.9229);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.subtract(complex3);
      double double1 = complex0.getImaginary();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7384.164509, 0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply((-1962.2685003841));
      Complex complex3 = complex0.add(7384.164509);
      Complex complex4 = complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3443336486816406);
      Complex complex1 = complex0.add(1.3443336486816406);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex4.ZERO.pow(complex3);
      List<Complex> list0 = complex1.nthRoot(353);
      Complex complex6 = complex0.createComplex((-1004.456784391), 0.0);
      Complex complex7 = complex6.NaN.createComplex((-1.0), (-1004.456784391));
      Complex complex8 = complex6.multiply(353);
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.ZERO.negate();
      int int0 = complex9.NaN.hashCode();
      Complex complex11 = complex9.atan();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex12.ZERO.cos();
      Complex complex14 = complex12.tanh();
      double double0 = complex14.ZERO.getArgument();
      Complex complex15 = complex6.atan();
      int int1 = complex6.hashCode();
      Complex complex16 = complex6.acos();
      Complex complex17 = Complex.valueOf(2440.86122);
      String string0 = complex14.toString();
      Complex complex18 = complex15.multiply((-20.0));
      Complex complex19 = complex0.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex1.ONE.acos();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex2.multiply((-1601.2228899));
      Complex complex7 = complex1.divide(Double.NaN);
      int int0 = complex7.ONE.hashCode();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex0.negate();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex11 = complex2.pow(complex10);
      Complex complex12 = complex11.I.divide(Double.POSITIVE_INFINITY);
      Complex complex13 = complex10.sin();
      Object object0 = complex6.readResolve();
      Complex complex14 = complex1.cos();
      boolean boolean0 = complex1.isInfinite();
      Complex complex15 = complex13.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2833.252724398559);
      Complex complex2 = complex0.subtract(1172.0);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = Complex.valueOf(2833.252724398559);
      Complex complex7 = complex2.subtract(complex6);
      double double0 = complex7.abs();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex0.subtract(1312.679);
      Complex complex11 = complex10.ZERO.subtract(complex0);
      Complex complex12 = complex0.divide(1414.8991611);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1029.2541859), (-1029.2541859));
      Complex complex1 = complex0.createComplex(2614.963448, 0.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex1.ONE.pow(complex2);
      Complex complex6 = complex3.ZERO.sinh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex2.add(complex7);
      int int0 = 229;
      Complex complex9 = complex8.multiply(229);
      double double0 = complex7.getReal();
      double double1 = 0.0;
      try { 
        complex9.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(604.191862241, 604.191862241);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-2358.21), 0.03925827145576477);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.NaN.multiply(1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex0.createComplex((-1900.265515821), (-1900.265515821));
      Complex complex7 = complex0.ONE.subtract(complex6);
      Complex complex8 = complex6.INF.pow((double) 1);
      Complex complex9 = complex0.multiply((-3981.2));
      boolean boolean0 = complex5.isNaN();
      Complex complex10 = complex9.createComplex((-1900.265515821), 2162.7868691);
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.ONE.pow(complex0);
      String string0 = complex0.toString();
      Complex complex4 = complex0.ONE.add(6.283185307179586);
      Complex complex5 = complex0.ONE.subtract(362.66626363);
      Complex complex6 = complex4.ONE.tan();
      Complex complex7 = complex0.conjugate();
      double double0 = complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex6.isNaN();
      Complex complex8 = complex2.acos();
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals("");
      Complex complex1 = null;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4926.47825), (-1169.11237794963));
      Complex complex1 = Complex.ZERO;
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = Complex.valueOf(2672.9867709215946);
      Complex complex4 = complex0.add(complex3);
      double double1 = complex4.NaN.abs();
      Complex complex5 = complex3.I.atan();
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex3.pow(complex0);
      Complex complex10 = complex4.acos();
      Complex complex11 = Complex.valueOf(Double.NaN);
      Complex complex12 = complex6.pow((-4926.47825));
      Complex complex13 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-560.00919539028), (-560.00919539028));
      Complex complex1 = Complex.valueOf((-2447.771), (-560.00919539028));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.multiply(complex1);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex3.NaN.equals(object0);
      double double0 = complex3.getArgument();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = Complex.valueOf(3.861525553653117E-227);
      int int0 = complex7.hashCode();
      Complex complex8 = complex6.INF.multiply(837);
      Complex complex9 = complex5.ONE.add(complex0);
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex1.NaN.conjugate();
      Complex complex12 = complex11.NaN.conjugate();
      Complex complex13 = complex6.divide(complex1);
      Complex complex14 = complex4.pow(complex5);
      double double1 = complex1.ZERO.abs();
      Complex complex15 = Complex.valueOf(3.861525553653117E-227, 0.0);
      Complex complex16 = complex2.subtract(complex10);
      Complex complex17 = complex16.multiply(837);
      Complex complex18 = complex9.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-436.396349715095));
      Complex complex1 = complex0.ONE.log();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.INF.tan();
      List<Complex> list0 = complex5.nthRoot(7);
      double double1 = complex4.getArgument();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-3624.5), (-20.0));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = Complex.valueOf((-4330.915170915), (-1278.9719));
      boolean boolean0 = complex3.equals(complex4);
      Complex complex5 = complex0.subtract((-4330.915170915));
      Complex complex6 = complex5.ONE.multiply(0.0);
      int int0 = complex6.I.hashCode();
      Complex complex7 = complex5.ZERO.multiply(0.0);
      Complex complex8 = complex7.ONE.divide((-1278.9719));
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex6.ONE.divide((-4330.915170915));
      Complex complex11 = complex3.sqrt1z();
      Complex complex12 = complex5.multiply((-2053));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.40546512603759766;
      Complex complex1 = complex0.subtract(0.40546512603759766);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.subtract(complex0);
      int int0 = (-645);
      Complex complex4 = new Complex(0.40546512603759766);
      Complex complex5 = complex3.ZERO.divide(complex4);
      try { 
        complex0.ZERO.nthRoot((-645));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -645
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1396.94036516227), (-1396.94036516227));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex5.pow((-1525.627));
      Complex complex8 = complex0.pow((-1396.94036516227));
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex9 = complex5.pow((-1396.94036516227));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(2013.12277456357);
      Complex complex1 = complex0.NaN.acos();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex1.ZERO.multiply(2925);
      Complex complex5 = complex0.I.multiply(complex1);
      int int0 = complex5.NaN.hashCode();
      int int1 = complex0.hashCode();
      Complex complex6 = complex0.add(0.0);
      int int2 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.2804126, 1766.2804126);
      Complex complex1 = complex0.divide(1766.2804126);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf((-3284.2), 0.0);
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex4.INF.createComplex((-3284.2), 0.0);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.add(complex7);
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-1295.8824341));
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = Complex.valueOf(0.0, (-1295.8824341));
      Complex complex4 = complex0.NaN.log();
      List<Complex> list0 = complex0.I.nthRoot(1444);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex2.pow((-599.429082819));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1616.68643);
      Complex complex1 = complex0.INF.sin();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex1.ZERO.subtract(1616.68643);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.createComplex(279.5092333, 0.0);
      double double1 = complex1.getImaginary();
      Complex complex5 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.createComplex(0.0, (-8.137269363160008E-8));
      Complex complex4 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.ONE;
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.ONE.negate();
      Complex complex5 = complex1.I.log();
      Complex complex6 = complex2.I.log();
      Complex complex7 = complex1.NaN.multiply(0);
      Complex complex8 = complex0.multiply(0);
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = Complex.valueOf(0.0);
      boolean boolean0 = complex9.equals(complex10);
      Complex complex11 = complex3.add(complex0);
      int int0 = complex0.ZERO.hashCode();
      String string0 = complex1.toString();
      double double1 = complex11.getArgument();
      Complex complex12 = complex4.multiply(0.0);
      boolean boolean1 = complex11.isNaN();
      String string1 = complex9.toString();
      double double2 = complex1.getReal();
      Object object0 = complex7.readResolve();
      boolean boolean2 = complex2.NaN.equals(object0);
      Complex complex13 = complex11.ONE.multiply(complex5);
      Complex complex14 = complex11.divide(491.62);
      Object object1 = complex14.readResolve();
      Complex complex15 = complex6.conjugate();
      int int1 = complex0.hashCode();
      Complex complex16 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex3.NaN.pow(complex0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.subtract((-2420.97));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2127.805237816);
      Complex complex1 = Complex.valueOf(2127.805237816);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.tanh();
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.NaN.equals(object0);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.add(1.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.divide((-2.0416603812329616E-8));
      boolean boolean0 = complex3.ZERO.equals(complex1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex3.pow((-2.0416603812329616E-8));
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf((-2.0416603812329616E-8), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1518.226403352, Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isInfinite();
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.I.getArgument();
      Complex complex1 = complex0.INF.multiply(7);
      Complex complex2 = complex0.NaN.createComplex(557.342538, 557.342538);
      String string0 = complex0.ONE.toString();
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex4.ZERO.divide((double) 7);
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex4.ZERO.multiply(1.5707963267948966);
      Complex complex11 = complex4.NaN.multiply(7);
      Complex complex12 = complex11.ZERO.exp();
      Complex complex13 = complex0.pow(0.0);
      Complex complex14 = complex4.divide(0.0);
      Complex complex15 = complex0.divide(557.342538);
      Complex complex16 = complex13.reciprocal();
      Complex complex17 = complex10.acos();
      Complex complex18 = complex14.log();
      List<Complex> list0 = complex11.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.I.reciprocal();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-867.612285528), (-867.612285528));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.ONE.multiply(complex2);
      Complex complex5 = complex3.ZERO.reciprocal();
      Complex complex6 = complex0.INF.add(complex2);
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = Complex.valueOf((-1186.868811546351), (-867.612285528));
      Complex complex8 = complex0.log();
      Complex complex9 = complex0.NaN.acos();
      Complex complex10 = complex0.subtract(complex6);
      Complex complex11 = complex0.NaN.sin();
      Complex complex12 = complex7.ZERO.conjugate();
      Complex complex13 = complex11.ZERO.tan();
      Complex complex14 = complex0.negate();
      Complex complex15 = complex7.exp();
      Complex complex16 = complex10.acos();
      Complex complex17 = complex16.ZERO.exp();
      Complex complex18 = complex10.multiply(2026);
      Complex complex19 = complex18.negate();
      ComplexField complexField1 = complex9.getField();
      Complex complex20 = complex4.log();
      Object object0 = complex4.readResolve();
      Complex complex21 = complex2.add(complex18);
      Complex complex22 = complex20.multiply(2026);
      int int0 = complex2.hashCode();
      Complex complex23 = complex16.tanh();
      Complex complex24 = complex18.cos();
      Complex complex25 = complex0.sqrt1z();
      Complex complex26 = complex15.add(complex2);
      Complex complex27 = complex1.exp();
      Complex complex28 = complex6.divide(complex1);
      Complex complex29 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.add(0.0);
      Complex complex3 = complex0.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex5.NaN.pow(complex1);
      boolean boolean0 = complex4.equals("");
      Complex complex8 = complex5.log();
      Complex complex9 = complex0.log();
      Complex complex10 = complex9.ONE.divide(0.0);
      Complex complex11 = complex2.sinh();
      Complex complex12 = complex11.NaN.multiply(complex6);
      Complex complex13 = complex10.ZERO.createComplex((-2.291749683541979E-9), 0.0);
      Complex complex14 = complex11.INF.cosh();
      String string0 = complex7.toString();
      Complex complex15 = complex11.INF.pow((-2.291749683541979E-9));
      Complex complex16 = complex10.createComplex(0.0, 0.0);
      Complex complex17 = complex14.log();
      Complex complex18 = Complex.valueOf(0.0, 0.0);
      Complex complex19 = complex3.asin();
      Complex complex20 = complex9.atan();
      Complex complex21 = complex20.INF.log();
      double double0 = complex1.getImaginary();
      Complex complex22 = complex13.subtract(complex4);
      Complex complex23 = Complex.ONE;
      Complex complex24 = complex19.subtract(complex23);
      Object object0 = complex24.readResolve();
      Complex complex25 = complex22.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2055.9412));
      Complex complex1 = Complex.valueOf((-1.8097633115378247E227), 0.0);
      Complex complex2 = complex0.ZERO.createComplex((-2055.9412), (-1.8097633115378247E227));
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex3.ZERO.exp();
      double double1 = complex1.I.abs();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex2.sin();
      List<Complex> list0 = complex3.I.nthRoot(1);
      Complex complex7 = complex4.NaN.subtract(1.0);
      Object object0 = complex6.INF.readResolve();
      Complex complex8 = complex4.ZERO.multiply(complex5);
      Complex complex9 = complex8.I.pow(437.36);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.ONE.divide(425.590164590787);
      Complex complex12 = complex11.ZERO.add((-1255.7326065353));
      Complex complex13 = complex12.ONE.tanh();
      Complex complex14 = complex12.INF.tanh();
      Complex complex15 = Complex.INF;
      Object object1 = complex15.readResolve();
      boolean boolean0 = complex4.ZERO.equals(object1);
      Complex complex16 = complex0.log();
      Complex complex17 = complex2.multiply(complex4);
      double double2 = complex16.getReal();
      Complex complex18 = complex11.multiply(437.36);
      Complex complex19 = complex3.subtract(complex6);
      Complex complex20 = new Complex(0.0);
      Complex complex21 = complex12.add(complex20);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.cos();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex1.I.divide(complex0);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.NaN.multiply(1224.0689582015123);
      Complex complex8 = complex6.ONE.sin();
      Complex complex9 = complex5.NaN.subtract(complex6);
      double double0 = complex9.ZERO.getArgument();
      List<Complex> list1 = complex8.ZERO.nthRoot(1);
      Complex complex10 = complex8.INF.sinh();
      Complex complex11 = complex5.negate();
      boolean boolean0 = complex6.ONE.equals(complex4);
      Complex complex12 = complex6.tan();
      Complex complex13 = complex12.NaN.cosh();
      Complex complex14 = complex11.INF.sqrt1z();
      Object object0 = complex11.I.readResolve();
      Complex complex15 = complex11.INF.cosh();
      double double1 = complex6.ONE.abs();
      Complex complex16 = complex5.cos();
      Complex complex17 = complex0.sin();
      Complex complex18 = complex5.subtract(complex15);
      boolean boolean1 = complex16.isInfinite();
      Complex complex19 = complex10.asin();
      Complex complex20 = Complex.valueOf(1.0);
      Complex complex21 = complex20.conjugate();
      boolean boolean2 = complex4.isInfinite();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.divide(0.0);
      int int1 = (-2113);
      try { 
        complex1.nthRoot((-2113));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,113
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4.184049381430498E220);
      Complex complex2 = complex1.ZERO.multiply(1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.divide((double) 1);
      Complex complex5 = complex0.cosh();
      List<Complex> list0 = complex5.NaN.nthRoot(1);
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex0.subtract(complex3);
      ComplexField complexField0 = complex4.ONE.getField();
      ComplexField complexField1 = complex2.getField();
      Complex complex10 = complex1.pow(complex4);
      Complex complex11 = complex10.ZERO.pow(complex0);
      Complex complex12 = complex2.cosh();
      Complex complex13 = complex12.sqrt1z();
      double double0 = complex13.ONE.abs();
      Complex complex14 = complex11.subtract((-1539.605));
      Complex complex15 = complex12.divide((-9.920197743470107E-8));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.subtract(complex0);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.add(4.036548930895323E-269);
      try { 
        complex0.nthRoot((-4036));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,036
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
