/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:06:28 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.createComplex(0.0, (-1.0));
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex4.createComplex(0.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1573.417));
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.I.multiply(complex0);
      List<Complex> list0 = complex0.ONE.nthRoot(37);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex4.INF.tan();
      Complex complex7 = complex6.subtract(complex1);
      double double0 = complex4.ZERO.getArgument();
      Complex complex8 = complex0.ZERO.conjugate();
      Complex complex9 = complex4.NaN.log();
      Complex complex10 = complex6.ONE.log();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex3.multiply(0.0);
      Complex complex13 = complex0.I.pow((-1573.417));
      double double1 = complex6.getReal();
      String string0 = complex12.I.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex14 = complex4.sqrt1z();
      Complex complex15 = complex13.I.tanh();
      boolean boolean1 = complex13.INF.equals(complex6);
      Complex complex16 = complex15.ONE.divide(0.0);
      Complex complex17 = complex12.add(complex13);
      Complex complex18 = complex17.I.exp();
      double double2 = complex13.getImaginary();
      Complex complex19 = complex3.add((-1573.417));
      Complex complex20 = complex19.sqrt1z();
      Complex complex21 = complex10.multiply(20.0);
      Complex complex22 = complex7.reciprocal();
      double double3 = complex7.getReal();
      Complex complex23 = complex3.log();
      double double4 = complex8.getImaginary();
      Complex complex24 = complex0.tan();
      boolean boolean2 = complex1.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-956.814), (-956.814));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.add((-956.814));
      Complex complex3 = complex2.INF.multiply((-2255));
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex6.add(7.888519481107568E-9);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex2.ZERO.multiply(3260);
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex1.INF.tan();
      Complex complex7 = Complex.valueOf(1674.79505);
      List<Complex> list0 = complex7.nthRoot(17);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex3.I.log();
      Object object0 = complex9.INF.readResolve();
      Complex complex10 = complex3.multiply(0.0);
      Complex complex11 = complex10.I.log();
      double double0 = complex2.getReal();
      Complex complex12 = complex8.multiply(complex7);
      boolean boolean0 = complex7.equals("Q&x. &vzx/U");
      double double1 = complex2.getReal();
      Complex complex13 = complex8.tan();
      Complex complex14 = Complex.valueOf(1674.79505, 462.77820778874);
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(3960.7656671306);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.INF;
      boolean boolean0 = complex2.I.equals(complex3);
      List<Complex> list0 = complex2.ZERO.nthRoot(2051);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = Complex.valueOf(1.0618494853096868E-7, 1.0618494853096868E-7);
      Complex complex9 = complex4.createComplex(4097.937171711564, 297.62153191414);
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex10 = complex6.ONE.add((-33.7));
      boolean boolean1 = complex5.isNaN();
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex5.exp();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex4.ZERO.sin();
      Complex complex15 = complex6.tan();
      Object object0 = complex15.NaN.readResolve();
      Complex complex16 = complex15.sqrt();
      Complex complex17 = new Complex(0.0);
      boolean boolean2 = complex9.equals(complex17);
      Complex complex18 = complex0.conjugate();
      double double0 = complex15.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex2.NaN.sin();
      Complex complex5 = complex3.ONE.sin();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      double double0 = complex3.abs();
      Complex complex6 = complex1.ONE.sinh();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex2.ONE.sqrt();
      Complex complex9 = complex7.multiply(757.4784135);
      Complex complex10 = complex2.NaN.subtract(complex4);
      Complex complex11 = complex3.ONE.pow(complex7);
      Complex complex12 = complex11.asin();
      Complex complex13 = complex12.ONE.subtract(0.0);
      Complex complex14 = complex12.ONE.asin();
      double double1 = complex12.I.getArgument();
      Complex complex15 = complex10.ZERO.log();
      Complex complex16 = complex15.ZERO.sqrt1z();
      Complex complex17 = complex15.ONE.createComplex(0.0, (-2690.3723734279));
      Complex complex18 = complex9.NaN.acos();
      int int0 = complex2.hashCode();
      Complex complex19 = Complex.valueOf(1773.64792, (-2690.3723734279));
      Complex complex20 = complex19.sin();
      boolean boolean1 = complex19.isNaN();
      Complex complex21 = complex4.atan();
      Complex complex22 = complex6.cosh();
      Complex complex23 = complex11.subtract(complex4);
      Complex complex24 = complex19.add(1773.64792);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(951.9, 951.9);
      Complex complex1 = complex0.negate();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.sinh();
      List<Complex> list0 = complex0.nthRoot(356);
      Complex complex3 = complex0.divide((double) 356);
      Object object0 = complex3.I.readResolve();
      List<Complex> list1 = complex0.nthRoot(29);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.INF.multiply(287.89756034708);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex1.subtract(Double.NaN);
      double double1 = complex2.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = Complex.valueOf((-875.82142306));
      Complex complex11 = complex2.subtract(complex7);
      double double2 = complex11.abs();
      Complex complex12 = complex7.acos();
      Complex complex13 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-504.795476680423));
      Complex complex2 = complex0.I.reciprocal();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex1.ZERO.sqrt();
      double double1 = complex3.getArgument();
      Complex complex4 = complex1.NaN.reciprocal();
      List<Complex> list0 = complex0.nthRoot(3);
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.INF.pow(complex1);
      Complex complex7 = Complex.valueOf(1317.180668276);
      Complex complex8 = complex4.sqrt1z();
      int int0 = complex7.hashCode();
      Complex complex9 = complex2.divide(Double.NaN);
      Complex complex10 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex3.createComplex(0.0, 0.0);
      Complex complex7 = complex5.INF.asin();
      Complex complex8 = complex3.add(complex0);
      String string0 = complex3.INF.toString();
      Complex complex9 = complex8.exp();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex9.ONE.equals(object0);
      Complex complex10 = complex8.ONE.createComplex(0.0, 0.0);
      Complex complex11 = complex9.log();
      Complex complex12 = complex11.negate();
      boolean boolean1 = complex2.isNaN();
      Complex complex13 = complex12.divide(1.0);
      Complex complex14 = complex13.multiply(4940);
      Object object1 = complex3.readResolve();
      Complex complex15 = complex5.pow(complex2);
      boolean boolean2 = complex7.equals("(Infinity, Infinity)");
      double double1 = complex4.getReal();
      Complex complex16 = complex14.log();
      double double2 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      List<Complex> list0 = complex0.NaN.nthRoot(17);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.exp();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.NaN.subtract((-3732.0));
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex2.I.sqrt1z();
      Object object1 = new Object();
      boolean boolean0 = complex3.INF.equals(object1);
      double double0 = complex0.getArgument();
      double double1 = complex0.getReal();
      double double2 = complex0.getReal();
      Complex complex6 = complex2.pow(1463.0);
      Complex complex7 = complex2.ONE.multiply(complex0);
      Complex complex8 = complex2.reciprocal();
      List<Complex> list1 = complex8.ZERO.nthRoot(112);
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2509.772274, (-313.061726138283));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.I.reciprocal();
      String string0 = complex2.ZERO.toString();
      Object object0 = complex1.I.readResolve();
      Complex complex3 = complex0.pow((-313.061726138283));
      Complex complex4 = complex0.NaN.add(2509.772274);
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex6.asin();
      Object object1 = complex0.readResolve();
      Complex complex10 = complex2.exp();
      Object object2 = complex8.readResolve();
      Complex complex11 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex((-2054.938073), 2016.5567);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.pow((-2054.938073));
      double double0 = complex0.abs();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex4.add(complex7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-212.8845), (-212.8845));
      double double0 = (-423.0);
      Complex complex1 = Complex.valueOf((-423.0));
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.ZERO.negate();
      double double1 = (-173.614254991135);
      Complex complex6 = complex5.I.divide((-173.614254991135));
      double double2 = complex6.INF.abs();
      boolean boolean1 = complex1.isNaN();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.multiply((-1));
      Complex complex9 = Complex.valueOf((double) 0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.I.conjugate();
      double double0 = complex3.getArgument();
      Complex complex4 = complex1.INF.divide((-1.5707963267948966));
      double double1 = complex2.NaN.getArgument();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.I.subtract((-1.5707963267948966));
      Complex complex7 = complex2.multiply((-868));
      Complex complex8 = complex0.log();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.ONE.pow((double) (-868));
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex1.asin();
      Complex complex13 = complex8.asin();
      Complex complex14 = complex9.I.cos();
      Complex complex15 = new Complex((-868));
      Complex complex16 = complex13.pow(complex15);
      Complex complex17 = complex16.I.tan();
      Complex complex18 = complex16.ZERO.subtract(0.0);
      Complex complex19 = complex16.add((double) (-868));
      Complex complex20 = complex9.sin();
      double double2 = complex20.getArgument();
      Complex complex21 = complex14.cosh();
      Complex complex22 = complex0.subtract(complex6);
      Complex complex23 = complex15.divide(complex8);
      Complex complex24 = complex9.add(complex14);
      Complex complex25 = complex4.sqrt();
      Complex complex26 = complex13.acos();
      Complex complex27 = complex5.log();
      ComplexField complexField0 = complex19.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.valueOf((-2103.4315851));
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = Complex.valueOf((-3614.0), (-3614.0));
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.pow(1.2802691459655762);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex8.ZERO.multiply(complex4);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.NaN.multiply(0.0);
      Complex complex12 = complex8.I.add(complex0);
      Complex complex13 = complex5.cosh();
      double double0 = complex8.abs();
      Complex complex14 = complex5.createComplex((-1278.50423555685), Double.NaN);
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-362.916942684));
      Complex complex1 = complex0.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex1.ZERO.equals(object0);
      Complex complex2 = complex0.conjugate();
      boolean boolean1 = complex2.isNaN();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      double double0 = complex0.getArgument();
      String string0 = complex0.NaN.toString();
      Complex complex2 = complex0.ZERO.divide(0.7853981633974483);
      double double1 = complex0.getImaginary();
      Complex complex3 = complex1.NaN.multiply(1067);
      double double2 = complex0.getArgument();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex2.NaN.multiply(1067);
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex6.NaN.sqrt();
      Complex complex9 = complex4.I.add(complex2);
      Complex complex10 = complex2.subtract(complex1);
      double double3 = complex0.getArgument();
      Complex complex11 = complex4.asin();
      boolean boolean0 = complex10.isInfinite();
      double double4 = complex2.getArgument();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.ZERO.divide(0.7853981633974483);
      Complex complex14 = complex1.divide(complex9);
      Complex complex15 = complex14.I.cosh();
      Complex complex16 = complex7.divide(complex14);
      String string1 = complex14.toString();
      int int0 = complex16.hashCode();
      Object object0 = complex14.readResolve();
      Complex complex17 = complex10.ZERO.cosh();
      Complex complex18 = complex17.I.divide((-1691.9353983529188));
      boolean boolean1 = complex6.equals(object0);
      double double5 = complex0.getArgument();
      Complex complex19 = complex6.sqrt1z();
      Complex complex20 = complex6.sqrt1z();
      Complex complex21 = complex10.multiply(complex20);
      Complex complex22 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.createComplex(1.0, 1.0);
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.ZERO.asin();
      Complex complex7 = complex5.createComplex(0.0, 0.0);
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex7.I.reciprocal();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex7.NaN.sqrt1z();
      boolean boolean0 = complex2.equals(complex3);
      String string0 = complex11.toString();
      double double0 = complex5.getArgument();
      Complex complex12 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1647.7015393136));
      Complex complex2 = Complex.valueOf(2816.060230803);
      Complex complex3 = complex0.ONE.divide(2816.060230803);
      Complex complex4 = Complex.valueOf((-2311.93), (-2311.93));
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex1.INF.tan();
      Complex complex7 = complex6.ONE.cos();
      double double0 = complex0.getImaginary();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex0.cos();
      Complex complex10 = complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3121.923376220227), (-1.0));
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(3.3730714236579374E186, Double.NaN);
      Complex complex5 = complex1.ZERO.divide(complex2);
      Complex complex6 = complex2.ONE.multiply(1103);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex7.add(complex3);
      boolean boolean0 = complex7.equals(complex2);
      Complex complex10 = complex3.asin();
      int int0 = complex4.hashCode();
      Complex complex11 = complex4.log();
      Complex complex12 = complex11.ZERO.exp();
      List<Complex> list0 = complex1.INF.nthRoot(1443);
      Complex complex13 = complex1.atan();
      Complex complex14 = complex13.multiply(complex9);
      Object object0 = complex3.readResolve();
      Complex complex15 = complex5.cos();
      ComplexField complexField0 = complex13.getField();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2521.92541540715));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-2521.92541540715), 0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.ONE.equals(object0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.INF.conjugate();
      boolean boolean1 = complex2.INF.equals(complex0);
      List<Complex> list0 = complex0.nthRoot(115);
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex1.multiply((-183.57967));
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = Complex.valueOf(2182.2);
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex1.acos();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex0.NaN.equals(complex1);
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex2.ONE.readResolve();
      double double0 = complex2.INF.abs();
      boolean boolean1 = complex0.isNaN();
      Complex complex4 = complex0.atan();
      double double1 = complex4.ZERO.abs();
      boolean boolean2 = complex1.ZERO.equals("");
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex4.ONE.pow(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex8 = complex5.INF.tanh();
      boolean boolean3 = complex4.equals("|Al=0Gm\"NSc");
      Complex complex9 = complex6.sqrt1z();
      double double2 = complex5.getReal();
      List<Complex> list0 = complex9.nthRoot(2514);
      Complex complex10 = complex9.add((double) 2514);
      double double3 = complex2.abs();
      Complex complex11 = complex8.createComplex(4635.81177747513, 2514);
      Complex complex12 = complex11.cos();
      double double4 = complex6.getImaginary();
      Complex complex13 = complex11.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.250975291734664E-9), (-9.250975291734664E-9));
      Complex complex1 = complex0.divide(1036.615611);
      Complex complex2 = complex0.reciprocal();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(1036.615611);
      double double1 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.ZERO.createComplex(288.7575159750614, 5.593494835247651E-9);
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex4.I.divide(Double.POSITIVE_INFINITY);
      String string0 = complex4.INF.toString();
      Complex complex6 = complex4.ZERO.subtract(complex1);
      int int0 = complex0.I.hashCode();
      double double0 = complex0.getReal();
      Complex complex7 = complex2.multiply(complex1);
      Complex complex8 = complex7.divide(0.0);
      Complex complex9 = complex2.cosh();
      int int1 = complex8.hashCode();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex5.negate();
      Complex complex13 = complex8.createComplex(0.0, 288.7575159750614);
      Complex complex14 = complex9.I.multiply(1517);
      Complex complex15 = complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.ONE.divide((-2214.618606630492));
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.cos();
      ComplexField complexField0 = complex0.ONE.getField();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex1.ONE.createComplex(0.7853981633974483, 0.7853981633974483);
      String string0 = complex1.I.toString();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex2.sinh();
      Complex complex9 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.cos();
      int int0 = complex3.hashCode();
      Complex complex11 = complex4.log();
      Complex complex12 = complex6.createComplex(0.0, 2692.588);
      Complex complex13 = complex10.tan();
      Complex complex14 = complex4.subtract(complex10);
      Complex complex15 = complex14.ONE.cosh();
      Complex complex16 = complex1.sin();
      Complex complex17 = complex1.reciprocal();
      Complex complex18 = complex10.tan();
      Complex complex19 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2742.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.divide((-1209.58));
      Complex complex3 = complex2.NaN.pow(complex0);
      int int1 = complex2.hashCode();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.tan();
      double double0 = complex5.ONE.abs();
      List<Complex> list0 = complex0.I.nthRoot(17);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex5.INF.sin();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex8.INF.multiply((-494.82417));
      Complex complex10 = complex7.ONE.subtract(complex1);
      boolean boolean0 = complex0.equals("");
      Complex complex11 = complex4.add(complex0);
      Complex complex12 = complex0.sin();
      double double1 = complex6.abs();
      Complex complex13 = complex11.cosh();
      String string0 = complex10.toString();
      boolean boolean1 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2515.989924483));
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.subtract(0.0);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.I.multiply(complex0);
      String string0 = complex4.toString();
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-504.06737355707));
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = new Complex((-4391.11805124958), 1463.0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.NaN.pow(complex2);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.multiply(0.14939609169960022);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex0.acos();
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(2398.58636752005);
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-3075.63));
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.NaN.pow(0.0);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.INF.pow(complex4);
      Complex complex7 = complex1.NaN.multiply(242);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex1.multiply((-1720));
      Complex complex10 = complex9.ONE.cosh();
      Object object0 = complex2.readResolve();
      boolean boolean1 = complex0.equals(object0);
      Complex complex11 = complex8.add(complex9);
      Complex complex12 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-5445.6));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = Complex.valueOf((-5445.6));
      Complex complex2 = Complex.valueOf(2361.271392, 2361.271392);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.ONE.subtract(complex4);
      Complex complex6 = complex2.atan();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex4.pow(2361.271392);
      Complex complex9 = complex8.I.multiply(0);
      boolean boolean0 = complex7.equals(complex2);
      Complex complex10 = complex2.ZERO.log();
      Complex complex11 = complex1.add(complex0);
      boolean boolean1 = complex3.isNaN();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex8.divide((-5.1088103279787804E-8));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
      Complex complex1 = Complex.valueOf(0.0, 347.2);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.ZERO.add((-1951.31));
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex1.multiply(complex3);
      Complex complex9 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.ZERO.sinh();
      double double0 = complex1.I.abs();
      double double1 = complex2.getArgument();
      double double2 = complex0.getImaginary();
      double double3 = complex0.getImaginary();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.createComplex(0.0, 1.0);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex1.createComplex(1.0, 143.7892);
      Complex complex9 = complex8.NaN.subtract(2927.800601489873);
      boolean boolean0 = complex8.isNaN();
      Complex complex10 = complex7.pow(complex1);
      Complex complex11 = complex10.pow(complex0);
      Complex complex12 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = new Complex(1.4310184489676175E-201);
      Complex complex3 = complex0.ONE.divide(complex2);
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex2.ZERO.pow(233.40509);
      Complex complex7 = complex1.INF.multiply(557);
      Complex complex8 = complex3.tanh();
      boolean boolean1 = complex1.equals(complex0);
      Complex complex9 = complex2.negate();
      Complex complex10 = complex3.subtract(0.0);
      Complex complex11 = Complex.valueOf(5.579910641313343E186, 0.0);
      Complex complex12 = Complex.valueOf(0.0, 1.4310184489676175E-201);
      Complex complex13 = complex8.divide(complex3);
      Complex complex14 = complex13.INF.tanh();
      Complex complex15 = complex13.ZERO.divide((double) 557);
      Complex complex16 = complex7.createComplex((-6.480706118857055E-9), 557);
      boolean boolean2 = complex7.equals(complex13);
      boolean boolean3 = complex3.equals(complex2);
      Complex complex17 = Complex.valueOf((-623.4736758868385));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex0.divide(2395.953890858902);
      Complex complex6 = complex5.NaN.multiply(complex0);
      Complex complex7 = complex5.ONE.cos();
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex5.sinh();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex8.NaN.createComplex(0.0, 2.0736172194624895E-222);
      Complex complex10 = Complex.valueOf((-1517.116518133), 2395.953890858902);
      Complex complex11 = complex8.add(0.0);
      boolean boolean0 = complex3.equals(complex8);
      Complex complex12 = complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.divide(2537.38453688);
      Complex complex3 = Complex.valueOf(2537.38453688);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.sin();
      String string0 = complex2.ONE.toString();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.valueOf(Double.NaN, 2537.38453688);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.divide(3273.92371);
      Complex complex3 = complex2.multiply(868);
      Complex complex4 = complex3.sin();
      double double1 = complex2.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex5 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(6.206776940880773E-9);
      String string0 = complex1.toString();
      List<Complex> list0 = complex3.nthRoot(1974);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1629.3483675304296, 1629.3483675304296);
      Complex complex1 = complex0.NaN.subtract(1629.3483675304296);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.pow(complex2);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex4 = complex3.multiply((-20.0));
      Complex complex5 = complex4.createComplex(1629.3483675304296, (-20.0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.ONE.subtract(1.3142988156905172E207);
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3304.628046927));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex1.ZERO.reciprocal();
      Complex complex6 = Complex.valueOf((-3304.628046927));
      double double0 = complex2.NaN.getArgument();
      int int0 = complex0.hashCode();
      Complex complex7 = complex5.tan();
      Object object0 = complex3.readResolve();
      Complex complex8 = complex1.NaN.asin();
      Complex complex9 = new Complex(2.116316283183901E-290);
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.valueOf(0.0);
      boolean boolean0 = complex8.I.equals(complex9);
      boolean boolean1 = complex5.equals(object0);
      Complex complex12 = complex2.negate();
      Complex complex13 = complex0.add(complex5);
      Complex complex14 = complex5.sqrt();
      Complex complex15 = complex14.INF.exp();
      Complex complex16 = complex2.log();
      boolean boolean2 = complex1.I.equals(complex4);
      Complex complex17 = complex16.multiply((-409));
      Complex complex18 = complex15.cosh();
      Complex complex19 = complex2.acos();
      Complex complex20 = complex6.tan();
      Complex complex21 = complex20.I.divide(complex0);
      Complex complex22 = complex18.add((double) (-409));
      Complex complex23 = complex6.divide(0.0);
      Complex complex24 = complex0.cos();
      Complex complex25 = complex10.subtract(complex14);
      Complex complex26 = Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-274.76598595323));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.subtract(1.0);
      Complex complex2 = complex1.multiply((-274.76598595323));
      Complex complex3 = complex1.ZERO.pow(1.0);
      try { 
        complex3.INF.nthRoot((-3648));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,648
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(374.3326558913773);
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = Complex.valueOf(0.0, 1437.7242);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.ZERO.equals(object0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex0.log();
      Complex complex7 = complex3.add(374.3326558913773);
      Object object1 = complex7.readResolve();
      Complex complex8 = complex4.multiply((-65));
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex5.subtract(complex3);
      Complex complex11 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex4.INF.multiply(311);
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex6.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.I.tanh();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex10 = complex2.atan();
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex3.multiply((double) 311);
      Complex complex13 = Complex.valueOf(928.49238198);
      Complex complex14 = complex3.log();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.createComplex(1599.8238865, 1599.8238865);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex3.NaN.add(1599.8238865);
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex7.I.divide(complex6);
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex4.atan();
      Complex complex11 = Complex.valueOf(1599.8238865, 1599.8238865);
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-283.226686), (-283.226686));
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = Complex.valueOf((-1.1878772398311421E260), (-283.226686));
      Complex complex4 = complex0.add(complex1);
      int int0 = complex4.hashCode();
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex1.ZERO.atan();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.INF.divide(complex6);
      double double0 = complex7.abs();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex3.I.add(1.5714110564653245E-8);
      Complex complex5 = complex3.I.sin();
      Complex complex6 = new Complex(1.5714110564653245E-8, 1.5714110564653245E-8);
      boolean boolean0 = complex6.NaN.equals(complex3);
      int int0 = complex0.INF.hashCode();
      String string0 = complex0.NaN.toString();
      boolean boolean1 = complex0.equals(complex6);
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex6.sinh();
      Complex complex10 = complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.3584500601329896E-8), Double.NaN);
      String string0 = complex0.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide((-1.3584500601329896E-8));
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = (-2133.834515745985);
      Complex complex0 = Complex.valueOf((-2133.834515745985));
      Complex complex1 = complex0.multiply((-2133.834515745985));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex0.NaN.multiply((-2133.834515745985));
      Complex complex6 = complex5.ZERO.sqrt();
      Object object0 = complex5.I.readResolve();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex0.reciprocal();
      String string0 = complex4.toString();
      Object object0 = complex1.readResolve();
      int int0 = complex3.hashCode();
      Complex complex5 = complex2.multiply(0.0);
      Object object1 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(5.402252865260326E-227);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(5.402252865260326E-227, 5.402252865260326E-227);
      Complex complex4 = complex1.exp();
      boolean boolean0 = complex2.equals(complex0);
      int int0 = complex4.hashCode();
      boolean boolean1 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-234.4012106348567));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply((-112));
      Complex complex2 = Complex.valueOf(0.0);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.createComplex(3165.529, 0.0);
      Complex complex5 = complex4.I.cos();
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex0.add(complex3);
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1196.0678674220974));
      Complex complex1 = complex0.ZERO.sin();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.subtract(complex0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex0.NaN.sqrt();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex6.NaN.multiply(0);
      double double0 = complex0.getReal();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1049.8787790102));
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex1.ONE.pow((-1049.8787790102));
      ComplexField complexField1 = complex0.I.getField();
      ComplexField complexField2 = complex0.getField();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.divide(1.5216652792122652E-7);
      String string0 = complex2.toString();
      Complex complex7 = complex4.INF.conjugate();
      double double0 = complex4.getReal();
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex3.log();
      Complex complex11 = complex4.divide((-1049.8787790102));
      Complex complex12 = complex11.sin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-3466.9476409875106), (-3466.9476409875106));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.NaN.add((-572.033096544877));
      Complex complex4 = complex0.asin();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(657.9);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(693.2438024);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2017));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1621.036261);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.subtract(1621.036261);
      List<Complex> list0 = complex1.nthRoot(3585);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-2304.6897344));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.atan();
      try { 
        complex6.nthRoot((-614));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -614
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.INF.pow(complex3);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-394.6836665), (-394.6836665));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(963.5, 963.5);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      int int1 = (-540);
      try { 
        complex0.nthRoot((-540));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -540
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-817.99294155));
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      String string0 = complex0.toString();
      Complex complex2 = complex1.INF.add((-7.981320644583728E-8));
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = complex1.ZERO.sqrt1z();
      Complex complex7 = complex6.I.divide(complex3);
      Complex complex8 = complex1.INF.divide(complex3);
      Complex complex9 = complex8.log();
      Complex complex10 = complex6.I.exp();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex1.isInfinite();
      Complex complex11 = complex0.reciprocal();
      ComplexField complexField0 = complex2.getField();
      Complex complex12 = complex0.conjugate();
      Complex complex13 = complex1.multiply(complex3);
      Complex complex14 = complex13.ONE.sin();
      Complex complex15 = complex1.createComplex((-7.981320644583728E-8), (-399.37076));
      boolean boolean2 = complex11.equals("(1.0, 0.0)");
      Complex complex16 = complex7.sqrt1z();
      ComplexField complexField1 = complex16.NaN.getField();
      List<Complex> list0 = complex16.I.nthRoot(1977);
      Complex complex17 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex3.NaN.tanh();
      int int1 = complex4.hashCode();
      Complex complex5 = complex3.INF.divide(0.0);
      Complex complex6 = complex0.createComplex((-1072.8499962509425), 0.0);
      Complex complex7 = complex6.multiply(complex1);
      Complex complex8 = Complex.valueOf(0.0);
      double double0 = complex8.INF.getArgument();
      Complex complex9 = complex6.INF.pow(complex0);
      boolean boolean0 = complex5.ONE.equals(complex8);
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex10.NaN.negate();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex8.tanh();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex4.pow(complex1);
      Complex complex16 = complex7.log();
      Complex complex17 = complex0.tan();
      Complex complex18 = complex0.ZERO.divide(0.0);
      Complex complex19 = complex7.subtract(0.0);
      Complex complex20 = complex9.acos();
      Complex complex21 = complex20.ONE.divide(complex9);
      double double1 = complex2.abs();
      Complex complex22 = complex16.add(complex17);
      ComplexField complexField0 = complex22.ZERO.getField();
      ComplexField complexField1 = complex11.getField();
      Complex complex23 = Complex.INF;
      boolean boolean1 = complex11.equals(complex23);
      Complex complex24 = complex16.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2186.804505889699);
      Complex complex1 = Complex.valueOf(2186.804505889699);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.I.log();
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.divide(complex1);
      boolean boolean0 = complex5.ONE.equals(complex2);
      Complex complex6 = complex2.pow(complex5);
      double double0 = complex6.I.getArgument();
      Complex complex7 = complex6.ZERO.divide(complex3);
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex2.ONE.subtract(0.0);
      Complex complex11 = complex2.atan();
      boolean boolean1 = complex2.equals(object0);
      Complex complex12 = complex6.cosh();
      double double1 = complex6.getReal();
      boolean boolean2 = complex9.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = complex1.NaN.cosh();
      List<Complex> list0 = complex4.ONE.nthRoot(1629);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.INF.negate();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.ZERO.exp();
      double double0 = complex7.I.getArgument();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.INF.cosh();
      Complex complex11 = complex9.INF.sqrt();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex12.I.multiply(complex3);
      int int0 = complex9.I.hashCode();
      Complex complex14 = complex12.I.multiply(2.2535347938537598);
      Complex complex15 = complex12.multiply(0.0);
      String string0 = complex15.toString();
      Complex complex16 = complex11.add(complex0);
      List<Complex> list1 = complex1.nthRoot(1629);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      List<Complex> list0 = complex0.nthRoot(2238);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.reciprocal();
      Complex complex4 = complex1.ONE.divide(0.0);
      Object object0 = complex4.NaN.readResolve();
      Object object1 = new Object();
      Complex complex5 = complex0.sqrt();
      boolean boolean0 = complex2.NaN.equals(object1);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.INF.log();
      ComplexField complexField0 = complex7.ONE.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex8 = complex0.atan();
      ComplexField complexField2 = complex8.ZERO.getField();
      Complex complex9 = complex2.divide((-787.7));
      Complex complex10 = complex0.asin();
      String string0 = complex0.toString();
      Complex complex11 = complex5.createComplex(0.0, 835.869);
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex6.cos();
      Complex complex14 = complex11.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.divide((-1951.9314132));
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex0.multiply(1180);
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex2.ZERO.sin();
      Complex complex8 = Complex.valueOf((-1951.9314132), (-1.6802196396307013E-7));
      Complex complex9 = complex1.divide(complex3);
      Complex complex10 = complex6.sinh();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex5.multiply(complex3);
      Complex complex13 = complex12.INF.divide(complex5);
      Complex complex14 = complex10.tan();
      double double1 = complex7.abs();
      Complex complex15 = complex14.pow(complex0);
      Complex complex16 = complex2.I.cos();
      ComplexField complexField0 = complex14.getField();
      Complex complex17 = complex8.pow(0.0);
      Complex complex18 = complex5.sqrt1z();
      Complex complex19 = complex0.reciprocal();
      Complex complex20 = complex19.INF.pow(complex10);
      Complex complex21 = complex3.subtract(complex19);
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex13.isNaN();
      double double2 = complex15.abs();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-7.159157201731446E-8), (-7.159157201731446E-8));
      double double0 = complex0.getReal();
      String string0 = complex0.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex1.I.subtract((-410.23007082));
      Complex complex5 = complex3.ZERO.pow(complex4);
      boolean boolean0 = complex1.ONE.equals((Object) null);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.divide(complex6);
      Object object0 = complex6.INF.readResolve();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.INF.pow((-410.23007082));
      Complex complex10 = complex1.ONE.divide(complex4);
      List<Complex> list0 = complex6.nthRoot(1419);
      double double1 = complex3.getReal();
      Complex complex11 = complex0.ZERO.multiply(complex5);
      Complex complex12 = complex6.divide(1.0);
      Complex complex13 = complex12.ONE.sin();
      Complex complex14 = complex12.ZERO.reciprocal();
      Object object1 = complex14.INF.readResolve();
      Complex complex15 = complex6.sin();
      Complex complex16 = complex0.createComplex(1419, 2.220764636993408);
      Complex complex17 = complex7.pow((-410.23007082));
  }
}
