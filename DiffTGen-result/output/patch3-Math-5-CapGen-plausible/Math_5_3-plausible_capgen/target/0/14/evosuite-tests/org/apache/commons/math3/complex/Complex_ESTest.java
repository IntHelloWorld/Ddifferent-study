/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:10:20 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1899.2318);
      int int0 = 3105;
      List<Complex> list0 = complex0.ONE.nthRoot(3105);
      // Undeclared exception!
      complex0.nthRoot(3105);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex0.INF.divide(Double.NaN);
      boolean boolean0 = complex0.I.equals(complex3);
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex9.ZERO.multiply(complex0);
      Complex complex11 = complex10.ONE.atan();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex8.ONE.cosh();
      Complex complex14 = complex2.subtract(complex1);
      Object object0 = complex0.readResolve();
      Complex complex15 = complex7.NaN.sqrt();
      List<Complex> list0 = complex8.nthRoot(238);
      Complex complex16 = complex14.negate();
      Complex complex17 = complex14.negate();
      Object object1 = complex9.readResolve();
      Complex complex18 = complex8.reciprocal();
      Complex complex19 = complex14.ONE.subtract(complex12);
      Complex complex20 = complex17.subtract((-1422.075));
      Complex complex21 = complex12.multiply(complex11);
      Complex complex22 = complex14.log();
      Complex complex23 = complex15.divide(complex14);
      Complex complex24 = complex23.INF.cosh();
      Complex complex25 = complex24.I.conjugate();
      Complex complex26 = complex5.subtract((-2648.27));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 1154.4572291503964);
      Complex complex1 = complex0.divide(755.2093);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex2.multiply(0.0);
      Complex complex11 = complex7.pow(2002.77);
      Complex complex12 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2723.07564055749), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.734406065735473E-122);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.ZERO.subtract((-2723.07564055749));
      String string0 = complex4.toString();
      Complex complex5 = complex2.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex0.asin();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex8 = Complex.valueOf((-824.74));
      double double0 = complex2.getImaginary();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex4.sqrt();
      List<Complex> list0 = complex7.nthRoot(3514);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex2.multiply(1906.11982965331);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.5197699069976807);
      Complex complex1 = complex0.I.reciprocal();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex0.ZERO.pow(0.0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex2.asin();
      List<Complex> list0 = complex5.ONE.nthRoot(659);
      Complex complex6 = complex0.NaN.pow(complex5);
      Complex complex7 = complex5.I.tanh();
      List<Complex> list1 = complex6.ZERO.nthRoot(3126);
      Complex complex8 = complex3.ZERO.acos();
      Complex complex9 = complex4.negate();
      Complex complex10 = complex4.pow(complex0);
      Complex complex11 = Complex.valueOf(0.0);
      boolean boolean0 = complex11.ZERO.equals(complex0);
      Complex complex12 = complex2.exp();
      Complex complex13 = complex8.sinh();
      try { 
        complex13.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(3080.62534869, 3080.62534869);
      Complex complex1 = complex0.subtract(3080.62534869);
      Complex complex2 = complex1.ZERO.subtract(3080.62534869);
      Complex complex3 = complex2.subtract((-138.51269193534));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.multiply((-2042));
      Complex complex6 = complex5.ONE.tanh();
      ComplexField complexField0 = complex6.INF.getField();
      ComplexField complexField1 = complex4.NaN.getField();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = Complex.valueOf(456.06376395527);
      Complex complex10 = complex9.sqrt();
      ComplexField complexField2 = complex4.getField();
      ComplexField complexField3 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2024.8));
      Complex complex1 = complex0.ONE.acos();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.sqrt();
      Object object1 = complex0.readResolve();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ZERO.sqrt1z();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = new Complex((-2024.8), (-2024.8));
      Complex complex7 = complex1.I.sqrt1z();
      boolean boolean1 = complex4.equals(complex6);
      Complex complex8 = complex6.reciprocal();
      boolean boolean2 = complex1.isInfinite();
      Complex complex9 = complex4.pow((-2024.8));
      Object object2 = complex3.NaN.readResolve();
      Complex complex10 = complex5.NaN.divide(complex6);
      Complex complex11 = Complex.valueOf(20.0, 0.0);
      Complex complex12 = complex9.ZERO.sqrt();
      Complex complex13 = complex8.NaN.add(complex11);
      Complex complex14 = complex1.tan();
      Complex complex15 = complex9.pow((-2024.8));
      Complex complex16 = complex9.INF.cos();
      Complex complex17 = complex14.I.negate();
      Complex complex18 = complex5.subtract(complex8);
      Complex complex19 = complex2.reciprocal();
      double double0 = complex15.abs();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = Complex.valueOf((-1.0342514383702196E-7));
      Object object3 = complex14.readResolve();
      Complex complex22 = complex20.sqrt();
      Complex complex23 = complex4.sqrt();
      Complex complex24 = complex6.sin();
      Complex complex25 = complex4.add(1.9366601417010147E-217);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.25534194707870483);
      Complex complex1 = complex0.ONE.createComplex(0.25534194707870483, 0.25534194707870483);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ONE.createComplex(5.2249837964645906E-8, 0.0);
      Complex complex4 = complex1.reciprocal();
      String string0 = complex4.toString();
      double double0 = complex4.abs();
      double double1 = complex1.getArgument();
      try { 
        complex1.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1148.87110800248));
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = null;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex2.NaN.asin();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex5.I.pow(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      List<Complex> list0 = complex7.I.nthRoot(3471);
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex1.pow(complex2);
      Complex complex11 = complex9.ONE.subtract(complex10);
      boolean boolean1 = complex4.isNaN();
      Complex complex12 = complex9.add(complex6);
      Complex complex13 = complex2.multiply(0.0);
      double double0 = complex13.INF.getArgument();
      boolean boolean2 = complex6.isNaN();
      Complex complex14 = new Complex((-1.0), 2.0);
      Complex complex15 = complex5.multiply(complex14);
      Complex complex16 = Complex.valueOf(0.0, 1.0);
      Complex complex17 = complex14.log();
      Complex complex18 = complex8.pow(complex15);
      Complex complex19 = complex16.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      Complex complex4 = complex3.NaN.divide(0.0);
      Complex complex5 = complex3.ZERO.add(0.0);
      Complex complex6 = complex2.ZERO.createComplex(0.3333333333333333, 0.0);
      Complex complex7 = complex3.I.tanh();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.ZERO.createComplex(0.0, 0.0);
      double double0 = complex1.ONE.getArgument();
      List<Complex> list0 = complex0.nthRoot(1362);
      boolean boolean0 = complex0.equals(list0);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex2.cos();
      Complex complex13 = complex11.ZERO.asin();
      Complex complex14 = Complex.valueOf((double) 1362);
      Complex complex15 = complex7.ONE.multiply(complex12);
      Complex complex16 = complex2.tan();
      Complex complex17 = complex16.I.sin();
      Complex complex18 = Complex.valueOf(0.0, 2.6631035804748535);
      Complex complex19 = complex18.NaN.subtract((double) 1362);
      Complex complex20 = complex10.reciprocal();
      Complex complex21 = complex7.pow(2432.58685);
      boolean boolean1 = complex16.isNaN();
      Complex complex22 = complex11.subtract(0.0);
      Complex complex23 = complex8.I.reciprocal();
      Complex complex24 = complex11.log();
      int int0 = complex8.hashCode();
      double double1 = complex16.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.multiply(1.2550633697348567E-8);
      double double0 = complex2.I.abs();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex1.hashCode();
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = new Complex(1051.97);
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex1.sqrt1z();
      double double1 = complex4.getReal();
      double double2 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(513.032037067509);
      boolean boolean0 = complex0.equals("permutation size ({0}) exceeds permuation domain ({1})");
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.cos();
      double double0 = complex2.I.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(576.981081241, 576.981081241);
      Complex complex6 = complex0.acos();
      double double1 = complex4.getImaginary();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex7.I.tanh();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex10.INF.createComplex(2.0, 6.165958325782564E70);
      try { 
        complex7.ONE.nthRoot((-974));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -974
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.divide(4933.2302000935);
      Complex complex4 = complex3.ONE.multiply(complex0);
      Complex complex5 = complex4.ONE.subtract(complex1);
      Complex complex6 = complex5.NaN.multiply(827.8);
      Complex complex7 = complex6.INF.subtract(complex2);
      Complex complex8 = complex1.ZERO.pow(complex0);
      double double0 = complex2.getReal();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex8.add((-99.31));
      Complex complex11 = complex10.ZERO.asin();
      Complex complex12 = complex10.ZERO.asin();
      Complex complex13 = Complex.NaN;
      Object object0 = complex13.readResolve();
      Complex complex14 = complex12.ONE.multiply(complex0);
      boolean boolean0 = complex10.equals(object0);
      Complex complex15 = complex12.divide(complex1);
      Complex complex16 = complex0.conjugate();
      Complex complex17 = complex14.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.INF.multiply(740);
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.valueOf(479.10599);
      Object object0 = new Object();
      boolean boolean0 = complex8.equals(object0);
      Complex complex9 = Complex.valueOf((-2488.540977688696), (-883.074909));
      Complex complex10 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = 4.153321337726989E-8;
      Complex complex1 = complex0.ONE.createComplex(0.0, 4.153321337726989E-8);
      Object object0 = complex0.I.readResolve();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2638.16505, 2638.16505);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.acos();
      Object object0 = complex2.ONE.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex1.I.equals(object0);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex4.NaN.subtract(complex2);
      Complex complex7 = Complex.valueOf((-2475.705547241516), 2638.16505);
      Complex complex8 = complex6.I.asin();
      Complex complex9 = Complex.valueOf(0.0, (-2475.705547241516));
      Complex complex10 = complex1.subtract(complex4);
      Complex complex11 = complex5.divide((-1025.26743));
      Complex complex12 = complex11.INF.atan();
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex8.I.log();
      Complex complex15 = complex6.add((-1789.367204));
      Object object2 = complex15.NaN.readResolve();
      double double0 = complex4.getImaginary();
      Complex complex16 = complex3.negate();
      Complex complex17 = complex10.asin();
      Complex complex18 = complex17.ZERO.pow((-1025.26743));
      Complex complex19 = new Complex((-1789.367204));
      Complex complex20 = complex13.pow(complex19);
      Complex complex21 = complex20.add((-1789.367204));
      Complex complex22 = complex21.negate();
      Complex complex23 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1078.70376996504);
      Complex complex1 = complex0.I.multiply(1078.70376996504);
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.I.tanh();
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex2.INF.multiply(1078.70376996504);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.INF.atan();
      Object object0 = new Object();
      boolean boolean0 = complex1.I.equals(object0);
      Complex complex6 = complex0.sin();
      boolean boolean1 = complex0.equals(complex6);
      Object object1 = complex0.readResolve();
      Complex complex7 = complex2.sqrt1z();
      boolean boolean2 = complex6.isNaN();
      boolean boolean3 = complex7.isInfinite();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      String string0 = complex1.ONE.toString();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.ZERO.divide(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.valueOf(1195.5633);
      Complex complex6 = complex4.NaN.add(0.0);
      Complex complex7 = complex3.I.multiply((-1));
      Complex complex8 = complex3.I.acos();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex1.multiply(complex3);
      Complex complex14 = complex13.add(complex8);
      Complex complex15 = Complex.valueOf((double) (-1), 1.308072566986084);
      Complex complex16 = complex3.INF.divide(0.0);
      double double0 = complex13.getImaginary();
      Complex complex17 = complex15.multiply(Double.NaN);
      List<Complex> list0 = complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(6.283185307179586);
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.divide(6.283185307179586);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.divide(6.283185307179586);
      boolean boolean0 = complex6.ONE.equals(complex0);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex0.ZERO.negate();
      Complex complex9 = Complex.valueOf((-418735.1129759503), (-418735.1129759503));
      Complex complex10 = complex4.subtract(complex5);
      Complex complex11 = complex3.exp();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex3.conjugate();
      Complex complex14 = complex9.tan();
      Complex complex15 = complex14.log();
      Complex complex16 = complex15.negate();
      Complex complex17 = complex5.multiply(complex14);
      Complex complex18 = complex1.pow((-2253.796899));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-2.0183663375378704E-8));
      Complex complex2 = complex0.ONE.add(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.NaN.equals(object0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.add(complex2);
      boolean boolean1 = complex1.I.equals(complex3);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.I.sinh();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex0.multiply((-1));
      Complex complex9 = complex4.pow(1494.6);
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex0.subtract((-2.0183663375378704E-8));
      Complex complex12 = complex1.sqrt();
      double double0 = complex11.ZERO.abs();
      Complex complex13 = complex2.add(complex9);
      Object object1 = complex3.readResolve();
      boolean boolean2 = complex11.equals(object1);
      Complex complex14 = complex8.tan();
      Complex complex15 = Complex.ZERO;
      Complex complex16 = complex1.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
      Complex complex3 = complex0.pow(complex1);
      String string0 = complex2.INF.toString();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.multiply(1403);
      Complex complex7 = complex6.I.add(0.0);
      Complex complex8 = complex4.createComplex(0.0, 1403);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex2.add((double) 1403);
      Complex complex12 = complex3.I.atan();
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex3.tan();
      Complex complex15 = complex0.ONE.subtract(complex5);
      Complex complex16 = complex1.sin();
      int int0 = complex14.ONE.hashCode();
      Complex complex17 = complex1.sqrt1z();
      Complex complex18 = complex14.acos();
      Complex complex19 = complex11.tan();
      Complex complex20 = complex6.multiply((-384.350467));
      Complex complex21 = complex9.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-313.1), (-135.7113221061));
      int int0 = complex1.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.INF.tanh();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex5.multiply(234);
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex7.multiply(234);
      Complex complex12 = complex11.NaN.sin();
      double double0 = complex0.getArgument();
      Complex complex13 = complex7.exp();
      double double1 = complex11.I.getArgument();
      double double2 = complex3.getImaginary();
      Complex complex14 = complex0.ZERO.add(complex11);
      int int0 = complex14.INF.hashCode();
      Complex complex15 = complex6.cos();
      Complex complex16 = complex15.I.divide(1230.69003);
      Complex complex17 = complex5.add(complex1);
      Complex complex18 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex19 = complex1.NaN.exp();
      Object object0 = new Object();
      boolean boolean0 = complex6.equals(object0);
      double double3 = complex13.getImaginary();
      Complex complex20 = complex7.subtract(complex1);
      Complex complex21 = complex0.add(complex8);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.sqrt1z();
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.I.acos();
      Object object0 = complex2.INF.readResolve();
      Complex complex4 = complex0.reciprocal();
      double double1 = complex1.getArgument();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex6.cosh();
      double double2 = complex6.abs();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex1.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = Complex.valueOf(1284.7096262, 0.0);
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex6.INF.createComplex((-2.2667083759873216E16), 0.0);
      Object object0 = complex0.readResolve();
      Complex complex11 = Complex.valueOf(0.0, 2.7182817459106445);
      ComplexField complexField0 = complex2.getField();
      ComplexField complexField1 = complex7.getField();
      Complex complex12 = complex3.divide(1284.7096262);
      double double0 = complex5.abs();
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(731.0, 731.0);
      Complex complex2 = complex0.createComplex(731.0, 2.194891929626465);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.valueOf(2.194891929626465, 731.0);
      Complex complex8 = complex7.INF.subtract(0.0);
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = complex9.NaN.multiply(1042);
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ONE.cosh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-726.5981438708596), (-726.5981438708596));
      Complex complex1 = complex0.sin();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.ONE.asin();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = Complex.valueOf(1.4201378353978042E-97, Double.NaN);
      List<Complex> list0 = complex1.nthRoot(37);
      Complex complex5 = complex4.negate();
      double double1 = complex5.INF.getArgument();
      ComplexField complexField0 = complex5.INF.getField();
      boolean boolean1 = complex5.isInfinite();
      String string0 = complex4.toString();
      Complex complex6 = complex2.ZERO.add((-1775.0));
      double double2 = complex0.abs();
      List<Complex> list1 = complex4.nthRoot(11);
      Complex complex7 = complex3.sin();
      double double3 = complex4.getImaginary();
      String string1 = complex3.toString();
      Complex complex8 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-179.1), (-1325.80291039404));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.createComplex(1662.6432560710848, 0.0);
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex1.multiply(1);
      double double0 = complex1.abs();
      Complex complex7 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.ZERO.divide(complex0);
      String string0 = complex3.I.toString();
      Complex complex4 = complex3.ZERO.pow(complex2);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex1.INF.nthRoot(1);
      String string0 = complex1.ONE.toString();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.ONE.tanh();
      Complex complex5 = complex3.sqrt1z();
      double double1 = complex2.NaN.abs();
      Complex complex6 = complex2.pow(complex5);
      Complex complex7 = complex6.INF.multiply(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double2 = complex5.getImaginary();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex8.sin();
      Complex complex11 = complex2.divide((double) 1);
      double double3 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.multiply(0.0);
      Complex complex5 = complex3.ONE.multiply(0.0);
      Complex complex6 = complex1.sinh();
      String string0 = complex2.toString();
      Complex complex7 = complex1.add(complex3);
      boolean boolean0 = complex7.INF.equals((Object) null);
      Complex complex8 = complex2.ONE.cosh();
      Complex complex9 = complex1.log();
      boolean boolean1 = complex0.NaN.equals(complex2);
      Complex complex10 = complex0.sinh();
      Complex complex11 = new Complex((-2166.795191928902));
      boolean boolean2 = complex10.ONE.equals(complex11);
      int int0 = complex2.hashCode();
      boolean boolean3 = complex0.equals(complex1);
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2887.58);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex5.I.sqrt1z();
      double double0 = complex4.abs();
      double double1 = complex3.getReal();
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex4.tanh();
      double double2 = complex7.abs();
      Complex complex8 = complex4.I.negate();
      int int0 = complex0.hashCode();
      String string0 = complex7.INF.toString();
      Complex complex9 = complex7.divide(6.257216813084462E103);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex8.subtract(complex10);
      Complex complex12 = complex3.add(Double.NaN);
      Complex complex13 = complex12.subtract(Double.NaN);
      Complex complex14 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = Complex.valueOf((-615.980927384));
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.tanh();
      Object object0 = new Object();
      boolean boolean1 = complex0.INF.equals(object0);
      boolean boolean2 = complex3.equals(complex1);
      Complex complex4 = complex2.createComplex((-615.980927384), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.subtract(complex1);
      Object object1 = complex1.readResolve();
      double double0 = complex4.getArgument();
      Complex complex7 = Complex.valueOf((-2897.8897706450034), 630.9);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = new Complex((-1.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex4.subtract(complex0);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex0.multiply(complex4);
      Complex complex11 = complex10.reciprocal();
      boolean boolean0 = complex0.ZERO.equals(complex11);
      Complex complex12 = complex0.pow(complex4);
      Complex complex13 = complex8.multiply(complex3);
      Complex complex14 = complex13.I.divide(1692.69);
      Complex complex15 = complex1.multiply(120);
      Complex complex16 = complex12.add(265.6947905112259);
      Complex complex17 = complex0.subtract(complex2);
      Complex complex18 = complex16.log();
      Complex complex19 = complex11.pow(2.0);
      Complex complex20 = complex11.createComplex(265.6947905112259, 120);
      Complex complex21 = complex15.reciprocal();
      Complex complex22 = complex6.tan();
      Complex complex23 = complex21.reciprocal();
      Complex complex24 = complex16.sinh();
      Complex complex25 = complex8.subtract((-1.0));
      Object object0 = complex24.readResolve();
      Complex complex26 = complex9.asin();
      Complex complex27 = complex16.sinh();
      Complex complex28 = complex19.subtract(1692.69);
      Complex complex29 = complex25.conjugate();
      Complex complex30 = Complex.valueOf((-1.1887814032213867E-7), 1.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = new Complex((-1204.9), 1.0);
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex3.NaN.tan();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex2.negate();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = Complex.NaN;
      boolean boolean0 = complex4.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.ZERO.add(complex2);
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex3.ONE.negate();
      Complex complex6 = complex1.exp();
      boolean boolean0 = complex2.INF.equals(complex3);
      Complex complex7 = complex1.subtract(1266.372718);
      String string0 = complex7.I.toString();
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = complex3.createComplex(Double.NaN, Double.NaN);
      Complex complex10 = complex9.INF.subtract(complex8);
      Complex complex11 = complex7.tanh();
      String string1 = complex11.INF.toString();
      try { 
        complex9.nthRoot((-3006));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-502.8));
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.INF.multiply((-502.8));
      double double0 = complex2.ONE.getArgument();
      double double1 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex0.isNaN();
      ComplexField complexField1 = complex0.getField();
      Complex complex3 = Complex.valueOf(0.0, (-502.8));
      Complex complex4 = complex3.subtract((-1328.3955521051466));
      int int0 = complex4.hashCode();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1.4652759033760925E-8), (-2139.68914800889));
      Complex complex1 = complex0.NaN.add((-1.4652759033760925E-8));
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex1.INF.divide(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.add((-2139.68914800889));
      Object object0 = complex5.NaN.readResolve();
      List<Complex> list0 = complex6.NaN.nthRoot(1);
      Complex complex7 = complex5.I.cos();
      Complex complex8 = complex6.ZERO.tanh();
      Complex complex9 = complex5.sqrt();
      double double0 = complex9.ZERO.getArgument();
      Complex complex10 = complex9.subtract(complex6);
      Complex complex11 = complex9.negate();
      Complex complex12 = complex10.tanh();
      Complex complex13 = complex9.sinh();
      Complex complex14 = Complex.valueOf((-1.4652759033760925E-8));
      Complex complex15 = complex13.reciprocal();
      Complex complex16 = complex3.sin();
      boolean boolean0 = complex14.isNaN();
      Complex complex17 = complex2.add(2.053884626293416E-85);
      double double1 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-373.3629574872344), (-373.3629574872344));
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.ONE.cosh();
      String string0 = complex1.I.toString();
      Complex complex5 = complex1.createComplex((-3820.17), 210.66116230025);
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex3.multiply(3954.23967);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex0.NaN.divide(complex3);
      Complex complex7 = complex0.add((-118.547726902948));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.I.pow(Double.NaN);
      Complex complex3 = complex0.subtract(complex1);
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 437.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.multiply(656);
      Complex complex4 = complex1.I.sqrt();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.multiply(complex0);
      int int0 = complex3.hashCode();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex5.multiply(656);
      Complex complex9 = complex8.ONE.acos();
      Object object0 = complex8.readResolve();
      Complex complex10 = complex2.conjugate();
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.subtract(8.422373919843096E-10);
      Complex complex3 = complex1.NaN.exp();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.NaN.multiply(complex2);
      double double1 = complex1.getReal();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.ONE.equals("0McN-'C=");
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex1.ZERO.divide(0.0);
      Complex complex10 = complex4.multiply(0.0);
      Complex complex11 = complex10.INF.sin();
      Complex complex12 = complex11.ONE.exp();
      Complex complex13 = complex10.acos();
      Complex complex14 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.450652539730072, 0.450652539730072);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.I.pow((-1030.3));
      Complex complex5 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.INF.subtract(complex0);
      Complex complex5 = complex0.add(1.3784853708457332E-206);
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = Complex.valueOf(1.3784853708457332E-206, 0.0);
      Complex complex8 = complex5.createComplex(1.3784853708457332E-206, (-780.2080298756));
      boolean boolean0 = complex2.isNaN();
      double double0 = complex6.getArgument();
      Complex complex9 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(802.318);
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.NaN.add(complex2);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex5 = complex1.ZERO.add(complex3);
      Complex complex6 = complex0.multiply(1305);
      Complex complex7 = complex6.exp();
      boolean boolean0 = complex6.equals(complex1);
      Complex complex8 = complex0.pow(802.318);
      Complex complex9 = complex6.atan();
      Complex complex10 = complex3.multiply(complex6);
      ComplexField complexField1 = complex10.getField();
      boolean boolean1 = complex4.isNaN();
      Object object0 = complex9.readResolve();
      Complex complex11 = complex9.multiply(802.318);
      Complex complex12 = complex11.acos();
      double double0 = complex1.getImaginary();
      boolean boolean2 = complex5.equals(complex6);
      Complex complex13 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1.0065901934522996E229), (-9.809953482725758E-8));
      Complex complex1 = complex0.createComplex((-1635.21661445293), 1103.140575);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-728.8077717905));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex0.ONE.multiply((-728.8077717905));
      double double0 = complex0.getImaginary();
      Complex complex5 = Complex.ONE;
      boolean boolean0 = complex4.equals(complex5);
      Complex complex6 = complex3.acos();
      double double1 = complex6.NaN.abs();
      Complex complex7 = complex1.pow((-728.8077717905));
      Complex complex8 = complex0.divide((-20.0));
      Complex complex9 = complex3.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(920.828219);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2174.52722);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex1.tan();
      List<Complex> list0 = complex5.nthRoot(36);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-475.7248208783732));
      Complex complex1 = complex0.add((-475.7248208783732));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.I.cosh();
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex2.ONE.atan();
      Complex complex6 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(2417.4163794427645);
      Complex complex1 = new Complex(2417.4163794427645);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(82.70607621900564);
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex1.pow(82.70607621900564);
      List<Complex> list0 = complex2.nthRoot(603);
      Complex complex6 = Complex.valueOf(0.0);
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(1.6551742553710938);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-36.000282871));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = Complex.valueOf((-36.000282871));
      double double0 = complex4.INF.getArgument();
      int int0 = (-2302);
      try { 
        complex0.nthRoot((-2302));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,302
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2338.550959234));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.multiply(67);
      Complex complex4 = complex3.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.056018441915512085);
      Complex complex2 = complex1.tanh();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.I.getField();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.createComplex(0.056018441915512085, 0.056018441915512085);
      Complex complex5 = complex4.ONE.sinh();
      Object object1 = complex0.readResolve();
      Complex complex6 = Complex.valueOf(1236.7809108192641, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-8.846040040259342E-8), (-1.0361863127101014E-7));
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.INF.divide((-41.914393346855));
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex1.NaN.subtract(complex0);
      Complex complex7 = complex4.asin();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3789.0), (-2605.4));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      boolean boolean0 = complex0.equals("-+_lPb!");
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-548);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex3.ZERO.acos();
      try { 
        complex0.nthRoot((-548));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -548
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(917.5);
      Complex complex1 = complex0.subtract(917.5);
      Complex complex2 = Complex.valueOf(917.5);
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex2.INF.acos();
      double double0 = complex0.abs();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.exp();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex2.pow(917.5);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2.5065676066043174E-46);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = complex1.subtract(complex0);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.ONE.equals((Object) null);
      Complex complex1 = complex0.add((-1882.33822448466));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = new Complex(0.0, 0.0);
      boolean boolean1 = complex0.ONE.equals(complex3);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf(0.0, 5.3582093498119173E163);
      Complex complex7 = complex0.divide(1599.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex0.ONE.pow(complex2);
      Complex complex5 = complex1.I.sinh();
      Complex complex6 = complex0.multiply(complex1);
      String string0 = complex1.toString();
      Complex complex7 = complex5.negate();
      double double0 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.toString();
      Complex complex1 = complex0.tanh();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.pow(77.64515950959);
      int int0 = complex1.ZERO.hashCode();
      Object object1 = complex1.readResolve();
      Complex complex3 = complex0.INF.multiply(complex1);
      boolean boolean0 = complex0.equals(object1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow((-855.0));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(391.69754704093424);
      Complex complex1 = complex0.ZERO.divide(1.2516618713553432E300);
      Complex complex2 = Complex.valueOf(391.69754704093424, 0.0);
      Complex complex3 = complex0.INF.multiply(1);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.INF.divide(complex1);
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex1.INF.multiply(complex6);
      boolean boolean0 = complex4.isNaN();
      Complex complex9 = complex7.sinh();
      double double0 = complex1.abs();
      boolean boolean1 = complex5.isNaN();
      Complex complex10 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      Object object0 = complex1.readResolve();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.ZERO.exp();
      int int0 = complex0.INF.hashCode();
      Object object1 = complex0.NaN.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.multiply(2375.300663545509);
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0, (-1.1623181434592597E-259));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(0.0);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-2158.42848));
      Complex complex2 = Complex.valueOf((-2745.7));
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(180.761, 180.761);
      Complex complex1 = complex0.NaN.reciprocal();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(310.820736117988);
      Complex complex1 = complex0.INF.divide(655.05984973846);
      Complex complex2 = complex1.ONE.add((-1358.8293335215585));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.NaN.createComplex(655.05984973846, (-1358.8293335215585));
      Complex complex8 = complex7.subtract(complex2);
      Complex complex9 = complex8.ZERO.pow(complex5);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex3.multiply(complex0);
      Complex complex12 = complex8.INF.sqrt();
      Complex complex13 = complex11.ZERO.acos();
      double double0 = complex13.ONE.getArgument();
      Object object0 = complex2.readResolve();
      Complex complex14 = complex3.pow(complex1);
      String string0 = complex1.I.toString();
      Complex complex15 = complex3.divide(1.627922534942627);
      Complex complex16 = complex11.log();
      Complex complex17 = complex5.sinh();
      Complex complex18 = complex17.INF.multiply(complex12);
      Complex complex19 = complex6.multiply(968);
      Complex complex20 = complex4.asin();
      Complex complex21 = complex11.atan();
      Complex complex22 = complex6.multiply((-1358.8293335215585));
      Complex complex23 = complex17.multiply(complex5);
      double double1 = complex9.getReal();
      Complex complex24 = complex2.cosh();
      Complex complex25 = complex17.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.NaN.log();
      double double0 = complex3.abs();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.ONE.exp();
      Complex complex7 = complex2.createComplex(0.0, 0.0);
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex3.divide(0.0);
      Object object0 = complex1.readResolve();
      Complex complex10 = complex6.sin();
      Object object1 = new Object();
      boolean boolean0 = complex4.equals(object1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex3.ZERO.negate();
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex1.ZERO.conjugate();
      Complex complex7 = complex1.INF.add(0.0);
      Complex complex8 = complex3.ZERO.sqrt1z();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex4.INF.sqrt();
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex3.reciprocal();
      boolean boolean0 = complex12.isNaN();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex3.log();
      Complex complex14 = complex1.subtract(1594.8343685942596);
      Complex complex15 = complex14.negate();
      Complex complex16 = complex11.cos();
      Complex complex17 = complex13.acos();
      Complex complex18 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.multiply((-1230));
      Complex complex4 = complex3.INF.multiply((-542.7));
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.multiply((-1230));
      Complex complex7 = complex0.cosh();
      double double0 = complex1.getReal();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex6.sqrt();
      double double1 = complex0.getReal();
      boolean boolean0 = complex8.isNaN();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex10.reciprocal();
      Complex complex13 = complex6.multiply((double) (-1230));
      Complex complex14 = complex5.divide(2.0);
      Complex complex15 = complex9.add(0.0);
      Complex complex16 = Complex.valueOf((-2527.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(803.4767200867298);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex2.ZERO.subtract((-2390.136698974));
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.NaN.cos();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.asin();
      double double0 = complex4.NaN.getArgument();
      double double1 = complex5.INF.abs();
      Complex complex6 = complex4.pow((-346.131101222985));
      Complex complex7 = complex5.tan();
      double double2 = complex1.getImaginary();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex4.log();
      Complex complex10 = complex0.sqrt();
      Object object0 = complex3.readResolve();
      boolean boolean1 = complex10.NaN.equals(object0);
      Complex complex11 = complex9.pow(complex5);
      Complex complex12 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.NaN.subtract(complex0);
      Complex complex5 = complex3.ONE.reciprocal();
      String string0 = complex1.I.toString();
      Complex complex6 = complex4.ZERO.divide(0.0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex7 = complex3.NaN.multiply(2628);
      boolean boolean1 = complex0.isNaN();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.cos();
      double double0 = complex9.getImaginary();
      Complex complex10 = complex9.ZERO.multiply(complex4);
      Complex complex11 = complex4.atan();
      double double1 = complex8.getArgument();
      boolean boolean2 = complex0.ZERO.equals(complex6);
      double double2 = complex4.getImaginary();
      Complex complex12 = complex3.subtract(-0.0);
      double double3 = complex0.abs();
      Complex complex13 = complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.79220642823083), 0.0);
      double double0 = complex0.INF.abs();
      Complex complex1 = new Complex(3953.70779301808);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(3953.70779301808);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex3.I.equals(object0);
      String string0 = complex0.I.toString();
      Complex complex4 = complex2.ZERO.divide(complex0);
      Complex complex5 = complex0.sqrt1z();
      boolean boolean1 = complex1.isNaN();
      Complex complex6 = complex0.atan();
      boolean boolean2 = complex1.isInfinite();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex2.multiply(732);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.ONE.multiply((-1.0));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.INF.cos();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.INF.pow((double) 1520);
      Complex complex8 = complex7.I.tanh();
      List<Complex> list0 = complex6.ZERO.nthRoot(1520);
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.createComplex(2215.807, (-1.0));
      Complex complex12 = complex11.ZERO.log();
      double double0 = complex6.getReal();
      Complex complex13 = complex11.sqrt();
      Complex complex14 = complex13.INF.sinh();
      Complex complex15 = complex13.sqrt1z();
      Complex complex16 = complex13.tanh();
      Complex complex17 = complex16.ZERO.conjugate();
      Complex complex18 = complex10.cosh();
      boolean boolean0 = complex1.isNaN();
      Complex complex19 = complex11.negate();
      Complex complex20 = complex11.negate();
      double double1 = complex20.abs();
      double double2 = complex2.abs();
  }
}
