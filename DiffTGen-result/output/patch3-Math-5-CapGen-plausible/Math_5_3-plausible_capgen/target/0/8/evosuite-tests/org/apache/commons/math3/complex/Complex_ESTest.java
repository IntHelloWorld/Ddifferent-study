/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:10:16 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.NaN.sqrt1z();
      List<Complex> list0 = complex1.nthRoot(2195);
      Complex complex7 = complex3.add((double) 2195);
      String string0 = complex7.ZERO.toString();
      Complex complex8 = complex4.subtract((double) 2195);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex0.ONE.subtract(complex7);
      Complex complex11 = Complex.valueOf(1688.33, 1688.33);
      Complex complex12 = complex1.pow(complex4);
      Complex complex13 = complex12.ZERO.reciprocal();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex14.ZERO.multiply(complex15);
      int int0 = complex13.hashCode();
      Complex complex17 = complex12.NaN.multiply((double) 2195);
      Complex complex18 = complex17.NaN.subtract((-1015.835902));
      Complex complex19 = complex13.add(0.0);
      Complex complex20 = complex12.sin();
      Complex complex21 = complex14.subtract(1688.33);
      Complex complex22 = complex7.multiply(complex6);
      Complex complex23 = complex22.atan();
      Complex complex24 = complex23.conjugate();
      Complex complex25 = complex8.negate();
      boolean boolean0 = complex6.equals("");
      boolean boolean1 = complex16.isNaN();
      double double0 = complex25.getImaginary();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(1.0);
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.asin();
      double double0 = 1177.425;
      Complex complex6 = complex0.NaN.negate();
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.cosh();
      String string0 = complex4.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex2.INF.subtract(complex0);
      Complex complex6 = complex1.pow(7.55158797540476E185);
      Complex complex7 = Complex.valueOf(7.55158797540476E185);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.reciprocal();
      double double0 = complex0.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.NaN.subtract(complex0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex0.createComplex(0.0, Double.NaN);
      String string0 = complex4.I.toString();
      Complex complex5 = complex1.multiply(2735.19881);
      Complex complex6 = complex1.createComplex(0.0, 20.0);
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex7.atan();
      Complex complex9 = Complex.valueOf(0.0, 1243.1125825139611);
      ComplexField complexField1 = complex9.getField();
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1482.712979));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = Complex.valueOf((-1482.712979));
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.subtract(complex0);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex0.INF.asin();
      boolean boolean0 = complex2.ZERO.equals("");
      Complex complex8 = complex2.NaN.reciprocal();
      double double1 = complex2.getImaginary();
      Complex complex9 = complex2.divide((-3.141592653589793));
      Complex complex10 = complex9.sin();
      double double2 = complex10.I.abs();
      Complex complex11 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.I.pow(0.0);
      Complex complex13 = complex3.acos();
      Complex complex14 = complex13.ONE.acos();
      Complex complex15 = complex0.pow(complex13);
      Complex complex16 = complex2.tanh();
      Complex complex17 = complex16.INF.cosh();
      Complex complex18 = complex17.ONE.acos();
      Complex complex19 = complex16.pow(Double.POSITIVE_INFINITY);
      Complex complex20 = complex8.pow(3367.41843);
      Complex complex21 = complex6.negate();
      String string0 = complex5.toString();
      Complex complex22 = complex15.cosh();
      Complex complex23 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      try { 
        complex0.nthRoot((-46));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -46
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-518.883944945));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.pow(3214.2832163);
      int int0 = complex4.NaN.hashCode();
      Complex complex7 = complex4.NaN.add(complex2);
      Complex complex8 = Complex.valueOf(261.69055148395, 261.69055148395);
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex0.divide(complex1);
      Complex complex13 = complex12.ONE.divide(261.69055148395);
      Complex complex14 = Complex.valueOf((-518.883944945), (-1.0));
      double double0 = complex0.getReal();
      Complex complex15 = complex1.multiply((-1.0));
      Complex complex16 = Complex.INF;
      Complex complex17 = complex9.pow(complex16);
      Complex complex18 = complex14.pow(2723.64);
      int int1 = complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.negate();
      double double0 = complex0.abs();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex1.tan();
      int int0 = complex1.NaN.hashCode();
      double double1 = complex2.NaN.abs();
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex0.INF.subtract(complex5);
      Complex complex8 = complex7.I.asin();
      int int1 = complex5.ONE.hashCode();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.ONE.exp();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex6.equals(object0);
      double double2 = complex2.abs();
      Complex complex12 = complex9.exp();
      Complex complex13 = complex6.pow(complex1);
      Complex complex14 = complex1.pow(2.0);
      Complex complex15 = complex14.I.pow(2.0);
      String string0 = complex4.toString();
      Complex complex16 = complex6.sin();
      Complex complex17 = new Complex((-285.36177585848));
      Complex complex18 = complex4.divide(complex17);
      Complex complex19 = complex8.acos();
      double double3 = complex17.abs();
      Complex complex20 = new Complex(2.3988752365112305, 3028.640213919822);
      Complex complex21 = complex1.add(complex20);
      Complex complex22 = complex5.atan();
      Complex complex23 = complex11.subtract(complex19);
      Complex complex24 = complex20.sqrt();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2208.072);
      Complex complex1 = complex0.tanh();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = Complex.valueOf(1481.8795073);
      Complex complex3 = Complex.valueOf(1481.8795073, 0.0);
      Complex complex4 = complex0.subtract(complex3);
      int int0 = 37;
      Complex complex5 = complex4.multiply((double) 37);
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex5.ZERO.cosh();
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex4.INF.multiply(37);
      Complex complex10 = complex9.I.multiply(complex1);
      try { 
        complex10.nthRoot((-1015));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,015
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.valueOf(1.9906256185827793E-69, 0.0);
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex2.INF.sqrt();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-3220.1744474702537));
      Complex complex2 = complex1.I.divide((-3220.1744474702537));
      Complex complex3 = complex0.I.sqrt();
      Object object0 = complex0.ONE.readResolve();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex4.I.divide((-3220.1744474702537));
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex7 = complex3.NaN.createComplex(4003.905875874, 4003.905875874);
      Complex complex8 = complex0.INF.divide(863.44);
      Complex complex9 = complex0.atan();
      Complex complex10 = Complex.valueOf((-3732.4555));
      Complex complex11 = complex9.ONE.cos();
      Complex complex12 = complex4.divide((-20.0));
      Complex complex13 = complex3.add(0.0);
      ComplexField complexField1 = complex2.getField();
      Complex complex14 = complex10.acos();
      String string0 = complex5.toString();
      Complex complex15 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1109.0056292);
      double double0 = complex0.INF.getArgument();
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.atan();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.cos();
      try { 
        complex3.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex1.getReal();
      Object object0 = new Object();
      boolean boolean0 = complex2.NaN.equals(object0);
      Complex complex3 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.NaN.multiply(2204.1050226792);
      Complex complex6 = complex2.cosh();
      boolean boolean1 = complex2.equals(complex6);
      Complex complex7 = complex1.divide(0.0);
      Complex complex8 = complex6.negate();
      Complex complex9 = complex2.I.add(0.0);
      Complex complex10 = complex8.NaN.acos();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = complex8.pow(complex5);
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex14.nthRoot(729);
      Complex complex15 = complex13.exp();
      Complex complex16 = complex12.pow(2627.59);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.createComplex(0.0, 20.0);
      Complex complex2 = complex1.NaN.multiply(0);
      Complex complex3 = complex2.ZERO.subtract((double) 0);
      Complex complex4 = complex3.NaN.multiply(0.0);
      Complex complex5 = complex4.ZERO.pow(complex2);
      Complex complex6 = complex0.INF.tanh();
      String string0 = complex4.toString();
      Complex complex7 = Complex.valueOf(0.0, 0.6608942747116089);
      double double0 = complex0.getReal();
      Complex complex8 = complex1.negate();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex3.multiply(complex9);
      Complex complex11 = complex10.NaN.multiply(0);
      Complex complex12 = complex3.asin();
      Complex complex13 = complex2.multiply(0.0);
      boolean boolean0 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2972.87305003884), (-197.27429));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.I.subtract(1117.0);
      double double0 = complex0.abs();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.INF.subtract((-197.27429));
      Complex complex6 = complex4.sin();
      Object object0 = complex6.NaN.readResolve();
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-2.8245462428022094E-8), (-2.8245462428022094E-8));
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex1.nthRoot(1788);
      Complex complex2 = complex1.ONE.exp();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.add(1.2840977763293412E-303);
      double double0 = complex3.ZERO.getArgument();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.I.tan();
      Complex complex6 = Complex.valueOf((-2.8245462428022094E-8));
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.INF.multiply(5103.16045);
      Complex complex9 = Complex.valueOf((-2.8245462428022094E-8), (-2.8245462428022094E-8));
      List<Complex> list1 = complex9.nthRoot(734);
      boolean boolean0 = complex9.equals((Object) null);
      Complex complex10 = complex1.sinh();
      String string0 = complex5.toString();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex7.add(complex0);
      Complex complex14 = complex8.multiply(1788);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(3713.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.I.add(complex1);
      Complex complex7 = complex5.I.exp();
      String string0 = complex0.ONE.toString();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex1.I.subtract(3713.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex10 = complex4.I.exp();
      Complex complex11 = complex0.exp();
      Complex complex12 = complex4.subtract(complex6);
      ComplexField complexField1 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-406.605695), (-406.605695));
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = new Complex((-406.605695));
      Complex complex5 = complex4.ZERO.add(complex0);
      int int0 = complex5.INF.hashCode();
      double double0 = complex5.getArgument();
      Complex complex6 = complex0.pow(complex4);
      double double1 = complex3.getReal();
      Complex complex7 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1232.0), (-1232.0));
      Complex complex1 = complex0.subtract((-396.802180413508));
      Complex complex2 = complex1.ONE.createComplex((-1170.6866204054586), (-396.802180413508));
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.add(0.0);
      Complex complex6 = complex3.pow(complex4);
      Complex complex7 = complex6.divide(complex0);
      boolean boolean0 = complex6.equals(complex4);
      Complex complex8 = complex4.multiply(complex2);
      Complex complex9 = Complex.valueOf(764.157802);
      boolean boolean1 = complex0.equals("qhx]xq");
      Complex complex10 = complex0.atan();
      Complex complex11 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(Double.NaN);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.I.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex1.I.subtract(complex0);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.NaN.divide(3725.412646);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.NaN.negate();
      boolean boolean0 = complex0.equals(complex7);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex8.subtract(complex9);
      boolean boolean1 = complex2.isNaN();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex11.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.createComplex((-20.0), (-20.0));
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.acos();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf(935.54719486, 1217.05925);
      boolean boolean1 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.multiply(188);
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex1.subtract(2.3684740712822874E-41);
      Complex complex5 = complex2.I.sqrt();
      double double0 = complex2.ZERO.getArgument();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex8.I.add(2.3684740712822874E-41);
      Complex complex10 = complex9.NaN.exp();
      Complex complex11 = complex10.ONE.divide(2.3684740712822874E-41);
      Complex complex12 = complex1.multiply((-1332.0));
      Complex complex13 = Complex.valueOf((-1332.0));
      ComplexField complexField0 = complex10.getField();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex0.negate();
      boolean boolean0 = complex14.isNaN();
      Complex complex16 = complex1.add((-1150.092953645849));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1218.194980914));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.sin();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.tan();
      double double0 = complex1.getArgument();
      Complex complex6 = complex2.multiply(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-364.0));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.log();
      double double1 = complex1.ZERO.getArgument();
      List<Complex> list0 = complex1.NaN.nthRoot(1394);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ZERO.sqrt1z();
      double double2 = complex3.I.abs();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.multiply(8.979279989292184E-9);
      Complex complex5 = complex4.multiply(3.141592653589793);
      Complex complex6 = complex4.subtract(1352.976);
      Complex complex7 = complex5.NaN.exp();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.ONE.multiply(complex7);
      double double3 = complex5.getArgument();
      Complex complex10 = complex5.add(complex0);
      List<Complex> list1 = complex4.INF.nthRoot(1394);
      Complex complex11 = complex8.ONE.sinh();
      Complex complex12 = complex10.createComplex(1.0541496276855469, 1352.976);
      Complex complex13 = complex12.ONE.log();
      Complex complex14 = complex12.ONE.atan();
      Complex complex15 = complex8.subtract(complex0);
      Complex complex16 = complex8.sqrt1z();
      Complex complex17 = complex16.asin();
      Complex complex18 = Complex.valueOf((-1.0));
      Complex complex19 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2586.773884540033));
      Complex complex1 = complex0.ZERO.log();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.sqrt1z();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.pow((-2586.773884540033));
      Complex complex6 = Complex.valueOf((-6.824454861992054E-31), (-6.824454861992054E-31));
      Object object0 = complex5.INF.readResolve();
      Complex complex7 = complex3.divide(0.45870959758758545);
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.pow((-6.824454861992054E-31));
      Complex complex10 = complex2.ONE.acos();
      Complex complex11 = complex0.createComplex((-6.824454861992054E-31), (-2586.773884540033));
      Object object1 = complex3.readResolve();
      Complex complex12 = complex4.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-3523.633));
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.ZERO.asin();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex0.INF.sin();
      double double1 = complex0.getReal();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex1.sinh();
      ComplexField complexField0 = complex8.NaN.getField();
      double double2 = complex0.getArgument();
      Complex complex9 = complex0.exp();
      boolean boolean0 = complex2.equals("sxpGj~YrKV");
      double double3 = complex2.getImaginary();
      Complex complex10 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.INF.multiply(927.424115869903);
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.I.multiply((-1439));
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex5.I.cosh();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex1.ONE.atan();
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex9.add(complex10);
      Complex complex12 = Complex.valueOf(927.424115869903, 927.424115869903);
      Complex complex13 = complex0.createComplex(2.0, 1867.1925764977);
      Complex complex14 = complex0.divide(complex2);
      Complex complex15 = Complex.valueOf(2.0, 2.0);
      Complex complex16 = complex10.multiply(complex5);
      Complex complex17 = complex12.asin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1457.51802616646));
      Complex complex1 = Complex.I;
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.I.divide((-1457.51802616646));
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex4.ONE.divide(complex0);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Object object1 = complex2.readResolve();
      double double1 = complex2.getReal();
      Complex complex6 = complex0.atan();
      double double2 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9985313415527344, 0.9985313415527344);
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf(0.9985313415527344);
      Complex complex2 = complex1.INF.multiply((-4349));
      Complex complex3 = complex0.multiply(complex1);
      boolean boolean0 = complex2.ZERO.equals(complex3);
      String string0 = complex3.I.toString();
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex2.equals(complex3);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.ZERO.subtract(complex2);
      Complex complex7 = complex6.NaN.cosh();
      Object object0 = complex0.NaN.readResolve();
      Complex complex8 = complex4.negate();
      Complex complex9 = Complex.I;
      Complex complex10 = complex8.NaN.pow(complex9);
      Complex complex11 = complex0.divide(851.2646579526904);
      int int0 = complex11.hashCode();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex6.add(3.634781057940233E121);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1848.37170201752));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex((-1848.37170201752), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = Complex.ZERO;
      boolean boolean0 = complex2.equals(complex5);
      Complex complex6 = complex5.ONE.pow(complex2);
      Complex complex7 = complex1.add(Double.POSITIVE_INFINITY);
      Object object0 = complex1.I.readResolve();
      Complex complex8 = complex0.NaN.sqrt();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex1.divide(complex9);
      Complex complex11 = complex7.ONE.createComplex(3201.74, 0.0);
      double double0 = complex0.abs();
      Complex complex12 = complex1.multiply(6.283185307179586);
      Complex complex13 = complex12.NaN.createComplex(3201.74, 0.0);
      double double1 = complex5.getImaginary();
      Object object1 = complex11.NaN.readResolve();
      Complex complex14 = complex11.divide(0.0);
      Complex complex15 = complex14.I.log();
      Complex complex16 = complex8.sinh();
      Complex complex17 = complex8.sqrt1z();
      Complex complex18 = complex13.asin();
      List<Complex> list0 = complex18.ONE.nthRoot(1081);
      boolean boolean1 = complex13.isInfinite();
      ComplexField complexField0 = complex12.getField();
      Complex complex19 = complex12.createComplex(0.0, 0.0);
      ComplexField complexField1 = complex19.getField();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.INF.multiply(0);
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex0.subtract(2877.573717756);
      double double1 = complex2.getArgument();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex4.add(complex3);
      double double2 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3912.7734768), 2184.70859);
      Complex complex1 = new Complex((-3912.7734768), 0.0);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.pow((-2398.3235061));
      Complex complex3 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4127.53941053626), (-4127.53941053626));
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0, Double.NaN);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.cos();
      double double0 = complex4.abs();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex4.NaN.sqrt();
      Complex complex9 = Complex.valueOf((-673.6897842806), 4.1719443712336026E278);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.multiply(1075);
      Complex complex12 = complex1.add(Double.POSITIVE_INFINITY);
      int int0 = complex12.I.hashCode();
      Complex complex13 = complex6.cos();
      Complex complex14 = complex0.subtract(complex6);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex15 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(723.4766333668467, (-217.438601));
      Complex complex2 = Complex.valueOf((-217.438601));
      Complex complex3 = complex0.INF.add(0.0);
      Complex complex4 = complex3.NaN.sqrt();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex1.ONE.cos();
      double double0 = complex0.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex3.ZERO.add(0.0);
      double double1 = complex4.abs();
      double double2 = complex1.abs();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex3.add(complex7);
      Complex complex9 = complex8.divide(Double.NaN);
      String string0 = complex3.toString();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex9.add(complex11);
      Complex complex13 = Complex.valueOf((-1828.71728153), 0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex2.NaN.negate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex0.multiply((-840.8713820985647));
      Complex complex8 = complex7.sin();
      Complex complex9 = complex0.ONE.sinh();
      Complex complex10 = complex6.tan();
      String string0 = complex10.toString();
      int int0 = complex6.hashCode();
      double double0 = complex7.abs();
      Complex complex11 = complex0.multiply(840.8713820985647);
      Complex complex12 = complex4.exp();
      Complex complex13 = complex2.add(complex1);
      double double1 = complex0.getImaginary();
      Complex complex14 = complex13.negate();
      Complex complex15 = complex6.pow((-840.8713820985647));
      double double2 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.0);
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex2.NaN.add(0.0);
      Complex complex5 = complex4.I.add(complex3);
      Complex complex6 = complex0.pow(2.965546585110978E236);
      Complex complex7 = complex3.sqrt();
      boolean boolean1 = complex2.equals(complex7);
      Complex complex8 = complex6.divide(20.0);
      Complex complex9 = complex8.NaN.pow(2.965546585110978E236);
      Complex complex10 = Complex.valueOf(2.965546585110978E236);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex11.multiply(complex12);
      double double0 = complex7.getArgument();
      Complex complex14 = complex10.add(3585.4001);
      Complex complex15 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2102.5672627));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.log();
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex0.ZERO.conjugate();
      double double1 = complex7.getArgument();
      Complex complex9 = complex3.pow(0.0);
      List<Complex> list0 = complex0.nthRoot(144);
      double double2 = complex6.abs();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, (-2273.17808550266));
      Complex complex2 = complex1.INF.multiply((-2273.17808550266));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ZERO.exp();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      double double0 = complex0.abs();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex2.add(1.0);
      double double1 = complex1.ZERO.abs();
      Complex complex4 = complex3.ONE.multiply((-3092));
      Complex complex5 = complex2.createComplex(2197.37, 3353.08588422);
      int int0 = complex1.hashCode();
      Complex complex6 = complex4.multiply((-1684));
      Complex complex7 = complex4.divide(complex5);
      Complex complex8 = Complex.valueOf(1483.1196152320167, 0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2977.77459));
      Complex complex1 = complex0.I.tan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex2.INF.sqrt();
      Complex complex5 = complex4.I.exp();
      Object object1 = complex2.readResolve();
      Complex complex6 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1147.89));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex2.log();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.NaN.sqrt();
      Complex complex9 = complex6.log();
      double double0 = complex9.NaN.getArgument();
      double double1 = complex1.getImaginary();
      Complex complex10 = complex0.INF.add(complex6);
      Complex complex11 = complex7.pow(3821.78173501357);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.pow(0.0);
      int int0 = complex2.INF.hashCode();
      int int1 = complex2.I.hashCode();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.I.multiply(17);
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex5.ZERO.createComplex(60.40575369161831, (-325.3970527081));
      Complex complex7 = complex0.createComplex(0.0, (-1683.81159578));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex0.NaN.acos();
      Complex complex5 = complex1.NaN.atan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.ONE.divide(complex6);
      int int0 = complex0.hashCode();
      int int1 = complex1.hashCode();
      Complex complex8 = complex0.exp();
      List<Complex> list0 = complex7.nthRoot(1);
      double double0 = complex2.getImaginary();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      double double0 = complex1.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.exp();
      String string0 = complex0.toString();
      Complex complex2 = Complex.ZERO;
      boolean boolean0 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.I.add(complex4);
      Complex complex6 = complex5.I.multiply(Double.NaN);
      Complex complex7 = complex1.I.multiply(complex3);
      int int0 = complex5.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex4.nthRoot(1093);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.ONE.add(Double.NaN);
      Complex complex11 = complex9.ZERO.negate();
      Complex complex12 = complex9.INF.conjugate();
      String string0 = complex5.toString();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex6.divide(complex2);
      Complex complex15 = complex0.add(complex5);
      Complex complex16 = complex14.INF.sinh();
      Complex complex17 = complex0.cos();
      Complex complex18 = complex16.INF.sqrt();
      Complex complex19 = complex4.INF.sqrt();
      Complex complex20 = Complex.valueOf(Double.NaN);
      ComplexField complexField0 = complex19.ONE.getField();
      Complex complex21 = complex11.negate();
      Complex complex22 = complex5.pow((-2005.105));
      Complex complex23 = complex0.sqrt();
      Complex complex24 = complex4.tanh();
      Complex complex25 = complex19.sinh();
      Complex complex26 = complex22.sqrt();
      double double0 = complex24.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add(2233.46556);
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.valueOf(2233.46556, 2233.46556);
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex1.INF.multiply(complex0);
      double double0 = complex4.ONE.getArgument();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.NaN.exp();
      double double1 = complex0.abs();
      Complex complex7 = Complex.valueOf(1.0, 1429.64);
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex1.divide((-3985.8160569205875));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1067.3746));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.createComplex(1.723826394935661E-7, (-1067.3746));
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.createComplex(3.141592653589793, 1.723826394935661E-7);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-698.9378310904694));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.pow((-1.5544655377217875E203));
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex0.INF.acos();
      Complex complex6 = complex0.I.reciprocal();
      Complex complex7 = complex4.ZERO.divide(3323.95);
      Complex complex8 = complex0.createComplex(893.2372, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3537.3336372113054);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.NaN.cosh();
      double double0 = complex3.getReal();
      Complex complex6 = complex0.add(3537.3336372113054);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1532.432), (-1532.432));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.negate();
      double double0 = complex2.getImaginary();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex0.ONE.add((-1.118706134478866E-7));
      Complex complex6 = complex1.subtract(0.0);
      double double1 = complex6.getImaginary();
      Complex complex7 = new Complex(1430.0);
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-2949.0590791));
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex1.isNaN();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex1.multiply((-2949.0590791));
      Complex complex5 = complex2.ONE.multiply((-1155));
      Complex complex6 = complex2.add((-2120.38658));
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double double0 = 1209.3979721602;
      Complex complex0 = Complex.valueOf(3130.69113747, 1209.3979721602);
      Object object0 = complex0.INF.readResolve();
      try { 
        complex0.nthRoot((-240));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -240
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.INF.subtract((-1481.96776185673));
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.divide((-1.0));
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex0.createComplex((-1.0), (-1.440995270758115E-291));
      Complex complex10 = complex0.sqrt();
      Object object1 = complex4.readResolve();
      boolean boolean0 = complex6.equals(object1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.I.cos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.I.tanh();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex0.sin();
      double double0 = complex6.getReal();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex7.negate();
      Complex complex12 = complex2.multiply(1825);
      Complex complex13 = complex1.multiply((-948.715085));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.cos();
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex3.subtract(complex1);
      boolean boolean1 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-1.0));
      Complex complex2 = complex1.ONE.divide((-1.0));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.INF.divide(complex3);
      String string0 = complex1.toString();
      double double0 = complex0.getReal();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.I.multiply(2685);
      boolean boolean0 = complex1.equals(complex3);
      Complex complex8 = complex0.cosh();
      boolean boolean1 = complex1.isInfinite();
      Complex complex9 = complex0.log();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex4.divide(0.0);
      Complex complex8 = Complex.valueOf((-4.316580502355056E-8), (-4.316580502355056E-8));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex0.abs();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.atan();
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.ZERO.reciprocal();
      double double0 = complex2.getReal();
      Complex complex6 = new Complex(858.40742);
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.multiply(1774.7);
      Complex complex2 = complex1.NaN.sqrt1z();
      double double0 = complex2.INF.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.I.subtract(complex4);
      Complex complex6 = complex3.sin();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      List<Complex> list0 = complex0.NaN.nthRoot(922);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.sin();
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex0.NaN.multiply(complex2);
      Complex complex5 = complex0.NaN.tanh();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex0.getReal();
      Complex complex6 = complex0.conjugate();
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex6.I.atan();
      Complex complex9 = Complex.valueOf(2.0);
      Complex complex10 = complex8.ZERO.multiply(complex9);
      Complex complex11 = complex1.INF.sinh();
      Complex complex12 = complex7.I.acos();
      Complex complex13 = complex6.acos();
      Complex complex14 = complex13.NaN.tan();
      Complex complex15 = complex14.ZERO.atan();
      Complex complex16 = complex7.ZERO.tanh();
      Complex complex17 = complex14.ZERO.tanh();
      Complex complex18 = complex7.cosh();
      Complex complex19 = Complex.valueOf((-1.0));
      double double1 = complex19.I.getArgument();
      Complex complex20 = complex0.pow(complex4);
      Complex complex21 = complex1.acos();
      Complex complex22 = complex5.asin();
      Complex complex23 = complex5.createComplex(6.283185307179586, 31.61372);
      boolean boolean0 = complex0.isNaN();
      Complex complex24 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = 1420.1442;
      Complex complex0 = Complex.valueOf(0.0, 1420.1442);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.subtract(complex0);
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex3.I.sqrt1z();
      double double0 = complex3.ZERO.abs();
      Complex complex8 = complex0.ZERO.multiply(1256);
      Complex complex9 = complex7.NaN.multiply((-462));
      Complex complex10 = complex2.log();
      double double1 = complex3.abs();
      Complex complex11 = complex1.createComplex(2.0, 0.0);
      Complex complex12 = complex0.pow(complex2);
      Complex complex13 = complex12.tanh();
      Complex complex14 = complex3.sin();
      Complex complex15 = complex1.divide(2.0);
      Object object1 = complex15.ONE.readResolve();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
      Complex complex17 = complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1774.4);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.ZERO.multiply(complex0);
      Complex complex8 = complex1.INF.sqrt();
      Complex complex9 = complex8.INF.multiply(complex2);
      Complex complex10 = complex8.INF.cos();
      Complex complex11 = complex8.ONE.divide(1774.4);
      Complex complex12 = complex11.ONE.tanh();
      boolean boolean0 = complex6.NaN.equals(complex8);
      Complex complex13 = complex6.tan();
      Complex complex14 = complex6.I.subtract((-1276.1267417));
      Complex complex15 = complex14.ONE.multiply(complex0);
      Complex complex16 = complex14.ZERO.negate();
      Complex complex17 = complex16.ONE.add(complex13);
      Complex complex18 = Complex.ZERO;
      Complex complex19 = complex2.I.add(complex18);
      Complex complex20 = complex1.negate();
      Complex complex21 = complex20.ONE.log();
      Complex complex22 = complex6.conjugate();
      Complex complex23 = complex18.sqrt();
      Complex complex24 = complex19.tan();
      Complex complex25 = complex19.atan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(365.515551475);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.createComplex(0.0, 365.515551475);
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex0.exp();
      double double0 = complex8.getArgument();
      Complex complex9 = complex0.asin();
      boolean boolean0 = complex8.isInfinite();
      Complex complex10 = complex8.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.ZERO.conjugate();
      double double0 = complex2.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex5.subtract(complex1);
      String string0 = complex8.INF.toString();
      Complex complex9 = complex0.subtract(complex5);
      Complex complex10 = complex9.I.atan();
      Complex complex11 = complex0.NaN.cos();
      Complex complex12 = complex9.I.sqrt1z();
      Complex complex13 = Complex.valueOf(2701.9791329399027);
      Complex complex14 = complex10.sqrt1z();
      try { 
        complex13.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1588.045408255949);
      Object object0 = new Object();
      boolean boolean0 = complex0.I.equals(object0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.ZERO.subtract(0.0);
      ComplexField complexField1 = complex1.getField();
      boolean boolean1 = complex1.isNaN();
      boolean boolean2 = complex1.equals("");
      String string0 = complex2.toString();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.INF.multiply(complex1);
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex6 = complex3.add((-1697.1807144662944));
      Complex complex7 = Complex.valueOf(0.19622188806533813);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      Complex complex1 = Complex.valueOf((-20.0));
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.I.divide(complex0);
      int int0 = complex0.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex0.atan();
      boolean boolean1 = complex3.isNaN();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.valueOf((-3564.1360058520268));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex0.pow(complex8);
      int int1 = complex7.hashCode();
      List<Complex> list0 = complex6.nthRoot(1675);
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex6.multiply(42);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      int int0 = 0;
      try { 
        complex1.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.452316818502442E-102);
      Complex complex1 = complex0.NaN.multiply(3.452316818502442E-102);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.NaN.sqrt1z();
      double double0 = complex4.abs();
      Complex complex5 = complex0.multiply(20.0);
      Complex complex6 = complex5.ZERO.asin();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.valueOf(Double.NaN, 1044.172784506524);
      Complex complex9 = complex2.pow(complex6);
  }
}
