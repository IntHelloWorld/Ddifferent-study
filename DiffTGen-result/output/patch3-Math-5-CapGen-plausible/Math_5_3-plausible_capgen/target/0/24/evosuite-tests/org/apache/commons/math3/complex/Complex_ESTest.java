/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:17:43 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex0.ZERO.nthRoot(1042);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.cosh();
      int int0 = complex4.INF.hashCode();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex0.NaN.sqrt1z();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex1.I.tan();
      Object object0 = new Object();
      boolean boolean0 = complex3.INF.equals(object0);
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.valueOf((double) 0);
      double double1 = complex2.I.abs();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.I.cosh();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.exp();
      double double2 = complex1.getArgument();
      Complex complex9 = complex6.pow(2.0);
      Complex complex10 = Complex.valueOf(0.0, Double.NaN);
      Complex complex11 = complex2.exp();
      double double3 = complex9.getArgument();
      Complex complex12 = complex5.subtract(1020.8799470797746);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1718.6374990091, 20.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex1.add((-2622.504437313));
      int int0 = complex0.ZERO.hashCode();
      Complex complex5 = complex0.ZERO.acos();
      Complex complex6 = complex0.I.multiply(1615.448074537);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.sinh();
      ComplexField complexField0 = complex8.ONE.getField();
      Complex complex9 = complex0.multiply(0);
      Object object0 = complex4.ZERO.readResolve();
      Complex complex10 = complex9.cos();
      double double0 = complex9.abs();
      Complex complex11 = Complex.I;
      Complex complex12 = complex3.ONE.subtract(complex11);
      Complex complex13 = complex10.exp();
      double double1 = complex4.getImaginary();
      ComplexField complexField1 = complex6.getField();
      Complex complex14 = complex2.multiply(complex3);
      Complex complex15 = complex12.ONE.add(Double.NaN);
      Complex complex16 = complex2.subtract(complex6);
      Complex complex17 = complex11.asin();
      Complex complex18 = complex4.asin();
      Complex complex19 = complex18.ZERO.pow((double) 0);
      Object object1 = complex6.readResolve();
      Complex complex20 = complex11.ONE.add(complex18);
      ComplexField complexField2 = complex13.getField();
      double double2 = complex5.abs();
      Complex complex21 = complex12.reciprocal();
      Complex complex22 = complex3.NaN.tanh();
      Complex complex23 = complex12.sinh();
      Complex complex24 = complex21.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4384.084798907651), (-4384.084798907651));
      List<Complex> list0 = complex0.ONE.nthRoot(352);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex1.divide((-9.400056055939758E-8));
      Complex complex7 = complex2.NaN.negate();
      Complex complex8 = Complex.valueOf(0.0, (double) 352);
      Complex complex9 = Complex.valueOf((-4384.084798907651));
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex1.tan();
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex10.ZERO.sqrt();
      Complex complex15 = Complex.I;
      Complex complex16 = complex9.ONE.pow(complex15);
      Complex complex17 = complex0.asin();
      Complex complex18 = complex17.ONE.log();
      Complex complex19 = Complex.valueOf((double) 352, 0.0);
      Complex complex20 = complex19.NaN.sqrt();
      Complex complex21 = complex10.negate();
      Complex complex22 = complex9.cos();
      Complex complex23 = complex22.log();
      Complex complex24 = complex17.sqrt1z();
      Complex complex25 = complex17.pow(complex14);
      double double0 = complex10.getImaginary();
      double double1 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-425.5812), (-425.5812));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.I.sqrt1z();
      Complex complex5 = complex4.I.divide((-425.5812));
      Complex complex6 = complex4.pow((-1723.173627124333));
      Complex complex7 = complex2.ONE.multiply(complex0);
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex8.ZERO.pow(complex7);
      Complex complex10 = complex3.sqrt1z();
      double double0 = complex0.getImaginary();
      Complex complex11 = complex1.tan();
      Complex complex12 = complex11.multiply((-425.5812));
      Complex complex13 = complex11.I.sin();
      Complex complex14 = complex0.sqrt1z();
      Complex complex15 = complex14.negate();
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex3.pow((-9.516785302789955));
      Complex complex18 = complex12.cosh();
      Complex complex19 = complex18.ONE.exp();
      Complex complex20 = complex15.cosh();
      ComplexField complexField0 = complex13.getField();
      double double1 = complex10.getImaginary();
      double double2 = complex14.abs();
      Complex complex21 = complex15.acos();
      Complex complex22 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(81.136792532);
      Complex complex1 = new Complex(81.136792532, 81.136792532);
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = complex2.ONE.add(2293.2139);
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex2.I.conjugate();
      boolean boolean0 = complex6.ZERO.equals(complex0);
      Complex complex7 = complex0.atan();
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex5.atan();
      Complex complex9 = Complex.valueOf(627.5070071632434, 2293.2139);
      Complex complex10 = complex9.sin();
      Complex complex11 = complex9.ZERO.exp();
      Complex complex12 = complex8.divide(2069.25);
      Complex complex13 = complex5.log();
      boolean boolean1 = complex10.isInfinite();
      boolean boolean2 = complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.multiply(37);
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex2.ONE.pow(0.0);
      Complex complex7 = complex6.I.multiply(complex0);
      Complex complex8 = complex1.I.add(complex6);
      List<Complex> list0 = complex7.INF.nthRoot(1);
      double double0 = complex6.getArgument();
      List<Complex> list1 = complex7.ZERO.nthRoot(1);
      Complex complex9 = complex7.INF.atan();
      Complex complex10 = Complex.valueOf((double) 1, 0.0);
      Complex complex11 = complex0.ZERO.sqrt1z();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex1.exp();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex13.ZERO.add(complex14);
      Complex complex16 = complex0.divide(1662.05206901722);
      Complex complex17 = complex13.pow(complex2);
      int int0 = complex17.INF.hashCode();
      Complex complex18 = complex0.atan();
      List<Complex> list2 = complex7.nthRoot(1);
      double double1 = complex7.getReal();
      Complex complex19 = complex8.sinh();
      Complex complex20 = complex10.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-755.72648), (-755.72648));
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add((-755.72648));
      Object object0 = complex2.INF.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex2.multiply(89);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.subtract((double) 89);
      try { 
        complex1.NaN.nthRoot((-1864));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,864
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.I.divide(903.9103809135);
      Complex complex4 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(4625.873835285, 4625.873835285);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.cosh();
      String string0 = complex1.toString();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex0.subtract((-2366.00322494846));
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex4.multiply(1);
      Complex complex11 = complex10.NaN.multiply(4625.873835285);
      Complex complex12 = complex6.atan();
      Complex complex13 = complex2.acos();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex11.isInfinite();
      Complex complex14 = complex13.divide(394.83);
      Complex complex15 = complex3.I.log();
      Complex complex16 = complex11.subtract(complex12);
      Complex complex17 = complex3.conjugate();
      Complex complex18 = complex13.asin();
      Complex complex19 = complex9.subtract(816.5663);
      Complex complex20 = complex19.cos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1412.97136, 1412.97136);
      Object object0 = complex0.I.readResolve();
      boolean boolean0 = complex0.NaN.equals("");
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(1412.97136);
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.atan();
      List<Complex> list0 = complex3.I.nthRoot(1787);
      Complex complex5 = complex2.INF.pow(0.0);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = Complex.valueOf(795.6701, 1412.97136);
      Complex complex8 = complex2.atan();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex9.ZERO.createComplex(1866.52319, 0.0);
      Complex complex11 = complex9.NaN.tanh();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex2.asin();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1745.1), (-1745.1));
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ONE.pow((-1745.1));
      Complex complex5 = complex1.I.asin();
      Complex complex6 = complex1.multiply((-1003));
      Complex complex7 = complex0.sin();
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.ZERO.divide(complex9);
      double double0 = complex2.abs();
      Complex complex11 = complex6.pow(Double.NaN);
      Complex complex12 = complex11.ZERO.sinh();
      Complex complex13 = complex11.atan();
      Complex complex14 = complex7.sqrt();
      Complex complex15 = complex6.tanh();
      Complex complex16 = complex15.ONE.atan();
      Complex complex17 = complex0.multiply((-1745.1));
      Complex complex18 = complex2.cosh();
      Complex complex19 = complex18.sqrt();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex7.getField();
      Complex complex20 = complex6.cosh();
      Complex complex21 = complex13.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex1.NaN.subtract(complex0);
      Complex complex5 = complex2.INF.atan();
      Complex complex6 = complex2.exp();
      boolean boolean0 = complex4.isInfinite();
      Complex complex7 = complex5.ZERO.tanh();
      Complex complex8 = complex3.reciprocal();
      boolean boolean1 = complex5.equals(complex8);
      Complex complex9 = complex2.cos();
      Complex complex10 = Complex.valueOf(1.0);
      Complex complex11 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2867.01911679), 0.0);
      Complex complex1 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex2.I.reciprocal();
      Complex complex7 = complex6.createComplex(2.165163304600171E75, 2.165163304600171E75);
      Complex complex8 = complex1.I.divide(complex0);
      Complex complex9 = complex8.ZERO.multiply(0);
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex0.INF.sinh();
      Complex complex12 = complex11.INF.sin();
      ComplexField complexField0 = complex11.INF.getField();
      String string0 = complex11.NaN.toString();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex8.isInfinite();
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex10.cos();
      Complex complex15 = complex1.createComplex(0.0, 0.0);
      double double1 = complex15.I.getArgument();
      Complex complex16 = complex7.atan();
      Complex complex17 = complex16.INF.cosh();
      Complex complex18 = Complex.valueOf(2.626941680908203, 2071.4146894);
      Complex complex19 = complex18.multiply(4218);
      Complex complex20 = complex19.ZERO.subtract((-1.1603891006723397E-7));
      Complex complex21 = complex19.ONE.pow(complex1);
      Object object0 = new Object();
      boolean boolean1 = complex10.equals(object0);
      Complex complex22 = complex19.cos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 3.2999073763758614E-8;
      Complex complex0 = Complex.valueOf(3.2999073763758614E-8);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex0.NaN.atan();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex6.INF.sqrt();
      Complex complex10 = complex6.ZERO.multiply((-3672));
      Complex complex11 = complex3.tanh();
      double double1 = complex7.getImaginary();
      Complex complex12 = complex6.cos();
      Complex complex13 = complex1.cosh();
      List<Complex> list0 = complex13.ONE.nthRoot(1249);
      Complex complex14 = complex13.pow(complex7);
      Complex complex15 = complex11.negate();
      Complex complex16 = complex15.INF.conjugate();
      try { 
        complex11.nthRoot((-1308));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,308
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1704.5987281, 1904.002725395279);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.multiply((-2677.20144176));
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.divide((-2677.20144176));
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.divide((-2546.2461171317273));
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1023.8062859523851));
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.NaN.add(complex0);
      boolean boolean0 = complex2.INF.equals("tw!B4vx6IiVAAix");
      Complex complex3 = complex2.ZERO.conjugate();
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.INF.log();
      Complex complex6 = complex5.INF.divide((-1023.8062859523851));
      double double0 = complex4.getImaginary();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.exp();
      String string1 = complex8.toString();
      Complex complex9 = complex7.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ZERO.getArgument();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.NaN.cos();
      String string0 = complex0.ONE.toString();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.I.sinh();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      Complex complex4 = complex0.multiply((-1288.0));
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.add((-1288.0));
      Complex complex7 = complex4.INF.add(complex0);
      Complex complex8 = complex4.INF.subtract(1.0);
      boolean boolean0 = complex4.isInfinite();
      boolean boolean1 = complex4.isInfinite();
      Object object0 = complex4.readResolve();
      boolean boolean2 = complex1.equals(object0);
      Complex complex9 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1717.8059324);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.add(1717.8059324);
      Object object0 = complex0.ONE.readResolve();
      List<Complex> list0 = complex0.ZERO.nthRoot(870);
      Complex complex4 = Complex.valueOf((-1497.836274412281));
      String string0 = complex0.toString();
      ComplexField complexField0 = complex1.ZERO.getField();
      String string1 = complex3.toString();
      Complex complex5 = complex2.sqrt();
      ComplexField complexField1 = complex3.getField();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex1.INF.add((double) 870);
      Complex complex10 = complex8.INF.divide(1978.5171167095311);
      Complex complex11 = complex3.createComplex(1717.8059324, (-2798.02));
      Complex complex12 = complex2.add(complex6);
      Complex complex13 = complex2.createComplex(1717.8059324, Double.POSITIVE_INFINITY);
      Complex complex14 = complex13.ONE.negate();
      Complex complex15 = complex0.cosh();
      double double0 = complex3.getArgument();
      Complex complex16 = complex11.tanh();
      String string2 = complex6.toString();
      Complex complex17 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.sqrt1z();
      double double0 = complex2.ONE.getArgument();
      double double1 = complex0.INF.abs();
      Complex complex6 = complex0.I.sinh();
      double double2 = complex6.I.abs();
      Complex complex7 = complex6.ZERO.subtract(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex6.negate();
      Complex complex10 = Complex.valueOf((-1394.15));
      boolean boolean1 = complex9.ONE.equals(complex10);
      Complex complex11 = complex9.cos();
      Complex complex12 = complex8.tan();
      Complex complex13 = complex12.multiply(1);
      Complex complex14 = complex12.reciprocal();
      boolean boolean2 = complex7.equals(complex9);
      Complex complex15 = complex2.pow(complex9);
      Complex complex16 = complex11.log();
      Complex complex17 = complex12.atan();
      Complex complex18 = complex9.sqrt();
      Complex complex19 = complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(933.028799622);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-470.2));
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex3.ONE.multiply(933.028799622);
      Complex complex5 = complex1.I.sqrt();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex1.exp();
      int int0 = complex2.hashCode();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.NaN.sqrt();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex0.I.pow(0.5057345628738403);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.negate();
      double double1 = complex0.getArgument();
      Complex complex8 = complex4.log();
      Complex complex9 = complex8.INF.add(Double.NaN);
      Complex complex10 = complex8.INF.add(Double.NaN);
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex3.createComplex(1153.7, Double.NaN);
      Complex complex13 = complex5.atan();
      Complex complex14 = complex13.cos();
      Complex complex15 = complex14.I.sqrt1z();
      int int0 = complex8.hashCode();
      double double2 = complex2.abs();
      Complex complex16 = complex13.pow(complex4);
      double double3 = complex3.getArgument();
      double double4 = complex12.getImaginary();
      Complex complex17 = complex4.divide(3405.4497092);
      List<Complex> list0 = complex14.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.5000000000042687);
      Complex complex1 = complex0.I.subtract(815.918937);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.add(0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex4.INF.exp();
      Complex complex7 = complex0.subtract(2250.1646);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex2.I.log();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex0.multiply(complex7);
      Complex complex12 = complex11.exp();
      Complex complex13 = complex11.ZERO.tan();
      double double0 = complex11.getArgument();
      Complex complex14 = complex3.multiply(1057);
      Complex complex15 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(857.7593823965029);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.INF.subtract(complex0);
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = Complex.ZERO;
      try { 
        complex8.NaN.nthRoot((-78));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -78
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.add(Double.POSITIVE_INFINITY);
      String string0 = complex3.toString();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex3.INF.nthRoot(988);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex0.log();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5153.227), (-5153.227));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = new Complex((-5153.227));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.multiply((-5153.227));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex3.I.equals(complex0);
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf((-1207.26749873), 0.0);
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3754.4276876754), (-951.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex1.multiply((-3754.4276876754));
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      double double0 = complex5.getReal();
      Complex complex6 = Complex.valueOf(1696.3490251036);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2277.06921799653);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex3.cos();
      int int0 = complex7.I.hashCode();
      Complex complex9 = complex3.subtract(complex2);
      double double0 = complex7.getArgument();
      Complex complex10 = complex1.multiply((-1.2106031443502256E-16));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(1061.02174);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf((-7.739491336852633E-8), 2.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1142.65391428, Double.NaN);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(complex0);
      double double0 = complex2.ONE.abs();
      double double1 = complex1.getArgument();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex1.multiply((-1258.28));
      double double2 = complex5.abs();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex3.asin();
      Complex complex10 = complex4.divide(1142.65391428);
      Complex complex11 = complex6.conjugate();
      Object object0 = complex8.readResolve();
      boolean boolean1 = complex11.I.equals(object0);
      Complex complex12 = complex0.add(2108.23);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.ONE.abs();
      double double1 = complex0.INF.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.valueOf(890.05451, 1.0);
      Complex complex4 = complex2.NaN.negate();
      Complex complex5 = complex4.ONE.atan();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex4.ZERO.subtract(complex3);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex1.ONE.atan();
      Complex complex9 = complex8.INF.tan();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex8.ZERO.equals(complex1);
      Complex complex10 = complex0.tanh();
      double double2 = complex2.getImaginary();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex4.subtract(1.0);
      List<Complex> list0 = complex12.NaN.nthRoot(1611);
      boolean boolean2 = complex9.isInfinite();
      Complex complex13 = complex9.log();
      Complex complex14 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4266.9704144806), (-1144.1284291925));
      Complex complex1 = complex0.reciprocal();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex0.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex2.NaN.atan();
      Complex complex7 = Complex.valueOf((-1144.1284291925), (-4266.9704144806));
      Complex complex8 = complex6.INF.divide(complex7);
      Complex complex9 = complex0.add(0.0);
      Complex complex10 = complex9.multiply((-4266.9704144806));
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex9.reciprocal();
      Complex complex14 = complex10.conjugate();
      double double1 = complex7.getArgument();
      String string0 = complex4.toString();
      Complex complex15 = complex10.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4746.99783));
      Complex complex1 = complex0.divide((-4746.99783));
      String string0 = complex1.toString();
      Complex complex2 = complex1.sqrt1z();
      double double0 = complex2.getArgument();
      double double1 = complex0.getImaginary();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.multiply(0.0);
      double double2 = complex3.getArgument();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex4.multiply(0.0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1526.0);
      Complex complex1 = complex0.ONE.pow((-2925.98667));
      Complex complex2 = new Complex((-4432.638268835762));
      boolean boolean0 = complex1.NaN.equals(complex2);
      List<Complex> list0 = complex0.ONE.nthRoot(17);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.add(1526.0);
      Complex complex5 = Complex.valueOf((double) 17);
      double double0 = complex0.getArgument();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex0.multiply(complex4);
      ComplexField complexField0 = complex4.getField();
      List<Complex> list1 = complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-857.556454313), 20.0);
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.asin();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.INF.sinh();
      boolean boolean0 = complex2.NaN.equals((Object) null);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex4.tan();
      boolean boolean1 = complex4.isNaN();
      Complex complex7 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1694.4430598762497));
      Complex complex1 = complex0.NaN.sqrt();
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1537.0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.negate();
      try { 
        complex5.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide((-1.0));
      Complex complex2 = complex1.NaN.cos();
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.pow((-1.0));
      ComplexField complexField0 = complex3.getField();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex3.tan();
      int int1 = complex0.hashCode();
      Complex complex6 = complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.getReal();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.I.add(complex0);
      Complex complex5 = complex0.reciprocal();
      ComplexField complexField1 = complex5.I.getField();
      Complex complex6 = complex0.acos();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 675.125996);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex1.multiply(40.1);
      Complex complex7 = complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.01165061630308628);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(0.01165061630308628);
      Complex complex4 = complex1.divide(33.09592664);
      Complex complex5 = complex4.I.subtract(0.01165061630308628);
      Complex complex6 = complex5.ZERO.createComplex(33.09592664, 5638.0577);
      double double0 = complex2.getArgument();
      Complex complex7 = complex4.multiply(0.2881702184677124);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-223.438450637), 0.0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.I.multiply(1239.6);
      double double1 = complex0.getImaginary();
      Complex complex2 = complex0.pow(7071.77685215429);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-158.6));
      Complex complex1 = complex0.createComplex((-158.6), (-158.6));
      Complex complex2 = complex1.INF.add((-158.6));
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex0.NaN.pow(complex1);
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.multiply((-158.6));
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.pow(complex2);
      double double0 = complex4.getReal();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex1.pow((-1018.3321928));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex1.ZERO.pow(complex3);
      Complex complex5 = complex1.createComplex(694.61292087, (-1387.9));
      Complex complex6 = complex5.INF.multiply(694.61292087);
      Complex complex7 = complex5.ZERO.pow(complex0);
      Complex complex8 = complex7.atan();
      Complex complex9 = complex0.atan();
      Object object0 = complex1.readResolve();
      Complex complex10 = complex0.sqrt1z();
      String string0 = complex10.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1385.23836));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.ZERO.multiply(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1078.4920982));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.subtract((-1181.893921376937));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.I.acos();
      Complex complex5 = complex4.ONE.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1.830322504043579);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      try { 
        complex1.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex3.INF.sqrt1z();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.divide(complex0);
      int int0 = complex1.ONE.hashCode();
      Complex complex3 = complex1.NaN.divide(complex0);
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex3.INF.cos();
      String string0 = complex0.toString();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.add(2.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2322940607922115E-8), 1.0);
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.divide(0.0);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.multiply(37);
      Complex complex5 = complex4.NaN.pow((-1259.0));
      Complex complex6 = complex5.I.divide(Double.NaN);
      Complex complex7 = complex3.I.asin();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = Complex.valueOf(4373.919239821);
      Complex complex10 = complex1.divide(886.88);
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex11 = complex10.INF.tan();
      Complex complex12 = complex3.multiply(complex4);
      boolean boolean0 = complex10.isInfinite();
      Complex complex13 = complex4.cosh();
      int int0 = complex7.hashCode();
      Complex complex14 = Complex.valueOf((double) 37, 0.0);
      Complex complex15 = complex0.divide(0.0);
      ComplexField complexField1 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.INF.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3027.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ZERO.divide(complex4);
      Complex complex7 = Complex.NaN;
      boolean boolean0 = complex5.I.equals(complex7);
      Complex complex8 = complex2.NaN.cosh();
      Complex complex9 = Complex.valueOf(3027.0, 2.0653935146671156E-8);
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex9.sin();
      Complex complex12 = complex2.add(complex11);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      boolean boolean1 = complex2.isNaN();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(3724.1, 3724.1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.NaN;
      List<Complex> list0 = complex2.NaN.nthRoot(1);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.atan();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.INF.multiply(complex3);
      Complex complex7 = complex3.pow((-325.20375513202));
      Complex complex8 = complex0.ZERO.divide(0.0);
      Complex complex9 = complex7.INF.divide((double) 1);
      double double0 = complex9.ZERO.abs();
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex4.subtract(31.5782000037693);
      Complex complex12 = complex0.sqrt1z();
      Complex complex13 = complex1.pow(0.0);
      Complex complex14 = complex7.add((-4100.198610990655));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf((-3632.2697768151565));
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex1.NaN.divide((-230.974540139865));
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.pow((-230.974540139865));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(2259.516);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.multiply(577.17);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex3.conjugate();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 1228.95556);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ZERO.multiply((-1649));
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.NaN.add(complex0);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide((-1430.611));
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.INF.multiply((-1032));
      Object object0 = complex0.readResolve();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.NaN.multiply((double) (-1032));
      Complex complex6 = complex4.multiply(complex0);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex4.ONE.tanh();
      String string0 = complex8.I.toString();
      Object object1 = complex2.readResolve();
      boolean boolean0 = complex0.ONE.equals(object1);
      boolean boolean1 = complex1.ONE.equals(complex0);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex4.add(complex1);
      Complex complex11 = complex10.I.exp();
      double double0 = complex2.abs();
      ComplexField complexField0 = complex1.I.getField();
      boolean boolean2 = complex2.isNaN();
      boolean boolean3 = complex5.isInfinite();
      Complex complex12 = complex1.log();
      Complex complex13 = complex5.multiply(1760);
      Complex complex14 = complex12.createComplex((-4.852711011229633E-9), (-1690.9443));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1342.574955);
      Complex complex1 = new Complex(1342.574955, 1342.574955);
      double double0 = complex1.I.getArgument();
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.subtract(1.5707963267948966);
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = Complex.valueOf(3.493427277593156E19);
      Complex complex5 = complex0.subtract(complex1);
      double double1 = complex5.NaN.abs();
      Complex complex6 = complex1.reciprocal();
      Object object1 = complex5.readResolve();
      boolean boolean0 = complex6.equals(object1);
      Complex complex7 = complex3.I.atan();
      Complex complex8 = complex7.ZERO.sqrt();
      Complex complex9 = complex0.atan();
      String string0 = complex4.ZERO.toString();
      Complex complex10 = complex9.createComplex(0.0, 1.5707963267948966);
      Complex complex11 = complex3.ZERO.divide(complex5);
      Complex complex12 = complex10.I.atan();
      Complex complex13 = complex4.I.conjugate();
      Complex complex14 = complex10.NaN.pow(complex6);
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2350.315223071508);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.ZERO.acos();
      boolean boolean0 = complex2.INF.equals("AP?l6J%,WeW?");
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.I.sqrt1z();
      try { 
        complex5.I.nthRoot((-903));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -903
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1540.62208871));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex2.ONE.multiply(192);
      Complex complex7 = Complex.valueOf(1.548830270767212, (-1256.208491783238));
      Complex complex8 = complex3.ONE.sqrt();
      Complex complex9 = Complex.valueOf(1.548830270767212);
      Complex complex10 = complex2.subtract(complex5);
      Complex complex11 = complex7.subtract(complex3);
      Complex complex12 = complex0.add(complex10);
      Complex complex13 = complex11.divide((-1256.208491783238));
      Complex complex14 = complex13.INF.reciprocal();
      int int0 = complex8.I.hashCode();
      Complex complex15 = complex0.I.atan();
      Complex complex16 = complex8.sinh();
      String string0 = complex16.ONE.toString();
      Complex complex17 = complex5.cosh();
      boolean boolean0 = complex16.isNaN();
      Complex complex18 = complex4.I.cosh();
      Complex complex19 = complex18.INF.tan();
      double double0 = complex1.getArgument();
      Complex complex20 = complex16.asin();
      Complex complex21 = complex10.multiply(complex8);
      Complex complex22 = complex5.reciprocal();
      Complex complex23 = complex6.tanh();
      Complex complex24 = complex5.tanh();
      Object object0 = complex9.INF.readResolve();
      Complex complex25 = complex24.cosh();
      Complex complex26 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      String string0 = complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.add(complex0);
      List<Complex> list0 = complex1.ZERO.nthRoot(376);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex((-3.326791455362767E-8), (-3.326791455362767E-8));
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex3.ZERO.multiply(0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-645.91555807), 0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.divide(3.5408485497116107E-9);
      Complex complex3 = complex2.divide((-1759.6));
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex0.log();
      double double0 = complex6.getArgument();
      Complex complex7 = complex6.INF.subtract(complex1);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex5.ZERO.log();
      Complex complex11 = complex9.INF.negate();
      Complex complex12 = complex2.ZERO.sin();
      Complex complex13 = complex9.INF.cos();
      double double1 = complex13.NaN.getArgument();
      Complex complex14 = complex5.multiply(complex2);
      Complex complex15 = complex4.add(0.0);
      Complex complex16 = Complex.valueOf(0.0);
      Complex complex17 = Complex.valueOf(0.0, 0.0);
      Complex complex18 = complex12.multiply(complex4);
      Complex complex19 = complex5.conjugate();
      String string0 = complex19.ONE.toString();
      boolean boolean0 = complex5.equals("YXde");
  }
}
