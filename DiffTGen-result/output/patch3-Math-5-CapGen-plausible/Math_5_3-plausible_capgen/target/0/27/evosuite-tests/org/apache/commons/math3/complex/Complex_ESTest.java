/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:17:38 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.NaN.equals(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex3.ONE.tan();
      String string0 = complex4.ZERO.toString();
      String string1 = complex3.I.toString();
      String string2 = complex2.NaN.toString();
      Complex complex5 = complex0.add(484.9);
      ComplexField complexField0 = complex5.ZERO.getField();
      String string3 = complex2.toString();
      Complex complex6 = complex0.tan();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex3.I.subtract(484.9);
      Complex complex8 = complex2.subtract(complex1);
      Complex complex9 = Complex.valueOf((-1198.1), (-1198.1));
      Complex complex10 = complex9.pow(1926.4578);
      boolean boolean1 = complex7.ONE.equals(complex6);
      Complex complex11 = complex4.sqrt1z();
      Object object1 = complex11.ONE.readResolve();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex12.sin();
      Complex complex14 = complex7.multiply((-504));
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex15.NaN.conjugate();
      Complex complex17 = complex14.negate();
      int int0 = complex13.hashCode();
      Complex complex18 = complex4.cosh();
      Complex complex19 = complex16.exp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(512.8547355, 1.0642823992403076E208);
      Complex complex1 = complex0.INF.createComplex(1.0642823992403076E208, (-2793.63772293));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.ZERO.createComplex((-2793.63772293), (-752.9464));
      Complex complex7 = complex3.subtract(complex0);
      Complex complex8 = complex6.NaN.negate();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = new Complex((-2793.63772293), Double.POSITIVE_INFINITY);
      Complex complex10 = complex6.multiply(complex9);
      Complex complex11 = complex10.INF.pow(1.0642823992403076E208);
      double double0 = complex10.NaN.abs();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex12.I.asin();
      Complex complex14 = complex13.ONE.multiply((-94.3667362164));
      Complex complex15 = complex14.I.reciprocal();
      Complex complex16 = complex0.multiply(1);
      Complex complex17 = complex8.atan();
      Complex complex18 = complex7.subtract(complex4);
      boolean boolean0 = complex7.equals(complex12);
      Complex complex19 = complex17.tanh();
      Complex complex20 = complex11.pow(complex0);
      Complex complex21 = complex14.pow(complex15);
      Complex complex22 = complex16.divide(complex2);
      Complex complex23 = complex5.multiply(0);
      Complex complex24 = complex23.tan();
      Complex complex25 = complex19.atan();
      Complex complex26 = complex6.negate();
      Complex complex27 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4674.805282639));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.multiply(1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex3.INF.sqrt1z();
      Complex complex7 = complex6.cos();
      boolean boolean0 = complex2.isInfinite();
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.valueOf((-999.941449408965), (double) 1);
      Complex complex10 = complex5.createComplex((-4674.805282639), (-4.2365298585101096E-8));
      Complex complex11 = complex9.pow(complex4);
      Object object0 = complex2.readResolve();
      Complex complex12 = complex10.exp();
      double double0 = complex9.getReal();
      Object object1 = complex2.readResolve();
      boolean boolean1 = complex3.NaN.equals(object1);
      boolean boolean2 = complex12.isInfinite();
      List<Complex> list0 = complex7.nthRoot(1);
      int int0 = complex10.hashCode();
      Complex complex13 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.INF.add(complex0);
      double double0 = complex2.INF.abs();
      Complex complex3 = complex1.ONE.tan();
      int int0 = complex0.hashCode();
      Complex complex4 = complex2.I.cos();
      Object object0 = complex0.readResolve();
      Complex complex5 = Complex.valueOf(1.4582863136475673E-187, 20.0);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex2.createComplex(20.0, 0.0);
      Complex complex8 = complex2.tan();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex7.multiply(338);
      Complex complex12 = complex11.sin();
      double double1 = complex2.abs();
      Complex complex13 = complex0.createComplex(338, 102.18);
      Complex complex14 = complex5.negate();
      Complex complex15 = complex1.tan();
      ComplexField complexField1 = complex15.NaN.getField();
      Complex complex16 = complex6.multiply(217);
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex5.tanh();
      Complex complex19 = complex18.ONE.atan();
      Complex complex20 = complex17.pow(102.18);
      double double2 = complex2.getImaginary();
      Complex complex21 = complex11.asin();
      Complex complex22 = complex13.add(complex10);
      Complex complex23 = complex19.sqrt1z();
      Object object1 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-959.948977606705));
      Complex complex1 = complex0.I.cosh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex1.ONE.multiply((-1131.581));
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex4.NaN.pow(0.0);
      double double0 = complex0.getReal();
      Complex complex6 = complex0.multiply((-959.948977606705));
      double double1 = complex6.INF.abs();
      double double2 = complex6.I.getArgument();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex6.I.divide((-1131.581));
      int int1 = complex1.hashCode();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex7.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = complex6.ZERO.add(complex0);
      Complex complex13 = complex9.NaN.sinh();
      String string0 = complex0.toString();
      int int2 = complex6.hashCode();
      Complex complex14 = complex0.INF.cosh();
      Complex complex15 = complex5.ONE.pow(complex6);
      Complex complex16 = complex14.NaN.exp();
      Complex complex17 = Complex.valueOf((-595.2255));
      boolean boolean0 = complex5.equals(complex7);
      Complex complex18 = complex3.divide(0.0);
      Complex complex19 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(446.829, (-20.0));
      Complex complex1 = complex0.ZERO.multiply(1);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex2 = complex0.I.createComplex((-700.1330904552896), 446.829);
      Complex complex3 = complex1.INF.atan();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex1.ONE.add(complex3);
      Complex complex8 = complex0.tanh();
      Complex complex9 = Complex.valueOf((-1090.381527013));
      int int0 = complex9.ZERO.hashCode();
      Complex complex10 = complex0.subtract(complex9);
      boolean boolean1 = complex10.ONE.equals(complex5);
      double double0 = complex1.NaN.abs();
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex3.divide((-20.0));
      String string0 = complex12.toString();
      int int1 = complex11.hashCode();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex13.ONE.pow(complex11);
      Complex complex15 = Complex.valueOf((-20.0));
      Complex complex16 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.pow(complex1);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 6385.37837);
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4142.293), (-4142.293));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.pow(958.4341528);
      Complex complex3 = complex0.ONE.acos();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1016.150516154);
      Complex complex1 = complex0.createComplex(0.0, 1016.150516154);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.INF.createComplex(Double.NaN, (-1102.543));
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.INF.add(complex4);
      boolean boolean0 = complex0.equals("");
      List<Complex> list0 = complex0.nthRoot(17);
      String string0 = complex2.toString();
      double double0 = complex2.getArgument();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex0.negate();
      Complex complex10 = Complex.valueOf(1016.150516154);
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex9.multiply(1);
      Complex complex12 = complex3.asin();
      Complex complex13 = complex0.add(Double.NaN);
      Complex complex14 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(Double.NaN);
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-806.4898));
      List<Complex> list0 = complex0.ZERO.nthRoot(125);
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double1 = complex0.I.abs();
      Complex complex1 = complex0.ZERO.divide((-1483.830982));
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = Complex.valueOf(1.0, 0.0);
      Complex complex4 = complex3.I.multiply((-851));
      Complex complex5 = complex0.cos();
      int int0 = 0;
      Object object0 = complex5.readResolve();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex0.NaN.acos();
      Complex complex8 = complex7.I.subtract(complex4);
      Complex complex9 = complex7.I.reciprocal();
      try { 
        complex5.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.add((-1301.488794285153));
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.cos();
      double double0 = complex6.INF.getArgument();
      Complex complex7 = Complex.valueOf((-1301.488794285153));
      Complex complex8 = complex6.NaN.reciprocal();
      double double1 = complex8.ONE.getArgument();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.I.divide(complex3);
      Complex complex11 = complex9.pow((-1301.488794285153));
      Complex complex12 = complex2.NaN.tanh();
      Complex complex13 = complex9.divide(complex11);
      Complex complex14 = complex6.subtract(complex11);
      Complex complex15 = complex14.ZERO.reciprocal();
      Complex complex16 = complex7.asin();
      Complex complex17 = complex4.NaN.divide(complex12);
      boolean boolean0 = complex9.isInfinite();
      Complex complex18 = complex4.subtract((-1873.0));
      Complex complex19 = complex13.multiply(complex18);
      Complex complex20 = complex9.subtract(complex16);
      Complex complex21 = complex10.sinh();
      boolean boolean1 = complex15.isInfinite();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex8.getArgument();
      Complex complex22 = complex10.sqrt1z();
      Complex complex23 = complex13.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-203.6086531227);
      Complex complex0 = new Complex((-203.6086531227), 1158.349941462651);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex2.NaN.multiply(7);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1751.69), 1768.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-26.692731696421227));
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = new Complex((-26.692731696421227));
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex3.INF.pow(0.0);
      Complex complex5 = complex3.ZERO.reciprocal();
      boolean boolean0 = complex0.ONE.equals(complexField0);
      double double0 = complex0.abs();
      double double1 = complex0.getImaginary();
      boolean boolean1 = complex5.isInfinite();
      Complex complex6 = complex0.subtract(complex2);
      List<Complex> list0 = complex3.nthRoot(959);
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex4.ZERO.add(0.03831886500120163);
      Complex complex9 = complex7.ZERO.cosh();
      int int0 = complex2.I.hashCode();
      Complex complex10 = complex9.INF.tanh();
      Complex complex11 = complex4.sqrt();
      Complex complex12 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = Complex.valueOf(1.2250764591564252E82, 1.2250764591564252E82);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex6.ZERO.sqrt();
      boolean boolean0 = complex6.isNaN();
      Complex complex8 = complex4.ONE.add(0.5805994272232056);
      Complex complex9 = complex2.multiply((-826));
      Complex complex10 = complex4.exp();
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex3.sin();
      boolean boolean1 = complex3.isInfinite();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(3883.5816834323764, 3883.5816834323764);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.INF.log();
      Object object0 = new Object();
      boolean boolean0 = complex1.NaN.equals(object0);
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ONE.cos();
      double double0 = complex0.INF.getArgument();
      Object object1 = complex4.NaN.readResolve();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex2.log();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex6.ZERO.subtract(complex5);
      int int0 = complex8.hashCode();
      double double1 = complex2.I.abs();
      Complex complex11 = complex2.ZERO.multiply(2404);
      Complex complex12 = complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(6.283185307179586);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex2.INF.divide(6.283185307179586);
      double double0 = complex1.ZERO.abs();
      Complex complex4 = complex0.multiply(1);
      double double1 = complex2.getArgument();
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.valueOf((double) 1);
      Complex complex7 = Complex.valueOf((double) 1, (-2308.87843319064));
      double double2 = complex2.getImaginary();
      Complex complex8 = complex1.I.reciprocal();
      String string0 = complex4.toString();
      Complex complex9 = complex2.add(138.96419);
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex4.pow((-2308.87843319064));
      ComplexField complexField0 = complex11.getField();
      Complex complex12 = complex9.pow(complex11);
      Complex complex13 = complex12.multiply(complex1);
      Complex complex14 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2866.4068);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex1.I.subtract(complex0);
      Complex complex5 = complex1.asin();
      Object object0 = complex2.readResolve();
      Complex complex6 = complex1.multiply(17);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex2.multiply(17);
      Complex complex9 = complex1.NaN.multiply((-1442.55804));
      Complex complex10 = complex6.tanh();
      boolean boolean0 = complex6.isNaN();
      double double0 = complex1.getArgument();
      int int0 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1129.712991414), 6.283185307179586);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.divide(6.283185307179586);
      Complex complex4 = complex3.cos();
      int int0 = complex0.I.hashCode();
      int int1 = complex0.hashCode();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex3.subtract((-1049.91073779293));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2156.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.createComplex(2156.0, 2156.0);
      Complex complex2 = complex1.subtract((-1849.440765386));
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex3.INF.subtract(complex1);
      String string0 = complex4.I.toString();
      Complex complex5 = complex2.ZERO.atan();
      double double1 = complex0.ZERO.getArgument();
      String string1 = complex1.ZERO.toString();
      double double2 = complex0.getReal();
      Complex complex6 = Complex.valueOf(0.0, (-1220.0));
      Complex complex7 = complex0.ONE.multiply(0.0);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.divide(0.0);
      Complex complex10 = Complex.valueOf((-1849.440765386));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1430.444162836413, 1430.444162836413);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex4.I.tanh();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.I.add(complex8);
      Complex complex10 = Complex.valueOf(1430.444162836413, (-70.77395));
      boolean boolean0 = complex7.equals(complex10);
      double double0 = complex3.ONE.getArgument();
      int int0 = complex0.hashCode();
      int int1 = (-847);
      try { 
        complex4.nthRoot((-847));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -847
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex3.I.cos();
      String string0 = complex0.toString();
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex5.NaN.add(complex4);
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex6.I.equals(object0);
      Complex complex9 = Complex.valueOf(1541.399647163, 20.0);
      Complex complex10 = Complex.valueOf((-1999.654), 0.0);
      Complex complex11 = complex10.INF.acos();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex12.pow(0.0);
      Complex complex14 = complex10.divide(complex0);
      Object object1 = complex8.readResolve();
      boolean boolean1 = complex13.isInfinite();
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.divide(complex0);
      int int0 = complex1.INF.hashCode();
      Complex complex3 = Complex.valueOf(4077.63, 4077.63);
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = Complex.valueOf(1217.9004832642, (-2949.1041));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.I.log();
      Complex complex9 = complex8.I.reciprocal();
      Object object0 = complex7.readResolve();
      Complex complex10 = complex0.I.atan();
      Complex complex11 = complex10.NaN.negate();
      double double0 = complex0.getArgument();
      Complex complex12 = complex7.cosh();
      Object object1 = complex3.readResolve();
      Complex complex13 = complex7.tan();
      Complex complex14 = complex13.ZERO.add(complex11);
      Complex complex15 = complex13.divide(185.769811);
      Complex complex16 = complex15.ZERO.reciprocal();
      double double1 = complex7.getReal();
      Complex complex17 = complex2.add((-1079.91998351));
      Complex complex18 = complex5.cosh();
      Complex complex19 = complex6.subtract(complex5);
      Complex complex20 = complex4.log();
      Complex complex21 = complex11.sqrt();
      Complex complex22 = complex21.ONE.divide(3.634781057940233E121);
      Complex complex23 = complex16.exp();
      Complex complex24 = complex15.reciprocal();
      Complex complex25 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1720.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.asin();
      String string0 = complex0.I.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.INF.cosh();
      int int0 = complex2.ZERO.hashCode();
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex3.ZERO.multiply(174);
      Complex complex10 = complex8.I.sinh();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex0.I.conjugate();
      Complex complex13 = complex1.createComplex((-5526.0), (-5526.0));
      Complex complex14 = complex3.subtract((-5526.0));
      Complex complex15 = complex14.ZERO.divide((-4571.09016));
      Complex complex16 = complex7.atan();
      Complex complex17 = complex16.NaN.createComplex((-125.4717803), (-125.4717803));
      double double0 = complex14.I.getArgument();
      Complex complex18 = complex17.cosh();
      Complex complex19 = complex16.asin();
      Object object0 = complex2.readResolve();
      Complex complex20 = complex7.sqrt();
      Complex complex21 = complex16.log();
      Complex complex22 = complex12.conjugate();
      Complex complex23 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1761.08243797), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply(6.283185307179586);
      Complex complex3 = complex2.INF.sinh();
      double double0 = complex1.abs();
      Complex complex4 = complex0.ONE.add(complex1);
      Complex complex5 = complex0.ZERO.multiply(0.0);
      Complex complex6 = complex5.INF.divide(6.283185307179586);
      Complex complex7 = complex5.NaN.multiply((-272.210356));
      Complex complex8 = complex5.I.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex1.toString();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex9.INF.conjugate();
      double double1 = complex9.ZERO.getArgument();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex3.multiply(complex1);
      double double2 = complex4.getReal();
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-361.6950658318693));
      Complex complex2 = complex1.I.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex0.I.divide(complex1);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.INF.createComplex((-4170.1), 2.0);
      Complex complex3 = complex0.cos();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = complex3.pow(112.9573);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.divide((double) 1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1721.1390235, 1721.1390235);
      Complex complex2 = complex0.I.multiply(complex1);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-3574.8539));
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex1.I.equals(complex0);
      double double0 = complex1.getReal();
      Complex complex2 = complex1.sqrt();
      String string0 = complex1.toString();
      Complex complex3 = new Complex((-3574.8539), (-3574.8539));
      Complex complex4 = complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2105.56));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex1.INF.add(366.281456160391);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex1.ONE.add((-2105.56));
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex10.ONE.multiply(977);
      Complex complex12 = complex9.add(complex1);
      Complex complex13 = complex0.I.acos();
      Complex complex14 = complex1.negate();
      Complex complex15 = complex1.negate();
      Complex complex16 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(40.682526);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.multiply(0.0);
      double double0 = complex0.I.abs();
      Complex complex6 = complex4.NaN.cos();
      Complex complex7 = complex6.ONE.createComplex(0.0, 1.0);
      Complex complex8 = complex1.NaN.sqrt();
      Object object0 = new Object();
      Complex complex9 = complex8.I.multiply(complex5);
      Complex complex10 = complex5.NaN.tanh();
      int int0 = complex2.INF.hashCode();
      boolean boolean0 = complex8.NaN.equals(object0);
      Complex complex11 = complex5.ZERO.atan();
      boolean boolean1 = complex5.equals(complex0);
      Complex complex12 = complex0.multiply(complex5);
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex3.I.tan();
      Complex complex15 = complex2.negate();
      Complex complex16 = complex15.NaN.atan();
      Complex complex17 = complex4.multiply(40.682526);
      Complex complex18 = complex4.sqrt();
      double double1 = complex18.abs();
      Complex complex19 = complex2.sqrt1z();
      Complex complex20 = complex10.pow(40.682526);
      Complex complex21 = complex18.reciprocal();
      Complex complex22 = complex19.cosh();
      Complex complex23 = complex12.pow(complex21);
      Complex complex24 = complex18.reciprocal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-1.4255188208147591));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.tan();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1138.0355, 1138.0355);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(1138.0355);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ONE.acos();
      double double0 = complex3.NaN.abs();
      Complex complex5 = complex0.divide(1138.0355);
      Complex complex6 = complex0.I.sqrt();
      Complex complex7 = complex0.createComplex(1138.0355, 2.6761388778686523);
      Complex complex8 = complex7.I.reciprocal();
      Complex complex9 = complex7.ONE.conjugate();
      String string0 = complex7.toString();
      Complex complex10 = complex0.pow((-2499.19626233883));
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.NaN.conjugate();
      Complex complex13 = complex2.multiply((-573));
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add((-544.59914259764));
      Complex complex2 = Complex.valueOf((-544.59914259764), (-544.59914259764));
      Complex complex3 = complex1.negate();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex0.subtract((-581.958027862441));
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex4.I.divide((-581.958027862441));
      Complex complex7 = complex6.INF.multiply(1);
      String string0 = complex2.toString();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-3775.245513), (-3775.245513));
      Complex complex1 = complex0.createComplex(3485.967323, 0.0);
      Complex complex2 = complex1.NaN.multiply((-3775.245513));
      Complex complex3 = complex0.tanh();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex3.divide(545.06196);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.asin();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.I.add(2.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex0.sqrt();
      double double1 = complex6.getImaginary();
      String string0 = complex6.toString();
      Complex complex7 = complex0.divide(Double.NaN);
      Complex complex8 = complex7.ZERO.pow(complex2);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = Complex.valueOf(2.0, 1.5707963267948966);
      Complex complex13 = Complex.valueOf((-992.2), Double.NaN);
      Complex complex14 = complex7.exp();
      boolean boolean0 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.I.createComplex(2.6527209281921387, (-4.0361435606199565E183));
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.multiply((-152.58));
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex1.acos();
      Object object0 = complex5.readResolve();
      double double0 = complex7.getImaginary();
      Complex complex8 = complex5.subtract(1632.1596265062);
      Complex complex9 = complex4.log();
      double double1 = complex0.getReal();
      Complex complex10 = complex9.ONE.createComplex(Double.NaN, 2.6527209281921387);
      Complex complex11 = complex9.atan();
      Complex complex12 = complex6.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-2.0634857819227416E16));
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.valueOf((-236.715181439), (-236.715181439));
      Complex complex4 = complex0.I.negate();
      double double0 = complex1.getImaginary();
      double double1 = complex2.abs();
      double double2 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.I.multiply(complex2);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.log();
      List<Complex> list0 = complex6.I.nthRoot(1);
      Complex complex7 = complex6.multiply(420.669677);
      Complex complex8 = complex4.add(0.41647201776504517);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(2115.099046081573);
      Complex complex1 = complex0.ONE.divide(1316.2045547881642);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.pow(complex2);
      double double0 = complex0.getReal();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2500.32975831));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(395.088013002917, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = (-102.58520452956897);
      Complex complex0 = new Complex(0.0, (-102.58520452956897));
      double double1 = complex0.ZERO.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.subtract(complex2);
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1354.992661385616), (-1519.04953));
      Complex complex1 = complex0.I.multiply((-1354.992661385616));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex0.divide(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex1.sin();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex4.ONE.add(0.0);
      boolean boolean0 = complex4.equals(object0);
      Complex complex7 = complex4.log();
      String string0 = complex2.toString();
      Complex complex8 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3500.40967475));
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      List<Complex> list0 = complex2.nthRoot(647);
      Complex complex3 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1955.6555393165447, (-662.303));
      Object object0 = complex0.I.readResolve();
      Complex complex1 = Complex.valueOf(1955.6555393165447, 0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      int int0 = complex3.hashCode();
      Complex complex4 = Complex.valueOf((-2744.41583575334), 0.0);
      boolean boolean0 = complex3.isNaN();
      Object object1 = complex2.readResolve();
      boolean boolean1 = complex3.equals(object0);
      Complex complex5 = complex4.subtract((-662.303));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.subtract(1.0);
      double double0 = complex0.INF.abs();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex1.ZERO.reciprocal();
      double double1 = complex0.abs();
      String string0 = complex0.toString();
      double double2 = complex0.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 0.0;
      double double1 = 918.61135031;
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.reciprocal();
      boolean boolean0 = complex1.INF.equals(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = Complex.valueOf(4.691921416188566E137);
      double double0 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex1.INF.add(complex0);
      Complex complex5 = complex2.NaN.multiply(complex0);
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex5.INF.asin();
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1768.195049489468, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(1768.195049489468, 1768.195049489468);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex0.INF.createComplex((-7.12139818505956E-9), 1632.6);
      Complex complex6 = complex3.I.pow(6.283185307179586);
      String string0 = complex2.toString();
      Complex complex7 = complex6.NaN.pow(complex5);
      Complex complex8 = complex1.subtract(1768.195049489468);
      Complex complex9 = complex5.add(complex6);
      Complex complex10 = complex2.negate();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex11.NaN.cos();
      double double0 = complex12.getArgument();
      Complex complex13 = complex2.add(2.0);
      boolean boolean0 = complex3.isInfinite();
      Complex complex14 = complex13.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex6.readResolve();
      boolean boolean1 = complex1.equals(object0);
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex9.add(896.2325197);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(267.2127494490136);
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      try { 
        complex0.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(0.6343214511871338);
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex0.exp();
      Object object0 = complex7.NaN.readResolve();
      Complex complex8 = complex2.multiply(complex7);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-20.0));
      Complex complex1 = complex0.createComplex(0.0, (-20.0));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.ZERO.divide(0.0);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.ONE.multiply((-1960.0762823703824));
      Complex complex4 = complex3.negate();
      int int0 = complex1.hashCode();
      Complex complex5 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0842406153678894;
      Complex complex1 = Complex.valueOf(0.0842406153678894, 0.0842406153678894);
      boolean boolean0 = complex1.I.equals(complex0);
      List<Complex> list0 = complex1.INF.nthRoot(2232);
      Complex complex2 = complex0.divide((-2717.470587));
      Complex complex3 = complex0.multiply(252);
      Complex complex4 = complex2.sqrt();
      double double1 = complex4.ZERO.getArgument();
      Complex complex5 = complex4.NaN.pow((-7.947087669425045E-8));
      try { 
        complex5.I.nthRoot((-1939));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,939
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-997.36494940668), (-997.36494940668));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.I.divide(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.subtract(Double.NaN);
      Object object0 = complex4.ONE.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex1.I.add(complex3);
      double double1 = complex6.ONE.abs();
      Complex complex7 = complex0.createComplex((-4232.60398), 0.15275460481643677);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex2.pow(1.0);
      double double2 = complex4.getReal();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.pow(complex0);
      Complex complex12 = complex11.ONE.sinh();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex11.I.log();
      Complex complex15 = complex14.I.subtract(complex5);
      Complex complex16 = complex13.sin();
      Complex complex17 = Complex.I;
      Complex complex18 = complex0.add(complex17);
      Complex complex19 = complex16.sqrt();
      boolean boolean0 = complex1.I.equals((Object) null);
      Complex complex20 = complex8.subtract(1150.001350019506);
      Complex complex21 = complex6.reciprocal();
      Complex complex22 = complex19.add(0.0);
      try { 
        complex20.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      double double0 = 452.432862066;
      try { 
        complex1.NaN.nthRoot((-538));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -538
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-2774.54777678), (-2774.54777678));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex3.NaN.multiply(1468);
      double double0 = complex2.NaN.getArgument();
      Complex complex5 = Complex.valueOf((-1322.091319468));
      Complex complex6 = complex1.multiply((-1322.091319468));
      int int0 = complex6.ZERO.hashCode();
      double double1 = complex2.abs();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      double double1 = complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.multiply((-1958));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.subtract(Double.NaN);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex7.divide((-1905.33066866575));
      Complex complex9 = complex4.atan();
      try { 
        complex0.nthRoot((-1958));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,958
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-1249.04722257));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf((-2885.57));
      Complex complex4 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.divide(Double.NaN);
      Complex complex3 = complex1.cosh();
      int int1 = complex3.I.hashCode();
      Complex complex4 = complex2.pow(complex1);
      List<Complex> list0 = complex2.nthRoot(7);
      Complex complex5 = complex1.createComplex(1525.8, 0.0);
      Complex complex6 = complex5.I.log();
      boolean boolean0 = complex5.isNaN();
      double double0 = complex1.getReal();
      Complex complex7 = complex2.pow((-3800.7404959259243));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3427.5170996);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-348.26738144761), (-348.26738144761));
      Complex complex1 = complex0.divide((-1.0));
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex0.add((-348.26738144761));
      double double1 = complex4.INF.getArgument();
      Complex complex5 = complex4.I.log();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex4.subtract((-1.0));
      Complex complex7 = Complex.valueOf((-2.356194490192345), (-2.356194490192345));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.subtract(1183.142058);
      Complex complex2 = complex1.ZERO.add((-765.9038212982938));
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.INF.sin();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex5 = complex0.pow(1183.142058);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.NaN.negate();
      Complex complex8 = complex7.INF.subtract(20.0);
      Complex complex9 = complex7.multiply(1183.142058);
      Complex complex10 = Complex.valueOf(2.0);
      Complex complex11 = complex5.cos();
      boolean boolean0 = complex6.equals("");
      Complex complex12 = complex1.createComplex((-1215.0), (-3040.367348916514));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1.1475955030427985E107);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex2 = complex1.divide((-6592.43575179));
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = new Complex((-406.78098842370724));
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex2.divide((-406.78098842370724));
      Complex complex7 = complex6.ZERO.divide(complex1);
      Complex complex8 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(1.1507496472539512E-93, 0.0);
      Complex complex1 = complex0.sqrt();
      Object object0 = complex1.INF.readResolve();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.ZERO.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(1739.8324462908);
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(593.2352591546594, 593.2352591546594);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex3.NaN.multiply((-2.0821912536551675E-8));
      Complex complex6 = Complex.valueOf((-898.0));
      boolean boolean0 = complex5.isInfinite();
      double double0 = complex2.abs();
      Complex complex7 = new Complex(270, 593.2352591546594);
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex9.ONE.log();
      double double1 = complex8.getArgument();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex0.asin();
      String string0 = complex6.toString();
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(4941.37);
      Complex complex3 = complex0.NaN.pow(complex1);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex4.INF.add(complex3);
      double double0 = complex0.abs();
      Complex complex6 = complex0.subtract(0.0);
      double double1 = complex2.getImaginary();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1949.570739913014);
      Complex complex1 = complex0.I.divide(1949.570739913014);
      Complex complex2 = complex0.subtract(1949.570739913014);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.multiply(0);
      Complex complex5 = complex1.conjugate();
      Object object0 = complex4.readResolve();
      Complex complex6 = complex2.createComplex(0.0, 0.0);
      int int0 = complex6.ZERO.hashCode();
      Complex complex7 = complex0.NaN.multiply(2804);
      Complex complex8 = complex0.sqrt1z();
      boolean boolean0 = complex1.equals(complex5);
      double double0 = complex5.getArgument();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.multiply((-876.687003));
      Complex complex12 = complex11.ZERO.asin();
      Complex complex13 = complex9.log();
      Complex complex14 = complex10.conjugate();
      Complex complex15 = complex9.pow(complex0);
      Complex complex16 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tanh();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.I.cosh();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Object object0 = complex1.INF.readResolve();
      Complex complex3 = complex1.INF.tan();
      double double1 = complex0.abs();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex2.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.INF.createComplex((-5178.188618693219), 0.0);
      Complex complex10 = complex7.tanh();
      Complex complex11 = complex3.NaN.sqrt1z();
      Complex complex12 = complex5.multiply(1);
      Complex complex13 = complex6.add((-889.31214533));
      Complex complex14 = complex13.ONE.negate();
      Complex complex15 = complex3.tanh();
      Complex complex16 = complex10.tan();
      Complex complex17 = complex16.multiply((-3003.054982643));
      boolean boolean0 = complex13.isNaN();
      double double2 = complex13.getImaginary();
      Complex complex18 = complex3.INF.acos();
      Complex complex19 = complex2.tan();
      Complex complex20 = complex3.sinh();
      Complex complex21 = complex4.cosh();
      Complex complex22 = complex1.exp();
      Complex complex23 = complex1.log();
      Complex complex24 = complex19.cos();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4079.91290214655);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(3685.5835991);
      int int0 = complex0.hashCode();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.NaN.add(complex0);
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.NaN.subtract(0.0);
      Complex complex3 = complex0.ZERO.cosh();
      int int1 = complex0.hashCode();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.abs();
      Complex complex4 = complex0.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.pow(complex1);
      int int0 = complex2.hashCode();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.pow((double) 1);
      Complex complex8 = complex7.NaN.subtract(839.1345);
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex6.ZERO.subtract(complex4);
      Complex complex11 = Complex.valueOf((-298.66), 0.0);
      boolean boolean0 = complex6.equals(complex11);
      Complex complex12 = complex9.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ZERO.pow((-1901.358497658509));
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex2.ZERO.atan();
      Complex complex6 = Complex.valueOf(0.0, 0.6410311460494995);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex1.divide(complex0);
      ComplexField complexField0 = complex1.I.getField();
      ComplexField complexField1 = complex0.getField();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex1.INF.add(0.0);
      Complex complex11 = complex8.ONE.exp();
      Complex complex12 = complex10.ZERO.sinh();
      Complex complex13 = complex1.NaN.add(complex8);
      Complex complex14 = complex9.NaN.atan();
      Complex complex15 = complex14.ONE.negate();
      boolean boolean0 = complex1.isInfinite();
      Complex complex16 = complex8.sqrt();
      Complex complex17 = complex16.sinh();
      Complex complex18 = complex17.ONE.multiply((-4031));
      Complex complex19 = complex1.sin();
      double double0 = complex0.abs();
      ComplexField complexField2 = complex14.ZERO.getField();
      Complex complex20 = complex4.cosh();
      double double1 = complex14.abs();
      boolean boolean1 = complex17.equals(complex19);
      try { 
        complex12.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
