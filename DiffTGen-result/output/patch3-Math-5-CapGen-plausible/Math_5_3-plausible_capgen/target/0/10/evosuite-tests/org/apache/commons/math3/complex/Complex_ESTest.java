/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:10:17 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.ZERO.multiply(Double.NaN);
      String string0 = complex3.ONE.toString();
      double double0 = complex3.INF.getArgument();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.ONE.multiply((-339));
      int int0 = complex6.INF.hashCode();
      Complex complex7 = complex4.multiply(0);
      int int1 = complex2.hashCode();
      Complex complex8 = complex0.INF.subtract(2.0);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex3.exp();
      Complex complex11 = complex10.NaN.pow((double) 0);
      Complex complex12 = complex9.I.tan();
      Complex complex13 = complex11.NaN.multiply((double) 0);
      Complex complex14 = complex10.add((double) (-339));
      Complex complex15 = complex14.NaN.multiply((-5.1570579206));
      int int2 = complex5.hashCode();
      Complex complex16 = complex10.INF.divide((-1661.4024766485));
      Complex complex17 = complex5.subtract((-1612.3));
      Complex complex18 = complex17.NaN.sinh();
      Complex complex19 = complex9.add(complex13);
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex7.equals(complex1);
      Complex complex20 = complex6.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.I.subtract(Double.NaN);
      String string0 = complex1.INF.toString();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = new Complex(656.42353259444, 2381.09030967387);
      boolean boolean0 = complex0.ZERO.equals(complex3);
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex3.ZERO.pow(656.42353259444);
      Complex complex6 = complex4.NaN.createComplex((-1149.27476958), Double.NaN);
      Complex complex7 = complex4.ONE.add(complex1);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.I.multiply(1);
      Complex complex10 = complex8.NaN.exp();
      int int0 = complex0.hashCode();
      Complex complex11 = complex1.exp();
      Object object1 = complex4.readResolve();
      Complex complex12 = complex4.INF.divide(complex3);
      Complex complex13 = complex3.tanh();
      Complex complex14 = complex13.ONE.multiply(1);
      double double0 = complex14.ONE.abs();
      Complex complex15 = complex3.divide(complex4);
      boolean boolean1 = complex13.equals(object0);
      Object object2 = complex9.readResolve();
      Complex complex16 = complex7.add(complex0);
      Complex complex17 = complex11.subtract(2381.09030967387);
      String string1 = complex17.I.toString();
      boolean boolean2 = complex17.equals(complex14);
      double double1 = complex17.getArgument();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-405.436));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.I.divide((-405.436));
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex0.multiply((-405.436));
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex4.log();
      Complex complex9 = complex0.pow(complex4);
      Complex complex10 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.148747205734253, 1.148747205734253);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(1.148747205734253);
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex2.createComplex(Double.NaN, (-2788.851376));
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex7.INF.pow(complex1);
      Complex complex10 = Complex.valueOf(1.148747205734253);
      Complex complex11 = complex9.ZERO.pow(complex10);
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex3.subtract(1.148747205734253);
      boolean boolean0 = complex0.I.equals(complex2);
      Complex complex14 = complex0.I.sqrt();
      ComplexField complexField0 = complex3.getField();
      double double1 = complex1.ZERO.getArgument();
      double double2 = complex3.abs();
      Complex complex15 = complex0.pow(Double.NaN);
      Complex complex16 = Complex.valueOf(0.0, 1.148747205734253);
      Complex complex17 = complex16.I.sin();
      int int0 = complex1.hashCode();
      Complex complex18 = complex15.conjugate();
      Complex complex19 = complex18.sqrt1z();
      Complex complex20 = complex17.tanh();
      Complex complex21 = complex8.multiply((-2985.208248191));
      double double3 = complex21.getImaginary();
      Complex complex22 = complex5.cosh();
      double double4 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex4 = complex0.add(complex2);
      int int0 = complex1.I.hashCode();
      Complex complex5 = complex0.log();
      Complex complex6 = complex1.divide(complex0);
      double double0 = complex2.getArgument();
      try { 
        complex4.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-276.0), (-9.785306155980342E-26));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.atan();
      double double0 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf((-9.785306155980342E-26));
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex4.I.conjugate();
      Object object0 = complex5.readResolve();
      Complex complex7 = complex5.I.divide((-9.785306155980342E-26));
      Complex complex8 = Complex.valueOf((-276.0), (-9.785306155980342E-26));
      Complex complex9 = Complex.valueOf(3445.1146632, (-276.0));
      boolean boolean0 = complex1.isInfinite();
      Complex complex10 = complex9.I.cos();
      double double1 = complex1.abs();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex4.tanh();
      Complex complex13 = complex9.createComplex((-9.785306155980342E-26), 0.0);
      double double2 = complex10.getArgument();
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex12.subtract((-1173.52032599));
      ComplexField complexField0 = complex15.NaN.getField();
      Complex complex16 = complex4.sqrt();
      Complex complex17 = complex16.pow(2237.9535807);
      boolean boolean1 = complex3.isNaN();
      Complex complex18 = complex10.add(complex15);
      Complex complex19 = complex18.multiply(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 1292.2505;
      Complex complex0 = Complex.valueOf(1292.2505);
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(3311.07305360808, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.I.add(complex1);
      Complex complex5 = complex0.I.sin();
      Complex complex6 = complex1.ZERO.pow(complex5);
      Complex complex7 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex8.I.multiply(complex4);
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = complex4.NaN.subtract(297.36);
      Complex complex12 = complex11.divide(complex1);
      double double0 = complex10.abs();
      Complex complex13 = complex0.NaN.reciprocal();
      double double1 = complex7.ONE.abs();
      Complex complex14 = complex7.asin();
      Complex complex15 = complex0.multiply(1165);
      Complex complex16 = complex9.sin();
      Complex complex17 = complex14.multiply(1165);
      int int0 = complex17.ONE.hashCode();
      boolean boolean0 = complex7.isNaN();
      Complex complex18 = complex16.cos();
      Complex complex19 = complex1.log();
      double double2 = complex18.ZERO.abs();
      Complex complex20 = complex18.createComplex(Double.NaN, (-327.9103));
      Complex complex21 = Complex.valueOf((-1414.5));
      Complex complex22 = Complex.valueOf(0.0, (-3579.916164513));
      boolean boolean1 = complex5.isInfinite();
      Complex complex23 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.add(1807.397260206);
      Complex complex4 = complex3.sinh();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.ZERO.add(complex1);
      Complex complex8 = complex4.asin();
      Complex complex9 = Complex.valueOf(0.0, 674.510811221);
      Complex complex10 = complex9.INF.add(complex1);
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex6.ZERO.sqrt();
      Complex complex13 = complex6.multiply(complex4);
      boolean boolean0 = complex6.isInfinite();
      Complex complex14 = complex2.I.add(674.510811221);
      Complex complex15 = complex1.INF.cosh();
      Complex complex16 = complex15.ONE.sin();
      double double0 = complex5.abs();
      ComplexField complexField0 = complex5.getField();
      Complex complex17 = complex5.exp();
      Complex complex18 = complex1.sqrt();
      Complex complex19 = complex17.multiply(complex2);
      Complex complex20 = complex19.I.log();
      Complex complex21 = complex6.atan();
      ComplexField complexField1 = complex4.NaN.getField();
      int int0 = complex3.hashCode();
      Complex complex22 = complex4.negate();
      Complex complex23 = complex21.cosh();
      Complex complex24 = complex3.pow(674.510811221);
      Complex complex25 = complex6.sqrt();
      Complex complex26 = complex9.log();
      Complex complex27 = complex18.sqrt1z();
      List<Complex> list0 = complex12.nthRoot(1759);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.tanh();
      Object object0 = new Object();
      boolean boolean0 = complex4.NaN.equals(object0);
      Complex complex5 = complex4.ONE.cosh();
      double double0 = complex4.getArgument();
      Complex complex6 = complex5.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      Complex complex2 = Complex.valueOf(6.283185307179586);
      double double1 = complex2.ONE.abs();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex1.add(complex6);
      Complex complex8 = complex1.add(0.0);
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex9.I.atan();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex4.getField();
      Complex complex11 = complex2.add(1108.02);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-3019.1869503));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.createComplex((-170.0), 0.0);
      Complex complex3 = complex1.INF.multiply(1938);
      Complex complex4 = complex3.I.add(2.0);
      Complex complex5 = complex0.NaN.multiply(complex1);
      Complex complex6 = complex0.ZERO.cosh();
      Complex complex7 = complex0.sin();
      double double0 = complex6.getArgument();
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.sqrt1z();
      Complex complex10 = complex0.NaN.sqrt();
      Complex complex11 = complex9.log();
      double double1 = complex11.getImaginary();
      double double2 = complex1.getArgument();
      double double3 = complex8.getArgument();
      Complex complex12 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.INF.add(2899.831593031);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex0.ZERO.add(2899.831593031);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex4.INF.divide(0.0);
      Complex complex7 = complex0.NaN.sqrt1z();
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex4.createComplex(2899.831593031, 2899.831593031);
      Complex complex10 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.log();
      double double0 = complex0.getImaginary();
      double double1 = complex0.abs();
      Complex complex3 = Complex.valueOf(0.0, 1478.08123231);
      double double2 = complex3.NaN.abs();
      Complex complex4 = complex3.divide(0.0);
      double double3 = complex4.NaN.getArgument();
      String string0 = complex4.INF.toString();
      double double4 = complex3.abs();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.subtract(1478.08123231);
      Complex complex6 = complex5.multiply(517.4205187256423);
      int int0 = complex6.NaN.hashCode();
      double double5 = complex2.getReal();
      String string1 = complex1.toString();
      double double6 = complex3.getReal();
      Complex complex7 = complex2.multiply(0);
      Complex complex8 = Complex.valueOf(517.4205187256423, Double.NEGATIVE_INFINITY);
      double double7 = complex8.getArgument();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = complex5.pow(0.0);
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4439.268694567209, 4439.268694567209);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.I.multiply((-1030.4));
      Complex complex4 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(548.1, 2.0);
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex3.ONE.add(complex4);
      double double1 = complex0.abs();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex2.ONE.tanh();
      Complex complex9 = complex8.I.acos();
      boolean boolean0 = complex7.equals(complex0);
      Complex complex10 = complex6.ZERO.add(Double.NaN);
      boolean boolean1 = complex2.isNaN();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.ONE.createComplex(0.0, Double.NaN);
      Complex complex13 = complex0.tanh();
      int int0 = complex7.hashCode();
      boolean boolean2 = complex6.isNaN();
      Complex complex14 = complex1.subtract(0.0);
      Complex complex15 = complex12.atan();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
      boolean boolean3 = complex12.equals(complex16);
      Complex complex17 = complex2.atan();
      ComplexField complexField0 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex0.readResolve();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.pow(complex3);
      double double0 = complex4.NaN.abs();
      double double1 = complex0.abs();
      Complex complex5 = complex0.I.createComplex(0.0, 1920.750086389);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex0.nthRoot(17);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.INF.acos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ONE.sqrt();
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex0.exp();
      Object object0 = complex2.NaN.readResolve();
      double double0 = complex1.getImaginary();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = Complex.valueOf(-0.0);
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex0.cosh();
      Complex complex13 = complex7.negate();
      int int0 = complex13.hashCode();
      int int1 = complex13.hashCode();
      Complex complex14 = complex13.exp();
      Complex complex15 = complex14.ZERO.divide(-0.0);
      Complex complex16 = Complex.valueOf((double) 17);
      Complex complex17 = complex16.ZERO.log();
      Complex complex18 = complex17.NaN.subtract(-0.0);
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex13.multiply(complex6);
      double double1 = complex11.getArgument();
      Complex complex21 = complex8.pow((double) 17);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.I.createComplex(2126.096874393958, 2126.096874393958);
      Object object0 = complex0.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex4.ONE.divide(complex3);
      Complex complex8 = complex0.NaN.multiply(complex4);
      Complex complex9 = complex0.NaN.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      double double1 = complex9.ONE.getArgument();
      double double2 = complex1.abs();
      Complex complex10 = complex9.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.NaN.divide(Double.NaN);
      Complex complex12 = complex11.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex7.INF.log();
      Complex complex14 = complex4.NaN.cosh();
      Complex complex15 = complex14.pow(Double.POSITIVE_INFINITY);
      Object object1 = complex13.NaN.readResolve();
      Complex complex16 = complex1.createComplex((-20.0), Double.NaN);
      Object object2 = complex13.readResolve();
      boolean boolean0 = complex11.ONE.equals(object2);
      Complex complex17 = complex4.add(complex16);
      Complex complex18 = complex7.subtract(complex13);
      double double3 = complex6.abs();
      String string0 = complex11.toString();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-351.49));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex7.ZERO.add(complex4);
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex9.log();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex3.acos();
      Object object0 = complex11.readResolve();
      List<Complex> list0 = complex7.nthRoot(1283);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 0.0;
      double double1 = (-1056.5061027984);
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(3.457553391989844E-8, 3.457553391989844E-8);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.add(3.457553391989844E-8);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.ZERO.multiply((-62));
      Complex complex7 = Complex.valueOf((-2621.4138288398));
      double double0 = complex5.INF.abs();
      Complex complex8 = complex5.cos();
      boolean boolean0 = complex0.equals(complex3);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex9 = complex3.createComplex((-528.8898111), 3.457553391989844E-8);
      Object object0 = complex9.I.readResolve();
      Complex complex10 = complex1.subtract(complex9);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex13 = complex8.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex2 = complex0.cos();
      boolean boolean1 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.divide(0.5941681861877441);
      Complex complex2 = complex0.reciprocal();
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.log();
      String string1 = complex0.ONE.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.multiply(552);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex4.ZERO.reciprocal();
      double double1 = complex1.getReal();
      Complex complex9 = complex5.subtract(complex0);
      Complex complex10 = complex3.acos();
      Complex complex11 = complex5.NaN.multiply(3441);
      Complex complex12 = complex10.INF.atan();
      String string2 = complex2.ONE.toString();
      Complex complex13 = complex10.NaN.multiply(complex4);
      Complex complex14 = complex5.pow(complex2);
      Complex complex15 = complex3.createComplex(0.5941681861877441, (-1867.0));
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex4.cos();
      Complex complex18 = complex13.tanh();
      Complex complex19 = complex16.add(0.5941681861877441);
      Complex complex20 = complex7.createComplex((-3043.300753559), (-2105.3886258978014));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(533.0, 1.5173907279968262);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex0.ZERO.pow(533.0);
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.ONE.multiply(complex3);
      double double0 = complex0.abs();
      Complex complex7 = Complex.valueOf(268.5, 533.0021599155313);
      Complex complex8 = complex0.pow(1.5173907279968262);
      Complex complex9 = complex8.ZERO.multiply(1);
      Object object0 = complex8.readResolve();
      String string0 = complex4.toString();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.asin();
      String string1 = complex5.toString();
      Complex complex12 = complex8.multiply(2573.009591959906);
      double double1 = complex12.abs();
      Object object1 = complex6.readResolve();
      Complex complex13 = complex5.sinh();
      Complex complex14 = complex4.createComplex(268.5, (-946.2809));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3848.54), (-3848.54));
      String string0 = complex0.toString();
      String string1 = complex0.ONE.toString();
      String string2 = complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex2.I.add(complex0);
      Complex complex5 = complex1.subtract(0.0);
      Complex complex6 = complex4.createComplex(0.0, 1.982919692993164);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1769.86428), 0.0);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf((-2543.3));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.pow(complex2);
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex0.INF.sin();
      Complex complex7 = complex6.I.cos();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex3.ONE.tanh();
      Complex complex10 = complex2.ZERO.createComplex((-113.822039), 0.0);
      Complex complex11 = complex0.multiply((-2543.3));
      String string0 = complex2.toString();
      double double0 = complex1.getReal();
      Complex complex12 = complex10.subtract(2705.711);
      Complex complex13 = complex3.subtract(complex4);
      Complex complex14 = Complex.I;
      Complex complex15 = complex2.add(complex14);
      int int1 = (-541);
      try { 
        complex15.I.nthRoot((-541));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -541
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = new Complex((-1182.6));
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.ONE.negate();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = Complex.valueOf((-1182.6), 0.0);
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex1.multiply(complex2);
      Complex complex10 = complex1.tan();
      Complex complex11 = complex1.pow(0.0);
      Complex complex12 = complex1.multiply(complex11);
      Complex complex13 = complex0.asin();
      Complex complex14 = complex5.exp();
      Complex complex15 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.createComplex((-3482.0), (-3482.0));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.I.add(335.4);
      boolean boolean0 = complex1.equals(complex3);
      Complex complex5 = Complex.valueOf((-3482.0), (-3482.0));
      Complex complex6 = complex3.NaN.cos();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex6.ZERO.acos();
      double double0 = complex5.INF.getArgument();
      double double1 = complex0.abs();
      boolean boolean1 = complex5.isNaN();
      Complex complex9 = complex5.subtract((-2331.85702698));
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex13 = complex5.divide(Double.POSITIVE_INFINITY);
      boolean boolean2 = complex13.ZERO.equals(complex12);
      Complex complex14 = complex4.multiply(complex13);
      Complex complex15 = complex14.I.multiply(complex11);
      Complex complex16 = complex3.acos();
      double double2 = complex3.abs();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-541.94225));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.pow(1059.9171734872841);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(257.301262519, (-1057.7876211931093));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.INF.subtract(complex0);
      double double0 = complex1.ZERO.abs();
      Complex complex4 = complex1.NaN.conjugate();
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.ZERO.divide(complex4);
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex3.sin();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex1.negate();
      double double1 = complex7.abs();
      Complex complex13 = complex9.negate();
      double double2 = complex0.abs();
      double double3 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 2112.4601583104495;
      List<Complex> list0 = complex0.INF.nthRoot(3006);
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2600.708), (-992.49));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex1.I.multiply(130);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex6.INF.pow((-2600.708));
      Object object0 = complex5.readResolve();
      Complex complex8 = complex6.subtract((-2600.708));
      Complex complex9 = complex6.atan();
      Complex complex10 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(100.43075512162743);
      Complex complex1 = complex0.I.atan();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.pow(100.43075512162743);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 2373.894);
      int int0 = complex0.NaN.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.createComplex(543.9, 1682.96381586);
      Complex complex2 = complex1.ZERO.add(complex0);
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex1.toString();
      Complex complex3 = complex0.exp();
      try { 
        complex3.NaN.nthRoot((-2016));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,016
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.add(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Object object0 = complex3.ONE.readResolve();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex3.ONE.multiply(complex1);
      Complex complex7 = complex3.exp();
      Complex complex8 = complex1.subtract(0.0);
      Complex complex9 = complex3.conjugate();
      double double0 = complex5.abs();
      Complex complex10 = complex6.sqrt1z();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.NaN.subtract((-2038.202664258821));
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf((-2038.202664258821));
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(1733.6, 1733.6);
      List<Complex> list0 = complex5.nthRoot(17);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex3.multiply(1698.49);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.multiply((-1579));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = (-1625.0);
      Complex complex0 = Complex.valueOf((-1625.0), (-1625.0));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.NaN.pow(complex0);
      List<Complex> list0 = complex2.ZERO.nthRoot(406);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-1747.434327));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ZERO.createComplex((-812.60548846192), 20.0);
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.pow(complex2);
      boolean boolean0 = complex3.NaN.equals(complex0);
      boolean boolean1 = complex0.isNaN();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.INF.sqrt();
      try { 
        complex1.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.NaN.sinh();
      double double0 = complex1.getArgument();
      double double1 = complex1.getArgument();
      Complex complex6 = Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      Complex complex7 = complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(301.54431589, 0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ZERO.pow(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.ONE.subtract((-747.48936));
      Complex complex6 = complex5.I.multiply(0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex2.NaN.subtract(complex7);
      Complex complex9 = complex3.pow(0.0);
      Object object0 = complex9.readResolve();
      Complex complex10 = complex0.tan();
      boolean boolean0 = complex2.equals(object0);
      Complex complex11 = complex0.multiply(0.0);
      Complex complex12 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.ONE.sqrt1z();
      int int0 = complex0.INF.hashCode();
      Complex complex4 = complex2.NaN.sqrt1z();
      Complex complex5 = complex2.INF.tan();
      Complex complex6 = complex0.NaN.tanh();
      double double0 = complex0.getReal();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex1.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex10 = complex9.NaN.tan();
      Complex complex11 = complex4.add(complex9);
      Object object0 = complex2.readResolve();
      Complex complex12 = complex7.pow(complex2);
      Complex complex13 = complex10.divide(0.0);
      boolean boolean0 = complex10.equals(complex2);
      Complex complex14 = complex1.sin();
      Complex complex15 = complex0.reciprocal();
      Complex complex16 = complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ZERO.multiply(complex1);
      boolean boolean0 = complex0.equals((Object) null);
      boolean boolean1 = complex0.isInfinite();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex1.sqrt1z();
      double double1 = complex1.getReal();
      Complex complex7 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex0.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf(1675.44166, 1675.44166);
      Complex complex6 = complex1.subtract(complex3);
      Complex complex7 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(628983398);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex1.ZERO.createComplex(2545.6610841882, 0.7768193998956958);
      Complex complex3 = complex0.NaN.sinh();
      int int0 = complex2.INF.hashCode();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.createComplex(628983398, 628983398);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.multiply(2545.6610841882);
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex6.log();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex9.negate();
      Complex complex12 = complex10.exp();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(270);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.divide((double) 270);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(300.69597049771045, (-892.39337580068));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.add(957.4977);
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.divide((-892.39337580068));
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex1.INF.multiply(complex2);
      Complex complex8 = complex1.divide(2284.0865329761);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.INF.reciprocal();
      String string0 = complex10.ZERO.toString();
      ComplexField complexField0 = complex3.getField();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex6.exp();
      List<Complex> list0 = complex2.nthRoot(4747);
      Complex complex14 = complex6.subtract(2284.0865329761);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1044.442));
      Complex complex1 = Complex.valueOf(243.17140579222);
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.I.add(955.201469099);
      Complex complex4 = complex3.I.pow(955.201469099);
      String string0 = complex4.NaN.toString();
      Complex complex5 = complex3.INF.atan();
      String string1 = complex5.INF.toString();
      Complex complex6 = complex5.multiply((-900));
      Complex complex7 = complex1.ONE.sqrt();
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex8.reciprocal();
      boolean boolean0 = complex8.isInfinite();
      Complex complex10 = complex0.add((-1545.4821210941));
      Complex complex11 = complex0.pow(complex8);
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex7.createComplex(0.0, 0.0);
      Complex complex14 = complex1.multiply((-1545.4821210941));
      Complex complex15 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.744446753652847E185);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.createComplex(0.0, 5.744446753652847E185);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.INF.multiply(2.7279024753382288E76);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.sqrt();
      double double0 = complex4.ONE.getArgument();
      int int0 = complex4.hashCode();
      Complex complex6 = complex1.INF.createComplex((-4015.9847957127), (-1072.1391));
      double double1 = complex2.getImaginary();
      Complex complex7 = complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1843.3, 3098.57263523563);
      int int0 = complex0.I.hashCode();
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.ONE.multiply(0);
      String string0 = complex0.toString();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-3807.0));
      Complex complex1 = Complex.valueOf((-3807.0), 3579.937677);
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.ONE.add(0.0);
      List<Complex> list0 = complex4.INF.nthRoot(313);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.INF.cosh();
      int int0 = complex0.ZERO.hashCode();
      Complex complex7 = complex0.reciprocal();
      String string0 = complex7.toString();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex1.asin();
      List<Complex> list1 = complex1.nthRoot(3035);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(4618.246301104067);
      Complex complex1 = complex0.divide(4618.246301104067);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply((-462));
      Complex complex2 = new Complex((-3805.43048516755));
      Complex complex3 = Complex.valueOf((double) (-462));
      Complex complex4 = complex1.I.sqrt();
      double double0 = complex3.NaN.abs();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex6.ONE.conjugate();
      boolean boolean0 = complex5.I.equals(complex1);
      Complex complex8 = complex0.ONE.reciprocal();
      boolean boolean1 = complex0.I.equals(complex5);
      Complex complex9 = complex0.pow(complex2);
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex9.multiply(2722);
      double double1 = complex9.abs();
      boolean boolean2 = complex0.NaN.equals(complexField0);
      Complex complex11 = complex0.negate();
      Complex complex12 = Complex.valueOf((double) (-462), 1.0);
      Complex complex13 = complex11.NaN.tanh();
      Complex complex14 = complex13.subtract(complex11);
      Complex complex15 = complex0.exp();
      Complex complex16 = complex2.acos();
      ComplexField complexField1 = complex13.getField();
      Complex complex17 = complex15.add((double) (-462));
      Complex complex18 = complex4.tan();
      Complex complex19 = complex16.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.reciprocal();
      double double0 = complex5.abs();
      Object object0 = new Object();
      boolean boolean0 = complex3.I.equals(object0);
      Complex complex6 = complex2.add(6.23165710486722E298);
      Complex complex7 = complex3.divide((-8.137269363160008E-8));
      Complex complex8 = complex1.createComplex(1.0, (-193.872945138));
      Complex complex9 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 3538.296);
      boolean boolean0 = complex0.ZERO.equals(complex1);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.INF.log();
      boolean boolean1 = complex0.equals(complex1);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex6.multiply(complex9);
      Complex complex11 = complex9.asin();
      Complex complex12 = complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.NaN.multiply(complex1);
      Complex complex6 = complex5.ONE.pow(0.0);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex7.multiply(699);
      double double0 = complex3.getArgument();
      Complex complex9 = complex2.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2143.915860282568), (-295.98613074954));
      Complex complex1 = complex0.NaN.divide((-2143.915860282568));
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf(4.999126524757713E-197);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.reciprocal();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      Complex complex3 = complex2.INF.multiply(241);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.sqrt1z();
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = complex4.divide(0.0);
      Complex complex8 = complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.add((-1867.24));
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.valueOf((-1867.24));
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex7.ZERO.subtract(complex0);
      Complex complex9 = complex6.NaN.sqrt1z();
      double double0 = complex3.getReal();
      Complex complex10 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1826);
      Complex complex2 = complex1.exp();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex2.I.add((double) 1826);
      Complex complex4 = complex2.multiply((double) 1826);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.NaN.tanh();
      ComplexField complexField1 = complex3.getField();
      Complex complex7 = complex4.createComplex((-1421.31), (-1421.31));
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex1.NaN.equals(object0);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex3.NaN.sin();
      String string0 = complex3.I.toString();
      Complex complex5 = complex2.I.multiply(3697);
      String string1 = complex5.NaN.toString();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex0.subtract((double) 3697);
      Complex complex9 = Complex.valueOf((double) 3697);
      Complex complex10 = complex9.INF.pow(complex8);
      List<Complex> list0 = complex7.nthRoot(502);
      boolean boolean1 = complex6.isNaN();
      Object object1 = complex0.readResolve();
      Object object2 = complex2.readResolve();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex11.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex0.I.reciprocal();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex0.ZERO.add(0.0);
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = Complex.valueOf(4342.1, 0.0);
      double double0 = complex0.abs();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf((-581.8), (-581.8));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.sqrt();
      double double1 = complex1.NaN.abs();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = Complex.valueOf(Double.NaN, 427.733);
      String string0 = complex0.toString();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = Complex.valueOf(0.7853981633974483);
      Complex complex7 = complex1.add(complex3);
      Complex complex8 = complex7.ONE.tanh();
      double double2 = complex5.NaN.getArgument();
      Object object0 = complex1.INF.readResolve();
      Complex complex9 = complex5.ZERO.acos();
      Complex complex10 = complex8.multiply(complex4);
      Complex complex11 = complex3.multiply(0.7853981633974483);
      Complex complex12 = complex6.sqrt1z();
      Complex complex13 = Complex.valueOf((-900.9705));
      String string1 = complex5.toString();
      Complex complex14 = Complex.valueOf((-900.9705));
      List<Complex> list0 = complex14.ZERO.nthRoot(233);
      Complex complex15 = complex6.NaN.add(685.176242);
      Complex complex16 = complex14.divide(complex12);
      Complex complex17 = complex16.I.divide((-2365.76365));
      Complex complex18 = complex12.reciprocal();
      String string2 = complex16.ONE.toString();
      boolean boolean0 = complex13.isInfinite();
      Complex complex19 = complex7.subtract(complex16);
      Complex complex20 = complex3.createComplex(Double.NaN, 0.0);
      int int1 = complex18.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.INF.asin();
      double double0 = complex0.getImaginary();
      Complex complex2 = Complex.valueOf(3042.1, 3042.1);
      Complex complex3 = complex0.ZERO.divide(873.563139);
      Complex complex4 = complex2.NaN.multiply(complex0);
      Complex complex5 = complex0.I.pow(complex2);
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = Complex.valueOf(3042.1);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex5.ONE.tan();
      Complex complex10 = complex0.pow((-1536.3491200094));
      List<Complex> list0 = complex10.NaN.nthRoot(1);
      Complex complex11 = complex5.cos();
      boolean boolean0 = complex9.isInfinite();
      Complex complex12 = complex4.exp();
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1852.4705115028));
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex4.ONE.sin();
      double double0 = complex0.getArgument();
      Complex complex6 = complex4.log();
      Complex complex7 = complex6.I.conjugate();
      String string0 = complex6.ZERO.toString();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex1.multiply(1);
      Complex complex10 = complex6.atan();
      Complex complex11 = complex3.add(0.0);
      double double1 = complex10.getImaginary();
      Complex complex12 = complex8.pow((double) 1);
      List<Complex> list0 = complex8.nthRoot(1);
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex1.ONE.subtract(complex0);
      Complex complex6 = complex5.ONE.pow(1695.3481);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex0.subtract(complex7);
      Complex complex11 = complex7.atan();
      Complex complex12 = complex11.asin();
      Complex complex13 = complex11.ZERO.acos();
      int int0 = complex13.I.hashCode();
      Complex complex14 = Complex.valueOf((-92.8215), (-92.8215));
      Complex complex15 = complex1.exp();
      Complex complex16 = complex15.ZERO.reciprocal();
      Complex complex17 = complex15.sqrt1z();
      Complex complex18 = complex17.INF.multiply(complex0);
      boolean boolean0 = complex9.isInfinite();
      Complex complex19 = complex2.sinh();
      Complex complex20 = complex7.createComplex((-92.8215), 703.768);
      Complex complex21 = complex1.cos();
      Complex complex22 = complex1.asin();
      double double0 = complex3.getReal();
      int int1 = complex16.hashCode();
      Complex complex23 = complex4.add(complex2);
      Complex complex24 = Complex.valueOf(8.917559854082513E82);
      Complex complex25 = complex10.sinh();
      boolean boolean1 = complex20.equals(complex10);
      Complex complex26 = complex16.acos();
      boolean boolean2 = complex19.isNaN();
      Complex complex27 = Complex.valueOf((-2807.0725906488115), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.cos();
      int int0 = complex0.INF.hashCode();
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.divide(complex1);
      double double0 = complex0.ONE.abs();
      Complex complex7 = complex4.ZERO.conjugate();
      Complex complex8 = complex7.ZERO.subtract(complex1);
      Object object0 = complex1.readResolve();
      Complex complex9 = complex4.createComplex((-1449.949), (-1449.949));
      Complex complex10 = complex1.sin();
      Complex complex11 = complex10.NaN.divide(complex9);
      Complex complex12 = complex9.exp();
      Complex complex13 = complex12.cosh();
      Complex complex14 = Complex.valueOf(1191.723409);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = (-2894.759712345476);
      Complex complex0 = new Complex((-2894.759712345476), 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.createComplex((-2894.759712345476), 0.0);
      Complex complex3 = Complex.valueOf((-6779.55115165536));
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
