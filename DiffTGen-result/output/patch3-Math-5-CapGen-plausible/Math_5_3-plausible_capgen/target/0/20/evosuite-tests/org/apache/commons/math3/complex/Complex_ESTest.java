/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:14:01 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.subtract(990.1);
      Complex complex3 = Complex.valueOf(882.0, (-967.6));
      Complex complex4 = Complex.valueOf((-967.6), 0.0);
      Complex complex5 = complex3.NaN.multiply(complex4);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.negate();
      List<Complex> list0 = complex7.nthRoot(1);
      boolean boolean0 = complex7.ZERO.equals(complex6);
      double double0 = complex6.getArgument();
      Complex complex8 = complex0.add(1.1241179396053055E261);
      Complex complex9 = complex8.pow((-759.1829682281458));
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex0.createComplex(990.1, 0.0);
      Complex complex12 = complex0.ONE.pow(complex11);
      double double1 = complex12.getArgument();
      Complex complex13 = complex11.ZERO.atan();
      Complex complex14 = complex8.cos();
      Complex complex15 = complex10.multiply(1224);
      Object object0 = complex15.readResolve();
      boolean boolean1 = complex8.isNaN();
      Complex complex16 = complex1.I.pow(complex12);
      boolean boolean2 = complex8.isNaN();
      Complex complex17 = complex0.pow(complex1);
      Complex complex18 = complex17.NaN.exp();
      Complex complex19 = complex0.reciprocal();
      Complex complex20 = complex19.I.createComplex((-1.5707963267948966), 0.0);
      Complex complex21 = complex9.exp();
      ComplexField complexField0 = complex13.getField();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.834541417183388E-68, 4.834541417183388E-68);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.pow(4.834541417183388E-68);
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex0.sqrt();
      double double0 = complex4.getImaginary();
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex4.I.sqrt();
      Complex complex10 = complex0.I.acos();
      Complex complex11 = complex0.NaN.add(complex3);
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.NaN.add((-220.8680765782854));
      Complex complex14 = complex4.pow(complex12);
      Complex complex15 = complex14.multiply(complex3);
      Complex complex16 = complex15.cos();
      Complex complex17 = complex15.INF.createComplex(Double.NaN, 1.3883624076843262);
      Complex complex18 = complex1.NaN.divide(0.0);
      Complex complex19 = complex17.I.exp();
      Object object0 = complex19.ZERO.readResolve();
      Complex complex20 = complex8.multiply((-3917.2640766));
      Complex complex21 = complex20.NaN.add(3.3565057475434694E-275);
      Complex complex22 = complex14.subtract(complex15);
      String string0 = complex15.toString();
      Complex complex23 = complex13.tan();
      Complex complex24 = complex16.sqrt1z();
      Complex complex25 = complex23.acos();
      Complex complex26 = complex21.negate();
      Complex complex27 = complex26.sqrt();
      double double1 = complex19.getArgument();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, (-156.2075888));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex2.ZERO.createComplex((-879.1376), (-616.003459));
      Complex complex6 = complex4.ZERO.multiply(0);
      Complex complex7 = complex6.ONE.tanh();
      double double0 = complex2.getArgument();
      Complex complex8 = complex3.add(complex2);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.ZERO.subtract((-1.5707963267948966));
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex11.ZERO.subtract((-156.2075888));
      Complex complex13 = complex0.divide(complex2);
      Complex complex14 = complex9.tanh();
      Complex complex15 = complex3.sin();
      Complex complex16 = Complex.valueOf(0.0, (double) 0);
      Complex complex17 = complex15.add(0.0);
      Complex complex18 = complex17.tanh();
      Complex complex19 = complex0.add((double) 0);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(560.85956209496, (-2881.1492));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex3.NaN.reciprocal();
      Complex complex6 = complex3.I.cosh();
      Complex complex7 = complex0.divide(1039.97);
      double double0 = complex6.abs();
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex1.add(1039.97);
      Complex complex10 = Complex.valueOf((-3393.6699801052973), 0.0);
      Complex complex11 = complex0.multiply((-1661));
      ComplexField complexField0 = complex7.getField();
      Complex complex12 = complex4.pow(0.5403023058681398);
      Complex complex13 = complex12.NaN.sqrt1z();
      Complex complex14 = complex11.subtract(1670.04786314161);
      Complex complex15 = complex11.add(1670.04786314161);
      try { 
        complex1.nthRoot((-1661));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,661
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ONE.pow((double) (-3380));
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex4.multiply((-3380));
      Complex complex9 = complex5.tan();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex8.INF.pow(complex2);
      int int0 = complex8.hashCode();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex4.divide(0.0);
      Complex complex15 = new Complex((-3380), 20.0);
      Complex complex16 = complex13.divide(complex15);
      Complex complex17 = complex0.divide(complex13);
      Complex complex18 = complex17.ONE.cosh();
      double double0 = complex3.getArgument();
      Complex complex19 = complex14.INF.divide((double) (-3380));
      ComplexField complexField0 = complex14.getField();
      Complex complex20 = complex5.subtract(complex2);
      Complex complex21 = Complex.valueOf(0.0, 2265.265);
      Object object0 = complex14.readResolve();
      boolean boolean0 = complex21.equals(object0);
      Complex complex22 = complex19.cos();
      Complex complex23 = complex2.divide(0.0);
      Complex complex24 = complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.subtract((-129.8359454));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.pow((-129.8359454));
      Complex complex6 = Complex.valueOf(608.85);
      Complex complex7 = complex6.add(6.283185307179586);
      boolean boolean0 = complex4.equals(complex1);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.multiply(1452);
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex2.isNaN();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.NaN.subtract(complex2);
      List<Complex> list0 = complex5.nthRoot(1452);
      Complex complex7 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = complex5.readResolve();
      Complex complex8 = complex7.ONE.atan();
      boolean boolean1 = complex6.isNaN();
      Complex complex9 = complex2.multiply(complex0);
      boolean boolean2 = complex0.isNaN();
      Complex complex10 = complex2.log();
      Complex complex11 = Complex.I;
      boolean boolean3 = complex5.equals(complex11);
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex5.sin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-507.6), (-1.0));
      Complex complex2 = complex1.add((-507.6));
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex3.I.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex5 = Complex.valueOf((-1.0));
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.valueOf(0.0, (-507.6));
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex8.ZERO.add(complex4);
      Complex complex11 = complex3.subtract(1.5707963267948966);
      Complex complex12 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.NaN.nthRoot(881);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.INF.multiply(0);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.toString();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.sqrt1z();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex3.pow((double) 0);
      Complex complex8 = complex5.subtract(complex1);
      Complex complex9 = complex1.NaN.acos();
      Complex complex10 = complex7.createComplex((-2983.2), 881);
      boolean boolean1 = complex8.I.equals(complex4);
      Complex complex11 = complex1.createComplex(20.0, (-1.0));
      Complex complex12 = complex4.divide((-1.0));
      Object object0 = complex5.readResolve();
      boolean boolean2 = complex1.equals(object0);
      boolean boolean3 = complex8.isNaN();
      Complex complex13 = complex0.createComplex(20.0, 0);
      Complex complex14 = complex12.add(complex6);
      double double0 = complex9.getReal();
      Complex complex15 = Complex.valueOf((-1.0));
      Complex complex16 = complex2.atan();
      Complex complex17 = complex11.createComplex((-2983.2), (-278.1189512));
      Complex complex18 = complex8.acos();
      Complex complex19 = complex5.sin();
      String string1 = complex16.toString();
      Complex complex20 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.I.divide(complex2);
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.I.tanh();
      boolean boolean1 = complex5.isInfinite();
      double double0 = complex6.getReal();
      Complex complex9 = complex6.reciprocal();
      boolean boolean2 = complex5.equals(complex4);
      Complex complex10 = complex9.reciprocal();
      List<Complex> list0 = complex7.nthRoot(346);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.divide((-1406.8810284508802));
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.ZERO.add(0.0);
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      Complex complex5 = Complex.valueOf(1.0, 0.0);
      Complex complex6 = complex0.multiply(1.0);
      String string0 = complex0.toString();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex7.multiply(complex1);
      Complex complex10 = complex9.pow(3558.94);
      Complex complex11 = complex0.log();
      Complex complex12 = complex11.I.createComplex((-1406.8810284508802), 3558.94);
      Complex complex13 = complex12.NaN.conjugate();
      Complex complex14 = complex11.I.pow(15.25518625735399);
      Complex complex15 = complex10.sin();
      String string1 = complex15.I.toString();
      Complex complex16 = complex4.tanh();
      double double0 = complex3.abs();
      try { 
        complex7.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-828.107), 1592.46);
      Complex complex1 = complex0.ONE.log();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = Complex.valueOf((-828.107));
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex0.pow(1.0);
      Complex complex9 = complex0.I.sqrt1z();
      Complex complex10 = complex0.divide(0.0);
      Complex complex11 = complex10.ZERO.divide((-1571.03));
      Complex complex12 = complex10.NaN.multiply(complex3);
      Complex complex13 = complex2.tan();
      double double1 = complex0.getImaginary();
      Complex complex14 = complex1.acos();
      Complex complex15 = complex12.subtract(Double.POSITIVE_INFINITY);
      Complex complex16 = complex12.ZERO.sqrt();
      try { 
        complex14.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.INF.pow(0.0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = Complex.valueOf((-664.0072165195824), 0.0);
      Complex complex7 = complex6.ONE.multiply(0.0);
      Complex complex8 = complex6.NaN.subtract(complex0);
      Complex complex9 = complex8.divide(complex0);
      Complex complex10 = complex8.ONE.subtract(complex0);
      Complex complex11 = complex0.tanh();
      double double0 = complex3.getImaginary();
      boolean boolean0 = complex11.equals((Object) null);
      Complex complex12 = complex7.conjugate();
      ComplexField complexField0 = complex5.getField();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex6.tan();
      Complex complex15 = complex10.subtract(complex8);
      Complex complex16 = complex15.cos();
      Complex complex17 = complex5.subtract(complex1);
      Complex complex18 = Complex.valueOf(1.2904307529671472E-176);
      Complex complex19 = complex17.pow(complex18);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-321.9959954704), 3814.64798088);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.INF.add((-2808.3));
      Complex complex5 = complex2.ONE.reciprocal();
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex6.I.add(complex0);
      Complex complex8 = complex6.sinh();
      double double0 = complex0.getReal();
      List<Complex> list0 = complex1.nthRoot(919);
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex11.sqrt();
      Complex complex14 = complex1.reciprocal();
      double double1 = complex5.getArgument();
      Complex complex15 = complex5.multiply(complex14);
      Complex complex16 = complex13.sin();
      Complex complex17 = complex15.sqrt();
      Complex complex18 = complex13.cosh();
      boolean boolean0 = complex16.isNaN();
      Complex complex19 = complex14.multiply(919);
      Complex complex20 = complex5.log();
      double double2 = complex17.getImaginary();
      int int0 = complex17.hashCode();
      Complex complex21 = complex20.reciprocal();
      double double3 = complex18.getImaginary();
      Complex complex22 = complex19.acos();
      double double4 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1340.87), (-2698.0145468792944));
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex4.subtract((-4455.0));
      try { 
        complex6.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(121.548, 121.548);
      Complex complex1 = complex0.ONE.exp();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(1121.886676387624);
      double double0 = complex0.NaN.abs();
      Complex complex4 = complex0.ZERO.exp();
      String string1 = complex4.I.toString();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex2.tanh();
      String string2 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(622.35721491939);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(622.35721491939);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex2.I.subtract(622.35721491939);
      Complex complex8 = Complex.valueOf(622.35721491939, 622.35721491939);
      Complex complex9 = complex6.pow(complex8);
      Complex complex10 = complex6.createComplex(Double.NaN, 0.0);
      Complex complex11 = complex7.multiply(complex0);
      double double0 = complex2.getArgument();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = complex2.pow(0.0);
      Complex complex14 = complex13.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2061.57036));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.divide((-234.81096659183353));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex2.INF.subtract((-1.0));
      Complex complex6 = complex1.add(complex0);
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex3.add(2584.11821488227);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1577.35834));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.NaN.equals(object0);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.sin();
      List<Complex> list0 = complex2.ZERO.nthRoot(1);
      boolean boolean1 = complex2.INF.equals(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex4.ONE.subtract(complex3);
      Complex complex8 = complex1.createComplex(1734.0, 0.0);
      String string0 = complex0.toString();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex4.tanh();
      Object object1 = complex0.readResolve();
      double double0 = complex7.getArgument();
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex7.sqrt();
      Complex complex13 = complex6.cosh();
      Complex complex14 = complex8.subtract((-1577.35834));
      Complex complex15 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      double double0 = complex1.getImaginary();
      String string0 = complex1.toString();
      Complex complex4 = complex2.pow(complex1);
      double double1 = complex1.abs();
      Complex complex5 = complex4.reciprocal();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex6 = complex0.divide(0.0);
      ComplexField complexField1 = complex5.getField();
      Complex complex7 = complex1.conjugate();
      double double2 = complex6.abs();
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex8.ONE.divide(complex5);
      double double3 = complex7.abs();
      Complex complex10 = complex0.tanh();
      List<Complex> list0 = complex2.nthRoot(962);
      Complex complex11 = complex10.exp();
      Complex complex12 = complex11.I.sin();
      Complex complex13 = complex9.log();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.valueOf(1.3399392455370071E-284, 0.0);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex2.INF.add((-1337.37113368044));
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex0.multiply(complex4);
      Object object0 = complex6.I.readResolve();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.I.tan();
      Complex complex9 = complex7.INF.multiply(0.0);
      Complex complex10 = complex9.I.reciprocal();
      double double0 = complex0.getReal();
      boolean boolean0 = complex5.equals("CANNOT_FORMAT_INSTANCE_AS_COMPLEX");
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(823.962328);
      Complex complex1 = Complex.valueOf(823.962328, 710.63445683865);
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.getImaginary();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.INF.multiply(679);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex3.I.sinh();
      Complex complex7 = complex0.pow((-710.63445683865));
      double double1 = complex0.getArgument();
      Complex complex8 = complex4.NaN.sinh();
      Complex complex9 = Complex.valueOf((-710.63445683865), (-710.63445683865));
      Complex complex10 = complex9.I.divide(complex5);
      Complex complex11 = complex3.NaN.multiply(1);
      Complex complex12 = complex0.INF.negate();
      boolean boolean0 = complex1.ONE.equals((Object) null);
      Complex complex13 = complex1.atan();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.ZERO.createComplex(25.17, 4470.107088);
      Complex complex16 = complex2.atan();
      Complex complex17 = complex16.INF.atan();
      double double2 = complex6.getArgument();
      Complex complex18 = complex5.exp();
      Complex complex19 = complex18.NaN.multiply(complex15);
      Complex complex20 = complex13.tan();
      double double3 = complex4.abs();
      Object object0 = complex5.readResolve();
      Complex complex21 = complex2.subtract(complex8);
      double double4 = complex7.getReal();
      Complex complex22 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1650.67695865, 1650.67695865);
      Complex complex1 = complex0.pow((-1373.4));
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 4.368312797746065E-126);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.pow(complex0);
      boolean boolean0 = complex2.equals(complex0);
      boolean boolean1 = complex0.NaN.equals(complex1);
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex0.divide(2.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.ZERO.pow(0.0);
      Complex complex7 = complex4.negate();
      boolean boolean2 = complex7.isNaN();
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex4.INF.sqrt();
      Complex complex10 = complex7.multiply(0);
      Complex complex11 = complex5.sqrt();
      boolean boolean3 = complex2.isNaN();
      double double0 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex3.subtract((-313.63));
      Complex complex6 = complex4.subtract(Double.NaN);
      Complex complex7 = complex1.ONE.add((-3104.961));
      Complex complex8 = complex6.NaN.log();
      Complex complex9 = complex0.divide(complex1);
      String string0 = complex3.I.toString();
      Complex complex10 = complex9.NaN.atan();
      boolean boolean0 = complex9.equals(complex1);
      Complex complex11 = complex2.log();
      double double0 = complex2.getImaginary();
      double double1 = complex3.getImaginary();
      Complex complex12 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex13 = complex10.I.tan();
      Complex complex14 = complex12.NaN.add((-68.74));
      Complex complex15 = complex14.I.atan();
      Complex complex16 = complex9.createComplex(0.0, 0.0);
      Complex complex17 = complex10.divide(complex2);
      Complex complex18 = complex5.add(complex11);
      Complex complex19 = complex4.pow(5019.2);
      Complex complex20 = complex19.tan();
      Complex complex21 = Complex.valueOf(0.0);
      Complex complex22 = complex7.asin();
      Complex complex23 = complex19.divide((-68.74));
      Complex complex24 = complex18.pow(0.5640701055526733);
      boolean boolean1 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.add(1.633308028614055E81);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex0.NaN.pow(complex4);
      ComplexField complexField0 = complex6.ZERO.getField();
      int int0 = complex0.hashCode();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex0.divide(complex7);
      Complex complex9 = complex7.ZERO.sinh();
      Complex complex10 = complex5.I.createComplex(0.0, Double.NaN);
      try { 
        complex10.INF.nthRoot((-1695));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,695
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf((-1356.0322484714));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex4.multiply(0);
      Complex complex7 = complex6.INF.acos();
      double double0 = complex5.getImaginary();
      Complex complex8 = Complex.valueOf(396.759462, Double.NaN);
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sqrt1z();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex2.ZERO.subtract(complex3);
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex0.cos();
      int int0 = complex8.hashCode();
      Complex complex9 = complex0.sin();
      Complex complex10 = Complex.valueOf(2.547000388735681E214);
      Complex complex11 = complex8.I.cosh();
      Complex complex12 = complex11.INF.sinh();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex14 = complex8.multiply(complex13);
      Complex complex15 = complex14.INF.sin();
      Complex complex16 = Complex.valueOf((-611.1702298));
      Complex complex17 = complex6.subtract((-702.29));
      double double0 = complex14.getReal();
      Complex complex18 = complex3.tanh();
      boolean boolean1 = complex6.isNaN();
      Complex complex19 = complex1.pow(complex8);
      Complex complex20 = complex13.multiply(1450);
      boolean boolean2 = complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0582754611968994);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.multiply(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = new Complex((-1295.63772485885), (-1295.63772485885));
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.add(967.573366966376);
      Complex complex6 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.650155887561251E-8), (-1.650155887561251E-8));
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex((-2.356194490192345), 6.283185307179586);
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex1.I.getField();
      ComplexField complexField1 = complex2.INF.getField();
      double double1 = complex2.NaN.abs();
      double double2 = complex2.getImaginary();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.ZERO.sqrt1z();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = Complex.valueOf(20.0);
      Complex complex8 = complex1.subtract((-2.356194490192345));
      boolean boolean0 = complex1.isInfinite();
      Complex complex9 = complex8.atan();
      Complex complex10 = Complex.valueOf(271.6960115224, 1.4592602252960205);
      Complex complex11 = complex0.sqrt();
      Complex complex12 = complex11.NaN.sqrt1z();
      double double3 = complex11.ONE.abs();
      Complex complex13 = complex2.tanh();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex14 = complex4.multiply(1);
      Complex complex15 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(403);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.ZERO.add((double) 403);
      Complex complex4 = complex3.NaN.pow(92.6547);
      Complex complex5 = complex3.ONE.subtract(1115.749579);
      boolean boolean0 = complex1.NaN.equals("");
      Complex complex6 = complex2.exp();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex6.NaN.createComplex(1557.6279194, 1557.6279194);
      Complex complex8 = complex0.pow((double) 403);
      Complex complex9 = complex6.add((double) 403);
      Complex complex10 = complex2.multiply(403);
      Complex complex11 = complex0.I.reciprocal();
      Complex complex12 = complex10.I.cosh();
      Complex complex13 = complex0.ZERO.divide(complex11);
      Complex complex14 = complex2.cosh();
      Complex complex15 = complex8.exp();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex2.NaN.reciprocal();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex7.INF.asin();
      double double0 = complex0.getReal();
      Complex complex9 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(177.0, 177.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.multiply(599);
      double double0 = complex0.ONE.abs();
      Complex complex4 = complex1.INF.log();
      List<Complex> list0 = complex0.nthRoot(632);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.ONE.multiply(299);
      Complex complex8 = complex0.multiply(632);
      Complex complex9 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-62.549), (-62.549));
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      double double2 = complex0.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.multiply((-62.549));
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex5.sinh();
      String string0 = complex3.toString();
      Complex complex7 = complex4.tan();
      boolean boolean1 = complex4.ZERO.equals(complex1);
      Complex complex8 = Complex.valueOf(344.5732327069);
      Complex complex9 = Complex.valueOf((-2.356194490192345), (-62.549));
      Complex complex10 = complex7.ZERO.acos();
      double double3 = complex0.ONE.getArgument();
      double double4 = complex7.abs();
      double double5 = complex0.I.abs();
      Object object0 = new Object();
      boolean boolean2 = complex0.equals(object0);
      Complex complex11 = complex3.ONE.tanh();
      boolean boolean3 = complex3.equals("");
      Complex complex12 = complex1.subtract(complex4);
      Complex complex13 = complex9.reciprocal();
      Complex complex14 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-495.32817));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add(complex2);
      boolean boolean0 = complex1.ZERO.equals(complex0);
      Complex complex4 = Complex.I;
      boolean boolean1 = complex2.ZERO.equals(complex4);
      Complex complex5 = complex3.ONE.subtract(5.6208949382936426E-8);
      boolean boolean2 = complex5.equals(complex4);
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex1.INF.divide(1648.1446736832606);
      List<Complex> list0 = complex3.nthRoot(1078);
      String string0 = complex3.toString();
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2272.15685));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = Complex.valueOf((double) 485);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex0.I.multiply(complex3);
      List<Complex> list0 = complex0.nthRoot(485);
      Complex complex6 = complex0.createComplex((-2272.15685), (-764.5615597968));
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex6.ONE.asin();
      int int0 = complex0.hashCode();
      Complex complex9 = complex8.NaN.subtract((double) 485);
      Complex complex10 = complex9.I.add(complex0);
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex11.INF.sqrt();
      Complex complex13 = complex12.INF.subtract(complex1);
      int int1 = complex11.ONE.hashCode();
      Complex complex14 = Complex.valueOf(0.12814581394195557);
      Complex complex15 = complex6.subtract((-2272.15685));
      Complex complex16 = complex7.NaN.sinh();
      Complex complex17 = complex15.INF.log();
      boolean boolean0 = complex7.isInfinite();
      Complex complex18 = complex8.sqrt();
      Complex complex19 = complex17.sqrt();
      Complex complex20 = complex19.tanh();
      double double0 = complex20.ZERO.abs();
      Complex complex21 = complex14.add((double) 485);
      Complex complex22 = complex19.log();
      Object object0 = new Object();
      boolean boolean1 = complex19.equals(object0);
      Complex complex23 = complex10.divide((-2272.15685));
      Complex complex24 = Complex.valueOf(0.0);
      try { 
        complex8.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1606.0);
      Complex complex0 = new Complex(0.0, (-1606.0));
      try { 
        complex0.I.nthRoot((-1710));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,710
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.divide(3117.533758477329);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex3.log();
      double double0 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      String string0 = complex0.I.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex1.multiply(Double.NaN);
      Complex complex4 = complex1.ZERO.tanh();
      Complex complex5 = complex3.ONE.multiply(0);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.tan();
      double double0 = complex5.getArgument();
      Complex complex8 = complex7.I.add(Double.NaN);
      Complex complex9 = complex7.multiply(0);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex7.subtract(667.21432);
      Complex complex12 = complex9.asin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-736.551349757));
      Complex complex2 = complex0.NaN.atan();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex3 = complex2.ONE.atan();
      double double0 = complex0.getReal();
      Complex complex4 = complex2.multiply((-736.551349757));
      Complex complex5 = complex2.sqrt1z();
      double double1 = complex0.getReal();
      Complex complex6 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.createComplex(Double.NaN, Double.NaN);
      double double0 = complex2.NaN.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.ONE.conjugate();
      double double1 = complex4.ZERO.getArgument();
      Complex complex5 = complex1.I.cos();
      Complex complex6 = complex5.NaN.multiply(complex1);
      Complex complex7 = complex2.multiply(568);
      String string0 = complex1.INF.toString();
      Complex complex8 = complex7.INF.sqrt();
      Complex complex9 = complex5.NaN.conjugate();
      Complex complex10 = complex6.I.createComplex(6.283185307179586, 0.5887627601623535);
      Complex complex11 = complex2.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex12 = complex6.log();
      Complex complex13 = complex4.divide(Double.NaN);
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3081.06069955118));
      Complex complex1 = Complex.valueOf((-3081.06069955118));
      Complex complex2 = Complex.valueOf((-3081.06069955118));
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(352.35603896, (-766.0));
      boolean boolean0 = complex0.NaN.equals((Object) null);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.multiply(3264.0);
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf(3264.0, (-766.0));
      Complex complex6 = complex3.NaN.multiply(complex2);
      Complex complex7 = Complex.valueOf(3264.0, 2.7002575714977818E-8);
      boolean boolean1 = complex0.isNaN();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex9.multiply(3264.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.atan();
      int int0 = complex1.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex8.I.add(complex2);
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex0.pow(1.7027192115783691);
      Complex complex12 = complex11.ZERO.pow(complex5);
      ComplexField complexField0 = complex4.getField();
      double double0 = complex7.getReal();
      Complex complex13 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(4.877860620031438E147);
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(3211.899215);
      Complex complex3 = complex0.sinh();
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(500.4127405297);
      Complex complex1 = complex0.reciprocal();
      List<Complex> list0 = complex0.NaN.nthRoot(190);
      Complex complex2 = complex0.reciprocal();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex2.divide((-1590.985157832288));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex4.ONE.negate();
      boolean boolean0 = complex0.equals(complex1);
      Object object0 = complex2.readResolve();
      Complex complex6 = complex5.INF.sin();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex5.ZERO.sqrt();
      Complex complex10 = complex6.I.divide(0.0);
      try { 
        complex3.nthRoot((-68));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -68
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3051.346203));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.ZERO.atan();
      double double0 = complex3.NaN.getArgument();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.INF.reciprocal();
      boolean boolean0 = complex3.equals(complex4);
      Complex complex6 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(980.9773, 980.9773);
      Complex complex1 = Complex.valueOf(89.0);
      boolean boolean0 = complex0.I.equals(complex1);
      Complex complex2 = complex1.ONE.subtract(89.0);
      ComplexField complexField0 = complex2.NaN.getField();
      double double0 = complex2.ZERO.getArgument();
      boolean boolean1 = complex0.isNaN();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex1.pow((-2.3640641240074437E-8));
      Complex complex6 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(213.391, 213.391);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex2.INF.sin();
      double double0 = complex4.getArgument();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.multiply(187);
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex2.pow(complex6);
      Complex complex10 = complex7.ONE.conjugate();
      Complex complex11 = complex3.pow(1.0663697110471944E-8);
      boolean boolean0 = complex7.isInfinite();
      Complex complex12 = complex1.subtract((double) 187);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(1.1984128162292276E269);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.divide((-946.7378));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.divide((-869.019598));
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.sqrt();
      String string1 = complex3.toString();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.multiply(complex5);
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.I.multiply((-1390.999963037759));
      Complex complex9 = complex7.subtract((-1.642361029990822E65));
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex0.I.sin();
      Complex complex13 = complex2.multiply(729.0215055);
      String string2 = complex0.toString();
      Complex complex14 = complex4.divide(729.0215055);
      Complex complex15 = complex3.sin();
      Complex complex16 = complex14.multiply(1278);
      Complex complex17 = complex8.ZERO.exp();
      Complex complex18 = complex3.sqrt1z();
      int int0 = complex12.hashCode();
      Complex complex19 = complex8.subtract(complex16);
      List<Complex> list0 = complex10.nthRoot(101);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex4.ZERO.add(20.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex0.INF.add(1.0);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = Complex.valueOf(1.0, 4681.9597906012605);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.INF.negate();
      Complex complex9 = complex8.ONE.add(complex6);
      Complex complex10 = complex7.NaN.acos();
      Complex complex11 = complex7.INF.subtract(complex8);
      Complex complex12 = complex11.ONE.createComplex(4681.9597906012605, 996.372);
      Complex complex13 = complex6.NaN.exp();
      Complex complex14 = complex13.INF.subtract(complex9);
      Complex complex15 = complex2.NaN.atan();
      Complex complex16 = complex6.ZERO.multiply(4681.9597906012605);
      Complex complex17 = complex7.divide(6.283185307179586);
      Complex complex18 = complex17.sqrt1z();
      double double0 = complex9.ZERO.abs();
      double double1 = complex10.abs();
      Complex complex19 = complex10.subtract(0.0);
      Complex complex20 = complex8.tan();
      Complex complex21 = complex19.cos();
      Complex complex22 = complex7.createComplex(1.0, 0.0);
      Complex complex23 = complex2.divide(complex9);
      Object object0 = new Object();
      boolean boolean0 = complex20.equals(object0);
      Complex complex24 = complex19.cos();
      Complex complex25 = complex14.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.multiply(1735);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex5.NaN.sinh();
      String string0 = complex0.toString();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex1.INF.conjugate();
      Complex complex9 = complex7.ZERO.sin();
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.subtract(complex7);
      Complex complex12 = complex10.ZERO.sqrt();
      Complex complex13 = complex0.asin();
      String string1 = complex3.toString();
      Complex complex14 = complex10.add(complex1);
      Complex complex15 = complex7.acos();
      Complex complex16 = complex7.cos();
      Complex complex17 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2284.39601550073), (-2284.39601550073));
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-669.8815021246));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.conjugate();
      String string0 = complex2.NaN.toString();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.NaN.pow(complex4);
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex7.I.multiply(2233.234844399244);
      int int0 = complex3.NaN.hashCode();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex1.INF.sinh();
      Complex complex11 = complex1.sqrt();
      Complex complex12 = complex2.divide(complex1);
      Complex complex13 = complex1.multiply(complex3);
      Complex complex14 = complex13.ONE.sinh();
      Complex complex15 = complex10.multiply(complex11);
      int int1 = complex3.hashCode();
      Complex complex16 = complex7.subtract(complex12);
      Complex complex17 = complex5.sinh();
      Complex complex18 = complex13.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-1704);
      Object object0 = complex0.ONE.readResolve();
      try { 
        complex0.nthRoot((-1704));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,704
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.multiply(952);
      Complex complex4 = complex2.multiply((double) 952);
      Complex complex5 = complex2.ONE.add(2505.51385108399);
      Complex complex6 = complex5.ONE.divide(complex2);
      Complex complex7 = complex4.ZERO.divide(complex2);
      Complex complex8 = complex2.subtract(complex3);
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex1.subtract(2505.51385108399);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1409.872586910379, 1409.872586910379);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ONE.divide(0.045809537172317505);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.subtract(complex1);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = Complex.valueOf((-1104.89), 0.0);
      double double0 = complex2.getImaginary();
      Object object1 = new Object();
      boolean boolean1 = complex6.equals(object1);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex3.pow(complex7);
  }
}
