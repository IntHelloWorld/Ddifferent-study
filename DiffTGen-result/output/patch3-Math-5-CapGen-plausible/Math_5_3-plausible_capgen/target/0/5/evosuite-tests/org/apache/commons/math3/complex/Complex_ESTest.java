/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:06:20 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(722.3681);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex3.ONE.divide(complex7);
      Complex complex9 = complex6.NaN.subtract(Double.NaN);
      List<Complex> list0 = complex9.nthRoot(3480);
      ComplexField complexField0 = complex9.getField();
      Complex complex10 = complex1.subtract(complex9);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex9.reciprocal();
      Complex complex13 = Complex.valueOf(Double.NaN, (double) 3480);
      Complex complex14 = complex13.pow(complex1);
      int int0 = complex4.NaN.hashCode();
      Complex complex15 = complex3.cosh();
      Complex complex16 = complex11.multiply(0);
      Complex complex17 = complex4.sqrt();
      Complex complex18 = complex4.tan();
      Complex complex19 = complex18.ZERO.multiply(complex16);
      Complex complex20 = complex15.add(complex14);
      Complex complex21 = complex16.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      boolean boolean0 = complex1.NaN.equals(complex0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex0.NaN.multiply(7);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.I.tanh();
      Complex complex6 = complex2.I.conjugate();
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex3.ONE.cos();
      Complex complex9 = complex7.NaN.divide(complex0);
      List<Complex> list0 = complex7.I.nthRoot(2556);
      Complex complex10 = complex0.divide(complex2);
      Complex complex11 = Complex.valueOf(1.0);
      Complex complex12 = complex3.tan();
      Complex complex13 = complex2.INF.sinh();
      boolean boolean1 = complex1.isNaN();
      Complex complex14 = complex3.sqrt();
      Complex complex15 = Complex.valueOf((double) 2556);
      Complex complex16 = complex1.atan();
      Complex complex17 = complex11.divide(complex10);
      Complex complex18 = complex6.sinh();
      Complex complex19 = complex18.sinh();
      Complex complex20 = complex6.createComplex(0.0, 0.0);
      Complex complex21 = complex18.pow(complex0);
      Complex complex22 = complex12.conjugate();
      Complex complex23 = Complex.valueOf(1.6927716732025146, 0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(835.893673985023);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = Complex.valueOf(835.893673985023);
      Complex complex7 = complex2.I.subtract((-3047.150311702297));
      Complex complex8 = complex5.multiply(0.7853981633974483);
      double double1 = complex5.ONE.abs();
      Complex complex9 = complex4.add(complex2);
      Complex complex10 = complex9.NaN.multiply(complex4);
      Complex complex11 = complex9.INF.multiply(835.893673985023);
      Complex complex12 = complex11.NaN.add(5251.6608);
      Complex complex13 = complex0.divide(0.7853981633974483);
      Complex complex14 = complex13.ZERO.acos();
      Complex complex15 = complex1.NaN.sqrt();
      Complex complex16 = complex3.acos();
      double double2 = complex2.getImaginary();
      Complex complex17 = Complex.valueOf(835.893673985023, 835.893673985023);
      int int0 = complex16.hashCode();
      Complex complex18 = complex2.pow(complex3);
      Complex complex19 = complex8.acos();
      Complex complex20 = complex4.divide(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex21 = complex12.acos();
      double double3 = complex21.abs();
      Complex complex22 = complex17.sinh();
      Complex complex23 = complex3.sqrt();
      Complex complex24 = complex20.exp();
      Complex complex25 = complex17.asin();
      Complex complex26 = complex3.negate();
      try { 
        complex6.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex1.INF.abs();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.pow(708.7);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.INF.multiply(complex3);
      Complex complex6 = complex2.NaN.multiply((-793.015582));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = complex5.INF.pow(complex8);
      Complex complex10 = complex9.I.add(complex8);
      Complex complex11 = complex10.ZERO.asin();
      Complex complex12 = complex3.NaN.asin();
      Complex complex13 = complex0.sinh();
      Complex complex14 = complex13.asin();
      Complex complex15 = complex14.INF.sqrt1z();
      Complex complex16 = complex0.cos();
      Complex complex17 = complex1.ZERO.subtract(complex2);
      Complex complex18 = complex16.ZERO.asin();
      Complex complex19 = Complex.valueOf(0.0, 0.0);
      double double0 = complex19.NaN.getArgument();
      String string0 = complex5.toString();
      Complex complex20 = Complex.ONE;
      Complex complex21 = complex20.ZERO.sqrt();
      Complex complex22 = complex5.sqrt();
      boolean boolean0 = complex16.ZERO.equals(complex20);
      Complex complex23 = complex5.sqrt1z();
      Complex complex24 = complex23.NaN.sqrt1z();
      Complex complex25 = complex24.subtract(complex7);
      Complex complex26 = complex23.I.exp();
      Complex complex27 = complex16.multiply(complex2);
      Object object0 = complex16.readResolve();
      Complex complex28 = complex3.add(Double.NaN);
      Complex complex29 = complex28.subtract(708.7);
      double double1 = complex19.getArgument();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.I.multiply(2.5017542839050293);
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = Complex.valueOf(2.5017542839050293, 0.0);
      Complex complex7 = complex6.ONE.add(complex5);
      Object object0 = new Object();
      boolean boolean0 = complex7.equals(object0);
      double double0 = complex5.I.abs();
      double double1 = complex5.getReal();
      Complex complex8 = complex5.NaN.multiply(198);
      double double2 = complex8.ZERO.getArgument();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex9.INF.add(1.490218341008089E-193);
      Complex complex11 = complex9.subtract(0.0);
      double double3 = complex5.getArgument();
      Complex complex12 = complex2.multiply(41);
      Complex complex13 = complex5.multiply(8.568043768122183E-212);
      double double4 = complex9.abs();
      Complex complex14 = complex2.sqrt1z();
      ComplexField complexField0 = complex14.getField();
      Complex complex15 = complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex((-1.0), (-1.0));
      double double1 = (-94.5436719);
      Complex complex1 = Complex.valueOf((-94.5436719), (-1.0));
      try { 
        complex1.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.pow(Double.NaN);
      String string0 = complex1.toString();
      ComplexField complexField0 = complex0.ZERO.getField();
      double double0 = complex0.abs();
      Complex complex3 = complex0.divide((-1261.5345864));
      ComplexField complexField1 = complex3.getField();
      int int0 = 0;
      Complex complex4 = complex3.multiply(0);
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      String string0 = complex1.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-3640.9488));
      List<Complex> list0 = complex3.ZERO.nthRoot(632);
      Complex complex4 = complex0.subtract(4448.31337152416);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex3.INF.negate();
      Complex complex7 = complex5.add(complex4);
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex1.ZERO.multiply(complex8);
      Complex complex11 = complex10.atan();
      Complex complex12 = complex3.asin();
      Complex complex13 = complex1.sqrt1z();
      Complex complex14 = complex8.ZERO.sinh();
      Object object0 = complex13.I.readResolve();
      ComplexField complexField0 = complex1.getField();
      Complex complex15 = complex8.negate();
      String string1 = complex3.toString();
      Complex complex16 = complex2.add(841.1523650181);
      Complex complex17 = complex0.divide(841.1523650181);
      Complex complex18 = complex14.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.tan();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.I.createComplex(1.5707963267948966, 0.0);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex8.NaN.sqrt();
      Object object1 = complex9.I.readResolve();
      Complex complex10 = complex7.NaN.cos();
      Complex complex11 = complex8.I.multiply(0.0);
      double double1 = complex7.getArgument();
      Complex complex12 = complex7.ONE.createComplex(0.0, 1.5707963267948966);
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex13 = complex2.pow(complex9);
      Complex complex14 = complex8.sqrt();
      Complex complex15 = complex7.divide(2.0);
      double double2 = complex14.getImaginary();
      Complex complex16 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isInfinite();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ONE.add(0.0);
      Complex complex5 = complex3.ZERO.sin();
      Complex complex6 = complex3.I.log();
      Complex complex7 = complex3.INF.acos();
      Complex complex8 = complex7.add((-827.0));
      Complex complex9 = complex7.NaN.asin();
      double double0 = complex8.I.getArgument();
      Complex complex10 = complex7.tan();
      Complex complex11 = complex10.asin();
      ComplexField complexField0 = complex11.ONE.getField();
      Complex complex12 = complex3.INF.multiply(complex6);
      Object object0 = new Object();
      boolean boolean2 = complex1.equals(object0);
      String string0 = complex10.toString();
      Complex complex13 = complex11.divide(complex8);
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex0.add(complex14);
      Complex complex16 = complex3.sqrt();
      double double1 = complex0.abs();
      try { 
        complex0.nthRoot((-2087));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,087
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.INF.subtract((-20.0));
      Complex complex6 = Complex.valueOf(4139.317493658623, (-1202.233946584235));
      Complex complex7 = complex3.multiply(3591);
      Complex complex8 = complex7.I.atan();
      boolean boolean0 = complex7.I.equals(complex0);
      Complex complex9 = complex7.ONE.acos();
      boolean boolean1 = complex5.equals(complex4);
      Complex complex10 = complex7.multiply(4139.317493658623);
      Complex complex11 = complex0.log();
      Complex complex12 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.INF.add(complex0);
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex3.getImaginary();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex2.divide(0.0);
      Complex complex9 = complex7.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ONE.tan();
      Complex complex11 = complex4.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex12 = complex3.subtract(0.0);
      Complex complex13 = complex12.sqrt1z();
      Complex complex14 = complex2.multiply(complex4);
      Complex complex15 = complex11.pow(complex5);
      Complex complex16 = complex7.divide(2.0);
      Complex complex17 = complex10.multiply((-1.0));
      Complex complex18 = complex16.add(complex5);
      Complex complex19 = complex5.asin();
      Complex complex20 = complex10.subtract(0.0);
      Complex complex21 = complex14.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
      double double1 = complex1.ONE.getArgument();
      Complex complex3 = complex2.INF.divide(0.0);
      Complex complex4 = complex2.NaN.pow(0.0);
      Complex complex5 = complex4.INF.divide(complex3);
      Complex complex6 = complex4.ONE.cosh();
      double double2 = complex6.INF.abs();
      Complex complex7 = complex1.asin();
      int int0 = complex7.NaN.hashCode();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex9.ONE.add(0.0);
      Complex complex11 = complex9.ONE.cosh();
      Complex complex12 = complex9.I.asin();
      Complex complex13 = complex2.add(complex0);
      Complex complex14 = complex12.ZERO.divide(complex3);
      Complex complex15 = complex3.negate();
      Complex complex16 = complex12.sqrt();
      Complex complex17 = complex2.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex((-1509.23765), 1515.0);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex2.ZERO.conjugate();
      Complex complex5 = complex4.ZERO.atan();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex6.INF.multiply(complex1);
      Complex complex9 = complex7.ONE.multiply(complex4);
      Complex complex10 = complex9.divide(complex5);
      String string0 = complex1.NaN.toString();
      Complex complex11 = Complex.valueOf((-2725.129132822), (-2725.129132822));
      Complex complex12 = complex11.INF.cos();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex2.INF.cosh();
      Complex complex15 = complex14.NaN.log();
      Complex complex16 = complex3.multiply(0);
      Complex complex17 = complex1.multiply(complex2);
      Complex complex18 = complex16.subtract(complex1);
      Complex complex19 = complex11.pow(complex0);
      Complex complex20 = complex1.tan();
      Complex complex21 = Complex.valueOf((double) 0, Double.POSITIVE_INFINITY);
      Complex complex22 = complex16.multiply((-1509.23765));
      boolean boolean0 = complex4.isInfinite();
      Complex complex23 = complex0.atan();
      Complex complex24 = complex5.subtract(complex1);
      Complex complex25 = complex24.log();
      boolean boolean1 = complex17.isInfinite();
      Complex complex26 = complex17.pow(complex18);
      Complex complex27 = complex18.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1346.0), (-1346.0));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply((-2.356194490192345));
      Complex complex3 = complex2.INF.divide((-2.356194490192345));
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = Complex.valueOf((-2.356194490192345), 0.0);
      ComplexField complexField1 = complex6.NaN.getField();
      Complex complex7 = complex0.divide(complex6);
      Complex complex8 = complex0.ZERO.reciprocal();
      Complex complex9 = complex8.I.createComplex(0.0, (-2.356194490192345));
      Object object0 = complex9.I.readResolve();
      double double1 = complex8.NaN.abs();
      Complex complex10 = Complex.valueOf((-1.053265874779237E-303), (-1.053265874779237E-303));
      double double2 = complex10.ZERO.abs();
      double double3 = complex5.abs();
      Complex complex11 = complex1.tan();
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex12 = complex6.multiply(complex2);
      double double4 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(268.7604958411116, (-904.81820230926));
      Complex complex1 = complex0.ONE.multiply(729);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.I.atan();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.INF.exp();
      double double0 = complex3.getArgument();
      boolean boolean0 = complex3.equals(object0);
      List<Complex> list0 = complex3.nthRoot(729);
      Complex complex6 = complex0.sqrt1z();
      boolean boolean1 = complex6.isInfinite();
      List<Complex> list1 = complex2.nthRoot(729);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex0.ZERO.createComplex(477.7221506552836, 1613.26147);
      Complex complex9 = Complex.valueOf((-904.81820230926), 3200.875179676655);
      Complex complex10 = complex7.I.tan();
      Complex complex11 = complex2.NaN.multiply(729);
      Complex complex12 = complex10.cosh();
      Complex complex13 = complex2.divide(2012.4758120711688);
      Complex complex14 = complex1.conjugate();
      List<Complex> list2 = complex3.nthRoot(17);
      Complex complex15 = complex6.multiply(729);
      Complex complex16 = complex4.sinh();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-2257.4705666631216), (-7.29821745001452E-8));
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex1.ZERO.nthRoot(1116);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.sinh();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex4.I.cosh();
      Complex complex7 = complex4.cos();
      Complex complex8 = Complex.valueOf((-2158.862), 6.283185307179586);
      Complex complex9 = complex1.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
      double double0 = 2.0;
      Complex complex1 = new Complex(2.0);
      Complex complex2 = complex0.add(complex1);
      String string0 = complex0.ZERO.toString();
      Complex complex3 = complex1.ONE.conjugate();
      boolean boolean0 = complex0.NaN.equals(object0);
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex4.INF.pow((-1786.438111058));
      Complex complex7 = complex6.ZERO.subtract(complex3);
      Complex complex8 = complex2.INF.multiply(complex4);
      Complex complex9 = complex7.I.sinh();
      Complex complex10 = Complex.valueOf(0.0, (-1786.438111058));
      double double0 = complex0.abs();
      int int0 = complex3.I.hashCode();
      Complex complex11 = complex10.cosh();
      double double1 = complex3.getArgument();
      Complex complex12 = complex4.log();
      String string0 = complex12.INF.toString();
      Complex complex13 = complex3.add(-0.0);
      double double2 = complex13.getArgument();
      List<Complex> list0 = complex4.nthRoot(402);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ZERO.sqrt1z();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.createComplex((-21.53845379), (-21.53845379));
      double double1 = complex3.getArgument();
      Complex complex4 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply(1);
      Complex complex3 = Complex.valueOf((-3551.943));
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex4.pow(complex3);
      Complex complex6 = complex2.NaN.pow((-3551.943));
      Complex complex7 = Complex.valueOf((-3551.943));
      Complex complex8 = complex0.subtract(complex1);
      double double0 = complex2.getReal();
      Complex complex9 = complex3.subtract(complex1);
      int int0 = complex3.hashCode();
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.I.subtract(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.ZERO.getField();
      List<Complex> list0 = complex0.nthRoot(37);
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.NaN.add(complex3);
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex6.NaN.createComplex(0.0, 0.0);
      double double0 = complex0.ONE.abs();
      double double1 = complex2.abs();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex1.sin();
      double double2 = complex3.abs();
      Complex complex10 = complex4.NaN.pow(complex0);
      Complex complex11 = complex10.INF.pow(Double.NaN);
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex3.subtract(complex4);
      Complex complex14 = complex3.reciprocal();
      Complex complex15 = complex1.cos();
      Complex complex16 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf((-7.724219106106896E111));
      Complex complex3 = complex0.INF.asin();
      Complex complex4 = complex0.add(complex1);
      String string0 = complex4.toString();
      Complex complex5 = Complex.valueOf(0.0, 903.9553786);
      boolean boolean0 = complex5.ONE.equals((Object) null);
      Complex complex6 = complex4.multiply(2188.7);
      Complex complex7 = complex1.createComplex(0.0, (-7.724219106106896E111));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex((-1626.478));
      boolean boolean0 = complex2.INF.equals(complex3);
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex1.cosh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1245.390252991964, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = Complex.valueOf(1245.390252991964, (-617.68417195));
      Complex complex4 = complex0.NaN.subtract(1245.390252991964);
      Complex complex5 = complex1.I.sqrt1z();
      boolean boolean0 = complex1.isInfinite();
      Complex complex6 = complex4.ONE.multiply(complex0);
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex3.INF.sinh();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex0.createComplex(0.0, (-833.6236859642768));
      Complex complex12 = Complex.valueOf((-809.33302423776));
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex5.add((-833.6236859642768));
      Complex complex15 = complex13.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.I.add(complex1);
      Complex complex5 = complex3.log();
      Complex complex6 = complex4.NaN.cosh();
      Complex complex7 = complex2.I.subtract(complex1);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.I.pow(complex8);
      Complex complex10 = complex0.I.sin();
      Complex complex11 = complex1.INF.conjugate();
      Complex complex12 = complex11.ZERO.divide(complex10);
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex0.atan();
      int int0 = complex14.ZERO.hashCode();
      Complex complex15 = complex2.exp();
      Complex complex16 = complex3.divide(complex2);
      Complex complex17 = complex16.INF.tan();
      Complex complex18 = Complex.valueOf(0.0);
      double double0 = complex1.getArgument();
      Complex complex19 = complex10.sin();
      Complex complex20 = complex10.sin();
      Complex complex21 = complex20.NaN.asin();
      Complex complex22 = complex20.INF.log();
      Complex complex23 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(198.294);
      Complex complex1 = new Complex(198.294);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.ONE.atan();
      String string0 = complex0.ZERO.toString();
      String string1 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide(1673.36551);
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.ONE.cosh();
      boolean boolean0 = complex1.I.equals((Object) null);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.ZERO.reciprocal();
      Complex complex6 = Complex.valueOf(1673.36551);
      Complex complex7 = complex4.ZERO.sin();
      Complex complex8 = complex7.I.multiply((-622));
      Complex complex9 = complex8.ONE.add((double) (-622));
      Complex complex10 = complex7.ZERO.log();
      boolean boolean1 = complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(7);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.NaN.pow(complex2);
      Complex complex13 = complex0.divide(complex4);
      Complex complex14 = complex4.NaN.cos();
      Complex complex15 = Complex.valueOf(1673.36551, 1262.4609801);
      Complex complex16 = complex15.ONE.divide(0.0);
      Complex complex17 = complex15.I.reciprocal();
      Complex complex18 = complex17.I.sqrt1z();
      boolean boolean2 = complex3.isInfinite();
      ComplexField complexField0 = complex2.getField();
      Complex complex19 = complex4.tan();
      Complex complex20 = complex0.cos();
      Complex complex21 = complex4.divide(1262.4609801);
      Complex complex22 = complex0.pow(1262.4609801);
      double double0 = complex6.abs();
      int int0 = complex9.hashCode();
      double double1 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-527.176451011));
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.valueOf((-79.0));
      List<Complex> list0 = complex0.I.nthRoot(1045);
      Complex complex2 = complex0.createComplex((-378.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.log();
      List<Complex> list0 = complex2.I.nthRoot(1);
      Complex complex3 = complex2.INF.asin();
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex1.equals("instance of class {0} not comparable to existing values");
      boolean boolean2 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(181.491671128021, 0.0);
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      List<Complex> list0 = complex1.NaN.nthRoot(1249);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.pow((-351.3417669761));
      double double0 = complex2.getArgument();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex4.I.multiply((-879.77764));
      Complex complex7 = complex0.negate();
      String string0 = complex7.toString();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex0.reciprocal();
      boolean boolean0 = complex1.isInfinite();
      List<Complex> list1 = complex1.nthRoot(1);
      int int0 = complex4.hashCode();
      Complex complex9 = complex8.add((double) 1249);
      Complex complex10 = complex0.divide(complex6);
      Complex complex11 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.3910386562347412, (-752.66249648));
      Complex complex1 = Complex.valueOf((-752.66249648), (-1325.48));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.asin();
      String string0 = complex0.toString();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex4.subtract(0.3910386562347412);
      Complex complex10 = complex8.ONE.asin();
      Complex complex11 = complex3.divide(complex6);
      Complex complex12 = complex0.divide(complex4);
      Complex complex13 = complex0.multiply(856.0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1506.068218859), (-867.56858020834));
      Complex complex2 = complex1.NaN.subtract((-867.56858020834));
      Complex complex3 = complex0.NaN.pow(complex1);
      Object object0 = new Object();
      Complex complex4 = complex0.ONE.atan();
      boolean boolean0 = complex3.ONE.equals(object0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.NaN.cos();
      ComplexField complexField0 = complex5.I.getField();
      Object object1 = complex2.readResolve();
      Complex complex7 = complex3.createComplex((-867.56858020834), 625.3526);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex1.multiply(complex8);
      String string0 = complex1.toString();
      double double0 = complex1.getImaginary();
      Complex complex10 = complex7.createComplex((-1506.068218859), (-751.1675733194462));
      double double1 = complex6.getReal();
      Complex complex11 = complex3.multiply(257);
      Complex complex12 = complex11.pow(complex1);
      double double2 = complex12.abs();
      Complex complex13 = complex8.sqrt1z();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex13.log();
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf((double) 37);
      List<Complex> list0 = complex4.NaN.nthRoot(2773);
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex0.pow((-557.824278));
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-7.145758990550526E-9), (-2726.218805454451));
      Complex complex1 = complex0.ONE.subtract((-7.145758990550526E-9));
      Complex complex2 = complex1.ONE.pow((-2726.218805454451));
      Complex complex3 = complex2.NaN.add(2885.46616232);
      Complex complex4 = complex3.I.multiply(1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.multiply(2611);
      Complex complex7 = complex5.ZERO.multiply(complex0);
      Complex complex8 = complex5.exp();
      double double0 = complex0.getImaginary();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Object object0 = complex0.readResolve();
      Complex complex2 = Complex.valueOf(0.0);
      Object object1 = complex2.I.readResolve();
      Complex complex3 = complex1.ZERO.divide(0.0);
      Complex complex4 = complex1.createComplex((-2406.0231671), 0.0);
      Complex complex5 = complex1.log();
      Object object2 = complex5.NaN.readResolve();
      Complex complex6 = complex2.subtract(complex1);
      double double0 = complex6.ONE.abs();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.ZERO.divide(complex1);
      Complex complex9 = complex7.INF.add(complex5);
      double double1 = complex1.getReal();
      Object object3 = complex2.readResolve();
      Complex complex10 = complex0.I.add(0.0);
      Complex complex11 = complex5.subtract(5643.3046314471);
      Complex complex12 = Complex.valueOf(0.0);
      Object object4 = complex4.readResolve();
      Complex complex13 = complex11.pow(complex2);
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = complex14.ONE.subtract(0.0);
      Complex complex16 = Complex.valueOf(0.0, (-2406.0231671));
      boolean boolean0 = complex4.equals(object1);
      Complex complex17 = complex6.multiply(complex2);
      Complex complex18 = complex4.asin();
      Complex complex19 = complex9.createComplex(0.0, 0.0);
      Object object5 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.multiply((-1.0));
      Complex complex5 = complex3.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex3.pow(complex0);
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.conjugate();
      Object object0 = complex6.readResolve();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex8.NaN.sinh();
      Complex complex12 = complex0.divide(complex2);
      Object object1 = new Object();
      boolean boolean0 = complex5.equals(object1);
      Complex complex13 = complex2.asin();
      Complex complex14 = complex9.cosh();
      Complex complex15 = complex2.cosh();
      Complex complex16 = complex9.createComplex((-1.0), 0.0);
      Complex complex17 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex18 = complex13.conjugate();
      double double0 = complex1.getImaginary();
      boolean boolean1 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1520.8277726566994));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.reciprocal();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = new Complex((-1520.8277726566994), (-1520.8277726566994));
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex0.acos();
      String string0 = complex4.INF.toString();
      Complex complex6 = complex4.divide(0.0);
      boolean boolean0 = complex6.I.equals(complex4);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1325.0));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-3.0417051809209134E136));
      Complex complex1 = Complex.valueOf((-3.0417051809209134E136));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = Complex.valueOf((-1739.6729304629314), 1692.6112555474435);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex9.INF.createComplex((-1739.6729304629314), 0.0);
      Complex complex11 = complex7.conjugate();
      double double0 = complex0.getArgument();
      int int0 = complex8.hashCode();
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex12.INF.pow(complex5);
      Complex complex14 = complex7.add(complex5);
      int int1 = complex1.hashCode();
      Complex complex15 = Complex.valueOf(213.62, 1692.6112555474435);
      ComplexField complexField0 = complex15.ZERO.getField();
      Complex complex16 = complex8.sinh();
      Complex complex17 = complex0.subtract(complex2);
      Complex complex18 = complex16.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex3.pow(3070.2951484896);
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(2724);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ZERO.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.valueOf(1.4345106852061226E265);
      Complex complex6 = complex4.I.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex0.INF.conjugate();
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = Complex.valueOf((double) 2724, (double) 2724);
      double double1 = complex10.getImaginary();
      String string0 = complex10.toString();
      List<Complex> list0 = complex0.nthRoot(2724);
      List<Complex> list1 = complex6.nthRoot(705);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.subtract((-557.511));
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex4.multiply(20);
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex1.INF.asin();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex0.add(0.0);
      Complex complex10 = complex1.divide(1565.4718074420812);
      Complex complex11 = complex6.NaN.asin();
      Complex complex12 = complex10.subtract(5.5737717715868425E-8);
      Complex complex13 = complex2.cos();
      Complex complex14 = complex6.multiply(1);
      Complex complex15 = complex1.atan();
      Complex complex16 = complex10.divide(complex2);
      Complex complex17 = complex10.log();
      Complex complex18 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5.303786078838E-10));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      Complex complex4 = complex0.NaN.tanh();
      int int0 = complex0.I.hashCode();
      Object object0 = complex4.NaN.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex4.atan();
      int int1 = complex4.hashCode();
      Complex complex6 = complex5.sqrt();
      String string0 = complex0.toString();
      Complex complex7 = Complex.valueOf((-1405.980096));
      boolean boolean0 = complex7.equals("(0.0, 0.0)");
      Complex complex8 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.log();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-4153.8813603), (-4153.8813603));
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex1.ONE.add(complex0);
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = Complex.valueOf((-2.5338279333399964E-272), (-2.5338279333399964E-272));
      int int0 = complex1.ONE.hashCode();
      Object object0 = complex5.INF.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      double double0 = complex1.abs();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex1.I.cosh();
      Complex complex9 = complex8.NaN.divide(complex7);
      Complex complex10 = complex4.ZERO.negate();
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex1.divide(complex4);
      String string0 = complex12.NaN.toString();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex0.sqrt();
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      double double0 = complex1.abs();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex1.I.multiply(complex2);
      Object object0 = complex2.I.readResolve();
      Complex complex6 = complex4.ZERO.divide(complex1);
      Complex complex7 = complex3.ZERO.sin();
      Complex complex8 = complex7.I.multiply(complex5);
      Complex complex9 = complex0.multiply((-1213));
      Complex complex10 = complex9.INF.acos();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex3.add((-3535.51103));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-1199.1), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(1296);
      Complex complex4 = complex0.subtract(518.2646558998532);
      Complex complex5 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2.573617458343506, 20.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf((-380.88620920855), (-380.88620920855));
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex3.NaN.pow(complex0);
      String string0 = complex0.toString();
      double double0 = complex3.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.subtract((-3116.2478255));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(1607.56, (-8.772048092842086E271));
      Complex complex1 = complex0.INF.pow(1607.56);
      Complex complex2 = complex0.atan();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex3 = complex0.ONE.divide(complex1);
      boolean boolean1 = complex1.isInfinite();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex0.acos();
      int int0 = complex4.INF.hashCode();
      Complex complex5 = complex2.atan();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1730.209106579727));
      Complex complex1 = complex0.NaN.cos();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = Complex.valueOf(652.6916265);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.ONE.subtract(2934.184295985136);
      double double0 = complex0.getImaginary();
      ComplexField complexField1 = complex0.getField();
      try { 
        complex0.nthRoot((-249));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -249
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.ONE.atan();
      Complex complex7 = complex5.NaN.pow(0.0);
      Complex complex8 = complex7.ZERO.subtract(2.1983272709242607E-8);
      Complex complex9 = complex7.NaN.negate();
      Complex complex10 = complex9.multiply(551);
      Complex complex11 = complex5.ONE.reciprocal();
      Complex complex12 = complex5.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex4.sinh();
      Complex complex14 = complex13.ZERO.asin();
      String string0 = complex14.ZERO.toString();
      Complex complex15 = complex13.pow((double) 551);
      double double0 = complex14.INF.abs();
      Complex complex16 = complex13.I.conjugate();
      List<Complex> list0 = complex1.ONE.nthRoot(1);
      Complex complex17 = complex13.divide(0.19999954104423523);
      Complex complex18 = complex5.add(2612.3892677479826);
      Complex complex19 = complex1.divide(complex0);
      Complex complex20 = complex2.sqrt();
      Complex complex21 = complex6.pow(355.6);
      String string1 = complex7.toString();
      Complex complex22 = complex19.negate();
      Complex complex23 = complex21.log();
      Complex complex24 = Complex.valueOf(0.0, 2612.3892677479826);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(568.79);
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.I.sin();
      double double1 = complex5.INF.getArgument();
      String string0 = complex1.toString();
      Complex complex7 = complex5.log();
      Complex complex8 = new Complex(0.7853981633974483);
      Complex complex9 = complex0.add(complex8);
      Complex complex10 = complex9.I.reciprocal();
      ComplexField complexField0 = complex7.INF.getField();
      Complex complex11 = complex7.INF.multiply(complex1);
      Complex complex12 = complex11.INF.sqrt1z();
      int int0 = complex7.hashCode();
      Complex complex13 = complex0.cos();
      int int1 = complex13.hashCode();
      double double2 = complex4.getImaginary();
      Complex complex14 = complex7.subtract(complex1);
      Complex complex15 = complex14.multiply(complex5);
      Complex complex16 = complex15.ZERO.cos();
      double double3 = complex14.ONE.abs();
      Complex complex17 = complex14.add(complex4);
      Complex complex18 = complex6.sinh();
      Complex complex19 = complex2.multiply(2105);
      Complex complex20 = complex8.acos();
      boolean boolean0 = complex7.isNaN();
      Complex complex21 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex2.ZERO.divide(complex3);
      double double0 = complex2.getArgument();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.INF.subtract(0.0);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex7.INF.divide((-2260.4595826399));
      Complex complex9 = Complex.valueOf((-1.0), (-1.0));
      Complex complex10 = Complex.valueOf((-614.8), (-1446.4102130172557));
      Object object0 = complex10.ONE.readResolve();
      Complex complex11 = complex7.tan();
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex12.INF.sqrt();
      Complex complex14 = complex10.atan();
      Complex complex15 = complex10.createComplex(3.141592653589793, 0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex3 = complex0.ZERO.divide(4505.92657);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.subtract(0.0);
      Object object1 = complex5.ONE.readResolve();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.subtract(complex0);
      Object object2 = complex2.readResolve();
      Complex complex9 = complex6.divide(0.0);
      Complex complex10 = complex1.multiply(0);
      Complex complex11 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 20.0);
      Complex complex2 = complex1.NaN.multiply(1.5510089388648915E101);
      Complex complex3 = complex1.INF.pow(1.5510089388648915E101);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.I.multiply(562);
      Complex complex7 = complex5.NaN.tanh();
      Complex complex8 = complex0.multiply(2543);
      Complex complex9 = complex8.ONE.tan();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex8.cosh();
      Complex complex12 = complex4.INF.sqrt();
      Object object0 = new Object();
      boolean boolean0 = complex3.equals(object0);
      Complex complex13 = complex7.sqrt();
      Complex complex14 = complex0.tanh();
      Complex complex15 = complex1.multiply(complex4);
      Complex complex16 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, (-2676.4));
      Complex complex6 = complex1.NaN.sinh();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex6.I.multiply(complex4);
      Complex complex10 = complex6.NaN.multiply(685);
      int int0 = complex6.ONE.hashCode();
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex0.subtract(complex1);
      Complex complex13 = complex4.tanh();
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex3.ZERO.divide(complex14);
      int int1 = complex12.INF.hashCode();
      Complex complex16 = complex12.INF.acos();
      Complex complex17 = complex11.INF.createComplex((-1259.8093685684128), (-1.4881197370811587E-252));
      boolean boolean0 = complex12.ONE.equals(complex11);
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex3.sinh();
      Complex complex20 = complex19.NaN.cos();
      Complex complex21 = complex19.log();
      Complex complex22 = complex3.tanh();
      Complex complex23 = complex4.add((-1259.8093685684128));
      Complex complex24 = complex23.subtract(0.0);
      Complex complex25 = complex24.ZERO.acos();
      boolean boolean1 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide((-359.4090536));
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex2.multiply(1);
      double double0 = complex2.abs();
      Complex complex5 = complex2.subtract(0.0);
      Complex complex6 = complex2.tan();
      Complex complex7 = complex2.add(0.0);
      double double1 = complex7.getReal();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.NaN.add(complex6);
      Complex complex10 = complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.cos();
      double double0 = complex2.I.getArgument();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.sinh();
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-3476.28187), (-3476.28187));
      Complex complex1 = Complex.valueOf((-3476.28187), (-3476.28187));
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf((-3476.28187), 3524.0);
      Complex complex5 = complex0.ZERO.log();
      Complex complex6 = complex0.divide((-3476.28187));
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex7.cos();
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-907.49912047));
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.I.add(complex5);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.ONE.acos();
      ComplexField complexField0 = complex0.getField();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex0.multiply(0.0);
      Complex complex11 = complex10.NaN.subtract(0.0);
      Complex complex12 = complex0.pow(0.0);
      Complex complex13 = complex12.ONE.atan();
      Complex complex14 = complex9.tan();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex15.exp();
      double double0 = complex1.getReal();
      Complex complex17 = complex12.ONE.exp();
      Complex complex18 = complex3.asin();
      Complex complex19 = complex12.tan();
      boolean boolean0 = complex4.isNaN();
      Complex complex20 = complex8.sqrt1z();
  }
}
