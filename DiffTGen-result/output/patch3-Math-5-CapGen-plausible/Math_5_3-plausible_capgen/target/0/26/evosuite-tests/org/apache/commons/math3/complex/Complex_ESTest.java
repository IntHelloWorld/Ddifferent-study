/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 12:17:36 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(2.1735615730285645, (-2898.554322305562));
      Complex complex1 = complex0.INF.multiply((-1));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.createComplex((-2898.554322305562), (-1));
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex2.NaN.exp();
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.ONE.multiply((-2898.554322305562));
      ComplexField complexField1 = complex6.INF.getField();
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = complex2.ZERO.sqrt1z();
      Complex complex9 = complex7.INF.sinh();
      double double0 = complex9.INF.abs();
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = Complex.valueOf(3687.7189, (double) (-1));
      Complex complex12 = complex11.tan();
      Complex complex13 = complex12.ZERO.multiply(482);
      Complex complex14 = complex11.INF.asin();
      Complex complex15 = complex0.reciprocal();
      double double1 = complex0.abs();
      Complex complex16 = complex15.acos();
      Complex complex17 = complex15.add(complex16);
      Complex complex18 = complex16.divide((-786.87));
      Complex complex19 = Complex.valueOf(0.0, (-2898.554322305562));
      double double2 = complex2.abs();
      String string0 = complex1.toString();
      double double3 = complex11.getImaginary();
      Complex complex20 = complex6.createComplex(5.203033137154554E-8, (-2898.554322305562));
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1262.182329, 1262.182329);
      Complex complex1 = complex0.INF.createComplex(1262.182329, 6163.80476495);
      int int0 = complex1.ONE.hashCode();
      int int1 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.add(6.283185307179586);
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.NaN.multiply((-665.97001));
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.valueOf(3212.0, 3212.0);
      Complex complex9 = Complex.valueOf(0.0, 537.95809);
      Complex complex10 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex7.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-2092.374528765049), 2013.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow((-2635.14395716));
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ZERO.sin();
      double double0 = complex1.getImaginary();
      ComplexField complexField0 = complex4.getField();
      boolean boolean0 = complex4.equals(complex5);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.ONE.multiply(complex1);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex2.subtract(2779.0122929);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1441.76, 1441.76);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex0.ZERO.reciprocal();
      Complex complex9 = complex8.add(complex4);
      Complex complex10 = complex7.multiply(247.5903311333);
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex10.ONE.conjugate();
      Complex complex13 = complex11.multiply(complex7);
      double double1 = complex3.getArgument();
      Complex complex14 = complex7.multiply(complex3);
      int int0 = complex3.hashCode();
      int int1 = complex10.hashCode();
      double double2 = complex2.abs();
      Complex complex15 = complex0.ZERO.exp();
      double double3 = complex15.I.abs();
      Complex complex16 = complex7.I.multiply(1441.76);
      Complex complex17 = complex5.createComplex(1.0207195281982422, (-524.2126818094183));
      Complex complex18 = complex10.sinh();
      Complex complex19 = complex18.ZERO.reciprocal();
      Complex complex20 = Complex.valueOf(1645.379856135244, 0.0);
      Complex complex21 = complex14.acos();
      Complex complex22 = complex21.I.sqrt();
      Complex complex23 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 2.5631381141873417E-132;
      Complex complex0 = new Complex(2.5631381141873417E-132);
      Complex complex1 = complex0.ZERO.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = Complex.valueOf(2.5631381141873417E-132);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex0.atan();
      try { 
        complex4.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1.0356006160554071E245), (-1.0356006160554071E245));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.ZERO.divide(complex1);
      Complex complex5 = complex2.ONE.subtract(complex0);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.ZERO.pow((-1.0356006160554071E245));
      Complex complex8 = complex7.NaN.cos();
      double double0 = complex6.INF.getArgument();
      double double1 = complex1.getImaginary();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex6.reciprocal();
      double double2 = complex1.abs();
      Complex complex11 = complex5.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.ONE.add((-20.0));
      Complex complex5 = complex2.I.conjugate();
      double double0 = complex1.abs();
      Complex complex6 = complex0.tanh();
      boolean boolean0 = complex6.isInfinite();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex0.pow(0.0);
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.I.multiply(1.0);
      Complex complex11 = complex9.ONE.cos();
      Complex complex12 = complex9.divide(complex0);
      List<Complex> list0 = complex6.nthRoot(1);
      Complex complex13 = complex0.subtract((double) 1);
      double double1 = complex11.I.abs();
      Complex complex14 = complex8.atan();
      Complex complex15 = complex12.asin();
      Complex complex16 = complex11.sqrt1z();
      Complex complex17 = complex0.multiply(complex14);
      Complex complex18 = complex14.conjugate();
      double double2 = complex17.getReal();
      ComplexField complexField0 = complex15.getField();
      Complex complex19 = complex0.multiply(1);
      Complex complex20 = complex2.divide(complex6);
      ComplexField complexField1 = complex1.getField();
      int int0 = complex3.hashCode();
      Complex complex21 = complex0.asin();
      Complex complex22 = complex18.sinh();
      Complex complex23 = complex18.createComplex((-15.707963267948966), (-15.707963267948966));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex1.subtract((-20.0));
      double double0 = complex3.getReal();
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex3.createComplex(2.4258261770489514E8, 258.564);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.divide(0.0);
      Complex complex3 = complex0.divide((-802.6787734107));
      Complex complex4 = complex0.divide((-1990.5563344791));
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.ONE.subtract(complex1);
      Complex complex9 = complex6.I.atan();
      Complex complex10 = complex9.ONE.divide(complex2);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex4.NaN.subtract(complex6);
      String string0 = complex12.I.toString();
      Complex complex13 = complex4.sin();
      Complex complex14 = complex13.negate();
      Complex complex15 = complex1.sin();
      boolean boolean0 = complex4.equals(complex15);
      Complex complex16 = complex6.subtract(complex3);
      Complex complex17 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(875);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex0.INF.divide(complex4);
      int int0 = complex5.hashCode();
      Complex complex8 = complex0.ZERO.exp();
      Complex complex9 = complex7.INF.createComplex(0.0, 875);
      Complex complex10 = complex6.divide(1120.379);
      Complex complex11 = complex7.divide(1120.379);
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex4.ONE.sqrt();
      double double0 = complex11.NaN.getArgument();
      Complex complex14 = complex11.I.pow(complex5);
      Complex complex15 = Complex.valueOf(1120.379);
      Complex complex16 = complex6.cos();
      String string0 = complex10.toString();
      Complex complex17 = complex4.divide(0.0);
      Complex complex18 = complex17.multiply((-862));
      Complex complex19 = complex17.sqrt();
      boolean boolean0 = complex17.isInfinite();
      Complex complex20 = complex10.sqrt();
      Complex complex21 = complex20.NaN.multiply(1);
      Complex complex22 = complex20.negate();
      Complex complex23 = complex22.pow((double) 875);
      Complex complex24 = complex11.reciprocal();
      Complex complex25 = Complex.valueOf((-523.5536), Double.NaN);
      try { 
        complex4.nthRoot((-2515));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,515
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-296.4022486227), (-296.4022486227));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.multiply((-296.4022486227));
      Complex complex5 = Complex.valueOf((-296.4022486227), (-296.4022486227));
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1735.4998, 1735.4998);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.divide(1735.4998);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ONE.multiply((-2704));
      int int0 = complex3.hashCode();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex3.pow(1735.4998);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = complex1.INF.sinh();
      double double0 = Double.NaN;
      Complex complex3 = complex2.ZERO.divide(Double.NaN);
      Object object0 = complex2.ONE.readResolve();
      double double1 = 0.0;
      String string0 = complex1.ZERO.toString();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.pow(complex4);
      int int0 = (-2685);
      try { 
        complex0.I.nthRoot((-2685));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,685
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract((-1552.74784953));
      Complex complex2 = complex1.multiply(complex0);
      String string0 = complex1.toString();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.multiply(complex0);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex6 = complex0.I.sqrt();
      Complex complex7 = complex0.subtract(1899.115283982);
      Complex complex8 = complex0.subtract(complex7);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex8.negate();
      Complex complex11 = complex10.divide(complex1);
      Complex complex12 = complex9.subtract((-1786.239563523));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sinh();
      double double0 = complex1.abs();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex0.NaN.createComplex(3.3855429446520427E-49, 3.3855429446520427E-49);
      Complex complex4 = complex3.ONE.multiply(3.3855429446520427E-49);
      int int0 = complex4.I.hashCode();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex0.I.multiply(complex4);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.divide(complex0);
      Complex complex9 = complex8.NaN.log();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.INF.multiply(complex10);
      double double1 = complex1.getArgument();
      Complex complex12 = Complex.valueOf(Double.NaN, 3.3855429446520427E-49);
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex5.add(0.0);
      Complex complex15 = complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.tanh();
      double double0 = complex2.I.abs();
      Complex complex3 = complex2.createComplex((-3469.4875), (-199.71));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex2.tanh();
      boolean boolean0 = complex4.isInfinite();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = new Complex((-910.64591), (-910.64591));
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex2.ZERO.createComplex((-910.64591), 7.041681569694413E68);
      Complex complex5 = Complex.valueOf((-146.9885501946461));
      Complex complex6 = complex0.ONE.add(complex5);
      Object object0 = new Object();
      boolean boolean0 = complex5.NaN.equals(object0);
      Complex complex7 = complex6.I.pow((-823.527137611));
      Complex complex8 = complex3.sinh();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex0.subtract(complex9);
      Complex complex11 = complex2.ZERO.divide(complex10);
      Complex complex12 = complex11.NaN.asin();
      String string0 = complex8.INF.toString();
      Object object1 = complex0.readResolve();
      Complex complex13 = complex3.I.subtract((-910.64591));
      Complex complex14 = Complex.valueOf((-910.64591));
      double double0 = complex8.getReal();
      Complex complex15 = complex0.sqrt1z();
      Complex complex16 = complex4.ZERO.createComplex(874.1, 899.73656);
      Complex complex17 = complex9.add(Double.NaN);
      Complex complex18 = complex14.add(complex2);
      double double1 = complex14.getArgument();
      Complex complex19 = complex1.tanh();
      Complex complex20 = complex10.log();
      Complex complex21 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.acos();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex1.NaN.add(complex0);
      double double0 = complex1.ONE.abs();
      Complex complex4 = complex1.NaN.multiply(1);
      Complex complex5 = complex3.NaN.sin();
      Complex complex6 = complex5.I.reciprocal();
      int int0 = complex5.INF.hashCode();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.INF.add(complex7);
      Complex complex9 = complex3.subtract(1.0);
      boolean boolean1 = complex3.equals(complex1);
      int int1 = complex1.INF.hashCode();
      Complex complex10 = complex2.multiply(complex0);
      Complex complex11 = complex10.acos();
      Complex complex12 = complex1.ZERO.sinh();
      Complex complex13 = complex11.INF.add(1.0);
      Complex complex14 = complex2.sqrt1z();
      Complex complex15 = complex1.reciprocal();
      Complex complex16 = complex10.INF.createComplex(0.0, 1);
      Complex complex17 = complex16.ZERO.sinh();
      Complex complex18 = complex7.createComplex(785.418198929, 1);
      double double1 = complex11.getImaginary();
      double double2 = complex13.getImaginary();
      Complex complex19 = complex3.add(Double.NaN);
      Complex complex20 = complex0.tanh();
      Object object2 = complex5.readResolve();
      Complex complex21 = complex3.subtract(complex20);
      Complex complex22 = complex12.multiply(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(941.7843345, 941.7843345);
      Complex complex1 = complex0.ZERO.divide(139.0054438);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.acos();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.I.multiply((-3776.05908982));
      boolean boolean0 = complex1.isNaN();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex7.pow(complex0);
      Complex complex10 = complex7.multiply(1738);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.I.pow(complex1);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.ONE.asin();
      int int0 = (-1186);
      Complex complex8 = complex5.I.negate();
      Complex complex9 = complex6.I.multiply((-1186));
      Complex complex10 = complex9.NaN.add((double) (-1186));
      Complex complex11 = complex5.createComplex(Double.NaN, Double.NaN);
      ComplexField complexField0 = complex11.I.getField();
      try { 
        complex4.nthRoot((-1186));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,186
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.multiply((-1787));
      double double0 = complex1.getReal();
      String string0 = complex2.ONE.toString();
      int int0 = complex2.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.I.multiply(complex4);
      ComplexField complexField0 = complex5.I.getField();
      Complex complex6 = complex1.ONE.cos();
      Complex complex7 = complex0.sin();
      boolean boolean0 = complex2.isNaN();
      Complex complex8 = complex0.multiply((-1.607434968107079E-8));
      Complex complex9 = complex8.I.subtract(complex6);
      Complex complex10 = complex8.I.sqrt1z();
      ComplexField complexField1 = complex8.getField();
      Complex complex11 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 2390.0;
      Complex complex0 = new Complex(2390.0);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.add(complex1);
      Complex complex6 = complex5.sqrt1z();
      ComplexField complexField0 = complex6.INF.getField();
      Complex complex7 = complex5.multiply((-546.0));
      Complex complex8 = complex0.negate();
      Complex complex9 = complex0.sinh();
      List<Complex> list0 = complex0.nthRoot(199);
      Complex complex10 = complex9.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 6.229095980733463E-53;
      Complex complex0 = Complex.valueOf(6.229095980733463E-53);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.INF.createComplex(6.229095980733463E-53, 6.229095980733463E-53);
      int int0 = complex0.INF.hashCode();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3115046679980076E-8, 1.3115046679980076E-8);
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = null;
      try { 
        complex1.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.INF.multiply((-1));
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.sinh();
      boolean boolean0 = complex4.I.equals(complex3);
      ComplexField complexField1 = complex3.ONE.getField();
      Complex complex6 = complex4.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf((-1226.813986494), 0.0);
      Complex complex11 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-834.0);
      Complex complex0 = new Complex((-834.0), (-2781.813015398));
      Complex complex1 = complex0.subtract(2322.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.cos();
      Object object0 = complex2.ONE.readResolve();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.I.pow(complex0);
      Complex complex6 = complex1.I.add(2322.0);
      try { 
        complex4.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2010.0);
      Complex complex1 = complex0.ZERO.multiply(2010.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.sqrt1z();
      int int0 = complex2.NaN.hashCode();
      Complex complex4 = complex2.sinh();
      ComplexField complexField0 = complex0.I.getField();
      Complex complex5 = complex4.pow(2010.0);
      Complex complex6 = complex5.createComplex(2834.347084920702, 2834.347084920702);
      ComplexField complexField1 = complex4.getField();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex6.exp();
      Complex complex9 = Complex.valueOf(2010.0, 2010.0);
      Complex complex10 = complex9.ONE.subtract(complex0);
      Complex complex11 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.add((-865.1));
      Complex complex3 = complex1.sqrt();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex2.multiply((-1962.0));
      Complex complex5 = Complex.valueOf((-1962.0), (-1962.0));
      int int0 = complex0.ONE.hashCode();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.ZERO.subtract((-1962.0));
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.I.sqrt();
      Complex complex10 = complex0.divide((-1962.0));
      Complex complex11 = complex4.ONE.subtract(1898.9393656035777);
      Complex complex12 = complex10.I.log();
      double double1 = complex2.getImaginary();
      boolean boolean0 = complex4.isInfinite();
      boolean boolean1 = complex3.isInfinite();
      Complex complex13 = complex12.atan();
      Complex complex14 = complex1.multiply(700);
      Complex complex15 = Complex.valueOf((-1962.0), 1037.85770257373);
      double double2 = complex10.getImaginary();
      Complex complex16 = Complex.valueOf(0.0);
      boolean boolean2 = complex1.equals(complex16);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = Complex.valueOf(8.5029538631631E-93, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ZERO.divide(complex1);
      String string0 = complex0.toString();
      Object object1 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.add(complex0);
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(1783.01153133, 1783.01153133);
      Complex complex1 = Complex.valueOf(1783.01153133);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.divide((-358.0));
      Complex complex5 = complex2.ZERO.pow((-358.0));
      Complex complex6 = complex2.atan();
      Object object0 = complex4.NaN.readResolve();
      try { 
        complex4.ZERO.nthRoot((-2914));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,914
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-476.2031213753), (-476.2031213753));
      Complex complex1 = Complex.valueOf((-895.844), 1342.0);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(186.749272);
      Complex complex2 = complex0.sinh();
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.createComplex(0.0, 1.6063569876284005E-8);
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.conjugate();
      boolean boolean0 = complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.I.subtract(complex1);
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      double double0 = complex0.I.abs();
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex0.INF.pow((-489.907991441));
      Complex complex5 = complex1.subtract(1049.635);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex6.acos();
      double double1 = complex9.INF.getArgument();
      Complex complex10 = complex7.pow(complex2);
      Complex complex11 = complex10.I.multiply(complex4);
      Complex complex12 = complex8.divide(complex0);
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex4.INF.subtract((-2504.74959454));
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.cos();
      Complex complex8 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex0.INF.nthRoot(5135);
      Complex complex2 = Complex.valueOf((double) 5135, (double) 5135);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex5.multiply(6.283185307179586);
      Complex complex7 = complex4.add(complex3);
      int int0 = complex1.hashCode();
      Complex complex8 = complex1.divide(4.0939972479624634E35);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.negate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3594057956219485E-8, 1.3594057956219485E-8);
      Complex complex1 = complex0.ONE.createComplex(1.3594057956219485E-8, 0.0);
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.multiply(438);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.subtract((double) 438);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = Complex.valueOf(0.0, 2.377086680926386E-8);
      Object object0 = complex1.readResolve();
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.subtract(1.3594057956219485E-8);
      Complex complex11 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4194.314218260822));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.multiply((-4194.314218260822));
      double double0 = complex0.abs();
      Complex complex3 = complex1.tan();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex1.INF.divide((double) 1);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.INF.cosh();
      Complex complex5 = complex4.ZERO.exp();
      double double0 = complex0.abs();
      double double1 = complex1.getImaginary();
      boolean boolean0 = complex1.isNaN();
      List<Complex> list0 = complex1.nthRoot(1);
      double double2 = complex0.I.getArgument();
      Complex complex6 = complex0.add(0.0);
      List<Complex> list1 = complex1.nthRoot(1);
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = complex7.cosh();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex9.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.multiply(0.0);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-4.402550702194912E-8), (-4.402550702194912E-8));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.log();
      double double0 = complex1.getArgument();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.ONE.subtract(0.0);
      Complex complex6 = complex2.ONE.pow(1.5060972626944096E35);
      Complex complex7 = complex1.log();
      Complex complex8 = complex4.pow(complex2);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex1.subtract(181.06);
      Complex complex11 = complex10.NaN.subtract(complex3);
      double double1 = complex7.getReal();
      ComplexField complexField1 = complex1.getField();
      Complex complex12 = complex0.atan();
      Complex complex13 = complex12.NaN.divide(complex3);
      Complex complex14 = complex1.multiply(complex7);
      String string0 = complex0.toString();
      double double2 = complex7.abs();
      Complex complex15 = complex8.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1029.898466716), (-4.20991238598));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1117.191151);
      Complex complex1 = complex0.I.subtract(572.738713189);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.exp();
      double double0 = complex1.ZERO.abs();
      boolean boolean0 = complex1.INF.equals(complex3);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-2411.02), (-2411.02));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.add((-2411.02));
      Complex complex5 = complex4.ONE.add((-2411.02));
      Complex complex6 = complex4.add(complex0);
      Complex complex7 = complex3.INF.conjugate();
      Complex complex8 = complex7.exp();
      Complex complex9 = new Complex((-2411.02), 2451.375);
      Complex complex10 = complex1.add(0.0);
      Complex complex11 = complex3.multiply(complex9);
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.NaN.add(complex1);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(751.969476466021);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.divide((-1392.12845875));
      Complex complex3 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      List<Complex> list0 = complex0.nthRoot(169);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = new Complex(0.0);
      boolean boolean0 = complex2.INF.equals(complex3);
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(646.9771498777698);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.add(646.9771498777698);
      List<Complex> list0 = complex3.INF.nthRoot(2894);
      String string0 = complex2.toString();
      double double0 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.divide(3084.776012353);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(0);
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ZERO.pow((double) 1182);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex0.ZERO.multiply(1182);
      String string0 = complex4.I.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = Complex.valueOf((double) 1182, (double) 1182);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      String string0 = complex0.INF.toString();
      boolean boolean0 = complex2.isInfinite();
      int int0 = 0;
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = complex3.I.conjugate();
      double double0 = complex3.getArgument();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex5.INF.sqrt1z();
      try { 
        complex6.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.createComplex((-3311.0), (-3311.0));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.pow((-1666.2));
      Complex complex5 = complex1.divide((-3311.0));
      Complex complex6 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.ZERO.divide(3059.0043);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex5 = complex3.NaN.multiply((-20.0));
      Complex complex6 = Complex.valueOf((-20.0));
      boolean boolean0 = complex1.equals(complex0);
      Complex complex7 = Complex.valueOf(3059.0043, 0.0);
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex8.atan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Object object0 = new Object();
      boolean boolean0 = complex0.ZERO.equals(object0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.ONE.asin();
      Object object1 = complex3.INF.readResolve();
      Complex complex4 = complex0.divide(complex1);
      double double0 = complex0.getReal();
      Complex complex5 = complex1.asin();
      Complex complex6 = new Complex((-20.0), (-20.0));
      boolean boolean1 = complex5.NaN.equals(complex6);
      Complex complex7 = complex5.ONE.log();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex0.ZERO.subtract(complex3);
      Complex complex12 = complex8.ZERO.conjugate();
      Complex complex13 = complex4.tan();
      Complex complex14 = complex3.I.sinh();
      Complex complex15 = Complex.valueOf((-20.0));
      Complex complex16 = Complex.valueOf((-20.0));
      boolean boolean2 = complex15.NaN.equals("");
      Complex complex17 = complex3.exp();
      Complex complex18 = complex17.NaN.tanh();
      Complex complex19 = complex15.reciprocal();
      Complex complex20 = complex15.cosh();
      Complex complex21 = complex4.multiply(1152.6701584);
      Complex complex22 = complex1.reciprocal();
      Complex complex23 = complex19.add(complex9);
      Complex complex24 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 4306.0);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.tanh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex1.NaN.pow(complex2);
      Complex complex5 = complex2.add((-2973.659478957778));
      Complex complex6 = complex0.multiply(2.516456127166748);
      Complex complex7 = complex0.INF.divide((-2973.659478957778));
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex0.subtract(complex8);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.ZERO.subtract((-7.044869765481105E-8));
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Complex complex1 = Complex.valueOf((-2857.0697982079), (-2955.017139482941));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(463.1, 463.1);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.INF.asin();
      double double0 = complex4.ZERO.abs();
      Complex complex5 = complex0.INF.sin();
      String string0 = complex1.NaN.toString();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex6.I.tanh();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex8.subtract(463.1);
      Complex complex11 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.ONE.equals((Object) null);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.pow(7.813044552050569E-215);
      Complex complex5 = complex0.log();
      String string0 = complex1.toString();
      boolean boolean1 = complex0.isInfinite();
      Complex complex6 = complex0.conjugate();
      String string1 = complex2.toString();
      Complex complex7 = complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(960);
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.sqrt1z();
      boolean boolean0 = complex4.NaN.equals(complex0);
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.cos();
      double double1 = complex0.getImaginary();
      Complex complex7 = complex0.multiply((-318.866));
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex6.divide(complex5);
      int int0 = complex7.hashCode();
      double double2 = complex6.getImaginary();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex2.cos();
      double double3 = complex3.getImaginary();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3108.94176706888));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.NaN.createComplex(1.0, (-3108.94176706888));
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex0.ONE.subtract((-744.63373108221));
      Complex complex5 = complex0.INF.atan();
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.INF.tan();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex6.NaN.pow(1388.5600894);
      Complex complex9 = complex3.multiply(complex4);
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex9.asin();
      try { 
        complex6.nthRoot((-3047));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,047
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(392.9289483);
      Complex complex1 = complex0.I.multiply(392.9289483);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.multiply((-458.26));
      Complex complex4 = complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-452.1041199), (-452.1041199));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ONE.subtract(complex0);
      int int0 = complex0.hashCode();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1729.2);
      Complex complex1 = Complex.valueOf((-4423.484686));
      Complex complex2 = complex0.createComplex(1729.2, 1729.2);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.NaN.sinh();
      List<Complex> list0 = complex3.I.nthRoot(1);
      Complex complex5 = complex0.add(1729.2);
      Complex complex6 = complex5.ONE.divide(1442.38669225);
      Complex complex7 = complex2.cos();
      List<Complex> list1 = complex7.nthRoot(1);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex4.INF.atan();
      Complex complex9 = complex7.multiply((-638));
      Complex complex10 = complex5.ONE.acos();
      Complex complex11 = complex6.ZERO.multiply(complex1);
      Complex complex12 = complex7.sin();
      double double0 = complex7.getArgument();
      double double1 = complex10.NaN.abs();
      Complex complex13 = complex4.createComplex((-638), 1729.2);
      Complex complex14 = complex9.createComplex(0.0, 0.0);
      Complex complex15 = Complex.valueOf(0.0, Double.NaN);
      Complex complex16 = complex14.ZERO.add(complex15);
      Complex complex17 = complex1.NaN.multiply(complex10);
      Complex complex18 = complex0.divide(complex6);
      double double2 = complex1.abs();
      Complex complex19 = Complex.valueOf(1442.38669225);
      Complex complex20 = complex17.tan();
      Complex complex21 = complex13.sin();
      double double3 = complex19.getArgument();
      Complex complex22 = complex2.add(complex7);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(256.3989934296207, 256.3989934296207);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2306.3786554086864);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.NaN.divide(2306.3786554086864);
      Complex complex4 = complex3.INF.multiply((-1647));
      Complex complex5 = complex1.NaN.subtract(complex3);
      Complex complex6 = Complex.valueOf(2306.3786554086864);
      Complex complex7 = complex6.multiply((-65));
      Complex complex8 = complex7.INF.acos();
      Complex complex9 = complex6.NaN.add(complex2);
      Complex complex10 = Complex.valueOf((double) (-1647));
      Complex complex11 = complex2.pow(17.34352);
      Complex complex12 = complex11.asin();
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = Complex.valueOf((-1.1253822296423454E-15));
      Complex complex14 = complex11.cos();
      Complex complex15 = complex14.ONE.subtract(complex6);
      Complex complex16 = complex15.INF.add(1603.518119808635);
      Complex complex17 = complex9.sin();
      ComplexField complexField0 = complex12.ZERO.getField();
      Complex complex18 = complex14.asin();
      Complex complex19 = complex12.subtract((double) (-1647));
      Complex complex20 = complex3.negate();
      double double0 = complex20.ONE.abs();
      Complex complex21 = complex9.reciprocal();
      Complex complex22 = complex10.sqrt1z();
      boolean boolean1 = complex7.equals(complex11);
      Complex complex23 = complex4.add(17.34352);
      Complex complex24 = complex18.cosh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.356194490192345, 0.6144464015960693);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex0.ONE.tan();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.createComplex(20.0, 407.13353954667775);
      Complex complex7 = complex2.createComplex(2862.09475915, 306.61783487);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex0.NaN.divide(complex3);
      Complex complex5 = complex1.pow((-7.979819955));
      Complex complex6 = complex5.I.cos();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex2.I.tan();
      Complex complex8 = complex1.pow(0.0);
      Complex complex9 = complex8.multiply((-1480));
      Complex complex10 = complex5.sin();
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex11.add(complex2);
      Complex complex14 = complex9.acos();
      Complex complex15 = complex11.sin();
      Complex complex16 = complex2.log();
      boolean boolean0 = complex5.isNaN();
      boolean boolean1 = complex7.equals(complex6);
      Complex complex17 = complex16.multiply((-1480));
      Complex complex18 = complex9.divide(complex17);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.pow(3471.1964214698);
      Complex complex4 = complex0.createComplex(543.7204, 543.7204);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.createComplex(0.0, (-2461.481));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ONE.subtract(complex0);
      double double1 = complex0.ONE.getArgument();
      Complex complex3 = Complex.valueOf(5313.36303, 0.0);
      int int0 = complex0.hashCode();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.conjugate();
      double double2 = complex5.abs();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex5.multiply(0.0);
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.add((-289.373496727832));
      Complex complex3 = complex1.I.log();
      Complex complex4 = Complex.valueOf(576.6554831825, 576.6554831825);
      Complex complex5 = complex3.ZERO.cosh();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.add(complex5);
      double double0 = complex7.getImaginary();
      Complex complex9 = complex6.log();
      Complex complex10 = complex5.createComplex(576.6554831825, 0.0);
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex2.asin();
      double double2 = complex10.getReal();
      Complex complex12 = new Complex(576.6554831825, 819.5342);
      boolean boolean0 = complex0.equals(complex12);
  }
}
