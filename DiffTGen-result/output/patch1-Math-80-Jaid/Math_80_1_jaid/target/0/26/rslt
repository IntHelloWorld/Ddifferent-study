* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.linear.EigenDecompositionImpl
* Starting client
* Connecting to master process on port 6307
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-80-Jaid/Math_80_1_jaid/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.linear.EigenDecompositionImpl
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 853
  - Branch 432
  - Exception 0
  - MutationFactory 216
  - Output 28
  - Method 17
  - MethodNoException 17
  - CBranchFitnessFactory 432
* Using seed 1585482042825
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  1%][Progress:=>                            5%] [Cov:====>                              13%][Progress:=>                            5%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:====>                              13%][Progress:==>                           8%] [Cov:=====>                             16%][Progress:==>                           8%] [Cov:=====>                             17%][Progress:==>                           8%] [Cov:======>                            18%][Progress:==>                           8%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:=======>                           21%][Progress:==>                           8%] [Cov:=======>                           22%][Progress:===>                          10%] [Cov:====>                              12%][Progress:===>                          10%] [Cov:====>                              13%][Progress:===>                          11%] [Cov:=>                                 5%][Progress:===>                          11%] [Cov:===>                               9%][Progress:===>                          11%] [Cov:=======>                           21%][Progress:===>                          11%] [Cov:=========>                         26%][Progress:===>                          11%] [Cov:=========>                         27%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:==========>                        31%][Progress:===>                          13%] [Cov:====>                              13%][Progress:====>                         15%] [Cov:>                                  0%][Progress:====>                         16%] [Cov:>                                  1%][Progress:====>                         16%] [Cov:====>                              13%][Progress:====>                         16%] [Cov:====>                              14%][Progress:====>                         16%] [Cov:=====>                             15%][Progress:====>                         16%] [Cov:=====>                             17%][Progress:====>                         16%] [Cov:======>                            19%][Progress:=====>                        18%] [Cov:>                                  0%][Progress:=====>                        18%] [Cov:>                                  1%][Progress:=====>                        18%] [Cov:====>                              13%][Progress:=====>                        18%] [Cov:====>                              14%][Progress:======>                       20%] [Cov:=>                                 5%][Progress:======>                       20%] [Cov:===>                               10%][Progress:======>                       20%] [Cov:========>                          23%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:===========>                       33%][Progress:======>                       21%] [Cov:==>                                7%][Progress:======>                       21%] [Cov:====>                              12%][Progress:======>                       21%] [Cov:========>                          25%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:===========>                       33%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:>                                  0%][Progress:=========>                    30%] [Cov:>                                  1%][Progress:=========>                    30%] [Cov:====>                              13%][Progress:=========>                    30%] [Cov:====>                              14%][Progress:=========>                    31%] [Cov:>                                  0%][Progress:=========>                    31%] [Cov:>                                  1%][Progress:=========>                    31%] [Cov:====>                              13%][Progress:=========>                    31%] [Cov:=====>                             15%][Progress:=========>                    31%] [Cov:=====>                             16%][Progress:=========>                    31%] [Cov:======>                            18%][Progress:=========>                    31%] [Cov:======>                            19%][Progress:=========>                    31%] [Cov:=======>                           20%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    33%] [Cov:====>                              13%][Progress:=========>                    33%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     38%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:==============>                    40%][Progress:==========>                   36%] [Cov:====>                              13%][Progress:==========>                   36%] [Cov:====>                              14%][Progress:==========>                   36%] [Cov:=============>                     38%][Progress:===========>                  38%] [Cov:================>                  48%][Progress:============>                 40%] [Cov:================>                  46%][Progress:============>                 40%] [Cov:================>                  47%][Progress:============>                 40%] [Cov:================>                  48%][Progress:============>                 41%] [Cov:===============>                   43%][Progress:============>                 41%] [Cov:================>                  47%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:===============>                   45%][Progress:=============>                45%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:=================>                 51%][Progress:=============>                46%] [Cov:================>                  46%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               56%][Progress:================>             56%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               56%][Progress:==================>           60%] [Cov:===================>               57%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:===================>               56%][Progress:==================>           63%] [Cov:===================>               56%][Progress:===================>          65%] [Cov:====================>              58%][Progress:===================>          66%] [Cov:===================>               57%][Progress:===================>          66%] [Cov:====================>              58%][Progress:===================>          66%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:===================>               57%][Progress:====================>         68%] [Cov:====================>              58%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             60%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             60%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:=======================>      78%] [Cov:=====================>             61%][Progress:========================>     80%] [Cov:=====================>             60%][Progress:========================>     80%] [Cov:=====================>             61%][Progress:========================>     81%] [Cov:=====================>             60%][Progress:========================>     81%] [Cov:=====================>             61%][Progress:========================>     81%] [Cov:=====================>             62%][Progress:========================>     83%] [Cov:=====================>             62%][Progress:=========================>    85%] [Cov:=====================>             61%][Progress:=========================>    85%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             61%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             61%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  91%] [Cov:=====================>             60%][Progress:===========================>  91%] [Cov:=====================>             61%][Progress:===========================>  91%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             61%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:=============================>98%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:=====================>             62%][Progress:==============================100%] [Cov:======================>            63%]
* Search finished after 63s and 15 generations, 10637 statements, best individual has fitness: 1203.730955097178
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 77%
* Total number of goals: 853
* Number of covered goals: 657
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 432
* Number of covered goals: 284
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 216
* Number of covered goals: 115
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 25%
* Total number of goals: 28
* Number of covered goals: 7
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 71%
* Total number of goals: 17
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 53%
* Total number of goals: 17
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 66%
* Total number of goals: 432
* Number of covered goals: 284
* Generated 29 tests with total length 155
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'EigenDecompositionImpl_ESTest' to evosuite-tests
* Done!

* Computation finished
