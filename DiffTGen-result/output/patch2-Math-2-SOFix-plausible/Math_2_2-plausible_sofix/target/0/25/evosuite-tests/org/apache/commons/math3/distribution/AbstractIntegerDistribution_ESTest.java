/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:25:05 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1435, 1435, 1435);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-3156));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,156)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1933, 0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(1, 1, 194);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(Double.NaN, 455, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability((-1184.8843749668501), 86, 3370);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 2, 8.799805328862931E-11);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(2, 964, (-1923));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1, 1.0);
      int int0 = poissonDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well1024a0, (-1904), (-1487));
      int int0 = uniformIntegerDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937a0, 0, 1334);
      double double0 = uniformIntegerDistribution0.cumulativeProbability(0, 1334);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 2, 8.799805328862931E-11);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(2097);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1602, 1183, 1183);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1, 1, 1);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomAdaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, 1.0);
      // Undeclared exception!
      try { 
        geometricDistribution0.reseedRandomGenerator(899);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1070.4326029, 1070.4326029, (-1));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 215);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than -1 iterations) for value 1,070.433
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.inverseCumulativeProbability(8.974417915105033E-9);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 10, 10, 10);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(iSAACRandom0, 36, 1.0782585410141121E-7);
      int[] intArray0 = binomialDistribution0.sample(36);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      // Undeclared exception!
      geometricDistribution0.sample(2135);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, (double) 1);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 8973, 74, 15);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, (double) 1);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1, 1, 1);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 1, (double) 1);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 0.0);
      try { 
        pascalDistribution0.inverseCumulativeProbability(1146.736);
      } catch(IllegalArgumentException e) {
         //
         // 1,146.736 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 8973, 74, 15);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-513.9491));
      } catch(IllegalArgumentException e) {
         //
         // -513.949 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(iSAACRandom0, 92, 92);
      try { 
        zipfDistribution0.cumulativeProbability(92, 9);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (92) must be less than or equal to upper endpoint (9)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 2, 8.799805328862931E-11);
      double double0 = binomialDistribution0.cumulativeProbability(2, 2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.reseedRandomGenerator((-9223372036854775808L));
  }
}
