/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:23:10 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well44497b0, 106, 0.0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample((-2130));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,130)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(225, 0.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability((-2.1058207594753368E-8), 1411, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2017.979617);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0, 0, 2113);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(225, 0.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(1.0, 225, (-5320));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 10000000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1036960504, 983, 302);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1879);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937c0, 1606, 1879);
      double double0 = uniformIntegerDistribution0.cumulativeProbability(1606, 1879);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2834.228, 0.0);
      // Undeclared exception!
      poissonDistribution0.solveInverseCumulativeProbability(2498.422797, 873, 2317);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(931.63437416, (-2359.76), 84);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(2528L, 84, 1848);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (84) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN);
      // Undeclared exception!
      poissonDistribution0.sample(872);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 205, 205, 205);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 17, 1658.092552148744);
      // Undeclared exception!
      try { 
        zipfDistribution0.reseedRandomGenerator(17);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.3642058391853642, (-2775));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(4495, 4495);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,775) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well1024a0, 0.8082357768085413);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.8082357768085413);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2834.228, 0.0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(225, 0.0);
      int[] intArray0 = binomialDistribution0.sample(141);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(54, 54);
      int int0 = zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 2517);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1970, 9, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1, 1);
      try { 
        binomialDistribution0.inverseCumulativeProbability(6.283185307179586);
      } catch(IllegalArgumentException e) {
         //
         // 6.283 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 0);
      try { 
        uniformIntegerDistribution0.inverseCumulativeProbability(Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // -2,147,483,648 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1970, 9, 0);
      try { 
        hypergeometricDistribution0.cumulativeProbability(1970, 974);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1,970) must be less than or equal to upper endpoint (974)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.0584538834428926E-8);
      double double0 = geometricDistribution0.cumulativeProbability(1031, 1031);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.0584538834428926E-8);
      // Undeclared exception!
      geometricDistribution0.sample(1031);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.0584538834428926E-8);
      geometricDistribution0.reseedRandomGenerator(1031);
  }
}
