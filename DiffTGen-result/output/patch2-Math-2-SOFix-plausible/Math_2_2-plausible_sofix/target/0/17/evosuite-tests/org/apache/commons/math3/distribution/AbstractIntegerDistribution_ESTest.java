/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:23:13 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(5830, 0.0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.8938582994403899);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.8938582994403899);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.8938582994403899);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(0.8938582994403899, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 10);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(Integer.MIN_VALUE, (-494), 2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(iSAACRandom0, 2, 0.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(mersenneTwister0, (-10), 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(iSAACRandom0, 2, 0.0);
      double double0 = binomialDistribution0.cumulativeProbability((-1580), 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(66, 66);
      // Undeclared exception!
      zipfDistribution0.sample(66);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 35, 1.0E-12);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample(66);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3325.5119, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 1);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 3,325.512
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(54, 54);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(66, 66);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1.0E-12);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(4, 1293);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample((-974));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-974)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1761.564774, 378835770);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(378835770, (-3801), 2311);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3.491470347090126E290, 3.491470347090126E290);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.2640977449713129);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-12, 1.0E-12, 1);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(1.0E-12);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(54, 54);
      int int0 = zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(54, 54);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(953, 953, 953);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(953);
      } catch(IllegalArgumentException e) {
         //
         // 953 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(969, 969, 969);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-697.3966779573474));
      } catch(IllegalArgumentException e) {
         //
         // -697.397 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(85);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well44497a0, (-4011), 85);
      try { 
        uniformIntegerDistribution0.cumulativeProbability(0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(54, 54);
      double double0 = zipfDistribution0.cumulativeProbability(1276, 1276);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(iSAACRandom0, 2, 0.0);
      int[] intArray1 = binomialDistribution0.sample(129);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(85);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well44497a0, (-4011), 85);
      uniformIntegerDistribution0.reseedRandomGenerator(85);
  }
}
