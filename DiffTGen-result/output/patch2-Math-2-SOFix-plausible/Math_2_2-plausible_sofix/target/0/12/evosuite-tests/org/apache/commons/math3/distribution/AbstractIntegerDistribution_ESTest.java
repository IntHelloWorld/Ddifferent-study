/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:20:57 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(6.0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(3727, 0);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(0.0, (-3143), 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(randomAdaptor0, 164, 0.0);
      pascalDistribution0.reseedRandomGenerator((-1811L));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5, 0.5, 0);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(0.0, 0, 746);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-180), 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1061), 0);
      double double0 = uniformIntegerDistribution0.cumulativeProbability((-1061), 3357);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2842, 2842);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 2789, 2789);
      // Undeclared exception!
      try { 
        zipfDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0.0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(1.0E-6);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.23381638361102763, (-2131.0));
      int[] intArray0 = poissonDistribution0.sample(177);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(25, 1.0);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample((-705));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-705)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(iSAACRandom0, 25, 0.7321937059557391);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.7321937059557391);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(25, 1.0);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(iSAACRandom0, 25, 0.04443336491462291);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.04443336491462291);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(1, 1108);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(1, 1108);
      try { 
        uniformIntegerDistribution0.inverseCumulativeProbability(5.106228040084293E259);
      } catch(IllegalArgumentException e) {
         //
         // 51,062,280,400,842,930,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0.0);
      try { 
        binomialDistribution0.inverseCumulativeProbability((-2696.9397882162));
      } catch(IllegalArgumentException e) {
         //
         // -2,696.94 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(25, 1.0);
      try { 
        pascalDistribution0.cumulativeProbability(25, 0);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (25) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(randomAdaptor0, 164, 0.0);
      double double0 = pascalDistribution0.cumulativeProbability(164, 164);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(randomAdaptor0, 164, 0.0);
      // Undeclared exception!
      pascalDistribution0.sample(712);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((RandomGenerator) null, 0, 1753);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.reseedRandomGenerator(1753);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
