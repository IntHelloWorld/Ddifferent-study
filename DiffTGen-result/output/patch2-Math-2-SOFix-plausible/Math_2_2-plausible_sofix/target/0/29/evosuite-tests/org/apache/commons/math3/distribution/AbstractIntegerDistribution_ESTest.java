/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:25:10 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2146959359, 0.2107217076837924);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.11343331634998322, (-1950.27), 1936);
      poissonDistribution0.reseedRandomGenerator(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(245, Double.NaN);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(2331.8395, 245, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(979.13637908898);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(979.13637908898, 1816, 1816);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 1.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(0, (-916), 499);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(6, 1.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-832), (-803));
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.5516512759761956);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(100.0, 2152);
      double double0 = poissonDistribution0.cumulativeProbability((-309), 268435455);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a((-3335));
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well512a0, 3050, 225);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability(0.0, (-1), 225);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1087, 1L);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1890, 773, 2);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomAdaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.49149888450118895, (-2414.50314966), (-1048577));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-2005), 74);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,048,577) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-832), 2145386495);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.5516512759761956);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 1.0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.21530038118362427);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.11343331634998322, (-1950.27), 1936);
      int[] intArray0 = poissonDistribution0.sample(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well512a0, (-1679), 1481);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample((-1679));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,679)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 1.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      PascalDistribution pascalDistribution0 = new PascalDistribution(well1024a0, 92, 0.0);
      // Undeclared exception!
      pascalDistribution0.sample(92);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-3184L));
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well19937c0, 0.68471905821139);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0L);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1480.8023062461755, 803);
      try { 
        poissonDistribution0.inverseCumulativeProbability(803);
      } catch(IllegalArgumentException e) {
         //
         // 803 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-1984.6434411107));
      } catch(IllegalArgumentException e) {
         //
         // -1,984.643 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-832), (-803));
      try { 
        uniformIntegerDistribution0.cumulativeProbability(6777, (-832));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (6,777) must be less than or equal to upper endpoint (-832)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-3184L));
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well19937c0, 0.68471905821139);
      double double0 = geometricDistribution0.cumulativeProbability(2598, 2598);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-3184L));
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well19937c0, 0.68471905821139);
      // Undeclared exception!
      geometricDistribution0.sample(2598);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution((RandomGenerator) null, 0, 0);
      // Undeclared exception!
      try { 
        binomialDistribution0.reseedRandomGenerator(0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
