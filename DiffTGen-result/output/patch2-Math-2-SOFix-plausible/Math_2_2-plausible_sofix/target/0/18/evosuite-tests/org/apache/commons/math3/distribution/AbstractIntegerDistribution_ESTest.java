/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:22:49 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-4399));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-4,399)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(935.667663190438, 935.667663190438);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0, 0, 1772);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0.0);
      double double0 = binomialDistribution0.cumulativeProbability(0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.reseedRandomGenerator(0L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability((-1541.23377585), 0, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(151, 0.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(151, 151, (-2659));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(151, 0.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 2248, 0);
      double double0 = pascalDistribution0.cumulativeProbability(0, 2248);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well19937c0, 313, 313);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2147482624, 2147482624, 3164);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 0.34923300157543213, 0.34923300157543213, 4407);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.34923300157543213);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(272, 1000.0);
      // Undeclared exception!
      zipfDistribution0.inverseCumulativeProbability(0.6285316606947873);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(935.667663190438, 935.667663190438);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 36);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.9105097071630506);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1753, 1753, 36);
      int[] intArray0 = hypergeometricDistribution0.sample(36);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1442);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well1024a0, 1442, 0.0);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1753, 1753, 36);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 0.34923300157543213, 0.34923300157543213, 4349);
      try { 
        poissonDistribution0.inverseCumulativeProbability(505);
      } catch(IllegalArgumentException e) {
         //
         // 505 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1442);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well1024a0, 1442, 0.0);
      try { 
        pascalDistribution0.inverseCumulativeProbability((-620.61524367083));
      } catch(IllegalArgumentException e) {
         //
         // -620.615 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-42), 36);
      try { 
        uniformIntegerDistribution0.cumulativeProbability(0, (-42));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-42)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 36);
      double double0 = uniformIntegerDistribution0.cumulativeProbability(0, 2080);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(32, 32);
      // Undeclared exception!
      zipfDistribution0.sample(1890);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(synchronizedRandomGenerator0, 1.0, 0.0, (-2316));
      // Undeclared exception!
      try { 
        poissonDistribution0.reseedRandomGenerator(30L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.SynchronizedRandomGenerator", e);
      }
  }
}
