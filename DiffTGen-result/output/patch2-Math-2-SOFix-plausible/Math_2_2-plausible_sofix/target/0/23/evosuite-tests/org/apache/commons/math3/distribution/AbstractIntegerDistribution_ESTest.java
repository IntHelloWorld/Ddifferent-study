/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:23:11 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(405);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 405, 405, 292);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-2377));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,377)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well512a well512a0 = new Well512a((-44L));
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well512a0, 264, 264);
      double double0 = zipfDistribution0.cumulativeProbability(300, 300);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1779, 1779, 1779);
      hypergeometricDistribution0.reseedRandomGenerator(512);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497a well44497a0 = new Well44497a(intArray0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well44497a0, 164, 0);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(405, 1, 1);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-405.388), 1221, 1221);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18248429894447327);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(2510, Integer.MAX_VALUE, (-2455));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18248429894447327);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(10000000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 10000000, 1088, 10000000);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2099.101013486);
      double double0 = poissonDistribution0.cumulativeProbability(397, 1921);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2091, 2091);
      // Undeclared exception!
      zipfDistribution0.solveInverseCumulativeProbability(2091, 1838, 2091);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 1203.0, 1203.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.PoissonDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(697.627376522, 697.627376522, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(2.167272474431968E-8);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,147,483,648) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well44497b0, 1.0, 1.0, (-2131));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-611), 2350);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,131) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.18248429894447327);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.18248429894447327);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(397);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well19937a0, 0, Double.NaN);
      int int0 = binomialDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(mersenneTwister0, 1, Double.NaN);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2.147483647E9);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(405, 1, 1);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1221);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 10000000, 1088, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.5436706019579715);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(mersenneTwister0, 1, Double.NaN);
      int[] intArray0 = binomialDistribution0.sample(230);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1033.191);
      try { 
        poissonDistribution0.inverseCumulativeProbability(1088);
      } catch(IllegalArgumentException e) {
         //
         // 1,088 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well512a well512a0 = new Well512a((-44L));
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well512a0, 264, 264);
      try { 
        zipfDistribution0.inverseCumulativeProbability((-1233.66940473862));
      } catch(IllegalArgumentException e) {
         //
         // -1,233.669 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(mersenneTwister0, 1, Double.NaN);
      try { 
        binomialDistribution0.cumulativeProbability(230, (-384));
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (230) must be less than or equal to upper endpoint (-384)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution((RandomGenerator) null, 287, 1353.55937713);
      // Undeclared exception!
      try { 
        zipfDistribution0.reseedRandomGenerator(1284L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
