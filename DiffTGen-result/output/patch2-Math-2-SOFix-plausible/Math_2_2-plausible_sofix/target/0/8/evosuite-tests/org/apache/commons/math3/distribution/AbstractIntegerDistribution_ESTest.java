/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:20:57 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, 0.4339622641509434);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample((-375));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-375)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(2, 1023);
      uniformIntegerDistribution0.reseedRandomGenerator(765L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(2, 1023);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(698.464211547497, 1023, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(2, 1023);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(698.464211547497, 1023, 1023);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-4048), (-3511));
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability((-3511), 0, (-568));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(795, 0.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(2, 1023);
      double double0 = uniformIntegerDistribution0.cumulativeProbability(82, 1435);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(synchronizedRandomGenerator0, 272, 0.453650516682244);
      // Undeclared exception!
      pascalDistribution0.sample(272);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 3235;
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 3235);
      // Undeclared exception!
      poissonDistribution0.sample(3278);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      PascalDistribution pascalDistribution0 = new PascalDistribution(synchronizedRandomGenerator0, 272, 0.453650516682244);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(272);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.SynchronizedRandomGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2987, 2987);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well44497a0, 46, 1953, (-757));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(947, 1904);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-757) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1L);
      PascalDistribution pascalDistribution0 = new PascalDistribution(well1024a0, 855874939, 1L);
      int int0 = pascalDistribution0.inverseCumulativeProbability(4.247240125405735E-8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-3195));
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well19937c0, 650.148756205092, (-5531.5), (-3195));
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(synchronizedRandomGenerator0, 272, 0.453650516682244);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.9996839689667071);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(synchronizedRandomGenerator0, 272, 1.3319784467641742E-9);
      int[] intArray0 = pascalDistribution0.sample(272);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2099), 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.9999999999998352);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1421));
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(mersenneTwister0, Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1, 1);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-4048), (-3511));
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      PascalDistribution pascalDistribution0 = new PascalDistribution(well44497a0, 449, 0.0);
      try { 
        pascalDistribution0.inverseCumulativeProbability(478);
      } catch(IllegalArgumentException e) {
         //
         // 478 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      PascalDistribution pascalDistribution0 = new PascalDistribution(synchronizedRandomGenerator0, 272, 0.4537);
      try { 
        pascalDistribution0.inverseCumulativeProbability((-12.887791955051275));
      } catch(IllegalArgumentException e) {
         //
         // -12.888 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-4048), (-3511));
      try { 
        uniformIntegerDistribution0.cumulativeProbability(396, 267);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (396) must be less than or equal to upper endpoint (267)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2212, 2212, 2212);
      double double0 = hypergeometricDistribution0.cumulativeProbability(228, 228);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1620, 1620, 1620);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution((RandomGenerator) null, 2212, 0.0);
      // Undeclared exception!
      try { 
        pascalDistribution0.reseedRandomGenerator((-1316L));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
