/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:25:08 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1119), 981);
      // Undeclared exception!
      try { 
        uniformIntegerDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, 2);
      zipfDistribution0.reseedRandomGenerator(2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((RandomGenerator) null, (-2655), (-1285));
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(1093.57724, (-2539), 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-12, 1.0E-12);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(1.0E-12, 1732, 1732);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2319, 1874, 2319);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 0, (-2952));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1188);
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well44497b0, 214, Double.NaN);
      double double0 = zipfDistribution0.cumulativeProbability(0, 214);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(482, 0.0);
      // Undeclared exception!
      pascalDistribution0.solveInverseCumulativeProbability(Double.POSITIVE_INFINITY, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(243, 755.261865);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 0.9506150853957317, 0.9506150853957317, 2);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.PoissonDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(10.0789, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 0);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than 0 iterations) for value 10.079
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.5285902324774572);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0.5285902324774572);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(6.283185307179586, 0.0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-302));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-302)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.5285902324774572);
      // Undeclared exception!
      geometricDistribution0.sample(2949);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(194, 194, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(3.138655772049104E-189);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 0, 1);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      PascalDistribution pascalDistribution0 = new PascalDistribution(well512a0, 2147467264, Double.NaN);
      // Undeclared exception!
      try { 
        pascalDistribution0.sample(1399);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(309, 0.0);
      int int0 = pascalDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(iSAACRandom0, 244, 244);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1787, 1787, 1787);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 508;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
      try { 
        enumeratedIntegerDistribution0.inverseCumulativeProbability(508);
      } catch(IllegalArgumentException e) {
         //
         // 508 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-861), 194);
      try { 
        uniformIntegerDistribution0.inverseCumulativeProbability((-861));
      } catch(IllegalArgumentException e) {
         //
         // -861 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 0, 1);
      try { 
        hypergeometricDistribution0.cumulativeProbability(1, 0);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, 2);
      double double0 = zipfDistribution0.cumulativeProbability(2535, 2535);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(2, 2);
      int[] intArray0 = zipfDistribution0.sample(2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 1045.850320227804, 1.0, 1006);
      // Undeclared exception!
      try { 
        poissonDistribution0.reseedRandomGenerator((-3027L));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
