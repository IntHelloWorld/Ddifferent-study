/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:18:46 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.41661490441700644, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample((-735));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-735)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(3541, 0.5067245767017898);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(0.0, 0, 1564);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well19937c0, 1931, 1);
      double double0 = binomialDistribution0.cumulativeProbability(1931, 1931);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability(Double.NaN, (-340), 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(40.0, (double) 2375);
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(2375, 2375, 2375);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well19937c0, (-4183), 0);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(0.0, (-1421), 2574);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(well19937a0, 0, 0.0);
      int int0 = binomialDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4742, 4742, 4742);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1697), 4742);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.solveInverseCumulativeProbability(Double.NaN, (-340), 10000000);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 4,999,830
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(811.0, 811.0, 150);
      // Undeclared exception!
      poissonDistribution0.sample(150);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well44497b0, 2504, 2504);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(well1024a0, 3104, 3104);
      // Undeclared exception!
      zipfDistribution0.cumulativeProbability(232, 3104);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.05212405009540877, 0.05212405009540877);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.05212405009540877);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(890, 890, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1.1776625988228244E-9);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN, 565);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2812.105, 404.525014);
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(0);
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[7] = 472;
      Well1024a well1024a0 = new Well1024a(intArray0);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well1024a0, 1.0E-6);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(well512a0, 1564, 3541);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.02398105748291357);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        geometricDistribution0.sample();
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(1.0E-12);
      int int0 = geometricDistribution0.inverseCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1417, 1417, 1417);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1252.303);
      } catch(IllegalArgumentException e) {
         //
         // 1,252.303 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 1);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-794.61));
      } catch(IllegalArgumentException e) {
         //
         // -794.61 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2812.105, 403.71544796446204);
      try { 
        poissonDistribution0.cumulativeProbability(1380, 1275);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1,380) must be less than or equal to upper endpoint (1,275)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1417, 1417, 1417);
      int[] intArray0 = hypergeometricDistribution0.sample(1417);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(40.0, (double) 2375);
      poissonDistribution0.reseedRandomGenerator((-1L));
  }
}
