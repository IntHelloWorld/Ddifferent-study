/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 22:20:59 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1814227968), 0);
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(114, 114, 114);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(114, 114, 341);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well19937a0, 0.5466978549957275);
      int int0 = geometricDistribution0.solveInverseCumulativeProbability((-636.66479321), (-485), (-485));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1168, 2, 2);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1814227968), 0);
      double double0 = uniformIntegerDistribution0.cumulativeProbability((-1814227968), (-2215));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1717.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(55L, 27, 10000000);
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN, 321);
      // Undeclared exception!
      poissonDistribution0.sample(2191);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(142, 142);
      // Undeclared exception!
      zipfDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 202, 0, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((RandomGenerator) null, 1140.809414230316, 1140.809414230316, 507);
      // Undeclared exception!
      try { 
        poissonDistribution0.reseedRandomGenerator(507);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(well512a0, 1129.9784, 0.0, (-2281));
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability(0, 2);
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction convergents failed to converge (in less than -2,281 iterations) for value 1,129.978
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(114, 114, 114);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.6170841455459595);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.9E-324);
      int int0 = geometricDistribution0.inverseCumulativeProbability(8.194012195477669E-40);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(34, 114, 34);
      int[] intArray0 = poissonDistribution0.sample(114);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(645, 0.0);
      // Undeclared exception!
      try { 
        binomialDistribution0.sample((-3206));
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,206)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.48983392438618945);
      // Undeclared exception!
      geometricDistribution0.sample(1406);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(114, 114, 114);
      int int0 = hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well19937a0, 0.5466978549957275);
      int int0 = geometricDistribution0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(34, 114, 34);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, 0.13499516248703003);
      try { 
        geometricDistribution0.inverseCumulativeProbability(507);
      } catch(IllegalArgumentException e) {
         //
         // 507 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution((RandomGenerator) null, 0.13499516248703003);
      try { 
        geometricDistribution0.inverseCumulativeProbability((-1.0));
      } catch(IllegalArgumentException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN, 321);
      try { 
        poissonDistribution0.cumulativeProbability(2, 0);
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(114, 114, 114);
      double double0 = hypergeometricDistribution0.cumulativeProbability(114, 114);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(4.9E-324);
      geometricDistribution0.reseedRandomGenerator(162);
  }
}
