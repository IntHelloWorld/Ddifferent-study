/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:30:59 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = MathUtils.sign((-231.5395F));
      long long0 = MathUtils.indicator(486L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 486L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 486L;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 486L;
      doubleArray0[5] = (double) (-231.5395F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) 486L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(61);
      double double2 = MathUtils.factorialDouble(61);
      int int0 = MathUtils.subAndCheck(61, 61);
      long long1 = MathUtils.sign(87178291200L);
      short short0 = (short)1064;
      short short1 = MathUtils.indicator((short)1064);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (486 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.indicator(3225L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 3225L;
      doubleArray0[4] = (double) 3225L;
      doubleArray0[5] = (double) 3225L;
      doubleArray0[6] = (double) 3225L;
      doubleArray0[7] = (double) 3225L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-157.638601));
      long long1 = MathUtils.pow(927L, 2034);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-117L), 4658135986654412800L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 12;
      intArray0[4] = (-1241);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 67;
      int[] intArray1 = new int[1];
      intArray1[0] = 67;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.304E19, 1.304E19);
      double double1 = MathUtils.normalizeAngle(1.304E19, 2994.7197);
      long long0 = 2721L;
      long long1 = MathUtils.mulAndCheck(2721L, 2721L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 7403841L;
      doubleArray0[1] = (double) 2721L;
      doubleArray0[2] = (double) 7403841L;
      doubleArray0[3] = 1.304E19;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (7,403,841 >= 2,721)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      byte byte0 = (byte)9;
      byte byte1 = MathUtils.indicator((byte)9);
      int int0 = (-1541);
      int int1 = 618;
      int int2 = MathUtils.pow((-1541), 618);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-770L), (-770L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(15, 15);
      int int1 = MathUtils.addAndCheck(15, 6);
      int int2 = MathUtils.pow(73, (long) 30);
      double double0 = MathUtils.sign((double) 30);
      int int3 = MathUtils.indicator(0);
      double double1 = MathUtils.log(0, 3813.08228246063);
      double double2 = MathUtils.log((-542.7525), 3210.926986);
      long long0 = 6227020800L;
      long long1 = 4481L;
      long long2 = MathUtils.gcd(6227020800L, 4481L);
      long long3 = MathUtils.gcd(0L, (long) 73);
      long long4 = MathUtils.subAndCheck(558L, (-9218868437227405313L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      int int4 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, (-2352));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-25,859^-2,352)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = 121645100408832000L;
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-9223372036854775808L), 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -121,645,100,408,832,000
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 12.911184366;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.sign(12.911184366);
      double double3 = MathUtils.cosh((-1020.705));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 4194304;
      float float0 = MathUtils.round(0.0F, 4194304);
      int int1 = MathUtils.compareTo((-3.141592653589793), 0.0, 0.0F);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 4194304, 0.2, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-610);
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.sign((double) 0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.indicator((-1688.9186));
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 705.50398955, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1704.422, 1704.422);
      int[] intArray0 = new int[8];
      intArray0[0] = (-3494);
      intArray0[1] = (-283);
      intArray0[2] = 734;
      intArray0[3] = 1494;
      intArray0[4] = 0;
      intArray0[5] = 20;
      intArray0[6] = 300;
      intArray0[7] = 1977;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.sign(4503599627370496L);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = (byte)20;
      byte byte1 = MathUtils.indicator((byte)20);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 512;
      intArray0[1] = 172;
      intArray0[2] = 0;
      intArray0[3] = 37;
      intArray0[4] = 233;
      intArray0[5] = (-3659);
      intArray0[6] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3548.0, 222.94943942724);
      byte byte0 = MathUtils.indicator((byte) (-68));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 224.19497250199902;
      doubleArray0[1] = 224.19497250199902;
      doubleArray0[2] = (-813.187138);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = 222.94943942724;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.3333333134651184;
      doubleArray0[7] = (double) (byte) (-1);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 224.19497250199902;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.3333333134651184;
      doubleArray1[3] = (double) (byte) (-68);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-1.0), 766.44103);
      double double2 = MathUtils.sign((-385.228754));
      float float0 = MathUtils.sign((-2135.45F));
      double double3 = MathUtils.cosh((-813.187138));
      float float1 = MathUtils.sign((float) (byte) (-1));
      int int0 = MathUtils.sign(340);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-1352);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1352));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,352
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.pow(3952090531849364496L, 4208363204685324176L);
      long long1 = MathUtils.factorial(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 4095L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4208363204685324176L;
      doubleArray0[1] = (double) (byte)26;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)26;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (byte)26;
      doubleArray1[3] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-124);
      int int1 = MathUtils.gcd((-124), (-124));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-124);
      doubleArray0[1] = (double) (-124);
      doubleArray0[2] = (double) (-124);
      doubleArray0[3] = (double) (-124);
      doubleArray0[4] = (double) (-124);
      doubleArray0[5] = (double) 124;
      doubleArray0[6] = (double) (-124);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-124 >= -124)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = (-1186L);
      long long1 = MathUtils.lcm((-1186L), (-1186L));
      int int0 = 0;
      int int1 = MathUtils.pow((-3555), 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("n,t");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.n,t
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      double double0 = MathUtils.binomialCoefficientLog(1, 1);
      long long1 = MathUtils.addAndCheck(479001600L, 0L);
      double double1 = MathUtils.sinh((-251.6593013));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-9.845003583502304E108);
      doubleArray0[2] = (double) 479001600L;
      doubleArray0[3] = (-0.2499999701976776);
      doubleArray0[4] = (double) 479001600L;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-1272.9985606627);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-9.845003583502304E108);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 479001600L;
      doubleArray1[3] = (double) 479001600L;
      doubleArray1[4] = (double) 479001600L;
      doubleArray1[5] = (-0.2499999701976776);
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 479001600L;
      doubleArray1[8] = (-251.6593013);
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      long long2 = MathUtils.addAndCheck(479001600L, 2342L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1189;
      long long0 = MathUtils.pow(39916800L, 1189);
      long long1 = MathUtils.gcd(284L, 316L);
      float float0 = MathUtils.round(1671.0F, 1189);
      double double0 = MathUtils.factorialDouble(1189);
      int int1 = MathUtils.lcm(1189, 1189);
      long long2 = MathUtils.sign(284L);
      long long3 = MathUtils.binomialCoefficient(1189, (-1221));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1189, (-335.870542915221), 1189);
      long long4 = MathUtils.pow(6722166367014452318L, 4L);
      byte byte0 = (byte)5;
      byte byte1 = MathUtils.indicator((byte)5);
      int int2 = MathUtils.lcm(214, 0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(1189);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-23);
      byteArray0[0] = (byte) (-23);
      byte byte1 = (byte)117;
      byteArray0[1] = (byte)117;
      byte byte2 = (byte)118;
      byteArray0[2] = (byte)118;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      boolean boolean0 = bigInteger0.testBit((byte)117);
      int int0 = bigInteger0.bitLength();
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,477,258^-1,477,258)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.log(1866.3765, 1866.3765);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1866.3765;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-1919.803F), 1, 0);
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(3.834E-20, (-3996.9687014842), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.indicator(Double.POSITIVE_INFINITY);
      double double1 = MathUtils.scalb((-1216.166), 0);
      boolean boolean0 = MathUtils.equals((double) 0, 3.834E-20);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.compareTo(2931.58338403386, Double.POSITIVE_INFINITY, 1.1102230246251565E-16);
      double double3 = MathUtils.factorialDouble(0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.abs();
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      double double4 = MathUtils.normalizeAngle(2931.58338403386, 6.283185307179586);
      double double5 = MathUtils.normalizeAngle((-150.2594431714635), 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4639);
      intArray0[1] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(68, (-15));
      int int1 = MathUtils.mulAndCheck(119, 68);
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-95);
      double double1 = MathUtils.round(0.0, (-95));
      boolean boolean0 = MathUtils.equals(266.3596, 0.0);
      double[] doubleArray0 = new double[2];
      double double2 = 2893.2;
      doubleArray0[0] = 2893.2;
      doubleArray0[1] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 12;
      intArray0[1] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 12;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 12;
      intArray1[5] = 12;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      int int1 = MathUtils.compareTo(0, 12, 0);
      double double0 = MathUtils.cosh(12);
      float float0 = MathUtils.round(0.0F, 12);
      int int2 = MathUtils.addAndCheck(0, 0);
      int int3 = MathUtils.distance1(intArray1, intArray1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(66, 66);
      long long0 = MathUtils.addAndCheck((long) 0, 1L);
      long long1 = MathUtils.lcm(1L, 0L);
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 66;
      doubleArray0[2] = (-1781.98112267);
      int int3 = MathUtils.hash(doubleArray0);
      long long2 = MathUtils.subAndCheck((long) 66, 1L);
      byte byte0 = MathUtils.sign((byte)79);
      short short0 = MathUtils.indicator((short)0);
      int int4 = 11;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((short)1, 11);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.indicator((-174));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-174), (-174));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -174
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = MathUtils.round(199.0F, 0, 0);
      double double0 = MathUtils.scalb(200.0F, 97);
      boolean boolean0 = MathUtils.equals(307.4533711244, (-1939.83162), (double) 199.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = 97;
      intArray0[1] = 97;
      intArray0[2] = 0;
      intArray0[3] = 97;
      intArray0[4] = 97;
      intArray0[5] = 97;
      intArray0[6] = 97;
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.pow((long) 97, 0L);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1494.575238690008;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = 2206;
      double double1 = MathUtils.binomialCoefficientLog(2206, 791);
      int int1 = 0;
      double double2 = MathUtils.factorialLog(0);
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.lcm(0, (-445));
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = MathUtils.hash(0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1435.578869733683, 4603.814, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3555L), 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = 143;
      intArray0[1] = 21;
      intArray0[2] = 1898;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(52);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 211);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 211;
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      int int0 = MathUtils.subAndCheck(63, 1804);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.subAndCheck(63, (-1741));
      byte byte0 = MathUtils.indicator((byte)0);
      int int2 = MathUtils.sign(63);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte)1, 211);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 211
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = (-9218868437227405313L);
      try { 
        MathUtils.pow((-9218868437227405313L), (-9218868437227405313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,218,868,437,227,405,313^-9,218,868,437,227,405,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(316.23, 0);
      int int1 = MathUtils.hash(316.23);
      // Undeclared exception!
      MathUtils.factorialDouble(1409884902);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.hash(2484.6095666440633);
      long long0 = MathUtils.binomialCoefficient(1505618112, 0);
      boolean boolean0 = MathUtils.equals(0.0, 2484.6095666440633);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[5];
      intArray1[0] = 1505618112;
      intArray1[1] = 0;
      intArray1[2] = 1505618112;
      intArray1[3] = 1505618112;
      intArray1[4] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
      double double1 = MathUtils.indicator(929.086906729474);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1505618112;
      doubleArray0[1] = 1.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.sign((double) 1505618112);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, 9, 1505618112);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(0.0F, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0.0F, 750.4031428, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-0.2499999701976776);
      doubleArray0[3] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double1 = MathUtils.scalb(654.9, (-2492));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.2499999701976776;
      double double2 = MathUtils.distance(doubleArray1, doubleArray1);
      boolean boolean1 = MathUtils.equals(654.9, (double) 0.0F);
      try { 
        MathUtils.pow(3628800L, (-347L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (3,628,800^-347)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      double double0 = mockRandom0.nextDouble();
      BigInteger bigInteger1 = BigInteger.probablePrime(71, mockRandom0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.and(bigInteger2);
      int int0 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, (-581L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-581)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.pow(62, 62);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 62;
      intArray0[3] = 62;
      intArray0[4] = 0;
      intArray0[5] = (-418);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 253;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.log(0, 0.0);
      int int2 = MathUtils.lcm(254, 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int3 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 253;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 62;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 254;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      int int0 = bigInteger0.bitLength();
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      String string0 = bigInteger1.toString();
      int int1 = 0;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      BigInteger bigInteger3 = bigInteger2.nextProbablePrime();
      int int2 = bigInteger2.bitCount();
      BigInteger bigInteger4 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger5 = bigInteger2.andNot(bigInteger1);
      float float0 = bigInteger2.floatValue();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger2, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, 0, (-1787));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = MathUtils.sign((short)66);
      double double0 = MathUtils.binomialCoefficientLog(1966, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = MathUtils.indicator((-401L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2108.0;
      doubleArray0[1] = (double) (-401L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 0.1666666505023083;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.1666666505023083, 0.1666666505023083, 0.1666666505023083);
      double double1 = (-2101.488193405627);
      int int0 = MathUtils.hash((-2101.488193405627));
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = 3292;
      // Undeclared exception!
      try { 
        MathUtils.lcm(886834284, 3292);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.normalizeAngle(1.0, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0036, 0.0036, 0.0);
      int int1 = MathUtils.sign(0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 0, (-323));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.gcd(1, 0);
      boolean boolean1 = MathUtils.equals(0.0, (-2648.91748679), 1617.6323377);
      long long0 = MathUtils.subAndCheck((long) 0, 2432902008176640000L);
      long long1 = MathUtils.mulAndCheck(2432902008176640000L, (long) 0);
      float float0 = MathUtils.indicator(69.47911F);
      try { 
        MathUtils.pow(0, (-581));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-581)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-2260);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2260));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,260
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.11764700710773468;
      doubleArray0[1] = (-1185.4121370039315);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.036;
      doubleArray0[4] = 1260.14;
      doubleArray0[5] = 640.62715913014;
      doubleArray0[6] = 806.857;
      doubleArray0[7] = 1460.36415578;
      doubleArray0[8] = 477.090099;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-708));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -708
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4294967295L, 1052L);
      float float0 = MathUtils.indicator((float) 4294967295L);
      int int0 = MathUtils.hash((double[]) null);
      long long1 = MathUtils.binomialCoefficient(0, (-2260));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-1892), (-1892));
      double double0 = MathUtils.round((double) (-1892), (-1892));
      long long0 = MathUtils.sign((long) 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.pow((-3388), (long) 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 120L);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1106.5348677960476));
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2851.6696918495));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 426.53013393, 426.53013393);
      long long0 = MathUtils.sign((long) 0);
      int int1 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-761.0), 0.0);
      long long1 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-761.0);
      doubleArray0[4] = (-761.0);
      doubleArray0[5] = (-1458.627665);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-32));
      int int2 = MathUtils.mulAndCheck(334, 194);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 11;
      boolean boolean0 = MathUtils.equalsIncludingNaN(4118.9623, 2.2250738585072014E-308, 11);
      int int1 = 0;
      int int2 = 0;
      float float0 = MathUtils.round((-1.0F), 0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 11);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 11
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-52), (-52));
      double double0 = MathUtils.sign(1703.5112942949);
      float float0 = MathUtils.round((-1.0F), (-52));
      int[] intArray0 = new int[8];
      intArray0[0] = (-52);
      intArray0[1] = (-52);
      intArray0[2] = 2704;
      intArray0[3] = 2704;
      intArray0[4] = 2704;
      intArray0[5] = 2704;
      intArray0[6] = 2704;
      intArray0[7] = 2704;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.subAndCheck((-1715), (-598));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2704;
      doubleArray0[1] = (double) 2704;
      doubleArray0[2] = (double) 2704;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1703.5112942949;
      doubleArray0[6] = (double) (-1.0F);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 3.834E-20;
      double double1 = MathUtils.indicator(3.834E-20);
      int int0 = (-217);
      int int1 = MathUtils.lcm((-217), (-217));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      double double2 = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 3.834E-20;
      double double3 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.subAndCheck((-347L), (-347L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = (-1224);
      int int3 = MathUtils.gcd((-217), (-1224));
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((long) 1, (-2045));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,045)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 0.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)92;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)79);
      int int1 = MathUtils.lcm(532, (int) (byte) (-69));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      byte byte0 = MathUtils.sign((byte)72);
      long long0 = MathUtils.sign((long) (byte)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (byte)72;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator((float) (byte)1);
      float float1 = MathUtils.round((-181.973F), (int) (byte)72);
      long long1 = MathUtils.addAndCheck(1L, 2185L);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 62;
      long long0 = MathUtils.binomialCoefficient(62, 62);
      long long1 = MathUtils.sign(20922789888000L);
      long long2 = MathUtils.subAndCheck(20922789888000L, 1L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-1820);
      int int1 = MathUtils.addAndCheck((-1820), (-1820));
      float float0 = MathUtils.sign((float) (-1820));
      long long0 = (-5034868814120038111L);
      try { 
        MathUtils.pow((-3640), (-5034868814120038111L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,640^-5,034,868,814,120,038,111)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3415.1580884496);
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1530.327265478274);
      doubleArray0[4] = (-2077.333732072589);
      doubleArray0[5] = 2.2250738585072014E-308;
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((-1.0F));
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(4008.678, 662.0547565, 0.0);
      short short0 = MathUtils.indicator((short) (-1854));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3476.980326426111);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 3442;
      double double0 = MathUtils.binomialCoefficientDouble(3442, 3442);
      float float0 = MathUtils.sign(2115.2808F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 2115.2808F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 2,115.281)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 2499;
      double double0 = MathUtils.scalb((-606.5252673), 2499);
      try { 
        MathUtils.pow(2499, (-1745L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,499^-1,745)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.sign((-205));
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double0 = MathUtils.round((double) (-205), 0);
      long long0 = MathUtils.gcd((long) (-1), (long) (-1));
      long long1 = MathUtils.binomialCoefficient(0, (-1));
      long long2 = MathUtils.addAndCheck(1L, (long) 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-205);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-205);
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, 1679);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,679, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.round(0.3333333333333333, 135);
      float float0 = MathUtils.sign((float) 135);
      double double1 = MathUtils.binomialCoefficientLog(135, 135);
      boolean boolean0 = MathUtils.equals(1.0, 0.0, 224.7375063487003);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 135;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.3333333333333333;
      doubleArray0[4] = 277.04531;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int0 = MathUtils.gcd(9, (int) (byte)1);
      long long0 = MathUtils.subAndCheck(121645100408832000L, (long) (byte)0);
      int int1 = MathUtils.lcm((-170), 0);
      float float1 = MathUtils.round(Float.NaN, (int) (byte)1, 1);
      double double4 = MathUtils.binomialCoefficientLog(0, (-170));
      byte byte1 = MathUtils.sign((byte)1);
      long long1 = MathUtils.lcm((long) (byte)1, (-1268L));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.binomialCoefficientLog(6, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.25);
      doubleArray0[1] = 1013.2;
      doubleArray0[2] = 1277.4276719132179;
      doubleArray0[3] = 1884.574326;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2267.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (1,884.574 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-710);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-710), (-710));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-155);
      int int1 = 0;
      int int2 = MathUtils.lcm((-155), 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-155);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)85);
      boolean boolean0 = MathUtils.equals((double) (byte)85, (double) (byte)85, (double) (byte)85);
      float float0 = MathUtils.sign((float) (byte)1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = MathUtils.gcd((-3771), (-3771));
      boolean boolean0 = MathUtils.equals((double) 3771, 961.82018);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3771;
      doubleArray0[1] = 961.82018;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 3771;
      doubleArray1[2] = 961.82018;
      doubleArray1[3] = (double) (-3771);
      doubleArray1[4] = (double) 3771;
      doubleArray1[5] = (double) (-3771);
      doubleArray1[6] = 961.82018;
      doubleArray1[7] = (double) 3771;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-950.6F), (-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.sign(10);
      double double0 = MathUtils.cosh(2223.96);
      byte byte0 = MathUtils.indicator((byte)28);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3275, 3275);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.hash((-1057.176303));
      int int1 = 3467;
      int int2 = MathUtils.subAndCheck(1213630475, 3467);
      short short0 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 1213630475);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.pow(2691, (long) 2691);
      double double0 = MathUtils.factorialLog(2691);
      boolean boolean0 = MathUtils.equals(18566.492797182113, 18566.492797182113, (double) 2691);
      long long0 = MathUtils.gcd((long) (-1141321317), (long) 2691);
      boolean boolean1 = MathUtils.equals((double) 2691, 1241.50107528283, 2691);
      int int1 = 1602;
      double double1 = MathUtils.factorialDouble(1602);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = MathUtils.gcd((-1933L), 439L);
      long long1 = MathUtils.pow((-1933L), 439L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-3549142853316150693L), (double) (-1933L), (-889));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1681;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.pow(1558, (long) 1558);
      double double0 = MathUtils.factorialLog(1558);
      int int1 = MathUtils.addAndCheck(1558, 1575);
      short short0 = MathUtils.indicator((short) (-4169));
      long long0 = MathUtils.pow((long) 1575, 1L);
      long long1 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1575L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3133;
      doubleArray0[3] = 9899.699087912812;
      doubleArray0[4] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2695.97;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 949.91048044627;
      doubleArray0[4] = (-358.2588);
      doubleArray0[5] = (-1593.232825);
      doubleArray0[6] = 0.1666666505023083;
      doubleArray0[7] = (-1786.0);
      doubleArray0[8] = (-3240.143862132);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,695.97 >= -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short short0 = (short) (-542);
      short short1 = MathUtils.indicator((short) (-542));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short) (-1), (short) (-542));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1189.051418);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck((-1234L), (-1234L));
      double double1 = MathUtils.scalb(0.0, 164);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2063));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.1818181574344635);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.indicator(3593);
      int int1 = MathUtils.compareTo(1439.071559436515, 1439.071559436515, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3593;
      doubleArray0[2] = (double) 1;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.addAndCheck(245, 15);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(2162.025);
      float float0 = MathUtils.round((-36.518F), 0);
      int int1 = MathUtils.addAndCheck((-1369), (-1939068735));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-443.05);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.sign((-2613L));
      double double0 = MathUtils.scalb((-1L), (-603));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-603), (-603));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -603
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(190, 31);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1642.845598080295), (-1642.845598080295), 1852);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1722.594877554));
      int[] intArray0 = new int[8];
      intArray0[0] = (-2940);
      intArray0[1] = 189;
      intArray0[2] = (-2369);
      intArray0[3] = 0;
      intArray0[4] = 258;
      intArray0[5] = (-981);
      intArray0[6] = 0;
      intArray0[7] = 19;
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 189, 4328.9228979997, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(8.0E298, 8.0E298);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 8.0E298;
      doubleArray0[1] = 8.0E298;
      doubleArray0[2] = 8.0E298;
      doubleArray0[3] = (-952.712763522789);
      doubleArray0[4] = 0.1818181574344635;
      doubleArray0[5] = 8.0E298;
      doubleArray0[6] = 8.0E298;
      doubleArray0[7] = 8.0E298;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck((-3857), (-3857));
      float float0 = MathUtils.round((-3576.4F), (-3857));
      try { 
        MathUtils.pow(2887L, (-3857));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,887^-3,857)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4639);
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft((-8));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-825);
      double double0 = MathUtils.round((-1984.42364954063), (-825));
      try { 
        MathUtils.pow((long) (-825), (-825));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-825^-825)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = MathUtils.sign(1414.270651766);
      long long0 = MathUtils.gcd((-3432L), (-2962L));
      float float0 = MathUtils.indicator(Float.NaN);
      double double1 = MathUtils.normalizeAngle(2.2250738585072014E-308, (-2962L));
      float float1 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1659.2396160550957, 1659.2396160550957);
      int int0 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round(Float.NaN, 0, 1);
      int int1 = MathUtils.mulAndCheck(663, 16);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1196), (-611));
      long long0 = MathUtils.gcd(39916800L, 1458L);
      double double0 = MathUtils.factorialDouble(0);
      float float0 = MathUtils.sign((float) 39916800L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 162L, 0, (-611));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -611, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-735);
      try { 
        MathUtils.pow((-735), (-735));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-735^-735)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = 0L;
      long long1 = 1873L;
      long long2 = MathUtils.mulAndCheck(0L, 1873L);
      int int0 = 1881;
      int int1 = 23;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, 1881, 23);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 23, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.sign((-929));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-976), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -976, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.indicator(6402373705728000L);
      int int0 = MathUtils.lcm(222, 222);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 222;
      doubleArray0[2] = (double) 6402373705728000L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 222;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 222;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      int int1 = (-4723);
      try { 
        MathUtils.pow(0, (-4723));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,723)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.sign((-248));
      long long0 = MathUtils.subAndCheck(0L, (long) (-248));
      float float0 = MathUtils.indicator((float) 0L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 366);
      int int0 = MathUtils.hash((double) 366);
      int int1 = (-325);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 366, (-325), 366);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 366, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = MathUtils.gcd(165, 4194304);
      boolean boolean0 = MathUtils.equals((double) 1, 0.3999999761581421);
      double double0 = 1.0;
      double double1 = MathUtils.normalizeAngle(1.0, (-471.3699700001));
      long long0 = MathUtils.gcd((long) 4194304, (long) 1);
      int int1 = MathUtils.addAndCheck(1, 1429);
      double double2 = MathUtils.sinh(0.0);
      double double3 = MathUtils.log(0.0, 1430);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 165);
      boolean boolean2 = MathUtils.equals((double) 1429, 1.304E19, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 165);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 165
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3156.1);
      doubleArray0[3] = 881.221796122883;
      doubleArray0[4] = 2.718281828459045;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3156.1);
      doubleArray1[1] = 2.718281828459045;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 245.469;
      doubleArray1[5] = (-3156.1);
      doubleArray1[6] = (-2168.29);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2305.72), (-2305.72), (-2305.72));
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigInteger0.testBit(0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2305.72);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2305.72);
      doubleArray0[3] = (-2305.72);
      doubleArray0[4] = (-2305.72);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.scalb(11.0, 0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(676);
      double double1 = MathUtils.factorialLog(676);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3733.123677750426;
      doubleArray0[1] = (double) 676;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 676);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.sinh((-458.9199189261));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-458.9199189261), (-458.9199189261), 195);
      double double1 = MathUtils.sinh((-1.012414669818887E199));
      float float0 = MathUtils.indicator((float) 195);
      double double2 = MathUtils.factorialDouble(195);
      int int0 = MathUtils.subAndCheck(1780, 67);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1713);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.log(4139.350933027521, 0.5);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.08322798854924392);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (-0.08322798854924392);
      doubleArray0[3] = (-987.3401249786583);
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd((-1413), (-2121));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      long long1 = MathUtils.lcm((-959L), 5040L);
      int[] intArray0 = new int[8];
      intArray0[0] = 66;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2149);
      intArray0[5] = 63;
      intArray0[6] = 2551;
      intArray0[7] = 4757;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 10);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 10
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-585.06019);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2575.187162;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-129.7343958406);
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, (-511));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-796));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -796
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = MathUtils.compareTo((-247.4818), 964.42402972436, Double.NaN);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd(1679L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.equals(964.42402972436, 205.2, (-1));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.sign((-1409.6109240505));
      long long0 = MathUtils.pow(0L, 8);
      int int0 = MathUtils.addAndCheck(226, 226);
      double double1 = MathUtils.sign(0.5);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.compareTo((-562.83421), 613.19491049543, 1255.643969682);
      double double0 = MathUtils.sign((double) 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      int int1 = (-511);
      int int2 = MathUtils.lcm(0, (-511));
      int int3 = (-796);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-796));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -796
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-2055L), (-2055L));
      double double0 = MathUtils.factorialLog(188);
      long long1 = MathUtils.pow((-1086L), 0);
      double double1 = MathUtils.cosh((-3127.0981841));
      // Undeclared exception!
      try { 
        MathUtils.equals(1126.026, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.round(0.0, 8);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1951);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.compareTo(178.3, 178.3, 178.3);
      long long0 = MathUtils.gcd((long) 0, 2128L);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3451.168, 2326.999386768106);
      double double0 = MathUtils.sign((-0.2499999701976776));
      int int0 = MathUtils.indicator(0);
      float float0 = MathUtils.round((float) 1, 1);
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.gcd(0, 0);
      boolean boolean1 = MathUtils.equals(0.0, 0.19999954120254515, 1392.4606);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1392.4606;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd((-249L), 479001600L);
      int int3 = MathUtils.mulAndCheck((-3239), 694);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = MathUtils.sign(3950.0F);
      float float1 = MathUtils.sign(1.0F);
      double double0 = MathUtils.log(1.0F, 1.0F);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("~dY");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.~dY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.cosh(0.11764700710773468);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.11764700710773468;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-2852.873);
      doubleArray0[5] = 0.11764700710773468;
      doubleArray0[6] = 0.11764700710773468;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.subAndCheck((-2624), (-2624));
      int int1 = MathUtils.subAndCheck((-2624), 15);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3424.122494070323);
      doubleArray0[1] = (-2346.6628071539);
      doubleArray0[2] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.lcm(2539, 2539);
      double double0 = MathUtils.sinh(2539);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1902.718444611), 8.251545029714408E-9, (double) 2539);
      long long0 = MathUtils.sign(330L);
      long long1 = MathUtils.mulAndCheck((long) 2539, 330L);
      long long2 = MathUtils.gcd((long) 2539, (-1789L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1789L);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 2539;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,789 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.normalizeAngle(0L, (-361.3));
      byte byte0 = MathUtils.sign((byte) (-60));
      long long1 = MathUtils.factorial(0);
      long long2 = MathUtils.indicator(0L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6722166367014452318L, 1044L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.lcm(2566L, (-533L));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.gcd((-5034868814120038111L), 1000L);
      short short0 = MathUtils.indicator((short)1089);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-5034868814120038111L);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1930));
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1930);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (short) (-1930);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((double) 0, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.addAndCheck((int) (short) (-1930), 0);
      double double1 = MathUtils.cosh((-6194.1372));
      long long0 = MathUtils.sign((-695L));
      int int3 = MathUtils.hash(0.0);
      double double2 = MathUtils.scalb(Double.POSITIVE_INFINITY, 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = (-2390);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2390));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,390
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = MathUtils.round(1240.9F, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.indicator((double) 1241.0F);
      int int0 = MathUtils.mulAndCheck((-1833), 0);
      int int1 = MathUtils.subAndCheck(0, (-1054));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = (-699.02);
      double double1 = MathUtils.sign((-699.02));
      int int0 = MathUtils.pow(1696, (long) 1696);
      double double2 = MathUtils.cosh((-699.02));
      int int1 = (-771);
      int int2 = MathUtils.mulAndCheck(0, (-771));
      long long0 = 570L;
      long long1 = MathUtils.pow(570L, 570L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      float float0 = MathUtils.indicator((float) 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-409.4688110834511);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1571), (-584));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,571, k = -584
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.pow(3, 1025);
      long long0 = MathUtils.addAndCheck(4499201580859392L, (long) 1025);
      double double0 = MathUtils.binomialCoefficientLog(3, (-785));
      long long1 = MathUtils.binomialCoefficient(122, (-1335136253));
      long long2 = MathUtils.pow(1L, 3);
      int int1 = MathUtils.compareTo(3, 3201.8947442, 0.031);
      float float0 = MathUtils.round((float) 122, (-1));
      double double1 = MathUtils.sinh(1025);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-201));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -201
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.indicator((-2498.4775F));
      int int0 = MathUtils.mulAndCheck((-6637), (-6637));
      double double0 = MathUtils.scalb(2853.555189, (-6637));
      float float1 = MathUtils.round((-2498.4775F), (-1547));
      double double1 = MathUtils.cosh((-1477.805622));
      long long0 = MathUtils.addAndCheck((long) 44049769, (-9218868437227405313L));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-9218868437183355544L);
      doubleArray0[1] = (double) 44049769;
      doubleArray0[2] = (double) (-9218868437227405313L);
      doubleArray0[3] = (-1.1158309775525232E-145);
      doubleArray0[4] = (double) (-6637);
      doubleArray0[5] = (double) (-2498.4775F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (-1.1158309775525232E-145);
      doubleArray0[8] = (double) Float.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1072.154968765453);
  }
}
