/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:34:49 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2145652876), (-1359));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2145651517);
      doubleArray0[2] = (double) (-2145652876);
      doubleArray0[3] = (double) (-1359);
      doubleArray0[4] = (double) (-2145651517);
      doubleArray0[5] = (double) (-2145652876);
      doubleArray0[6] = (double) (-1359);
      doubleArray0[7] = (double) (-2145652876);
      doubleArray0[8] = (double) (-2145651517);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-2,145,652,876 < -1,359)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.sign(9154082963658192737L);
      long long1 = MathUtils.addAndCheck(1L, 1L);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 9154082963658192737L;
      doubleArray0[2] = (double) 1L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.sign(657596113L);
      byte byte0 = MathUtils.indicator((byte) (-5));
      byte byte1 = (byte)49;
      byte byte2 = MathUtils.indicator((byte)49);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-900));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-900);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (-3327.65051245179);
      doubleArray0[5] = (double) (short) (-900);
      doubleArray0[6] = (double) (short) (-1);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(4607182418800017408L, (long) (short) (-1));
      int int0 = MathUtils.indicator((int) (short) (-900));
      byte byte0 = (byte)105;
      byte byte1 = MathUtils.indicator((byte)105);
      byte byte2 = MathUtils.indicator((byte)21);
      int int1 = MathUtils.hash((-900.0));
      int int2 = 9985;
      Random.setNextRandom(9985);
      long long1 = 5648769086999809661L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(5648769086999809661L, (long) 9985);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1707), 969);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1707);
      doubleArray0[1] = (double) (-738);
      doubleArray0[2] = (double) (-738);
      doubleArray0[3] = (double) (-1707);
      int int1 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-738);
      intArray0[1] = 1532794753;
      intArray0[2] = (-1707);
      intArray0[3] = 969;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1532794753, 913.781);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-738 >= -738)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-4618));
      double double0 = MathUtils.binomialCoefficientLog(0, (short) (-1));
      long long0 = MathUtils.pow((long) 0, 2942L);
      float float0 = MathUtils.indicator(0.0F);
      long long1 = MathUtils.lcm(1219L, (-3042L));
      double double1 = MathUtils.sinh(0.0);
      int int0 = MathUtils.hash((double) 3708198L);
      short short1 = MathUtils.sign((short)0);
      int int1 = MathUtils.mulAndCheck(33, (int) (short) (-4618));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1219L;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = 1.5830993332061267E-10;
      doubleArray0[6] = (double) (-3042L);
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) (short) (-4618);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.sinh(2.0);
      double double4 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.pow(0, 67);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 67;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 67;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 67;
      double double0 = MathUtils.log(67.0, 2.0);
      double double1 = MathUtils.factorialLog(0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.16485085672216038;
      doubleArray1[1] = 3.9736429850260626E-8;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.16485085672216038;
      doubleArray1[7] = (double) 67;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2918.6082856078256), (-4504.59370712658), 17.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4504.59370712658);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[2] = (-4504.59370712658);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[3] = (-2918.6082856078256);
      doubleArray2[4] = (-4504.59370712658);
      doubleArray2[5] = 17.0;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (-503.36564533);
      double double1 = MathUtils.safeNorm(doubleArray2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-182L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-182)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.indicator((-1022L));
      long long1 = MathUtils.indicator(0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2418;
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short) (-1735));
      long long2 = MathUtils.mulAndCheck((long) 0, (long) 2418);
      int[] intArray1 = new int[2];
      intArray1[0] = (int) (short) (-1);
      intArray1[1] = 231;
      int int0 = MathUtils.distanceInf(intArray1, intArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-4158));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      int int2 = MathUtils.sign(0);
      double double0 = MathUtils.factorialDouble(0);
      int int3 = MathUtils.sign(0);
      long long0 = MathUtils.factorial(0);
      float float0 = MathUtils.sign((float) 0);
      int int4 = 0;
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      long long1 = MathUtils.lcm(4294967295L, 1L);
      double double2 = MathUtils.round(0.0, 0, 0);
      double double3 = MathUtils.binomialCoefficientDouble(17, (-1577));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.pow(720L, 720L);
      long long1 = MathUtils.pow(720L, 2643L);
      double double0 = MathUtils.indicator((-2621.4398));
      int int0 = MathUtils.mulAndCheck(18, 9);
      int int1 = MathUtils.hash((-1.0));
      boolean boolean0 = MathUtils.equals(4625.0, 39.10224);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 720L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.pow((-1035L), 162);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1792L), 0L);
      int int0 = MathUtils.indicator((-536));
      long long1 = MathUtils.factorial(5);
      int int1 = MathUtils.pow((-1), 4294967295L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-536);
      doubleArray0[1] = (double) (-1792L);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1792L);
      doubleArray0[7] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.hash(1.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-126);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,224,323,590,011,006^-4,224,323,590,011,006)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4765.0);
      doubleArray0[1] = 382.321;
      doubleArray0[2] = (-3059.0161268858856);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2188.479557235055);
      doubleArray0[5] = 79.061669043;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 6.283185307179586;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.sign((-1232.5F));
      int int1 = 1023;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2006688621, 1023);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, (-4133.048937255285), (-4133.048937255285));
      int int1 = 0;
      long long0 = 962L;
      int int2 = MathUtils.pow(0, 962L);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-4133.048937255285);
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 962L;
      doubleArray1[6] = (double) 962L;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = 3115L;
      long long1 = 2432902008176640000L;
      long long2 = MathUtils.gcd(3115L, 2432902008176640000L);
      int int0 = MathUtils.hash((double) 35L);
      double double0 = MathUtils.cosh(1.375);
      double double1 = (-1235.192479984831);
      boolean boolean0 = MathUtils.equals((-1235.192479984831), (double) 1078034432);
      int int1 = (-595);
      int int2 = MathUtils.subAndCheck(1078034432, (-595));
      // Undeclared exception!
      MathUtils.factorialDouble(1078034432);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, (-1953));
      double double1 = 1.625;
      double double2 = MathUtils.log(1.0, 1.625);
      int int0 = 15;
      boolean boolean0 = MathUtils.equals(2.0, 1.0, 15);
      int int1 = 242;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 15, 242);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 242, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.subAndCheck(0, 0);
      int int3 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = 2525L;
      long long2 = MathUtils.pow(355687428096000L, 2525L);
      try { 
        MathUtils.pow(0, (-1390L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,390)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = (-7278142539171889152L);
      long long1 = 2300L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-7278142539171889152L), 2300L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.sign((-541));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-541);
      doubleArray0[4] = (double) (-1);
      double double0 = (-32.5904485);
      doubleArray0[5] = (-32.5904485);
      doubleArray0[6] = (double) (-541);
      doubleArray0[7] = (double) (-541);
      doubleArray0[8] = (double) (-541);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck((long) (-541), (long) (-1));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.normalizeAngle((-1.0), (-540L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 0.0, 3.834E-20);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck((-541), (-541));
      // Undeclared exception!
      MathUtils.factorialLog(292681);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.pow(117, 2288L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1682.5, 0.0, 480876865);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 3.834E-20);
      int int0 = (-1219);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1219));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,219
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1692);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = (-1343);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1343));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,343
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(197, 197);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.375);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 197;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.375;
      doubleArray1[2] = 0.375;
      doubleArray1[3] = (double) 197;
      doubleArray1[4] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1030;
      int int1 = MathUtils.mulAndCheck(1030, 1030);
      int int2 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.mulAndCheck(479001600L, 0L);
      int int3 = MathUtils.indicator(1060900);
      float float0 = MathUtils.indicator((float) 1030);
      double double0 = MathUtils.factorialLog(1030);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      int int1 = MathUtils.indicator(1727);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1889);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.gcd((-2701), (-2701));
      int int1 = MathUtils.lcm((-2701), 0);
      boolean boolean0 = MathUtils.equals((double) (-2701), (-2907.2415597929), 124);
      boolean boolean1 = MathUtils.equals(0.0036, 3990.26811462388, (-4065.0));
      double double0 = MathUtils.sinh((-443.51));
      long long0 = MathUtils.addAndCheck(0L, 40320L);
      long long1 = MathUtils.addAndCheck(40320L, (long) 124);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.lcm((-7), 0);
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.binomialCoefficientDouble(1, 0);
      long long1 = MathUtils.mulAndCheck((long) 0, 0L);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 66);
      boolean boolean1 = MathUtils.equals(0.0, 0.0, 66);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.indicator(581);
      long long0 = MathUtils.subAndCheck((-1105L), (-1105L));
      boolean boolean0 = MathUtils.equals(0.0, 442.8519);
      int int1 = MathUtils.gcd(581, 1);
      int int2 = MathUtils.sign(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-139);
      intArray0[2] = 0;
      int[] intArray1 = new int[7];
      intArray1[0] = 581;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 581;
      int int3 = MathUtils.distance1(intArray0, intArray1);
      long long1 = MathUtils.addAndCheck((long) 0, (long) 1);
      float float0 = MathUtils.indicator((float) 0);
      byte byte0 = MathUtils.sign((byte)11);
      double double0 = MathUtils.indicator(65.9374);
      double double1 = MathUtils.binomialCoefficientLog(721, 13);
      double double2 = MathUtils.scalb(0.07490822288864472, 1135);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 786.5856288564;
      doubleArray0[2] = 776.15;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = (-1864.3727);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-409.326);
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.log(0.0, (-235.30297));
      int int1 = (-966);
      try { 
        MathUtils.pow((BigInteger) null, (-966));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-966)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 999;
      int int1 = MathUtils.addAndCheck(999, 999);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-637));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-637)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.lcm(4503599627370495L, 4503599627370495L);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(2107.853F, (-4032));
      float float1 = MathUtils.round(0.0F, 2430);
      int int0 = MathUtils.sign(1296);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 4503599627370495L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.log(12.0, 0.0);
      long long0 = MathUtils.addAndCheck((-1088L), (-1088L));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.indicator(1.1102230246251565E-16);
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (-2908.0));
      double double1 = MathUtils.round((-2908.0), 170);
      int int0 = MathUtils.sign(170);
      double double2 = MathUtils.round(Double.NaN, 974, 1);
      int int1 = MathUtils.gcd((-267), 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3.0, 1.0, 560.329289553);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      int[] intArray0 = new int[7];
      intArray0[0] = 974;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-267);
      intArray0[4] = 974;
      intArray0[5] = 1;
      intArray0[6] = 1;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.pow(18, (long) 1);
      boolean boolean2 = MathUtils.equalsIncludingNaN(330.45, 1.304E19);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-1.0E-6);
      int int0 = MathUtils.compareTo((-2928.36), (-2928.36), (-1.0E-6));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0E-6);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = (-918.1125712379446);
      double double2 = MathUtils.round((-918.1125712379446), 0);
      byte byte0 = (byte) (-37);
      byte byte1 = MathUtils.indicator((byte) (-37));
      try { 
        MathUtils.pow((long) (byte) (-1), (long) (byte) (-37));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-37)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = (-664L);
      try { 
        MathUtils.pow(bigInteger0, (-664L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-664)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1209.1566473220762;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1075.0);
      doubleArray1[4] = 4588.1741406;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-2312.69);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-921.3696660634);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long0 = MathUtils.subAndCheck((-2037L), 0L);
      int int0 = MathUtils.indicator(232);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1877.0, 1877.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1877.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.subAndCheck((-1197), 3387);
      float float0 = MathUtils.round((float) (-1197), 5, 5);
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck(2043L, (long) 1084052511);
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 5;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1543, 1543);
      int int0 = MathUtils.mulAndCheck((-355), (-355));
      int int1 = MathUtils.indicator(0);
      double double0 = MathUtils.normalizeAngle(1, 1.304E19);
      double double1 = MathUtils.scalb(0.0, 1);
      int int2 = MathUtils.pow(1543, (long) 126025);
      byte byte0 = MathUtils.indicator((byte) (-121));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = (-1605);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1605), (-1605));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,605
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.sinh(1.0);
      int int0 = 2335;
      double double1 = MathUtils.round(2286.0, 2335);
      short short0 = (short)1876;
      short short1 = MathUtils.sign((short)1876);
      int int1 = MathUtils.mulAndCheck((int) (short)1876, (-954));
      boolean boolean0 = MathUtils.equalsIncludingNaN(4.0, (double) (short)1876);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.1752011936438014;
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.0, (double) (-1789704), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = MathUtils.log(1.1102230246251565E-16, 1.1102230246251565E-16);
      int int0 = (-2303);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 1.0, (-2303));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1784.5842577982);
      doubleArray0[1] = 2117.1249197143707;
      doubleArray0[2] = 1.9699272335463627E-8;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (-3757.0);
      doubleArray0[5] = 3.141592653589793;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 134;
      double double0 = MathUtils.factorialDouble(134);
      long long0 = 791L;
      long long1 = MathUtils.lcm(791L, 791L);
      int int1 = 3;
      float float0 = MathUtils.round((-1754.4613F), 3);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,117.125 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 152;
      double double0 = MathUtils.factorialDouble(152);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger1.remainder(bigInteger0);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.05, 0.05, 2633.3949339520336);
      long long0 = MathUtils.mulAndCheck((-3032L), (-3032L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9193024L;
      doubleArray0[1] = 2633.3949339520336;
      doubleArray0[2] = 2633.3949339520336;
      doubleArray0[3] = (double) 9193024L;
      doubleArray0[4] = 0.05;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(0);
      double double2 = MathUtils.log(Double.NEGATIVE_INFINITY, 3048.896133);
      double double3 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.indicator(0);
      double double5 = MathUtils.indicator(2.0);
      long long1 = MathUtils.gcd(9193024L, 9193024L);
      long long2 = MathUtils.mulAndCheck(1722L, 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (9,193,024 >= 2,633.395)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.cosh((-2945.0));
      int int0 = 99;
      int int1 = 15;
      long long0 = MathUtils.binomialCoefficient(99, 15);
      int int2 = (-236);
      double double1 = MathUtils.binomialCoefficientDouble(99, (-236));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (-2945.0);
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 99;
      doubleArray1[1] = (double) (-236);
      doubleArray1[2] = (-2945.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 15;
      doubleArray1[5] = (double) 15;
      doubleArray1[6] = (-3802.66367274);
      doubleArray1[7] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("TejcaH_USf");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.TejcaH_USf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.cosh((-2945.0));
      long long0 = MathUtils.binomialCoefficient(99, 15);
      double double1 = MathUtils.binomialCoefficientDouble(99, (-236));
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (-2945.0);
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray0[15] = (double) 99;
      doubleArray1[1] = (double) (-236);
      doubleArray1[2] = (-2945.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 15;
      doubleArray1[5] = (double) 15;
      doubleArray1[6] = (-3802.66367274);
      doubleArray1[7] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("TejcaH_USf");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.TejcaH_USf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-2079L);
      long long1 = MathUtils.lcm((-2079L), (-2079L));
      int int0 = (-1775);
      int int1 = MathUtils.gcd((-1775), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2079L);
      doubleArray0[1] = (double) 2079L;
      doubleArray0[2] = (double) (-2079L);
      doubleArray0[3] = (double) (-1775);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.addAndCheck((long) (-1775), (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1775));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,775
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.indicator(2399L);
      double double0 = MathUtils.binomialCoefficientDouble(2019, 900);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 2019;
      doubleArray0[3] = (double) 900;
      doubleArray0[4] = (double) 1L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = (-183.052);
      doubleArray0[2] = (-1387.12);
      doubleArray0[3] = 385.0;
      doubleArray0[4] = 578.702;
      doubleArray0[5] = 1964.72705465219;
      doubleArray0[6] = (-904.86);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(3916, 3916);
      byte byte0 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      long long0 = bigInteger1.longValueExact();
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.setBit((byte)0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      double double1 = MathUtils.binomialCoefficientLog(3916, (byte)1);
      double double2 = MathUtils.binomialCoefficientLog(13, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 3916, 0, 3916);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 2611.622;
      doubleArray0[2] = 730.263601202062;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = (-1835.7);
      doubleArray0[5] = (-1072.59665);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 730.263601202062;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.compareTo(2559.8403037, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      long long0 = MathUtils.pow((long) 1, 1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2559.8403037;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.pow(1, 1);
      double double1 = MathUtils.sign(585.300970986);
      byte byte0 = MathUtils.sign((byte) (-59));
      int int2 = MathUtils.subAndCheck((-960), 1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-100));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-770), (-352));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -770, k = -352
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.compareTo(1812.726, 1812.726, (-1741.7219));
      float float0 = MathUtils.indicator(0.0F);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0.0F, (-1741.7219), 0.0);
      double double1 = MathUtils.sign(0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.lcm(7910884519577875640L, (-1092L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.gcd(0L, 0L);
      long long2 = 0L;
      long long3 = MathUtils.addAndCheck(0L, 0L);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 552.702233);
      double double1 = MathUtils.sign(2228.675398285075);
      int int0 = (-736);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.0, 552.702233, (-736));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2297L, 9193070505571053912L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 9193070505571056209L;
      doubleArray0[1] = (double) 2297L;
      doubleArray0[2] = (double) 9193070505571053912L;
      doubleArray0[3] = 877.26618;
      doubleArray0[4] = (double) 2297L;
      doubleArray0[5] = (double) 2297L;
      doubleArray0[6] = (double) 9193070505571056209L;
      doubleArray0[7] = (double) 9193070505571056209L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(2628.3955F);
      int[] intArray0 = new int[1];
      intArray0[0] = 105;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.0, 0.0, 1.0);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.indicator((-2519.805681));
      // Undeclared exception!
      try { 
        MathUtils.equals((-969.4532509454853), 2.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(0.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, 20);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 20, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.cosh(1460.2756252);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1460.2756252;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1460.2756252;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 1460.2756252;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1460.2756252;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = 1460.2756252;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, (-1185.9478), (-1185.9478));
      short short0 = MathUtils.sign((short)16);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)16;
      doubleArray0[2] = 2.2250738585072014E-308;
      doubleArray0[3] = (double) (short)16;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-2244);
      int int1 = (-1080);
      int int2 = MathUtils.mulAndCheck((-2244), (-1080));
      double[] doubleArray0 = new double[0];
      int int3 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sign((double) (-1080));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 6.283185307179586);
      double double1 = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 716;
      int int1 = 18;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(716, 18);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(20, 87);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-67);
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = (double) 87;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = 87;
      intArray0[2] = 20;
      intArray0[3] = (-67);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator(9223372036854775807L);
      boolean boolean1 = MathUtils.equals((double) 17, 1.4456468917292502E-16);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(177, 17);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.pow(0, 0);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      int int3 = MathUtils.lcm(0, 234);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1829.5745022542603);
      doubleArray0[1] = 2577.29636075;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = (-1873.1971418068438);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1339.869689436336;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.distance1(doubleArray1, doubleArray0);
      try { 
        MathUtils.pow((-300), (-300));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-300^-300)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0.0F, (double) 1.0F, 63);
      long long0 = MathUtils.subAndCheck((long) 63, 6722166367014452318L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 6722166367014452318L, (double) 6722166367014452318L);
      double double0 = MathUtils.sign(1.2958646899018938E-9);
      int[] intArray0 = new int[7];
      intArray0[0] = 63;
      intArray0[1] = 63;
      intArray0[2] = 63;
      intArray0[3] = 63;
      intArray0[4] = 63;
      intArray0[5] = 63;
      intArray0[6] = 63;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(0, 2312);
      int int2 = MathUtils.pow((-2422), 227);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.factorialDouble(1209);
      double double3 = MathUtils.cosh(Double.POSITIVE_INFINITY);
      double double4 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, 444.8493583501855);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2312;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1.2958646899018938E-9);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = (-974.1072727934073);
      int int0 = MathUtils.compareTo(9.219544613762692E-9, 3.141592653589793, (-974.1072727934073));
      double double1 = MathUtils.sign(3.141592653589793);
      int int1 = 0;
      long long0 = MathUtils.factorial(0);
      int int2 = (-1024);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1L, (-1), (-1024));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,024, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 1755L);
      int int0 = MathUtils.sign(4194304);
      double double0 = MathUtils.log(1755L, 0.0);
      float float0 = MathUtils.round((float) 1, 1, 1);
      int int1 = MathUtils.compareTo(1755L, 4194304, (-2782.88032));
      boolean boolean0 = MathUtils.equals((-1465.81685799681), (double) 1755L, 114);
      double double1 = MathUtils.indicator((double) 1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 6.0);
      double double2 = MathUtils.sinh((-2782.88032));
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("]L4^:u$G+eS:)(?-{>", 4194304);
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.compareTo(966.0409085, (-2848.054), (-1373.028055964));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-2848.054);
      doubleArray0[3] = 284.7755088011304;
      doubleArray0[4] = (-2848.054);
      doubleArray0[5] = 1679.8685364;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.99;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.mulAndCheck(0, 0);
      float float0 = MathUtils.sign((float) 0);
      int int1 = 19;
      double double0 = MathUtils.factorialLog(19);
      double double1 = MathUtils.round((double) 19, 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1186.0), 0.1818181574344635, 3.834E-20);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.or((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.scalb(5.669184079525E-24, 4);
      float float1 = MathUtils.indicator(2527.36F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short short0 = (short) (-5443);
      short short1 = MathUtils.indicator((short) (-5443));
      // Undeclared exception!
      try { 
        MathUtils.factorial((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.gcd((-3052L), 20922789888000L);
      double double0 = MathUtils.scalb(1.625, 13);
      short short0 = MathUtils.indicator((short)1770);
      double double1 = MathUtils.normalizeAngle(1.625, (-3100.783764));
      double double2 = MathUtils.indicator(1.1730463525082348E-7);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1347.175044), (-1347.175044));
      int int0 = MathUtils.gcd((-383), (-383));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1347.175044);
      doubleArray0[1] = (-1347.175044);
      doubleArray0[2] = (double) 383;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.gcd(2195L, 1195L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 4208363204685324176L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4208363204685324176L, 4208363204685324176L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(13, (-10));
      long long0 = MathUtils.pow(24L, 24L);
      short short0 = MathUtils.indicator((short) (-2048));
      int int0 = MathUtils.compareTo(0.5, 3022.341, (short) (-2048));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 5369);
      long long0 = MathUtils.pow(720L, 235);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.pow(0L, 17);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 20922789888000L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(20922789888000L, 20922789888000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 0);
      double double0 = MathUtils.log(1.0F, 0);
      boolean boolean0 = MathUtils.equals((double) 1.0F, (-1074.345132), (-1074.345132));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight(0);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.scalb((-2521.1121591065), (-2825));
      int int0 = MathUtils.pow(1655, 40);
      double double1 = MathUtils.sign((double) (-1882591167));
      float float0 = MathUtils.round((float) 1655, (-613));
      long long0 = MathUtils.pow((long) 1655, 0L);
      int int1 = MathUtils.hash((-1157.2863103403497));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1655;
      doubleArray0[1] = (double) 1655;
      doubleArray0[2] = (double) (-1882591167);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1882591167);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.lcm((-2192), (-2506));
      long long1 = MathUtils.indicator(0L);
      double double2 = MathUtils.binomialCoefficientLog(2951, (-1882591167));
      byte byte0 = MathUtils.sign((byte)0);
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.indicator(0L);
      long long3 = MathUtils.indicator(6402373705728000L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = MathUtils.addAndCheck((-1882591167), 608);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-454.0), (-894.1278864271085));
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-820));
      int int0 = MathUtils.hash((-816.5));
      float float0 = MathUtils.round(0.0F, 0, 0);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) 0, 6.123233995736766E-17);
      int int1 = MathUtils.hash((-454.0));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1064729600);
      intArray0[1] = (-1064729600);
      intArray0[2] = 0;
      intArray0[3] = (-1064729600);
      intArray0[4] = 0;
      intArray0[5] = (-1064729600);
      intArray0[6] = 0;
      double double3 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 547;
      // Undeclared exception!
      try { 
        MathUtils.round(3358.5F, 547, (-525));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -525, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1841, 0);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.binomialCoefficientLog(0, (-1698));
      int int0 = MathUtils.gcd(1841, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = bigInteger0.isProbablePrime((-1388));
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean1 = MathUtils.equals(1738.60162752169, (double) 0, (double) 1841);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      long long1 = MathUtils.lcm(965L, 0L);
      short short0 = MathUtils.indicator((short)174);
      long long2 = MathUtils.lcm((long) (short)174, 1816L);
      long long3 = MathUtils.gcd((long) (short)1, (-682L));
      double double0 = MathUtils.sinh(0L);
      int int0 = MathUtils.subAndCheck((-495), (int) (short)174);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 157992L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-80));
      int int1 = MathUtils.gcd((int) (short)174, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = bigInteger1.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sinh(1.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = MathUtils.hash(1.304E19);
      double double0 = MathUtils.cosh(1.304E19);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(999.9979889614937, 999.9979889614937, 898);
      int int0 = MathUtils.pow(6, 81);
      long long0 = MathUtils.sign((long) 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, (double) 898, 81);
      int int1 = MathUtils.subAndCheck(0, 898);
      double double0 = MathUtils.sign(1.1102230246251565E-16);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-898);
      doubleArray0[2] = (double) 81;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2.718281828459045);
      int int2 = MathUtils.lcm(13, (-648));
      double double2 = MathUtils.binomialCoefficientLog(4034, 2045);
      boolean boolean2 = MathUtils.equals(3550.0, 6.0, 51);
      float float0 = MathUtils.indicator((-1.0F));
      double double3 = MathUtils.factorialLog(70);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.sinh((short)0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2719L, 1972L);
      int int0 = MathUtils.addAndCheck(803, 803);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 17);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 17
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 44.22149439;
      doubleArray0[1] = (-1902.387);
      doubleArray0[2] = (-104.4587439995413);
      doubleArray0[3] = (-2683.4417);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2523.06739);
      doubleArray0[6] = (-1469.6071321841);
      doubleArray0[7] = (-2188.320705345756);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1460.17354992);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 2190.573604797454;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1460.17354992));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 2077.366;
      double double1 = 187.6949729272526;
      int int0 = (-2075);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2077.366, 187.6949729272526, (-2075));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2339.11322947821);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1475.5804));
      boolean boolean0 = MathUtils.equals((-1295.60097469893), (-1295.60097469893));
      int[] intArray0 = new int[8];
      intArray0[0] = 265;
      intArray0[1] = (-729);
      intArray0[2] = (-2354);
      intArray0[3] = 1099;
      intArray0[4] = 587;
      intArray0[5] = 0;
      intArray0[6] = 1913;
      intArray0[7] = (-628);
      int[] intArray1 = new int[3];
      intArray1[0] = (-729);
      intArray1[1] = 1913;
      intArray1[2] = 587;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = MathUtils.sign((-1553.0F));
      short short0 = MathUtils.sign((short) (-512));
      int int0 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-512);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1569.8427544345357;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-505.0));
      float float0 = MathUtils.sign((-4228.9194F));
      try { 
        MathUtils.pow((-9218868437227405313L), (-9218868437227405313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,218,868,437,227,405,313^-9,218,868,437,227,405,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1188.6502997), 1117.6292861129823, 3045);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1117.6292861129823;
      doubleArray0[1] = (-1188.6502997);
      doubleArray0[2] = 1117.6292861129823;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      int int0 = 179;
      // Undeclared exception!
      try { 
        MathUtils.factorial(179);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.indicator(1837.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-4039.0), (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.sign((short)1488);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.indicator(3165L);
      double double0 = MathUtils.round((double) 3165L, 0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      double double2 = MathUtils.sign((double) 0);
      double double3 = MathUtils.binomialCoefficientLog(0, 0);
      long long2 = MathUtils.indicator((-149L));
      int int1 = MathUtils.mulAndCheck(0, 0);
      double double4 = MathUtils.distance(intArray0, intArray0);
      long long3 = MathUtils.gcd(0L, (-149L));
      double double5 = MathUtils.binomialCoefficientDouble(12, 12);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.gcd(31L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-803.00343665), (double) 31L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.sign((-1137.585));
      double double1 = MathUtils.round(0.0, 210);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 210;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-1137.585);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-589.4061124);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= -589.406)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1412);
      intArray0[0] = (-1412);
      intArray0[1] = (-1329);
      int int1 = (-1680);
      intArray0[2] = (-1680);
      intArray0[3] = (-1553);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int2 = MathUtils.mulAndCheck(66, (-1680));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1553));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,553
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3294198.0, 3294198.0, 3294198.0);
      int int0 = MathUtils.subAndCheck(21, 21);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-445));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -445
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 168.031606062095;
      doubleArray0[2] = 1.9699272335463627E-8;
      doubleArray0[3] = 1.2246467991473532E-16;
      doubleArray0[4] = 14.230475263169328;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (168.032 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L, (double) 0L);
      int int0 = MathUtils.compareTo(0L, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = 2543.284;
      boolean boolean0 = MathUtils.equals(0.0, 2543.284);
      int int0 = MathUtils.subAndCheck(1232, 1232);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1922));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,922
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      int int1 = 4780;
      int int2 = MathUtils.pow(0, 4780);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2054.150438745587, 0.0, 0.0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      float float0 = MathUtils.round(Float.NaN, 150);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0, 7, 150);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.sign((-27));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-27);
      doubleArray0[3] = (double) (-27);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-27);
      doubleArray0[7] = (double) (-1);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-27 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.sinh((-1.0));
      double double1 = MathUtils.sign(476.68008);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 0, (-1275));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,275, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.sign((-302932621132653753L));
      int int0 = MathUtils.sign(0);
      double double0 = MathUtils.binomialCoefficientDouble(3122, 3122);
      double double1 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3122;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 3122;
      intArray0[2] = 0;
      intArray0[3] = 3122;
      intArray0[4] = 3019;
      intArray0[5] = 0;
      intArray0[6] = 468;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 2935;
      double double0 = MathUtils.binomialCoefficientDouble(2935, 2935);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.pow(0);
      try { 
        MathUtils.pow(bigInteger0, (-302932621132653753L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-302,932,621,132,653,753)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.sign(14);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = 0.5;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(208, 8);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.gcd((-1), (-1476));
      long long0 = MathUtils.pow((long) (-1476), 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (-2057.53784513));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float float0 = MathUtils.indicator(1905.0396F);
      int int0 = MathUtils.lcm(1321, 1321);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      double double1 = MathUtils.log(1905.0396F, (byte)0);
      int int1 = MathUtils.gcd(6, 0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1321;
      doubleArray1[1] = (double) 1905.0396F;
      doubleArray1[2] = (double) 6;
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(26, 26);
      double double0 = MathUtils.log(676, (-1723.39612550201));
      int int1 = MathUtils.gcd(676, 26);
      float float0 = MathUtils.indicator((-333.491F));
      long long0 = MathUtils.indicator((long) 26);
      int int2 = 1025;
      float float1 = MathUtils.round(0.0F, 1025);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3258));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,258
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1587.81);
      int int0 = MathUtils.hash(Double.NaN);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      int int1 = 3914;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 3914);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 3,914
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.cosh(0.003);
      boolean boolean0 = MathUtils.equals(1.000004500003375, 0.003);
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      int int1 = MathUtils.indicator(1727);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(10, 10);
      double double1 = MathUtils.sinh((-968.13790877));
      int int0 = MathUtils.pow(56, 10);
      double double2 = MathUtils.normalizeAngle(779.719244, 779.719244);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) 1073741824, (long) 10);
      int int1 = MathUtils.sign((-1575));
      double double4 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.sign(1741.94);
      long long0 = MathUtils.lcm(1312L, 5040L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.gcd(66, 36);
      long long0 = MathUtils.lcm((-3059L), 24L);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3262.746743547537), (-3262.746743547537));
      try { 
        MathUtils.pow(421L, (-611));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (421^-611)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 1252);
      int int0 = MathUtils.hash((double) 1252);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-534.4), (-534.4));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-472.467), (-2945.325330464552));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.sign(9154082963658192752L);
      long long1 = (-2619L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9154082963658192752L, (-2619L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = MathUtils.lcm((-3349), (-682));
      double double0 = MathUtils.scalb((-65.061937529), 2284018);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-65.061937529), 0.0, 2284.3);
      int int1 = 405;
      float float0 = MathUtils.round((float) 2284018, 405);
      float float1 = MathUtils.sign((float) 405);
      double double1 = MathUtils.round(1272.967904677, (-2514));
      try { 
        MathUtils.pow((-2514), (-2514));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,514^-2,514)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(2739L, 2739L);
      int int0 = 125;
      long long1 = (-9218868437227405313L);
      try { 
        MathUtils.pow(125, (-9218868437227405313L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (125^-9,218,868,437,227,405,313)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1636.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,636 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = MathUtils.gcd(2047L, (-2703L));
      int int0 = MathUtils.compareTo(4173.0, 0.0, 4173.0);
      int int1 = MathUtils.pow(0, (long) 0);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, Double.POSITIVE_INFINITY, (double) 2047L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0, 0.0);
      double double1 = MathUtils.cosh(0.0);
      long long1 = MathUtils.indicator((long) 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-34.28682755047);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1449L), (-2035L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3817.68498), (-3817.68498), 29);
      long long1 = MathUtils.sign(9221120237041090560L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(856, 1030);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 856, k = 1,030
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = MathUtils.sign(4173.6035F);
      int int0 = 4;
      try { 
        MathUtils.pow(4, (-1856L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (4^-1,856)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1848.18);
      doubleArray0[2] = 1.9699272335463627E-8;
      doubleArray0[3] = 1.2246467991473532E-16;
      doubleArray0[4] = 2.356194490192345;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1,848.18)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 477.1597;
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3138L);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = MathUtils.gcd((-4035746434778044925L), (-4035746434778044925L));
      double double0 = MathUtils.factorialDouble(3758);
      double double1 = MathUtils.scalb(3758, 3758);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Y");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-803.00343665), (double) 31L);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1976.710379026, 1976.710379026, 0.0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.indicator(0);
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.binomialCoefficientDouble(1, 0);
      long long1 = MathUtils.mulAndCheck((long) 0, 0L);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = (byte)53;
      byte byte1 = MathUtils.indicator((byte)53);
      int int0 = MathUtils.sign(4);
      long long0 = MathUtils.pow(5595L, 24L);
      long long1 = MathUtils.lcm(0L, 0L);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte)53, (java.util.Random) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = MathUtils.pow(7910884519577875640L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-653), (-1614));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -653
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = MathUtils.sign(2301.8314);
      byte byte0 = MathUtils.indicator((byte)108);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = MathUtils.sign((-0.1428571423679182));
      int int0 = MathUtils.sign(2147186788);
      long long0 = MathUtils.pow(3595L, 4);
      int int1 = MathUtils.pow(2147186788, 142);
      int int2 = MathUtils.indicator(4);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1, 2146666926, (-1115));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,115, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = MathUtils.compareTo(1493.884, 0.0, 2448.834491254918);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1922.38176041);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1493.884);
      short short0 = MathUtils.indicator((short)0);
      int int1 = MathUtils.subAndCheck((int) (short)1, 67);
      long long0 = MathUtils.binomialCoefficient((short)1, (-1245));
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)0, (int) (short)1, (-3492));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,492, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = MathUtils.gcd((-3052L), 20922789888000L);
      double double0 = MathUtils.EPSILON;
      short short0 = MathUtils.indicator((short)1770);
      double double1 = MathUtils.normalizeAngle(1.625, (-34.2558538));
      double double2 = MathUtils.indicator(1.1730463525082348E-7);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 723.346;
      doubleArray0[1] = 0.9999997615814209;
      doubleArray0[2] = 4151.9651837651;
      doubleArray0[3] = 0.3;
      doubleArray0[4] = (-1084.1076738885265);
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator((long) (-877294496));
      long long1 = MathUtils.addAndCheck((long) (-877294496), (-1L));
      int[] intArray0 = new int[7];
      intArray0[0] = (-877294496);
      intArray0[1] = (-877294496);
      intArray0[2] = (-877294496);
      intArray0[3] = (-877294496);
      intArray0[4] = (-877294496);
      intArray0[5] = (-877294496);
      intArray0[6] = (-877294496);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1799.4341853442763, 0.0, 0.0);
      float float0 = MathUtils.round(0.0F, (-2009));
      int int0 = MathUtils.indicator((-2009));
      long long0 = MathUtils.subAndCheck((long) (-1), (-1702L));
      int int1 = MathUtils.sign(152);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-385), (-385));
      long long0 = MathUtils.pow((long) 148225, (long) 148225);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      doubleArray0[2] = (double) 148225;
      doubleArray0[3] = (double) 1900270856102953729L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0L);
      int int1 = MathUtils.gcd((-6), (-483));
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (-6));
      double double1 = MathUtils.scalb(148225, (-483));
      boolean boolean0 = MathUtils.equals((double) 1900270856102953729L, 5.935175335670303E-141, 2935);
      int int2 = MathUtils.hash(Double.NEGATIVE_INFINITY);
      long long1 = MathUtils.lcm((-32L), (-5236L));
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      long long2 = MathUtils.subAndCheck(1900270856102953729L, 103L);
      double double2 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4265.25700457;
      doubleArray0[1] = 1182.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 98.02271782223;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.04168701738764507;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(647L, 647L);
      int int0 = MathUtils.subAndCheck(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(492.747142625974, (double) 647L);
      byte byte0 = MathUtils.sign((byte)64);
      int[] intArray0 = new int[7];
      intArray0[0] = 3960;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2.384185791015625E-7, (double) 647L);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.cosh(6.283185307179586);
      int int2 = (-1255);
      int int3 = MathUtils.addAndCheck(0, (-1255));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int4 = MathUtils.compareTo(0.0, 6.283185307179586, 6.283185307179586);
      long long1 = MathUtils.pow(2912L, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 973, (-1255));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,255, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = (-2244);
      int int1 = (-1080);
      int int2 = MathUtils.mulAndCheck((-2244), (-1080));
      double[] doubleArray0 = new double[0];
      int int3 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.sign((double) (-1080));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 1.00307692307692314E18);
      double double1 = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
