/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:42:03 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.hash(2.0);
      int int1 = MathUtils.pow(1331, 1201);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.modInverse(bigInteger1);
      int int2 = bigInteger0.signum();
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 7L);
      try { 
        MathUtils.pow(bigInteger2, (-507L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-507)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round((-1150.0F), 0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      float float1 = MathUtils.sign((float) (byte)0);
      double double0 = MathUtils.round(95.4680022, 1215);
      double double1 = MathUtils.log(3754.1763293826943, (byte)0);
      boolean boolean0 = MathUtils.equals((-808.6), (-1902.372655885));
      long long0 = MathUtils.pow((long) 0, 1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, 1.304E19, 2.718281828459045);
      boolean boolean1 = MathUtils.equals(1.304E19, 1.304E19, (-1.0E-6));
      double double0 = MathUtils.sinh(1.304E19);
      int int0 = MathUtils.pow(744, 362880L);
      boolean boolean2 = MathUtils.equalsIncludingNaN(2.718281828459045, (double) 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 744;
      intArray0[2] = 744;
      intArray0[3] = 744;
      intArray0[4] = 744;
      intArray0[5] = 744;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[5] = 128.121;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1.375;
      doubleArray0[5] = (-4347.2014749);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 3.834E-20;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 2147483626;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2147483626, 2147483626);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,147,483,626 + 2,147,483,626
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.gcd(7, 7);
      long long0 = MathUtils.sign((long) 7);
      byte byte0 = MathUtils.indicator((byte)75);
      short short0 = MathUtils.sign((short)2573);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(Float.NaN, 0);
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.round((double) Float.NaN, 1215);
      double double1 = MathUtils.log(1215, (byte)0);
      boolean boolean0 = MathUtils.equals((-808.6), (-1902.372655885));
      long long0 = MathUtils.pow((long) 0, 1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.pow(744, (long) 744);
      int int1 = MathUtils.mulAndCheck(0, 744);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0E-6);
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 744;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.0E-6);
      doubleArray1[3] = (double) 744;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-1.0E-6);
      doubleArray1[6] = (double) 744;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int2 = MathUtils.sign(744);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.TWO_PI;
      short short0 = (short)11;
      short short1 = MathUtils.sign((short)11);
      long long0 = MathUtils.mulAndCheck((long) (short)11, (long) (short)11);
      long long1 = MathUtils.addAndCheck(1665L, (-2644281811660520851L));
      long long2 = (-551L);
      long long3 = MathUtils.gcd((-1807L), (-551L));
      int int0 = (-1056);
      double double1 = MathUtils.scalb((-551L), (-1056));
      double double2 = MathUtils.scalb((-1595.2762372428851), (-1056));
      int int1 = MathUtils.subAndCheck((int) (short)11, (-1056));
      double double3 = MathUtils.binomialCoefficientDouble((short)11, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, (-2925.8399642038));
      int int2 = 138;
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-2644281811660520851L), 138, 1067);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,067, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 1);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double0 = MathUtils.factorialLog(129);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 501.2652908915794;
      doubleArray0[3] = 758.71;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4178.318799814;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.087, 790.0, 790.0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 790.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 790.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0L;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = MathUtils.indicator((-2138L));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((double) (-2138L), (double) (-2138L), 129);
      int int0 = 4194304;
      int int1 = MathUtils.addAndCheck(4194304, 15);
      int int2 = MathUtils.indicator(15);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-715));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -715
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign(279.10320109512);
      int int0 = MathUtils.hash((-2308.6917372376674));
      short short0 = MathUtils.sign((short)1);
      long long0 = MathUtils.lcm((long) (short)1, (long) (short)1);
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = 2749.2422072;
      boolean boolean0 = MathUtils.equals(0.0, (-373.4092393), 2749.2422072);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2162, 2147483620);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2147473629), (-2147473629));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-941.499635631971);
      doubleArray0[1] = (-2441.0961900565);
      doubleArray0[2] = 2886.5;
      doubleArray0[3] = 0.125;
      doubleArray0[4] = (-688.1286118547811);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      MathUtils.factorialLog(2147104969);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-116.39472);
      doubleArray0[3] = 452.0115072;
      doubleArray0[4] = 1.1102230246251565E-16;
      doubleArray0[5] = 3085.853;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = MathUtils.sign((-4927L));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.round((-1.0), 0);
      long long1 = MathUtils.addAndCheck((-4927L), (-4927L));
      int int1 = MathUtils.pow((-831), 0);
      double double1 = MathUtils.binomialCoefficientLog(0, (-831));
      int[] intArray0 = new int[2];
      intArray0[0] = 2388;
      intArray0[1] = 1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1, (double) 1, 4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = MathUtils.sign((short)790);
      long long0 = MathUtils.indicator((-2651L));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) (short)1, (int) (short)790);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.indicator((-2644281811660520851L));
      Random.setNextRandom(117);
      int int0 = MathUtils.pow(117, 385);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2644281811660520851L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) 117;
      doubleArray0[4] = (double) 385;
      doubleArray0[5] = (double) 385;
      doubleArray0[6] = (double) 117;
      doubleArray0[7] = (double) (-2644281811660520851L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.subAndCheck((-1L), 4148L);
      boolean boolean1 = MathUtils.equals((-2.6033824355191673E-8), (double) 117, 57);
      Random.setNextRandom((-510));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 455);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 455;
      doubleArray0[1] = (double) 455;
      doubleArray0[2] = (double) 455;
      doubleArray0[3] = (double) 455;
      doubleArray0[4] = (double) 455;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2.0, 2.0);
      float float0 = MathUtils.sign(0.0F);
      int[] intArray0 = new int[4];
      intArray0[0] = (-801);
      intArray0[1] = (-1507);
      intArray0[2] = 1694;
      intArray0[3] = (-3561);
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 2383.981, (double) (-801));
      double double1 = MathUtils.round(376.3139399, (-801));
      int int0 = 10;
      // Undeclared exception!
      try { 
        MathUtils.round(2.2250738585072014E-308, 10, (-3561));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = (-2497);
      int int3 = MathUtils.subAndCheck((-2497), 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.compareTo(3.141592653589793, 0.0, 1);
      float float0 = MathUtils.round((float) 1, 1);
      long long0 = (-1735L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9218868437227405313L), (-1735L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = (short)11;
      short short1 = MathUtils.sign((short)11);
      long long0 = (-1047L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(7910884519577875640L, (-1047L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.round((-435.371435474406), 0, 0);
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-436.0);
      doubleArray0[4] = (double) 0.0F;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.subAndCheck((long) 0, (-2628L));
      double double2 = MathUtils.log(436.0, 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.addAndCheck(0L, (long) 0);
      double double4 = MathUtils.log(0.0, 0.0);
      long long2 = MathUtils.gcd(933L, (long) 0);
      int int1 = MathUtils.compareTo((-435.371435474406), 0L, 0);
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 541.4;
      doubleArray0[0] = 541.4;
      double double1 = (-545.323);
      doubleArray0[1] = (-545.323);
      doubleArray0[2] = (-1954.9978120188);
      doubleArray0[3] = 55.0;
      doubleArray0[4] = 771.3798593723247;
      doubleArray0[5] = (-3109.888107745601);
      double double2 = 1493.790939488724;
      doubleArray0[6] = 1493.790939488724;
      doubleArray0[7] = 767.0;
      doubleArray0[8] = (-2592.733681601859);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2592.733681601859));
      int int0 = 1271;
      int int1 = MathUtils.addAndCheck(1271, 1271);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-545.323), 0.0, 2542);
      long long0 = MathUtils.gcd((-1453L), 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (306.863 >= -309.087)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = MathUtils.round((-2673.8232F), 2501);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = 688.4134607;
      doubleArray0[2] = (double) 2501;
      doubleArray0[3] = (double) 2501;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-2673.8232F);
      doubleArray1[1] = 688.4134607;
      doubleArray1[2] = (double) (-2673.8232F);
      doubleArray1[3] = (double) (-2673.8232F);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 2501;
      doubleArray1[6] = (double) 2501;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = 0;
      float float0 = MathUtils.round(0.0F, 0);
      double double0 = MathUtils.scalb(0, 0);
      int int1 = 0;
      double double1 = MathUtils.binomialCoefficientDouble(20, 0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.compareTo(4043.73431241653, 1752.87139540652, 4043.73431241653);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.not();
      int int1 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      int int2 = MathUtils.hash(0.0);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      BigInteger bigInteger7 = BigInteger.ONE;
      BigInteger bigInteger8 = bigInteger7.nextProbablePrime();
      BigInteger bigInteger9 = MathUtils.pow(bigInteger7, 240);
      int int3 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.binomialCoefficientLog(1783, (-238));
      int int0 = MathUtils.addAndCheck((-238), 0);
      float float0 = MathUtils.round((float) 0, 61, 0);
      short short0 = MathUtils.indicator((short) (-3353));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.lcm((long) 0, (long) (-238));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1783, (double) 0.0F);
      double double2 = MathUtils.round((-3046.969404181637), 0);
      int int1 = MathUtils.compareTo(0.0, 0.0, 0.0);
      int int2 = MathUtils.compareTo(0.0, 10.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.pow(4045, (long) 4045);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4045;
      doubleArray0[1] = (double) 4045;
      doubleArray0[2] = (double) (-1198401091);
      doubleArray0[3] = 653.59;
      doubleArray0[4] = (double) 4045;
      doubleArray0[5] = (double) (-1198401091);
      doubleArray0[6] = (double) 4045;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 4045;
      intArray0[1] = 4045;
      intArray0[2] = (-552);
      intArray0[3] = (-1198401091);
      intArray0[4] = 4045;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1049.3604094325), 1454.42056874469);
      long long0 = MathUtils.lcm((-189L), (-189L));
      int int0 = 7;
      int int1 = MathUtils.subAndCheck(2481, 7);
      int int2 = MathUtils.pow(2474, 4398046511103L);
      // Undeclared exception!
      try { 
        MathUtils.round((-3623.7976F), 2481, (-1792));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,792, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.2250738585072014E-308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.1428571423679182);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.gcd(0L, 40320L);
      int int1 = MathUtils.hash((-1585.398775085533));
      double double1 = MathUtils.round(0.0, (-199));
      double double2 = MathUtils.scalb(0, 2029);
      int int2 = MathUtils.gcd(0, 1623);
      float float0 = MathUtils.round(1221.1412F, 1141);
      double double3 = MathUtils.sinh((-1729741100));
      long long1 = MathUtils.pow((-626L), 0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double double4 = MathUtils.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-2538);
      int int1 = MathUtils.sign((-2538));
      int int2 = 1548;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3189.7), 0.07692307692307693, 1548);
      int int3 = MathUtils.indicator((-1));
      long long0 = MathUtils.sign(2819561105158720014L);
      int int4 = 0;
      int int5 = MathUtils.gcd((-2538), 0);
      long long1 = MathUtils.indicator(1L);
      // Undeclared exception!
      try { 
        MathUtils.round((-943.667F), 2538, 1548);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,548, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.25, 1.25);
      long long0 = MathUtils.gcd(0L, 9223372036854775807L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9223372036854775807L;
      doubleArray0[1] = 1.25;
      doubleArray0[2] = 1.25;
      doubleArray0[3] = 1.25;
      doubleArray0[4] = 1.25;
      doubleArray0[5] = (double) 9223372036854775807L;
      doubleArray0[6] = (double) 9223372036854775807L;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = 1226;
      // Undeclared exception!
      try { 
        MathUtils.lcm((-591319841), 1226);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-21));
      long long0 = MathUtils.pow((long) (byte) (-21), 123);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 123;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 87;
      intArray0[5] = (int) (byte) (-21);
      intArray0[6] = 123;
      intArray0[7] = (int) (byte) (-1);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte1 = MathUtils.sign((byte)7);
      double double0 = MathUtils.sign((double) 123);
      int int1 = MathUtils.sign((-340));
      double double1 = MathUtils.indicator(0.0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = (int) (byte)1;
      intArray1[1] = 0;
      intArray1[2] = (int) (byte) (-1);
      intArray1[3] = (-1);
      intArray1[4] = (-340);
      intArray1[5] = (int) (byte)1;
      intArray1[6] = 87;
      intArray1[7] = 2;
      double double3 = MathUtils.distance(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)0, (double) (byte)1, (double) (byte)1);
      float float0 = MathUtils.round((float) (byte)0, 79, (int) (byte)1);
      int int0 = MathUtils.mulAndCheck((int) (byte)1, 0);
      double double0 = MathUtils.indicator((double) (byte)1);
      double double1 = MathUtils.round((double) 0.0F, 0);
      boolean boolean1 = MathUtils.equals((double) 0.0F, (double) 0.0F, 0.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      double double0 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = bigInteger0.toByteArray();
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger1);
      int int0 = MathUtils.indicator(663);
      float float0 = MathUtils.indicator((-301.2F));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 663;
      intArray0[4] = (-2397);
      intArray0[5] = 663;
      intArray0[6] = 663;
      intArray0[7] = 663;
      intArray0[8] = 1;
      int[] intArray1 = new int[9];
      intArray1[0] = 663;
      intArray1[1] = 663;
      intArray1[2] = 218;
      intArray1[3] = (-2397);
      intArray1[4] = (-2397);
      intArray1[5] = 663;
      intArray1[6] = (-2397);
      intArray1[7] = 0;
      intArray1[8] = 663;
      int int1 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = (-1096);
      int int0 = (-1224);
      intArray0[2] = (-1224);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(0, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: 0 - -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1631L), (-1631L));
      float float0 = MathUtils.sign((float) (-3262L));
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals(1.304E19, (double) (-1631L), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-159L), 2147483648L);
      float float0 = MathUtils.round((-1949.28F), 0, 0);
      float float1 = MathUtils.indicator((-1949.28F));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.pow((-1755L), 1669);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.subAndCheck(4696, 0);
      byte byte0 = MathUtils.indicator((byte)39);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1.0F), 4696, (-663));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2043.2, 2043.2, 2043.2);
      long long0 = 2442L;
      long long1 = MathUtils.gcd(2442L, 2442L);
      long long2 = MathUtils.mulAndCheck(1272L, 2442L);
      int int0 = MathUtils.lcm(484, 484);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2442L;
      doubleArray0[1] = (double) 3106224L;
      doubleArray0[2] = (double) 2442L;
      doubleArray0[3] = 2043.2;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long3 = MathUtils.addAndCheck((-154L), 0L);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1272L;
      doubleArray1[1] = (double) 484;
      doubleArray1[2] = 2043.2;
      doubleArray1[3] = (double) 2442L;
      doubleArray1[4] = 2043.2;
      doubleArray1[5] = (double) 1272L;
      doubleArray1[6] = (double) 2442L;
      doubleArray1[7] = (double) (-154L);
      double[] doubleArray2 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray2);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.016, 0.1818181574344635);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = (-284L);
      try { 
        MathUtils.pow((-284L), (-284L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-284^-284)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 18);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 16;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 16);
      int int1 = (-575);
      int int2 = 0;
      int int3 = MathUtils.lcm((-575), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-575));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -575
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 216);
      long long0 = MathUtils.mulAndCheck(40320L, 4398046511103L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-977);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-977));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -977
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 23);
      short short0 = MathUtils.indicator((short)90);
      boolean boolean0 = MathUtils.equals(2672.878, 2672.878, (int) (short)1);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString(23);
      BigInteger bigInteger1 = BigInteger.valueOf((short)90);
      int int0 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, (-2171));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,171)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.sinh(0.036);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0360077765039003;
      doubleArray0[1] = 1.1430250008909141E-8;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.scalb(0.0360077765039003, (-1154168132));
      // Undeclared exception!
      try { 
        MathUtils.round((-1.8940579792309595E209), (-1154168132));
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 20;
      intArray0[1] = 6;
      intArray0[2] = 109;
      intArray0[3] = 14;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 6;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(109, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (6 < 14)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 402L);
      double double0 = MathUtils.log((-203.81286232815), (-203.81286232815));
      long long1 = MathUtils.pow(973L, 0L);
      int int0 = (-4714);
      // Undeclared exception!
      try { 
        MathUtils.equals((-203.81286232815), (-4631.6418767), (-4714));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(0.0, 0);
      byte byte0 = MathUtils.indicator((byte) (-121));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-6.032174644509064E-23);
      doubleArray0[1] = 2420.7597;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 1568.76711093093;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1683);
      intArray0[1] = 113;
      intArray0[2] = 11;
      intArray0[3] = 0;
      intArray0[4] = 1226;
      intArray0[5] = (-1108);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1643;
      long long0 = MathUtils.pow(5648769086999809661L, 1643);
      int int1 = 369;
      int int2 = MathUtils.indicator(369);
      int int3 = MathUtils.indicator(369);
      long long1 = MathUtils.lcm((long) 1, (long) 1);
      long long2 = MathUtils.lcm(465L, 4086L);
      long long3 = MathUtils.lcm(465L, 1L);
      double double0 = MathUtils.factorialDouble(1);
      double double1 = MathUtils.factorialDouble(89);
      byte byte0 = MathUtils.indicator((byte) (-128));
      boolean boolean0 = MathUtils.equals(1.6507955160909186E136, 0.0, (double) 4086L);
      double double2 = MathUtils.cosh(1L);
      double double3 = MathUtils.indicator(0.0);
      float float0 = MathUtils.round((float) 633330L, (int) (byte) (-1));
      boolean boolean1 = MathUtils.equalsIncludingNaN(6.283185307179586, 1.5430806348152437, 1003);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 89);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 31;
      double double0 = MathUtils.factorialDouble(31);
      // Undeclared exception!
      try { 
        MathUtils.factorial(31);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      byte byte0 = MathUtils.indicator((byte)97);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger3 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      float float1 = bigInteger0.floatValue();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 6L);
      double double0 = MathUtils.round((double) (byte)1, (int) (byte)97);
      byte byte1 = MathUtils.indicator((byte)1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1818.8777238755;
      doubleArray0[1] = 477.17;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 226.84765;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-889.14), 0.0, 591311854);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 477.17;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 226.84765;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-889.14), 0.0, 1522524461);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-4527L), 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4527L);
      doubleArray0[1] = (double) (-4527L);
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, 0.0, 2.0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((-1));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = 1749.8;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-1559.38982);
      doubleArray1[5] = (double) (-4527L);
      doubleArray1[6] = 2.0;
      doubleArray1[7] = (double) (-4527L);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)53);
      double double0 = MathUtils.round((double) (byte)1, 11);
      double double1 = 949.6217534931002;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-927.386633104), (double) 11, 949.6217534931002);
      double double2 = 5206.625170758;
      boolean boolean1 = MathUtils.equals(5206.625170758, 0.0, (int) (byte)53);
      double double3 = MathUtils.sinh(1.0);
      try { 
        MathUtils.pow(0L, (-4133));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,133)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = MathUtils.round(202.25925F, 0, 0);
      float float1 = MathUtils.round((float) 0, 0, 0);
      int int0 = MathUtils.pow(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 202.25925F;
      doubleArray0[1] = (double) 203.0F;
      doubleArray0[2] = (double) 202.25925F;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 202.25925F;
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.sign((-1680));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1680);
      doubleArray0[3] = (double) (-1680);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.log(817.72407, 817.72407);
      int int0 = (-618);
      try { 
        MathUtils.pow((-618), (long) (-618));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-618^-618)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1701.06075811);
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      long long1 = MathUtils.gcd(0L, (long) 0);
      long long2 = MathUtils.addAndCheck(0L, (long) 0);
      double double3 = MathUtils.safeNorm(doubleArray1);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double double4 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.subAndCheck(267, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      int int2 = MathUtils.hash((double) 0);
      long long1 = MathUtils.lcm((long) 267, (long) 267);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 267L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(Float.NaN, 0);
      byte byte0 = MathUtils.sign((byte)0);
      float float1 = MathUtils.sign((float) (byte)0);
      double double0 = MathUtils.round(95.4680022, 1215);
      double double1 = MathUtils.log(3754.1763293826943, (byte)0);
      boolean boolean0 = MathUtils.equals((-808.6), (-1902.372655885));
      long long0 = MathUtils.pow((long) 0, 1);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 2);
      short short0 = MathUtils.sign((short) (-1303));
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2499L);
      short short1 = MathUtils.sign((short) (-1303));
      long long1 = MathUtils.gcd((long) (short) (-1), (long) 2);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1L;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 2);
      BigInteger bigInteger0 = BigInteger.TEN;
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2499L);
      short short0 = MathUtils.sign((short) (-1303));
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (short) (-1);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-405.37785962165);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2147.0);
      doubleArray0[3] = (-650.9777409116655);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2147.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-650.9777409116655);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-405.37785962165);
      doubleArray1[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short short0 = MathUtils.indicator((short)217);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)217;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)217;
      intArray0[5] = (int) (short)217;
      intArray0[6] = (-34);
      intArray0[7] = (int) (short)217;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck(2990L, (long) 1);
      double double1 = MathUtils.factorialLog(1);
      float float0 = MathUtils.round(0.0F, 1);
      long long1 = MathUtils.addAndCheck(5040L, 0L);
      int int0 = MathUtils.lcm((-34), (int) (short)217);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = 2688L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(9154082963658192752L, 2688L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round((-1.0E-6), 0, 0);
      int int1 = MathUtils.pow(0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 4295);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 4,295
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1307674368000L, 1307674368000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) Float.NaN;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb(2635.4737814, 0);
      double double2 = MathUtils.factorialLog(0);
      int int0 = MathUtils.sign(3238);
      int int1 = MathUtils.subAndCheck(3238, 3238);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 2264);
      long long0 = MathUtils.gcd((long) 2264, (long) 2264);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      short short0 = (short) (-2347);
      short short1 = MathUtils.indicator((short) (-2347));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight((-3126));
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      float float0 = MathUtils.round(0.0F, 1030);
      int int0 = MathUtils.lcm((-258), 1030);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(21, 643);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 21, k = 643
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 604;
      intArray0[2] = 166;
      intArray0[3] = 2530;
      intArray0[4] = 4194304;
      int[] intArray1 = new int[7];
      intArray1[0] = 604;
      intArray1[1] = 2370;
      intArray1[2] = 4194304;
      intArray1[3] = 4194304;
      intArray1[4] = 604;
      intArray1[5] = 604;
      intArray1[6] = 604;
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-760);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-760));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -760
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.hash((-1.0));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1074790400);
      doubleArray0[1] = (double) (-1074790400);
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 243;
      int int1 = MathUtils.indicator(243);
      long long0 = MathUtils.indicator((long) 243);
      int[] intArray0 = new int[1];
      intArray0[0] = 243;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(2066, 0);
      short short0 = (short)1784;
      short short1 = MathUtils.indicator((short)1784);
      // Undeclared exception!
      try { 
        MathUtils.equals((-5069.2), 0.0, (-300));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-19), 1);
      double double0 = MathUtils.binomialCoefficientDouble(8, (-1276));
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, (double) (-1276));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.indicator((-1185.9198797118));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        MathUtils.pow((-244), (-244));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-244^-244)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-1591);
      int int1 = 0;
      int int2 = MathUtils.subAndCheck((-1591), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-1591));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,591)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2424);
      intArray0[2] = 0;
      intArray0[3] = (-1435);
      int int0 = MathUtils.distance1(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(72.0, 72.0);
      int int0 = MathUtils.subAndCheck(0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 17.0, 17.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1174.0);
      doubleArray0[2] = 2736.0;
      int int0 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2736.0);
      int int1 = MathUtils.indicator((-1839301537));
      int int2 = MathUtils.hash((double) (-1839301537));
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.cosh((-2600.1));
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      long long0 = MathUtils.indicator((long) (-1));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2120.0676088456075, (double) (-1839301537), (-2016));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.indicator((-4249));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = (-632L);
      long long1 = MathUtils.gcd((-632L), 0L);
      long long2 = MathUtils.subAndCheck((-1857L), (-1857L));
      int int0 = MathUtils.lcm(1928, 1928);
      long long3 = 844L;
      long long4 = MathUtils.pow((-632L), 844L);
      int int1 = MathUtils.compareTo(632L, (-2430.847020006479), 0.0);
      int int2 = 195;
      int int3 = MathUtils.mulAndCheck(1928, 195);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-603), (-1025));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -603
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3169);
      intArray0[1] = 2617;
      intArray0[2] = (-3136);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) (-3136), (long) (-3169));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3486.5821;
      doubleArray0[1] = (-634.46);
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.lcm(0L, (long) (-1064584996));
      boolean boolean0 = MathUtils.equalsIncludingNaN(3486.5821, (double) 0L, 2297.6);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-7);
      intArray0[2] = 1336;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.indicator((-5027L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-5027L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-5027L);
      doubleArray0[3] = (double) (-5027L);
      doubleArray0[4] = (double) (-1L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.mulAndCheck((-231), 0);
      int int1 = MathUtils.gcd(0, 0);
      int int2 = MathUtils.sign(0);
      long long0 = MathUtils.addAndCheck(790L, (long) 0);
      int int3 = MathUtils.hash(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1529);
      intArray0[1] = (-3484);
      intArray0[2] = (-650);
      intArray0[3] = (-570);
      intArray0[4] = 63;
      intArray0[5] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-41.0), (-41.0), (-41.0));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = MathUtils.scalb(0.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-80.317132432), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = MathUtils.lcm((-1249L), 1188L);
      double double0 = MathUtils.scalb((-1249L), 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1483812L;
      doubleArray0[1] = (double) 1483812L;
      doubleArray0[2] = (double) 1188L;
      doubleArray0[3] = (double) (-1249L);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1249L);
      doubleArray0[6] = (double) 1188L;
      doubleArray0[7] = (double) (-1249L);
      doubleArray0[8] = (-1249.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-1,249 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-1128);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1128), (-1128));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,128
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 18;
      int int1 = MathUtils.sign(18);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 243.579;
      double double1 = MathUtils.scalb(243.579, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 243.579;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 243.579;
      doubleArray0[3] = 243.579;
      doubleArray0[4] = 243.579;
      doubleArray0[5] = 243.579;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (1 < 243.579)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.mulAndCheck(1L, (long) 0);
      double double0 = MathUtils.sign((double) 1L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.log(-0.0, -0.0);
      float float0 = MathUtils.indicator((-821.2011F));
      double double1 = MathUtils.normalizeAngle(499.4566366334, 0.0);
      int int0 = MathUtils.hash((-4890.541435526));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 499.4566366334;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.sign((double) 0);
      float float0 = MathUtils.round((-751.4236F), (-2520));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2520);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) Float.NaN;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,520 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-373.4092393), 2749.2422072);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int int1 = (-1739);
      int int2 = (-1420);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (-1739), (-1420));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2642.25745, 2642.25745, 2642.25745);
      double double0 = MathUtils.sign(0.0);
      try { 
        MathUtils.pow(1091L, (-7763781175803683L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,091^-7,763,781,175,803,683)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 120.83238308304;
      doubleArray0[2] = 2324.0914981;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 120.83238308304);
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.hash(doubleArray1);
      byte byte0 = MathUtils.sign((byte) (-98));
      int int2 = MathUtils.gcd((int) (byte) (-1), 6);
      float float0 = MathUtils.indicator(975.87445F);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 0;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = 1543597504;
      intArray0[4] = 0;
      intArray0[5] = (-176);
      intArray0[6] = 0;
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = 1;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-100));
      float float0 = MathUtils.sign((-1.0F));
      short short0 = MathUtils.sign((short) (byte) (-1));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 288.2876469384);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (byte) (-100);
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(280, 560);
      short short0 = MathUtils.sign((short)571);
      int int1 = MathUtils.sign(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-205.80569104), (double) 280);
      int int2 = MathUtils.lcm((-1739), 560);
      short short1 = MathUtils.sign((short)1);
      double double1 = MathUtils.scalb(0.3, 1013);
      int int3 = MathUtils.addAndCheck(1013, (-305));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.lcm((-369), (-369));
      boolean boolean0 = MathUtils.equals((double) 369, 3294198.0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-369));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -369
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.sign((-499.15214036));
      int int0 = MathUtils.subAndCheck(604, 313);
      int int1 = (-1754);
      int int2 = MathUtils.addAndCheck((-1754), 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 291;
      doubleArray0[1] = (-499.15214036);
      doubleArray0[2] = (double) 291;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = 533.3825551200495;
      // Undeclared exception!
      try { 
        MathUtils.equals((-1.0), 533.3825551200495, (-1754));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.gcd((-1815), 178);
      boolean boolean0 = MathUtils.equals((double) 1, 0.0, (double) 1);
      long long0 = MathUtils.gcd(0L, (long) 1);
      double double0 = MathUtils.log(Float.NaN, Float.NaN);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0L;
      double double1 = MathUtils.safeNorm(doubleArray0);
      double double2 = MathUtils.log(3294198.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-176L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 176L;
      doubleArray0[1] = (double) (-176L);
      doubleArray0[2] = (double) 176L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.gcd(12, 12);
      float float0 = MathUtils.round(899.0F, 0);
      int int1 = MathUtils.indicator(0);
      short short0 = MathUtils.sign((short) (-3512));
      int int2 = MathUtils.pow((-1076), 12);
      long long0 = MathUtils.sign((-3183605296591799669L));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(14);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = 8.71782912E10;
      doubleArray0[2] = (double) 14;
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.indicator(14.0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.binomialCoefficientLog(23, 0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1986));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,986
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.lcm(720L, 720L);
      long long1 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3522L), (-811L));
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (-1903);
      intArray0[3] = 2678;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3342L), (-3342L));
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(7, 7);
      long long0 = MathUtils.sign((long) 7);
      byte byte0 = MathUtils.indicator((byte)75);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.sign((-2881L));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.pow(61, 0L);
      double double1 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator((float) 1);
      double double2 = MathUtils.binomialCoefficientLog(848, 1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3967.222073982946);
      doubleArray0[1] = 3829.10488892;
      doubleArray0[2] = (-1561.3608819971);
      doubleArray0[3] = 1051.5776557;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,829.105 >= -1,561.361)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      int int1 = (-54);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 0, (-54));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -54, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = (-1.9841269659586505E-4);
      boolean boolean0 = MathUtils.equals((-1.9841269659586505E-4), (-350.43660039477));
      int int0 = 35;
      int int1 = 0;
      float float0 = MathUtils.round((-2209.4578F), 35, 0);
      int int2 = (-768);
      try { 
        MathUtils.pow((-1082L), (-768));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,082^-768)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2088.7;
      doubleArray0[1] = 33.96514536;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-1818.921934363);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,088.7 >= 33.965)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)62);
      long long0 = MathUtils.gcd((long) (byte)1, (-1L));
      double double0 = MathUtils.sign((double) (byte)1);
      int int0 = MathUtils.lcm((int) (byte)62, 0);
      long long1 = MathUtils.sign(320L);
      int int1 = MathUtils.mulAndCheck(4, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-9223372036854775808L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-9,223,372,036,854,775,808)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = (short) (-3293);
      short short1 = MathUtils.indicator((short) (-3293));
      long long0 = 1715L;
      long long1 = MathUtils.indicator(1715L);
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.sinh((short) (-3293));
      try { 
        MathUtils.pow((long) (short) (-1), (int) (short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.sign(4564L);
      long long1 = MathUtils.pow(0L, 0);
      int int0 = MathUtils.pow(1750, 0);
      float float0 = MathUtils.round((-1.0F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.hash(460.3);
      double double0 = 1.1102230246251565E-16;
      double double1 = MathUtils.scalb(1.1102230246251565E-16, (-1934620671));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1934620671), (-1934620671));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,934,620,671
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.lcm(408L, 408L);
      int int0 = MathUtils.sign(102);
      double double0 = MathUtils.scalb(408L, 102);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = bigInteger0.compareTo(bigInteger1);
      boolean boolean0 = bigInteger0.equals(object0);
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double2 = MathUtils.normalizeAngle(408L, 102);
      double double3 = MathUtils.normalizeAngle(4.455505956692757, (-112.01868833));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = MathUtils.round((-2692.328F), 155);
      double double0 = MathUtils.scalb(Float.NaN, 155);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-3141);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-3141), (-3141));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,141
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.sign((int) (short)1);
      int int1 = MathUtils.indicator(767);
      double double0 = MathUtils.round(1419.489109631, 1, 1);
      boolean boolean1 = MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-257.0);
      doubleArray0[1] = (-1339.02);
      doubleArray0[2] = 4175.3412312;
      doubleArray0[3] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.gcd((-3958705157555305932L), 120L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 12L;
      doubleArray0[1] = (double) 12L;
      doubleArray0[2] = (double) (-3958705157555305932L);
      doubleArray0[3] = (double) (-3958705157555305932L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)205);
      short short1 = MathUtils.indicator((short)3142);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign((-47L));
      long long2 = MathUtils.mulAndCheck((-238L), 0L);
      byte byte0 = MathUtils.indicator((byte) (-11));
      int int0 = MathUtils.compareTo(1397.2196, 117.0, 120L);
      int int1 = MathUtils.mulAndCheck((-1526), (int) (short)3142);
      short short2 = MathUtils.sign((short) (-1789));
      long long3 = MathUtils.factorial(3);
      long long4 = MathUtils.subAndCheck(642L, (-844L));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 15;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 15, 651);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 651, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float1 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.gcd(630, (-935));
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean1 = bigInteger0.isProbablePrime(2064);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(247.87775035189, 1501.13487);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.log(0L, 2.404307984052299E-9);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3116.973));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 128.121;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1.375;
      doubleArray0[5] = (-4347.2014749);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = 3.834E-20;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathUtils.cosh(885.1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 885.1;
      doubleArray0[3] = 885.1;
      doubleArray0[4] = 885.1;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 885.1;
      doubleArray1[4] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      long long0 = MathUtils.binomialCoefficient(1920, 1920);
      boolean boolean1 = MathUtils.equals(Double.NaN, (double) 1920, -0.0);
      boolean boolean2 = MathUtils.equals(1.1102230246251565E-16, (double) 1920);
      long long1 = MathUtils.binomialCoefficient(1920, (-741));
      int int0 = MathUtils.pow(1920, (long) 1920);
      double double2 = MathUtils.round(1028.23736, 0);
      short short0 = MathUtils.indicator((short)735);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4.0;
      doubleArray0[1] = Double.NaN;
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.sign(279.10320109512);
      int int0 = MathUtils.hash((-2308.6917372376674));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-287.00965);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.round((-2715.568856688617), 0);
      boolean boolean0 = MathUtils.equals((-287.00965), 1.1102230246251565E-16, (-2522.7743515141));
      long long0 = MathUtils.indicator(6L);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 6L;
      doubleArray1[3] = 0.10526403784751892;
      doubleArray1[4] = (double) 6L;
      doubleArray1[5] = (-2715.568856688617);
      doubleArray1[6] = 1.1102230246251565E-16;
      doubleArray1[7] = (-2716.0);
      double double3 = MathUtils.safeNorm(doubleArray1);
      float float0 = MathUtils.sign(1229.1688F);
      double double4 = MathUtils.round((-287.00965), 16);
      float float1 = MathUtils.round(2613.4478F, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("cannot compute nth root for null or negative n: {0}");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.cannot compute nth root for null or negative n: {0}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.factorialLog(66);
      double double1 = MathUtils.round(258.4, (-1725));
      long long0 = MathUtils.lcm((long) 66, (-92L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("cannot set an element at a negative index {0}");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.cannot set an element at a negative index {0}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = MathUtils.round((-1150.0F), 710);
      long long0 = MathUtils.pow(0L, 1677);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.gcd((long) 1677, (-340L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-340L), 1.304E19, 710);
      int int0 = MathUtils.pow(430, 430);
      double double0 = MathUtils.round((double) 1L, 0);
      int int1 = MathUtils.indicator(0);
      double double1 = MathUtils.binomialCoefficientLog(2716, (-94));
      float float1 = MathUtils.round((float) 1, (-217));
  }
}
