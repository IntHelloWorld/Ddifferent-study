/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:34:48 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.097, (-1230.39), 18);
      long long0 = MathUtils.pow((long) 18, 18);
      double double0 = MathUtils.cosh(Double.NaN);
      int int0 = MathUtils.lcm(18, 18);
      long long1 = MathUtils.binomialCoefficient(18, 18);
      double double1 = MathUtils.factorialDouble(18);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 18;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialLog(18);
      MathUtils.checkOrder(doubleArray0);
      double double4 = MathUtils.sign(1.304E19);
      double double5 = MathUtils.scalb(1.0, 18);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(Double.NaN, 18.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double6 = MathUtils.normalizeAngle(262144.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = MathUtils.indicator(2146301763);
      int[] intArray0 = new int[4];
      intArray0[1] = 2146301763;
      intArray0[2] = 1;
      intArray0[3] = 2146301763;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.pow(3244, (long) 2146301763);
      int int2 = 582;
      double double1 = MathUtils.factorialLog(582);
      // Undeclared exception!
      MathUtils.factorialLog(2146301763);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-337);
      int int1 = MathUtils.sign((-337));
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(-0.0, 1.1102230246251565E-16, 2147474284);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.lcm((-3512299194304650054L), (-3512299194304650054L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3512299194304650054L;
      doubleArray0[1] = (double) 3512299194304650054L;
      doubleArray0[2] = (double) (-3512299194304650054L);
      doubleArray0[3] = (double) 3512299194304650054L;
      doubleArray0[4] = (double) (-3512299194304650054L);
      doubleArray0[5] = (double) 3512299194304650054L;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = MathUtils.sign(4356.2246F);
      int int0 = MathUtils.indicator(154);
      double double0 = MathUtils.binomialCoefficientLog(154, 1);
      double double1 = MathUtils.log(5.0369526024136295, 1);
      int int1 = MathUtils.mulAndCheck(1, (-1852));
      int int2 = (-472);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(5.0369526024136295, (double) 1.0F, (-472));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.gcd(226, 2);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = MathUtils.sign((short)1030);
      double double0 = MathUtils.scalb((-3212.2006), 603);
      long long0 = MathUtils.mulAndCheck((long) (short)1030, 2317L);
      boolean boolean0 = MathUtils.equals(1619.4306385980842, (double) 2317L);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1030;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1030;
      intArray0[3] = (int) (short)1030;
      intArray0[4] = (int) (short)1030;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(229, 1030);
      int int2 = MathUtils.gcd(10, 4);
      double double1 = MathUtils.binomialCoefficientDouble(4, 1);
      int int3 = MathUtils.indicator((-859));
      int int4 = MathUtils.lcm(1, (-1143));
      byte byte0 = MathUtils.sign((byte)31);
      int int5 = MathUtils.indicator((-859));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(1135.6045F, 230);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 2147483645;
      int int1 = MathUtils.pow(2147483645, 2147483645);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 397682157;
      doubleArray0[1] = (double) 397682157;
      doubleArray0[2] = (double) 397682157;
      doubleArray0[3] = (double) 2147483645;
      doubleArray0[4] = (double) 2147483645;
      doubleArray0[5] = (double) 2147483645;
      doubleArray0[6] = (double) 2147483645;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (397,682,157 <= 397,682,157)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1578), (-1578));
      long long0 = MathUtils.indicator((long) (-3156));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-3156);
      doubleArray0[2] = (double) (-1578);
      doubleArray0[3] = (double) (-1578);
      doubleArray0[4] = (double) (-1578);
      doubleArray0[5] = (double) (-1578);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1578.0));
      int[] intArray0 = new int[3];
      intArray0[0] = (-1578);
      intArray0[1] = (-3156);
      intArray0[2] = 2859;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int3 = MathUtils.mulAndCheck((-3156), (-3156));
      double double0 = MathUtils.cosh((-3156));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger("ROUND_UNNECESSARY", (-529));
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = MathUtils.lcm(2147483647L, 2147483647L);
      long long1 = MathUtils.binomialCoefficient(2456, (-297));
      boolean boolean0 = MathUtils.equals((-1200.243507601), (-1740.6795));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1200.243507601);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1740.6795);
      doubleArray1[1] = (double) 2456;
      doubleArray1[2] = (double) 2147483647L;
      doubleArray1[3] = 0.3;
      doubleArray1[4] = (-4666.362252851);
      doubleArray1[5] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      int int0 = MathUtils.lcm((-297), (-297));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      byte byte0 = MathUtils.sign((byte) (-20));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 20;
      double double0 = MathUtils.factorialDouble(20);
      int int1 = (-856);
      int int2 = MathUtils.indicator((-856));
      double double1 = 3.141592653589793;
      double double2 = MathUtils.normalizeAngle(2.43290200817664E18, 3.141592653589793);
      try { 
        MathUtils.pow(20, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (20^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)6);
      int int0 = MathUtils.compareTo((byte)6, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int1 = MathUtils.compareTo((byte)1, 0.0, 0.0);
      double double0 = MathUtils.scalb(0.3333333333332802, (-4310));
      double double1 = MathUtils.binomialCoefficientLog(20, (byte)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.lcm(0L, (long) (-4310));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 20;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      double double3 = MathUtils.distance1(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-4));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = 0.0;
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.binomialCoefficientDouble(0, (-2097));
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.sign((long) (-2097));
      int int1 = MathUtils.mulAndCheck((-2097), 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double2 = mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.hash(Double.NaN);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2146959360, (double) 2146959360);
      double double0 = MathUtils.log(0.0, 0.0);
      float float0 = MathUtils.round((-1466.1833F), 2146959360, 0);
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2146959360, 2146959360);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,146,959,360 + 2,146,959,360
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 3199);
      int int0 = MathUtils.hash(0.0);
      long long0 = MathUtils.subAndCheck((long) 3199, (long) 3199);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 3199);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 61;
      intArray0[1] = (-1105);
      intArray0[2] = (-4140);
      intArray0[3] = 0;
      intArray0[4] = (-2220);
      intArray0[5] = (-677);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-320.095), 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 61, Double.POSITIVE_INFINITY, (double) (-2220));
      double double0 = MathUtils.normalizeAngle((-4140), 0.08713622391223907);
      long long0 = MathUtils.subAndCheck((-1400L), (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.08713622391223907;
      doubleArray1[2] = (double) (-2220);
      doubleArray1[3] = (double) (-1105);
      doubleArray1[4] = (double) 61;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (-4140);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 21.0;
      doubleArray0[1] = (-858.37573366222);
      doubleArray0[2] = 0.058823529411764705;
      double double0 = 175.0;
      doubleArray0[3] = 175.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = 0;
      double double2 = MathUtils.round((double) 0, 0, 0);
      boolean boolean1 = MathUtils.equals(175.0, 21.0, 0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.negate();
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      int int2 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger3 = bigInteger0.not();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.5, 0.058823529411764705, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = MathUtils.lcm((-1830), 234);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 15.66688;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.5;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (15.667 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-961);
      int int0 = (-1181);
      intArray0[3] = (-1181);
      intArray0[4] = 174;
      intArray0[5] = 71;
      intArray0[6] = (-36);
      int int1 = 221;
      intArray0[7] = 221;
      intArray0[8] = 142;
      int[] intArray1 = new int[5];
      intArray1[0] = (-961);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 174;
      intArray1[4] = 71;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.gcd(3184L, 1017L);
      float float0 = MathUtils.indicator((float) 1L);
      long long1 = MathUtils.mulAndCheck(1017L, 1017L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2507.759), (double) 1L);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals(0.0, (double) 1L, (double) 1034289L);
      int int0 = MathUtils.gcd(5, 16);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)56;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      boolean boolean1 = MathUtils.equals(0.0, (-949.0589));
      float float0 = MathUtils.indicator(1.0F);
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 141.00658430170333, 171);
      double double0 = MathUtils.round((double) 171, 171);
      int int0 = MathUtils.gcd(14, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 171);
      float float0 = MathUtils.sign((float) 171);
      float float1 = MathUtils.indicator((-2332.1F));
      int int1 = MathUtils.hash(0.0036);
      int int2 = MathUtils.compareTo(0.0, 0.0, 1.0F);
      long long1 = MathUtils.addAndCheck((-1725L), (-7278142539171889152L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-171L);
      doubleArray0[1] = 0.008333333333333333;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = 0.0036;
      doubleArray0[6] = (double) (-171L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(141.00658430170333, 171.0);
      float float2 = MathUtils.indicator(210.53658F);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 171;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = MathUtils.sinh(333.893206);
      double double1 = MathUtils.sinh((-176.1119));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-176.1119);
      doubleArray0[1] = (-176.1119);
      doubleArray0[2] = (-176.1119);
      doubleArray0[3] = 333.893206;
      doubleArray0[4] = 5.092686181020684E144;
      doubleArray0[5] = (-1.5254443610229633E76);
      doubleArray0[6] = 333.893206;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.subAndCheck(1307674368000L, 1307674368000L);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-122));
      long long0 = MathUtils.mulAndCheck((long) (byte) (-1), 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-122);
      doubleArray0[1] = (-241.09878);
      doubleArray0[2] = (double) (byte) (-122);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (byte) (-122);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.addAndCheck((int) (byte) (-1), (int) (byte) (-1));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) (byte) (-122);
      doubleArray1[2] = (double) (byte) (-1);
      doubleArray1[3] = (double) (byte) (-1);
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = (double) (-2);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (byte) (-1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      try { 
        MathUtils.pow((int) (byte) (-1), (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-554L), (-1184L));
      long long1 = MathUtils.mulAndCheck(0L, (-2983L));
      double double0 = MathUtils.sinh((-1839.62940270951));
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.addAndCheck(595, 595);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-1423);
      try { 
        MathUtils.pow((BigInteger) null, (-1423));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,423)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-214));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.sign(3827);
      long long0 = MathUtils.gcd(6L, (long) 1);
      long long1 = MathUtils.sign(0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3827;
      intArray0[2] = 1;
      intArray0[3] = (int) (short) (-214);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = MathUtils.indicator(3155.1724F);
      int int0 = (-3037);
      try { 
        MathUtils.pow((-2834L), (-3037));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,834^-3,037)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1114);
      intArray0[1] = 0;
      intArray0[2] = (-3853);
      intArray0[3] = 3517;
      intArray0[4] = 16;
      intArray0[5] = 652;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.binomialCoefficient(16, 16);
      int int1 = MathUtils.gcd(1111, 3517);
      try { 
        MathUtils.pow((-2145L), (-197));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,145^-197)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.log((-845.0), 2355.8509931956883);
      float float0 = MathUtils.sign(1.0F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = Double.NaN;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-5261);
      int int1 = 1061;
      int int2 = MathUtils.gcd((-5261), 1061);
      int int3 = 860;
      int int4 = 0;
      float float1 = MathUtils.round((float) 1061, 860, 0);
      float float2 = MathUtils.indicator(1.0F);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int5 = MathUtils.pow(59, 1061);
      float float3 = MathUtils.round((float) 910918539, 1, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-691.0092F), (-1734), 1839);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,839, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 367;
      // Undeclared exception!
      try { 
        MathUtils.factorial(367);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = MathUtils.indicator(6402373705728000L);
      int int0 = 3058;
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(3058, 0);
      double double0 = MathUtils.normalizeAngle(1.1102230246251565E-16, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.1102230246251565E-16;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 1.1102230246251565E-16;
      int int3 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.pow((long) 474572828, 2463L);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int4 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(3058, 12);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)97;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)97);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.indicator(1627);
      long long0 = MathUtils.gcd((long) 1627, 6227020800L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1627;
      doubleArray0[1] = (double) 6227020800L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1627;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = MathUtils.sign((short)353);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.pow((long) (short)1, 1181L);
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.subAndCheck(0, (-2928));
      double double1 = MathUtils.binomialCoefficientDouble(4, 0);
      int int2 = MathUtils.subAndCheck((-2928), 249);
      int int3 = MathUtils.lcm(249, 2928);
      long long1 = MathUtils.lcm(4499201580859392L, (long) 4);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = (-1677);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2928;
      intArray0[7] = 249;
      intArray0[8] = 249;
      int int4 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3.834E-20, (-4358.44572977003));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 2928, 10);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 10, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.scalb(3.0, 213);
      int int0 = MathUtils.pow(0, 2562);
      int int1 = MathUtils.hash((double[]) null);
      long long0 = MathUtils.gcd((long) 0, 4503599627370495L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1702.2, (double) 2562, 243);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round((float) 0, 0);
      double double0 = MathUtils.sign((double) 0);
      int int1 = MathUtils.subAndCheck(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 179.434544612144;
      doubleArray0[4] = 0.1428571343421936;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 8.2;
      doubleArray0[7] = (-586.96381);
      doubleArray0[8] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.addAndCheck(955229700, 955229700);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.cosh((-0.5));
      boolean boolean0 = MathUtils.equals((-0.5), (-0.5), 1541);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(0.0);
      double double2 = MathUtils.binomialCoefficientLog(1541, 0);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double3 = MathUtils.log(1.1276259652063807, 2081.561);
      int int0 = MathUtils.sign(0);
      short short0 = MathUtils.indicator((short)0);
      int int1 = MathUtils.pow(0, (long) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("Tye3z/,ZEkm3''8N8'O");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.Tye3z/,ZEkm3''8N8'O
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 3267;
      int int1 = MathUtils.gcd(3267, 3267);
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(897.0203598253906, 903.8307074349458, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3267;
      doubleArray0[2] = (double) 3267;
      doubleArray0[3] = (double) 3267;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 3267;
      doubleArray0[6] = (double) 3267;
      doubleArray0[7] = 903.8307074349458;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (3,267 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1845;
      double double0 = MathUtils.factorialDouble(1845);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) 1845;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.pow(1845, 1845);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      long long0 = MathUtils.indicator((long) (-328792987));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = (double) 1845;
      doubleArray1[3] = (double) (-1L);
      double double2 = MathUtils.distance(doubleArray1, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1,845 > -1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1243;
      int int1 = MathUtils.pow(1243, (long) 1243);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1243, (double) (-1672201725), (double) (-1672201725));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 1243, (double) (-1672201725), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("<0L1+a{S-O7S/`}PH9");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.<0L1+a{S-O7S/`}PH9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 1330.4691;
      double double1 = MathUtils.cosh(1330.4691);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, 1330.4691, 2.0);
      int int0 = 0;
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(0, 0);
      int int3 = (-2073);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2073));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,073
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.gcd(2819561105158720014L, 2819561105158720014L);
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2060.46354522), (-2846.0), 3925.1846902636);
      short short0 = (short)29;
      short short1 = MathUtils.sign((short)29);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1048.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.indicator((-998.0F));
      int int0 = 61;
      int int1 = MathUtils.mulAndCheck(61, 61);
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2505L), (-2505L));
      short short0 = MathUtils.sign((short)1939);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-234));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -234
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 42.0, 42.0);
      double double1 = MathUtils.indicator(42.0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("scale must be positive ({0})");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.scale must be positive ({0})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      long long0 = (-3236L);
      long long1 = MathUtils.sign((-3236L));
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double1 = MathUtils.log((-1668.569182), 4.455505956692757);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = 4.455505956692757;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1668.569182);
      doubleArray1[3] = (double) (-3236L);
      doubleArray1[4] = (double) (short)0;
      doubleArray1[5] = (-1668.569182);
      doubleArray1[6] = 4.455505956692757;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 4.455505956692757, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.scalb(1385.583, 16);
      long long0 = MathUtils.gcd((long) 16, (long) 16);
      double double1 = MathUtils.round(9.0805567488E7, 16);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2645.065188241509);
      doubleArray0[1] = 9.0805567488E7;
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = (-76L);
      long long1 = MathUtils.gcd(9223372036854775807L, (-76L));
      byte byte0 = (byte) (-60);
      byte byte1 = MathUtils.indicator((byte) (-60));
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 230);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 230;
      doubleArray0[1] = (double) 230;
      doubleArray0[2] = (double) 230;
      doubleArray0[3] = (double) 230;
      doubleArray0[4] = (double) 230;
      doubleArray0[5] = (double) 230;
      doubleArray0[6] = (double) 230;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (-2196.91);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2703.4788360993116;
      doubleArray0[5] = (-1329.8405951065);
      doubleArray0[6] = (-2163.0607607929096);
      doubleArray0[7] = 1225.8429;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.sinh((-2196.91));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.097, (-1230.39), 18);
      long long0 = MathUtils.pow((long) 18, 18);
      double double0 = MathUtils.cosh(Double.NaN);
      int int0 = MathUtils.lcm(18, 18);
      long long1 = MathUtils.binomialCoefficient(18, 18);
      double double1 = MathUtils.round(Double.NaN, 18);
      double double2 = MathUtils.factorialDouble(18);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      double double4 = MathUtils.factorialLog(18);
      MathUtils.checkOrder(doubleArray0);
      double double5 = MathUtils.sign(1.304E19);
      double double6 = MathUtils.scalb(1.0, 18);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double7 = MathUtils.normalizeAngle(262144.0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 1763.609700545);
      double double1 = MathUtils.scalb(0.0, 0);
      int int0 = MathUtils.hash(Double.NaN);
      double double2 = MathUtils.log(0, 0.0);
      double double3 = MathUtils.sinh(Double.NaN);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2146959360;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-6.032174644509064E-23);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 5.669184079525E-24);
      float float0 = MathUtils.indicator((float) 0);
      long long0 = MathUtils.sign((-4498L));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.pow(2210L, 2210L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2210L;
      doubleArray0[1] = (double) 2210L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      int int0 = MathUtils.pow(1265, 1265);
      short short0 = MathUtils.indicator((short)1);
      int int1 = MathUtils.compareTo(44.0628026, 1265, 2210.0);
      int int2 = MathUtils.sign((-2333));
      int int3 = MathUtils.pow(1840700269, 13);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      float float0 = MathUtils.round((-1348.9678F), (int) (short)0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 331;
      intArray0[3] = 281;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = (-1824);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1824));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,824
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-1597.0), (-1597.0));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 370;
      intArray0[1] = 10;
      intArray0[2] = (-51);
      intArray0[3] = (-1992);
      intArray0[4] = 0;
      intArray0[5] = (-417);
      intArray0[6] = 360;
      intArray0[7] = 1427;
      intArray0[8] = (-1516);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) (-417), (double) (-417), (double) (-51));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.addAndCheck(3160, 0);
      long long0 = MathUtils.sign((long) 370);
      // Undeclared exception!
      try { 
        MathUtils.round(522.01984F, (-417), (-417));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -417, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.indicator(9223372036854775807L);
      short short0 = MathUtils.sign((short)0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (-76L), (double) (byte) (-60), (-3237));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1626.076341, 1626.076341, 1214);
      int int0 = 1950;
      int int1 = MathUtils.addAndCheck(1950, 0);
      int int2 = (-2466);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2466));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,466
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-63));
      long long0 = MathUtils.pow((long) (byte) (-1), 1575L);
      double double0 = MathUtils.sinh((-1645.8773699570631));
      double double1 = MathUtils.sign((-1830.1406943));
      float float0 = MathUtils.round((-787.99774F), (int) (byte) (-1));
      long long1 = MathUtils.mulAndCheck((-1L), (long) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-106));
      boolean boolean0 = MathUtils.equals((double) (byte) (-106), (double) (byte) (-1), 61);
      int int0 = MathUtils.hash((double) 61);
      long long0 = MathUtils.pow(0L, 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-106);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-106);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.indicator((-2784.91727));
      int int2 = MathUtils.compareTo((-479.483650482), 0.0, (-1.0));
      long long1 = MathUtils.sign(1L);
      try { 
        MathUtils.pow(9193070505571053912L, (-2972L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (9,193,070,505,571,053,912^-2,972)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)12);
      byte byte1 = MathUtils.sign((byte) (-24));
      double double0 = MathUtils.cosh(2559.0717809757);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 82);
      short short0 = (short)952;
      short short1 = MathUtils.indicator((short)952);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("factorial value is too large to fit in a long");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.factorial value is too large to fit in a long
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      long long0 = 7910884519577875640L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(7910884519577875640L, 1351L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 4499201580859392L);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      double double0 = MathUtils.sinh((byte)0);
      double double1 = MathUtils.binomialCoefficientLog((byte)0, (byte)0);
      long long1 = MathUtils.mulAndCheck((long) (byte)0, 0L);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.sign(1825.419F);
      // Undeclared exception!
      try { 
        MathUtils.lcm(4600427019358961664L, 2047L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.gcd(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("hEx(@>F|");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.hEx(@>F|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck(0L, 4294967295L);
      int int1 = MathUtils.sign(0);
      long long1 = MathUtils.gcd(0L, 0L);
      double double0 = MathUtils.indicator((double) 0);
      double double1 = MathUtils.normalizeAngle(0.0, 150.5749829277878);
      double double2 = MathUtils.log(4294967295L, 0L);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(0.041666666666666664, 0, 0);
      int int1 = 1341;
      int int2 = (-714);
      int int3 = MathUtils.addAndCheck(1341, (-714));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = bigInteger1.doubleValue();
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, 2416L);
      int int4 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.nextInt(0);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = MathUtils.sign((-844L));
      double double0 = 2677.890880877646;
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(2677.890880877646, 0, 10);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      long long0 = MathUtils.sign(355L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-620.579868), (-620.579868), (double) 0);
      long long1 = MathUtils.pow(1L, 3154L);
      long long2 = MathUtils.subAndCheck((long) 0, (long) 0);
      short short0 = MathUtils.indicator((short) (-809));
      int int1 = MathUtils.subAndCheck((int) (short) (-809), (-1353));
      float float0 = MathUtils.round((float) 0L, 14, 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = MathUtils.pow((-1347L), 0L);
      long long1 = MathUtils.sign(0L);
      double double0 = MathUtils.factorialLog(2528);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 210);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 210
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = MathUtils.compareTo(747.8, 747.8, 747.8);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 747.8;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 747.8;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      float float0 = bigInteger0.floatValue();
      // Undeclared exception!
      try { 
        bigInteger0.testBit((-357));
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 459;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      double double0 = MathUtils.distance(intArray0, intArray0);
      try { 
        MathUtils.pow((-908), (long) (-908));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-908^-908)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1280.729573;
      doubleArray0[1] = 1257.4921971686658;
      doubleArray0[2] = 0.1428571343421936;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1280.729573, 0.1428571343421936, (-2333.44));
      int int0 = (-1563);
      try { 
        MathUtils.pow((-1563), (long) (-1563));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,563^-1,563)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 243.13662654083;
      doubleArray0[1] = (-899.0);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator(0.0F);
      int int0 = 20;
      int int1 = 1946;
      int int2 = MathUtils.subAndCheck(20, 1946);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.remainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, (-820.1));
      int[] intArray0 = new int[2];
      intArray0[0] = 4194304;
      intArray0[1] = 3016;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3251.611043);
      doubleArray0[1] = (double) 4194304;
      doubleArray0[2] = 639.268981788474;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 3016;
      doubleArray0[5] = 636.48772;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck((long) 3016, (long) 3016);
      long long1 = MathUtils.indicator((long) 3016);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 4194304;
      intArray1[1] = (-524218539);
      intArray1[2] = 4194304;
      intArray1[3] = 1523;
      intArray1[4] = (-524218539);
      intArray1[5] = (-524218539);
      double double2 = MathUtils.distance(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(581L, 581L);
      int int0 = (-2911);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2911));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,911
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.cosh(2.2250738585072014E-308);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 7910884519577875640L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.gcd((-598L), 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 598L, (double) (-598L));
      int int0 = 199;
      double double0 = MathUtils.scalb(0L, 199);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1524.7906786986364, 0.0);
      double double1 = 3202.5843;
      boolean boolean2 = MathUtils.equals(3202.5843, 0.0, (double) 598L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.indicator(1003.2142);
      double double1 = MathUtils.cosh(1238.8403052187);
      int int0 = 195;
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 0.0, 195);
      int int1 = 244;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 244);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 244
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      long long1 = MathUtils.gcd(1299L, 0L);
      double double0 = MathUtils.factorialDouble(190);
      int int0 = MathUtils.lcm(190, (-2127));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.cosh(0.11764700710773468);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-534);
      double double2 = MathUtils.scalb(1239.8808253101508, (-534));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2580L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      double double0 = MathUtils.factorialDouble(190);
      int int0 = MathUtils.lcm(190, (-2127));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2670, 146);
      boolean boolean0 = MathUtils.equals((-4321.86851359063), (-1273.183764898), 146);
      double double0 = MathUtils.scalb(2524, 146);
      double double1 = MathUtils.round((-1273.183764898), 7);
      long long0 = MathUtils.lcm((long) 2524, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 146);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.gcd((-1661), 5);
      int int1 = MathUtils.gcd(1665, (-759));
      int int2 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2819561105158720014L, 355687428096000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      double double0 = MathUtils.normalizeAngle(0, 0.0952233225107193);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-120.7), 0.016, (-120.7));
      long long0 = MathUtils.mulAndCheck(2937L, 355687428096000L);
      int int0 = MathUtils.sign(2);
      int int1 = (-4148);
      int int2 = MathUtils.subAndCheck((-4148), 2);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-822.75531858), (double) 2, 1255);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-711.9), (double) (-4150));
      boolean boolean3 = MathUtils.equals((double) 1044653976317952000L, (-120.7), 1.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-120.7);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      boolean boolean4 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.factorialLog(385);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.indicator((float) 355687428096000L);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.indicator((long) 1);
      int int3 = 61;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1044653976317952000L, 61, 385);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.gcd(3628800L, 3628800L);
      long long1 = MathUtils.binomialCoefficient(31, (-47));
      long long2 = MathUtils.subAndCheck(423L, (-9223372036854774083L));
      double double0 = MathUtils.binomialCoefficientLog(1523, 1025);
      long long3 = MathUtils.pow(516L, 1862);
      int int0 = MathUtils.indicator((-2539));
      int int1 = MathUtils.compareTo((-47), 3628800L, 2479.0);
      long long4 = MathUtils.indicator(3628800L);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-502);
      int int1 = MathUtils.sign((-502));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-1), (-1273.56212), (-502));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 600);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        MathUtils.pow((-817L), (-817L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-817^-817)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.indicator(1816L);
      int int0 = 83;
      // Undeclared exception!
      try { 
        MathUtils.round(0.07842259109020233, 83, 83);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        MathUtils.pow((-8326255L), (-8326255L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-8,326,255^-8,326,255)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-310.0), (-310.0));
      double double0 = MathUtils.round(1.0, (-2311));
      int int0 = MathUtils.subAndCheck(97, (-2311));
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      long long0 = MathUtils.binomialCoefficient(2408, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.indicator((byte) (-1));
      int int0 = MathUtils.indicator((int) (byte) (-1));
      int int1 = MathUtils.indicator(0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1286.05106, Double.POSITIVE_INFINITY, 1286.05106);
      double double0 = MathUtils.factorialDouble(1064);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long0 = (-951L);
      try { 
        MathUtils.pow(bigInteger0, (-951L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-951)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      long long0 = bigInteger0.longValueExact();
      String string0 = bigInteger0.toString((int) (byte)31);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.sinh((byte)31);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 31.0F;
      doubleArray0[1] = (double) (byte)31;
      doubleArray0[2] = (double) 31L;
      doubleArray0[3] = (double) (byte)31;
      doubleArray0[4] = (-0.2499999701976776);
      doubleArray0[5] = (double) (byte)31;
      doubleArray0[6] = (double) (byte)31;
      doubleArray0[7] = (double) (byte)31;
      doubleArray0[8] = (double) 31.0F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (31 >= 31)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.signum();
      byte byte0 = bigInteger0.byteValueExact();
      long long0 = 0L;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("NOT_SUBTRACTION_COMPATIBLE_MATRICES");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.NOT_SUBTRACTION_COMPATIBLE_MATRICES
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 11;
      intArray0[1] = 647;
      intArray0[2] = 222;
      intArray0[3] = 245;
      intArray0[4] = (-176);
      intArray0[5] = 0;
      intArray0[6] = (-1581);
      intArray0[7] = (-2149);
      int[] intArray1 = new int[9];
      intArray1[0] = 11;
      intArray1[1] = 647;
      intArray1[2] = 222;
      intArray1[3] = 222;
      intArray1[4] = 222;
      intArray1[5] = 0;
      intArray1[6] = 647;
      intArray1[7] = (-1581);
      intArray1[8] = (-2149);
      double double0 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      float float0 = MathUtils.sign(398.602F);
      int int1 = MathUtils.addAndCheck(0, 0);
      double double1 = MathUtils.indicator(1.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((long) 0, 327L);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 2.0, 2.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-425.0);
      doubleArray0[1] = (-2703.9406258);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 4265.25697341496;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,703.941 <= 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.hash((-2557.0));
      boolean boolean0 = MathUtils.equals((-2557.0), 0.0);
      int int1 = MathUtils.hash(595.102587);
      double double0 = MathUtils.factorialDouble(2410);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2410;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.addAndCheck((long) (-1062995456), 0L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 2814.77359451);
      double double2 = MathUtils.factorialDouble(336);
      boolean boolean2 = MathUtils.equalsIncludingNaN(595.102587, (double) 336, 2410);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.scalb(Double.POSITIVE_INFINITY, 1612);
      double double4 = MathUtils.indicator((double) 0L);
      int int2 = MathUtils.addAndCheck(242, 242);
      float float0 = MathUtils.round((float) (-1062995456L), 1612);
      long long1 = MathUtils.binomialCoefficient(1612, (-593));
      boolean boolean3 = MathUtils.equals(2.0, 1074.232443, 1);
      int int3 = 3128;
      // Undeclared exception!
      try { 
        MathUtils.round(2.2250738585072014E-308, 126, 3128);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1);
      int int0 = MathUtils.compareTo(44.0628026, 1265, 2210L);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 167);
      long long0 = MathUtils.factorial(0);
      byte byte0 = MathUtils.indicator((byte)111);
      float float0 = MathUtils.sign(0.0F);
      float float1 = MathUtils.round((float) 167, (int) (byte)1, 0);
      short short0 = MathUtils.sign((short) (-88));
      long long1 = MathUtils.mulAndCheck(1L, (-4035746434778044925L));
      long long2 = MathUtils.lcm((-4035746434778044925L), (-4035746434778044925L));
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = bigInteger0.testBit((byte)111);
      int int0 = bigInteger0.intValueExact();
      try { 
        MathUtils.pow(bigInteger0, (-14L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-14)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.indicator(1770.0662202751353);
      float float0 = MathUtils.sign((-373.0F));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 77;
      int int1 = MathUtils.pow(77, (long) 77);
      long long0 = MathUtils.mulAndCheck((-1832L), 2152L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3942464L);
      doubleArray0[1] = (double) 827793981;
      doubleArray0[2] = (double) (-3942464L);
      doubleArray0[3] = (double) (-1832L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-3,942,464 <= 827,793,981)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-65));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-65);
      intArray0[1] = (int) (byte) (-65);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) (byte) (-65), (long) (-65));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-65), (-65));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -65
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.pow(0, 0);
      int int1 = MathUtils.mulAndCheck(1, 1);
      long long1 = MathUtils.lcm(2228L, 1916L);
      double double0 = MathUtils.log(0L, 1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.sinh(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double3 = MathUtils.normalizeAngle((-1169.0), (-1169.0));
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 839.0, (-2601));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = MathUtils.pow(146, 2670);
      boolean boolean0 = MathUtils.equals((double) 146, (-1273.183764898), 146);
      double double0 = MathUtils.scalb(0, 146);
      double double1 = MathUtils.round((-1273.183764898), 7);
      long long0 = MathUtils.lcm((long) 0, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 200;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("overflow: multiply");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.overflow: multiply
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(5.669184079525E-24, 0.0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.lcm((-1324L), 0L);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.gcd((-1438L), 4208363204685324176L);
      int int0 = MathUtils.addAndCheck(1213, 3373);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.073741824E9, 1.073741824E9, (-376.8284));
      int[] intArray0 = new int[5];
      intArray0[0] = (-3036);
      intArray0[1] = 796;
      intArray0[2] = 0;
      intArray0[3] = 454;
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3036);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2801.1579794);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1107.20251484);
      doubleArray0[5] = (-376.8284);
      doubleArray0[6] = (-1064.2757549600487);
      doubleArray0[7] = (double) (-3036);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -2,801.158)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = MathUtils.cosh(0.11764700710773468);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb(1239.8808253101508, (-534));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 21L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1897.3269825);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (-18.2891197878717);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow((-918994280), 0L);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.pow(1, 199);
      float float0 = MathUtils.indicator((-154.7F));
      int int3 = MathUtils.lcm(1, 1);
      double double1 = MathUtils.safeNorm(doubleArray0);
      byte byte0 = MathUtils.indicator((byte)80);
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.indicator((short)9);
      double double1 = MathUtils.sign((double) (short)9);
      long long0 = MathUtils.pow((long) (short)9, (int) (short)9);
      long long1 = MathUtils.pow(387420489L, (int) (short)9);
      double double2 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (short)1, (int) (short)9, 705);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -\u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-818.4670183521133);
      doubleArray0[1] = 0.041666666666621166;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.scalb((-1401.935154222445), 0);
      double double1 = MathUtils.round((-3600.06899), 0, 0);
      int int0 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1401.935154222445), 2781.558636495, 0.0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double double0 = MathUtils.scalb(0L, 0);
      double double1 = MathUtils.round((-2.356194490192345), 1948);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.log(2122.0038448, 2122.0038448);
      int int0 = MathUtils.lcm(0, 0);
      int int1 = MathUtils.compareTo(2122.0038448, 6.283185307179586, 691.73);
      long long0 = MathUtils.pow(1061L, (long) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2122.0038448;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1061L;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.compareTo((-208.55310101141), 0.0, (-1927.86));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1163));
      int int0 = MathUtils.compareTo((short) (-1163), (short) (-1163), 0.0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-31.12);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)70);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.mulAndCheck((int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1740);
      intArray0[1] = (-1690);
      intArray0[2] = (-525);
      intArray0[3] = 1937;
      intArray0[4] = 374;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1749.3;
      doubleArray0[1] = 1956.8321;
      doubleArray0[2] = (-1187.1);
      doubleArray0[3] = 2024.02;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2136);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.pow(6L, 6L);
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 2217;
      long long0 = MathUtils.pow(1307674368000L, 2217);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2505L), (-2505L));
      short short0 = MathUtils.indicator((short)1939);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-262));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -262
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 63);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 952.5481893;
      doubleArray0[2] = (double) 63;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 63;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 230.380303236722);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3.834E-20, (-1160.42178374));
      double double1 = MathUtils.cosh(63.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-18.27038196), 602.053956337, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1279, 1279);
      int int0 = MathUtils.lcm(302, 302);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1279;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 302;
      doubleArray0[3] = (double) 1279;
      doubleArray0[4] = (double) 302;
      doubleArray0[5] = (double) 1279;
      doubleArray0[6] = (double) 302;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = MathUtils.pow(10, (long) 10);
      double double0 = MathUtils.sign((double) 1410065408);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 10, (-3689.6919169073));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1084.7031), 0.0, (-5282));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4244.0), (-4244.0), 0.0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = MathUtils.sign(1.0F);
      short short0 = (short) (-2704);
      short short1 = MathUtils.indicator((short) (-2704));
      long long0 = 2473L;
      try { 
        MathUtils.pow(2473L, (long) (short) (-2704));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,473^-2,704)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.scalb((-3212.2006), 603);
      long long0 = MathUtils.mulAndCheck((long) (short)1030, 2317L);
      boolean boolean0 = MathUtils.equals(1619.4306385980842, (double) 2317L);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1030;
      intArray0[2] = (int) (short)1030;
      intArray0[3] = (int) (short)1030;
      intArray0[4] = (int) (short)1030;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.gcd(229, 1030);
      int int2 = MathUtils.gcd(10, 4);
      double double1 = MathUtils.binomialCoefficientDouble(4, 0);
      int int3 = MathUtils.indicator((-859));
      int int4 = MathUtils.lcm(1, (-1143));
      byte byte0 = MathUtils.sign((byte)31);
      float float0 = MathUtils.round(1135.6045F, 230);
      int int5 = MathUtils.subAndCheck((-1), 1676);
      double double2 = MathUtils.sign(0.07490822288864472);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2.957007209750105E-8));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = (-2859);
      int int1 = MathUtils.addAndCheck((-2859), 0);
      double double0 = MathUtils.round((double) 0, 195);
      double double1 = MathUtils.round((double) (-2859), (-106), 0);
      int int2 = 52;
      long long0 = 0L;
      int int3 = MathUtils.pow(52, 0L);
      long long1 = MathUtils.subAndCheck((-1132L), 39916800L);
      int int4 = MathUtils.pow(0, 195);
      double double2 = MathUtils.binomialCoefficientDouble(52, 13);
      double double3 = MathUtils.cosh(0);
      int int5 = MathUtils.hash((double) 13);
      double double4 = MathUtils.factorialDouble(52);
      double double5 = MathUtils.sinh((-307.9545658056));
      int int6 = MathUtils.addAndCheck(195, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-4649), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,649, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = (-1608L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9193070505571053912L, (-1608L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = (-280);
      float float0 = MathUtils.round(0.0F, (-280));
      float float1 = MathUtils.indicator(4803.031F);
      long long0 = MathUtils.indicator((long) (-280));
      float float2 = MathUtils.round(1.0F, (-280));
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 0, (-280));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -280, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = MathUtils.sign(529);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger1 = bigInteger0.not();
      byteArray0[0] = (byte)99;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)10;
      BigInteger bigInteger3 = new BigInteger(byteArray0);
      int int1 = bigInteger3.intValue();
      BigInteger bigInteger4 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger5 = bigInteger0.divide(bigInteger3);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, (long) 1);
      int int2 = MathUtils.sign(589);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = MathUtils.pow(581L, 581L);
      int int0 = (-2911);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-2911));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,911
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = MathUtils.pow((-1373), 15);
      long long0 = MathUtils.gcd((long) (-1373), 4577762542105553359L);
      double double0 = MathUtils.binomialCoefficientLog(31, (-1373));
      float float0 = MathUtils.round(Float.NaN, 31);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      int int1 = bigInteger0.intValue();
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = bigInteger0.max(bigInteger3);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.log(1540.8956994, 50.73);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1540.8956994;
      doubleArray0[1] = (double) 31;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = 0.5349391980842224;
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = (double) 1L;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1450.629651887);
      int int2 = MathUtils.gcd((-755), (-1373));
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int3 = 224;
      // Undeclared exception!
      try { 
        MathUtils.round(2479.486712, 224, 31);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = MathUtils.compareTo(747.8, 747.8, 747.8);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[4] = 747.8;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      boolean boolean0 = bigInteger0.testBit(12);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 0);
      long long0 = MathUtils.pow((long) 0, 734);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 141.00658430170333, 171);
      double double0 = MathUtils.round((double) 171, 171);
      int int0 = MathUtils.gcd(14, 0);
      long long0 = MathUtils.subAndCheck((long) 0, (long) 171);
      float float0 = MathUtils.indicator((-2332.1F));
      int int1 = MathUtils.hash(0.0036);
      int int2 = MathUtils.compareTo(0.0, 0.0, (-171L));
      long long1 = MathUtils.addAndCheck((-1725L), (-7278142539171889152L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-171L);
      doubleArray0[1] = 0.008333333333333333;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = 0.0036;
      doubleArray0[6] = (double) (-171L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(141.00658430170333, 171.0);
      float float1 = MathUtils.indicator(210.53658F);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 171;
      intArray0[2] = 171;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }
}
