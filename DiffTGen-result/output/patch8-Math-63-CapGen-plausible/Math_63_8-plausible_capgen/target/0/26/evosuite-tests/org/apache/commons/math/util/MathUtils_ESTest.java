/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:42:03 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[13];
      intArray0[0] = 1824;
      intArray0[1] = 2575;
      intArray0[2] = 1485;
      intArray0[3] = 0;
      intArray0[4] = 1485;
      intArray0[5] = (-3209);
      intArray0[6] = 2690;
      intArray0[7] = (-1961);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd((-203L), (-203L));
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1549.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2935890503282001226L);
      double double0 = MathUtils.log(2.0, 2935890503282001226L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2935890503282001226L;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 2935890503282001226L;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 61.348503870527686;
      doubleArray0[6] = 61.348503870527686;
      doubleArray0[7] = 61.348503870527686;
      doubleArray0[8] = 2.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 10.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(21, 2140675144);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 21, k = 2,140,675,144
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 66;
      intArray0[1] = 35;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.lcm(195, (-2066));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      boolean boolean0 = bigInteger0.testBit(35);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.remainder(bigInteger0);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign((float) 402870);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 66;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 402870;
      doubleArray0[3] = (double) 195;
      doubleArray0[4] = (-267.05268);
      doubleArray0[5] = (double) 66;
      doubleArray0[6] = (double) 66;
      doubleArray0[7] = (double) 1.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 66.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.pow(2509L, 2509L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(7.0, 4.455505956692757, (double) 2509L);
      int int0 = 1084;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(104, 1084);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 104, k = 1,084
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1458);
      double double1 = MathUtils.sign((-645.656151));
      double double2 = MathUtils.factorialDouble(224);
      short short0 = MathUtils.indicator((short)148);
      double double3 = MathUtils.binomialCoefficientLog(46, (short)1);
      int int0 = MathUtils.pow(46, 224);
      int int1 = MathUtils.lcm(1428, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 454;
      int int1 = MathUtils.lcm(454, 454);
      long long0 = MathUtils.addAndCheck(0L, (long) 454);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      float float0 = MathUtils.indicator((-1.0F));
      int int2 = MathUtils.pow(454, 454);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(Float.NaN);
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-265), 4194304);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -265, k = 4,194,304
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)9);
      float float0 = MathUtils.round((float) (byte)9, (int) (byte)9);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.shiftLeft(4049);
      BigInteger bigInteger3 = bigInteger1.multiply(bigInteger0);
      BigInteger bigInteger4 = bigInteger1.shiftLeft((-1026));
      BigInteger bigInteger5 = bigInteger0.not();
      int int0 = bigInteger1.intValueExact();
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      boolean boolean0 = bigInteger0.equals((Object) null);
      BigInteger bigInteger6 = bigInteger0.pow(0);
      float float1 = bigInteger0.floatValue();
      long long0 = bigInteger0.longValue();
      String string0 = bigInteger0.toString(0);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, (long) (byte)1);
      int int1 = MathUtils.indicator((int) (byte)1);
      short short0 = MathUtils.indicator((short)0);
      float float2 = MathUtils.indicator((float) (short)0);
      int int2 = MathUtils.indicator((int) (byte)9);
      boolean boolean1 = MathUtils.equals((double) (byte)1, (double) 1, 176.6);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1, (-545));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1712.553576926103;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4811.71600653746;
      doubleArray0[3] = (-874.782282398739);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-645.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.19999954120254515;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.cosh((-387.0498952124));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.pow((-302), 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-302);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-302);
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-302);
      doubleArray1[2] = (double) (-302);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) (-302);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      long long0 = MathUtils.addAndCheck((-2848L), (long) (-302));
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      long long1 = MathUtils.sign(3628800L);
      double double0 = MathUtils.log(2745.0, (-145.54));
      long long2 = MathUtils.subAndCheck(3628800L, (-2848L));
      float float0 = MathUtils.round(0.0F, 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0.0F, 1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2850.61;
      doubleArray0[1] = (-1606.89);
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2769.1633);
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double2 = (-623.121512661428);
      doubleArray0[5] = (-623.121512661428);
      doubleArray0[6] = (-0.2499999701976776);
      double double3 = 0.0;
      doubleArray0[7] = 0.0;
      double double4 = 1659.6358169;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1659.6358169);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      long long1 = MathUtils.addAndCheck(0L, 9218868437227405312L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9218868437227405312L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 9218868437227405312L;
      doubleArray0[5] = (double) 9218868437227405312L;
      doubleArray0[6] = (double) 1L;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign((float) 0L);
      float float1 = MathUtils.indicator((float) 1L);
      boolean boolean0 = MathUtils.equals((double) 0L, 0.0, 0.0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-4498), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -4,498, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = MathUtils.pow(377, 6L);
      boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, (double) (-1178817391));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.2250738585072014E-308;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 5858.974459434178;
      doubleArray0[0] = 5858.974459434178;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1781;
      int int1 = MathUtils.sign(1781);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1781;
      doubleArray0[2] = (double) 1781;
      doubleArray0[3] = (double) 1781;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1781;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (1,781 > 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2040.9280916592315;
      doubleArray0[1] = 2769.74119;
      doubleArray0[2] = 0.3333333134651184;
      doubleArray0[3] = (-0.2499999997677497);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.log((-2358.307), (-102.57545500338063));
      byte byte0 = MathUtils.indicator((byte)121);
      long long0 = MathUtils.gcd((long) (byte)1, (long) (byte)121);
      double double2 = MathUtils.normalizeAngle(0.0, Double.NaN);
      short short0 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)1, 961.205655702659, (int) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (int) (byte)121);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1604.7650738561;
      doubleArray0[0] = 1604.7650738561;
      double double1 = 3329.24291890214;
      doubleArray0[1] = 3329.24291890214;
      double double2 = 1949.0514794;
      doubleArray0[2] = 1949.0514794;
      double double3 = 783.162487;
      doubleArray0[3] = 783.162487;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (1,604.765 < 3,329.243)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.round(0.0, 31);
      double double1 = MathUtils.factorialLog(31);
      MathUtils.checkOrder(doubleArray0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 986.0123211;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1556));
      int int0 = MathUtils.compareTo((-2935.7222), (short) (-1556), 3294198.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = 3656.4006;
      doubleArray0[4] = 3294198.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = 3294198.0;
      doubleArray0[8] = (double) (short) (-1);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short1 = MathUtils.indicator((short)67);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((short) (-1556), (short)1);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,556, k = 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.addAndCheck(1483L, 1483L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("^DQqx07Y{");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.^DQqx07Y{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = MathUtils.round(3211.2234F, 67);
      short short0 = MathUtils.indicator((short)202);
      double double0 = MathUtils.sinh((-916.5506658697));
      float float1 = MathUtils.round((float) 67, (int) (short)202);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) Float.NaN, (-1480.952340394), 67);
      long long0 = MathUtils.lcm((long) (short)1, (long) 67);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-916.5506658697);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.mulAndCheck(233, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 233);
      String string0 = bigInteger0.toString(453);
      BigInteger bigInteger2 = bigInteger1.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.xor((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(355687428096000L, 355687428096000L);
      double double0 = MathUtils.indicator(0.0);
      double double1 = MathUtils.round((double) 0L, 0, 0);
      int int0 = 0;
      int int1 = MathUtils.gcd(0, (-3119));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(3119);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = MathUtils.round(3211.2234F, 67);
      short short0 = MathUtils.indicator((short)202);
      double double0 = MathUtils.sinh((-916.5506658697));
      float float1 = MathUtils.round((float) 67, (int) (short)202);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) Float.NaN, (-1480.952340394), 67);
      long long0 = MathUtils.lcm((long) (short)1, (long) 67);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-916.5506658697);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.mulAndCheck(233, 0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.sign(5281L);
      long long2 = MathUtils.pow(736L, 31);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.subAndCheck(0L, 76L);
      int int0 = (-2028);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2028));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,028
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 1392);
      double double0 = MathUtils.binomialCoefficientDouble(1392, 1392);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(1.0, 0.0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.gcd((long) 1392, (-350L));
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-315));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -315
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 14;
      intArray0[1] = 123;
      intArray0[2] = 0;
      intArray0[3] = 35;
      intArray0[4] = (-2899);
      intArray0[5] = 6;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(35);
      int int1 = (-606);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-606));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -606
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      boolean boolean0 = bigInteger0.testBit(11);
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger4 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1680);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = 496;
      int int3 = MathUtils.addAndCheck(1680, 496);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 316L);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) (-316L), 2122);
      long long1 = MathUtils.gcd(0L, 4503599627370495L);
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.hash((double) 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (-0.16624879837036133);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.lcm((-316L), 0L);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equals(0.008333333333329196, (double) 0.0F, 586);
      double double0 = MathUtils.sign(738.6615541413);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-3597), 586);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 586, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 649.142630338455;
      doubleArray0[0] = 649.142630338455;
      doubleArray0[1] = (-3785.46025);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.6931470632553101;
      doubleArray0[4] = 663.0;
      doubleArray0[5] = 973.69259611046;
      doubleArray0[6] = 3399.611370217;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 864.0;
      doubleArray1[1] = (-1097.33772306);
      doubleArray1[2] = 649.142630338455;
      doubleArray1[3] = 649.142630338455;
      doubleArray1[4] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1698.0, 1698.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      double double1 = bigInteger0.doubleValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.andNot(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 83);
      int int0 = MathUtils.hash(1377.742);
      float float0 = MathUtils.sign((float) 83);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      String string0 = bigInteger0.toString((-2021));
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.addAndCheck(0L, 0L);
      long long1 = MathUtils.sign(0L);
      int int0 = MathUtils.mulAndCheck(2062, 0);
      long long2 = MathUtils.factorial(0);
      int int1 = MathUtils.mulAndCheck(2062, (-2021));
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.indicator(2144.65F);
      int int0 = MathUtils.indicator(1940);
      double double0 = MathUtils.factorialDouble(1940);
      long long0 = MathUtils.pow(2736L, 18);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2736L;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (double) 2144.65F;
      doubleArray1[3] = (double) 1.0F;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 18;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1465L, (-302932621132653753L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = MathUtils.round(1.073741824E9, 0, 0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(6227020800L, 6227020800L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.indicator(3384.157F);
      double double0 = (-1924.02);
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equals((-1924.02), 1037.0, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = 10.0;
      int int0 = 0;
      double double1 = MathUtils.scalb(10.0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = 1020;
      int int2 = MathUtils.indicator(1020);
      double double2 = MathUtils.normalizeAngle(10.0, 0.0F);
      int int3 = 1373;
      int int4 = MathUtils.addAndCheck(1373, 1373);
      long long0 = 864L;
      long long1 = MathUtils.subAndCheck(864L, (long) 1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 14;
      int int1 = MathUtils.pow(14, 14);
      long long0 = MathUtils.lcm((long) (-1282129920), (long) (-1282129920));
      int int2 = 2134;
      double double0 = MathUtils.binomialCoefficientLog(2134, 2134);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 6364;
      int int1 = MathUtils.addAndCheck(6364, (-174));
      int int2 = MathUtils.compareTo((-174), 6364, 6364);
      long long0 = MathUtils.gcd((long) (-174), 694L);
      short short0 = MathUtils.indicator((short)1984);
      byte byte0 = MathUtils.indicator((byte)63);
      double double0 = MathUtils.scalb(694L, 444);
      int int3 = 2552;
      // Undeclared exception!
      try { 
        MathUtils.round((-2446.0547048047), 2552, 6190);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 2.2250738585072014E-308);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, (int[]) null);
      double double0 = MathUtils.log(0.0, 2023.1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2023.1;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.lcm(0, 0);
      double double2 = MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-412.75236859), 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-563), (-563));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -563
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5409.7);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.087;
      doubleArray0[3] = 1738.01557658;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2501.7997099824;
      doubleArray0[6] = 1422.3509030455946;
      doubleArray0[7] = (-871.270821);
      doubleArray0[8] = 0.01745329052209854;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3925;
      intArray0[1] = 2945;
      intArray0[2] = 213;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(2945, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(213, 474);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 213, k = 474
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 0, 0);
      int int0 = MathUtils.pow(3318, 581L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = (-2823);
      int int1 = (-235);
      int int2 = MathUtils.addAndCheck((-2823), (-235));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-235));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -235
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 0.0, 2.2250738585072014E-308);
      int[] intArray0 = new int[0];
      int int1 = MathUtils.distance1(intArray0, (int[]) null);
      double double0 = MathUtils.log(0.0, 2023.1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2023.1;
      doubleArray0[1] = 2023.1;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.lcm(0, 817);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 1569);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,569
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = 1307674368000L;
      try { 
        MathUtils.pow(1307674368000L, (-967L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,307,674,368,000^-967)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2269, 2269);
      byte byte0 = MathUtils.indicator((byte)7);
      int int0 = MathUtils.gcd(1549, 1549);
      long long1 = MathUtils.pow((long) 1549, 121645100408832000L);
      double double0 = MathUtils.factorialDouble((byte)1);
      int int1 = MathUtils.hash((-1157.27989289433));
      float float0 = MathUtils.indicator((float) 1L);
      boolean boolean0 = MathUtils.equals((double) (byte)1, (-1157.27989289433), 608);
      long long2 = MathUtils.addAndCheck((-9223372036854775808L), 113236205062349959L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2269;
      doubleArray0[1] = (double) 1554791169;
      doubleArray0[2] = (double) (-9223372036854775808L);
      doubleArray0[3] = (double) 1549;
      doubleArray0[4] = (double) 2269;
      doubleArray0[5] = (double) (byte)7;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.sign((double) 1549);
      int int2 = MathUtils.sign(17);
      int int3 = MathUtils.mulAndCheck(1474, 5);
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = MathUtils.indicator(1876L);
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = 6;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 6);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 6
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.compareTo(3783.6337289358153, (-3951.0), 3783.6337289358153);
      double double0 = MathUtils.round(0.0, (-3870), 0);
      short short0 = MathUtils.indicator((short)670);
      double double1 = MathUtils.round((double) (short)670, 0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.indicator((-471.2283650833588));
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-110));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (50,362,796,127,221^-110)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-832L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-832)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-2299);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-2299));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, Double.POSITIVE_INFINITY, 0.0);
      long long0 = MathUtils.lcm(9193070505571053912L, (long) (-1));
      int int1 = MathUtils.sign((-1));
      double double0 = MathUtils.normalizeAngle((-2347.36004034026), 9193070505571053912L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9193070505571053912L;
      doubleArray0[1] = (double) 9193070505571053912L;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(1307674368000L, 165L);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = MathUtils.mulAndCheck((-1), (-1));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.sinh(215766270720000L);
      long long2 = (-275L);
      long long3 = MathUtils.lcm(165L, (-275L));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.gcd(5040L, 1738L);
      boolean boolean0 = MathUtils.equals((double) 2L, 1798.53886677, 75);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 1464.79600190125, 75);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5040L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2L;
      doubleArray0[3] = (double) 75;
      doubleArray0[4] = (double) 5040L;
      doubleArray0[5] = (double) 2L;
      doubleArray0[6] = (double) 1738L;
      doubleArray0[7] = (double) 75;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.gcd(0L, 886L);
      long long2 = MathUtils.indicator(1629L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("NUMERATOR");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.NUMERATOR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = MathUtils.indicator((-4085L));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.gcd(2243L, (-1L));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      float float0 = MathUtils.indicator((float) (byte)0);
      byte byte1 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.factorialLog((byte)0);
      long long0 = MathUtils.pow((long) (byte)0, 895);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 895;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = 10.0;
      int int0 = MathUtils.hash(doubleArray0);
      long long1 = MathUtils.gcd(4577762542105553359L, 0L);
      long long2 = MathUtils.gcd(0L, 3628800L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 0.0, 1.0);
      float float1 = MathUtils.indicator(106.163F);
      int int1 = MathUtils.gcd((int) (byte)1, (int) (byte)0);
      int int2 = MathUtils.mulAndCheck(518, 0);
      double double1 = MathUtils.factorialLog(228);
      // Undeclared exception!
      try { 
        MathUtils.round((-1014.682146524223), 1, (-2617));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.633123935319537E16;
      doubleArray0[4] = (-1555.6428726);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.sign(3625.0694);
      long long0 = MathUtils.mulAndCheck(2530L, 0L);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      double double1 = MathUtils.sign((double) 0L);
      int[] intArray0 = new int[3];
      intArray0[0] = 460;
      intArray0[1] = (-685);
      intArray0[2] = 57;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long2 = MathUtils.gcd(0L, 0L);
      float float0 = MathUtils.round((float) 0L, 460);
      double double2 = MathUtils.sign((double) 0L);
      boolean boolean0 = MathUtils.equals((double) (-685), (double) 2530L, 57);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = 0.030589580535888672;
      int int0 = MathUtils.compareTo((-2049.0), 0.030589580535888672, (-2049.0));
      float float0 = MathUtils.sign((-2132.88F));
      double double1 = MathUtils.binomialCoefficientDouble(18, 0);
      long long0 = MathUtils.indicator((long) 18);
      try { 
        MathUtils.pow((-579), (long) (-579));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-579^-579)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equals((double) 0, (double) 0);
      int int1 = MathUtils.addAndCheck(14, 2733);
      int int2 = (-229);
      int int3 = MathUtils.addAndCheck(1738, (-229));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      long long0 = bigInteger0.longValue();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      float float0 = bigInteger1.floatValue();
      try { 
        MathUtils.pow(bigInteger0, (-2992));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,992)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-4065), 934);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.indicator(224);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 10.0, 224);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 224;
      doubleArray0[2] = (double) 224;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 224;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 224;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.304E19, (-2064.0), 19.357304);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.7853981633974483;
      doubleArray0[2] = 0.167;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 1320.96598;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 73;
      boolean boolean1 = bigInteger0.testBit(73);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      String string0 = bigInteger0.toString(73);
      // Undeclared exception!
      try { 
        MathUtils.round(1320.96598, 73, 73);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.sinh(1.304E19);
      short short0 = MathUtils.sign((short) (-2458));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-2458);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-2458);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-2458);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short) (-2458);
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      double double0 = MathUtils.cosh(0L);
      boolean boolean0 = MathUtils.equals((double) 0L, 0.0, (double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.round((-1557.9597F), 4194304, 1030);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,030, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-595);
      intArray0[1] = 7;
      intArray0[2] = 0;
      intArray0[3] = 156;
      intArray0[4] = 1465;
      intArray0[5] = 0;
      intArray0[6] = 3166;
      int[] intArray1 = new int[4];
      intArray1[0] = (-408);
      intArray1[1] = 3166;
      intArray1[2] = 1465;
      intArray1[3] = 1465;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.gcd(1397, 1397);
      long long0 = MathUtils.pow((long) 1397, 1397);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.scalb(1.0, 0);
      int int0 = MathUtils.compareTo(1.0, 1.0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)811);
      long long0 = MathUtils.factorial((short)1);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int int1 = MathUtils.pow((-3040), (long) 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0F);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-233));
      double double0 = MathUtils.binomialCoefficientDouble(4194304, (-842));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-399.1609);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-3073.19));
      long long0 = 178L;
      long long1 = MathUtils.pow(178L, 178L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("FACTORIAL_NEGATIVE_PARAMETER");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.FACTORIAL_NEGATIVE_PARAMETER
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 6;
      int int1 = 106;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(6, 106);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 6, k = 106
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.sign(11);
      int int1 = MathUtils.addAndCheck(1, 11);
      double double0 = MathUtils.binomialCoefficientLog(24, 0);
      byte byte0 = MathUtils.indicator((byte)48);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)48;
      doubleArray0[3] = (double) 11;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(1.0, 1);
      short short0 = MathUtils.sign((short)3615);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      int int0 = 0;
      int int1 = MathUtils.pow(0, 0);
      float float0 = MathUtils.round((float) 1, 5);
      double double1 = MathUtils.round(0.0, 0);
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.pow((-9223372036854775808L), 142);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(0L, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = MathUtils.round(1415.0F, 1743);
      int int0 = MathUtils.hash((-215.97781445596));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1743;
      doubleArray0[1] = (double) 1743;
      doubleArray0[2] = (double) (-2116009051);
      doubleArray0[3] = (double) 1743;
      doubleArray0[4] = (-479.34694595);
      doubleArray0[5] = (-215.97781445596);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)3030);
      double double0 = MathUtils.indicator(0.0);
      long long0 = MathUtils.sign(362880L);
      byte byte0 = MathUtils.indicator((byte)104);
      MathUtils.checkOrder(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3736), 815);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -3,736, k = 815
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.lcm(136, 136);
      try { 
        MathUtils.pow(21, (-862L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (21^-862)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 52;
      int int1 = 334;
      // Undeclared exception!
      try { 
        MathUtils.round((-1613.578F), 52, 334);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 334, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-825.0);
      doubleArray0[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-825 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.sinh((-484.56732581917));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.3927902509753605E210);
      doubleArray0[1] = (-1.3927902509753605E210);
      doubleArray0[2] = (-484.56732581917);
      doubleArray0[3] = (-1.3927902509753605E210);
      doubleArray0[4] = (-1.3927902509753605E210);
      doubleArray0[5] = (-484.56732581917);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,392,790,250,975,360,500,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 <= -1,392,790,250,975,360,500,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.log((-885.4), 9.140260083262505E-9);
      int int0 = MathUtils.subAndCheck((-1855), (-1855));
      double double1 = MathUtils.normalizeAngle((-1855), (-1855));
      long long0 = MathUtils.mulAndCheck((-572L), (-572L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 2056.905667389245);
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = bigInteger0.toString();
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger1, 1365L);
      double double2 = MathUtils.scalb(1365L, 158);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.sign(11);
      int int1 = MathUtils.addAndCheck(1, 11);
      double double0 = MathUtils.binomialCoefficientLog(24, 11);
      double double1 = MathUtils.log(24, 1);
      short short0 = MathUtils.sign((short)3615);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-3593);
      int int1 = MathUtils.mulAndCheck((-3593), (-3593));
      int int2 = MathUtils.sign((-431));
      short short0 = MathUtils.sign((short) (-1395));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-1395), 0.7853981633974483, 0.7853981633974483);
      double double0 = MathUtils.normalizeAngle(2586.712178, 0.5000000000042687);
      // Undeclared exception!
      try { 
        MathUtils.factorial(12909649);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = (-1092);
      intArray0[3] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      short short0 = MathUtils.sign((short) (-596));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = MathUtils.sign((-2177.0054F));
      int int0 = MathUtils.sign((-112));
      double double0 = MathUtils.scalb(1.225743062930824E-8, (-1));
      double double1 = MathUtils.sign((double) (-1));
      long long0 = MathUtils.addAndCheck(1307674368000L, 245L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1307674368245L;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.225743062930824E-8;
      doubleArray0[3] = (double) 245L;
      doubleArray0[4] = 1117.96891863977;
      doubleArray0[5] = (double) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3573.0170430529), 139.25114324);
      double double0 = MathUtils.normalizeAngle((-3573.0170430529), 139.25114324);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3573.0170430529);
      doubleArray0[1] = 139.25114324;
      doubleArray0[2] = (-3573.0170430529);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 588;
      // Undeclared exception!
      try { 
        MathUtils.factorial(588);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck((-607L), 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.round(0.0, 3502);
      int int1 = (-718);
      int int2 = MathUtils.lcm(4764, (-718));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("NO_CONVERGENCE_WITH_ANY_START_POINT");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.NO_CONVERGENCE_WITH_ANY_START_POINT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 454;
      int int1 = MathUtils.lcm(454, 454);
      long long0 = MathUtils.addAndCheck(0L, (long) 454);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-1.0F));
      try { 
        MathUtils.pow(454, (-2053));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (454^-2,053)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = Integer.MIN_VALUE;
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1215);
      intArray0[4] = 0;
      intArray0[5] = (-2070);
      intArray0[6] = Integer.MIN_VALUE;
      intArray0[7] = (-1372);
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.subAndCheck(3, 5875);
      int int2 = MathUtils.pow(3, 0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.pow(0, 97);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 97;
      doubleArray0[1] = (double) 97;
      doubleArray0[2] = (double) 97;
      doubleArray0[3] = (double) 97;
      doubleArray0[4] = (double) 97;
      doubleArray0[5] = (double) 97;
      doubleArray0[6] = (double) 97;
      doubleArray0[7] = 3857.4258012547275;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.hash(1.3245471311735498E-8);
      int int2 = MathUtils.compareTo(97.0, 97.0, (-932.56439));
      int int3 = MathUtils.hash(doubleArray1);
      double double0 = MathUtils.distance(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 1220.318661907328;
      int int0 = MathUtils.hash(1220.318661907328);
      double double1 = 11.0;
      // Undeclared exception!
      try { 
        MathUtils.equals(1.1102230246251565E-16, 11.0, 266176660);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-3452.776788726), 6199);
      long long0 = MathUtils.subAndCheck(0L, 2492L);
      int int0 = MathUtils.gcd((-4198), (-2823));
      float float0 = MathUtils.indicator((float) (-4198));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.lcm(10, 10);
      int int1 = MathUtils.pow(35, (long) 10);
      byte byte0 = MathUtils.indicator((byte)61);
      int int2 = MathUtils.gcd(1528444521, (-550));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.sinh((-2962.288565634077));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2962.288565634077);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long0 = MathUtils.binomialCoefficient(196, 196);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 196, 0.0, 1963);
      long long1 = MathUtils.mulAndCheck((-854L), 4095L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-3512299194304650054L), (-660L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = MathUtils.pow(2966, 2966);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2966;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3294198.0;
      doubleArray0[6] = (double) 2966;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3294198.0;
      doubleArray1[1] = (double) 2966;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 3294198.0;
      doubleArray1[4] = 3294198.0;
      doubleArray1[5] = 3294198.0;
      doubleArray1[6] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      boolean boolean0 = MathUtils.equals((double) 0, Double.NEGATIVE_INFINITY);
      try { 
        MathUtils.pow(0, (-1128));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,128)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.hash(1375.950147645);
      double double0 = MathUtils.sign(1375.950147645);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      short short0 = MathUtils.sign((short)67);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 0);
      boolean boolean0 = MathUtils.equals(420.7294, 420.7294);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1048.821780967761;
      doubleArray1[4] = (double) 0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2179.42667488);
      doubleArray0[1] = 2608.689822932;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2608.689822932;
      doubleArray1[1] = (-2179.42667488);
      doubleArray1[2] = (-2179.42667488);
      doubleArray1[3] = (-2179.42667488);
      doubleArray1[4] = (-2179.42667488);
      doubleArray1[5] = (-2179.42667488);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      long long0 = MathUtils.pow((-1854L), 0);
      int int0 = MathUtils.subAndCheck(0, 0);
      long long1 = MathUtils.addAndCheck(0L, 0L);
      long long2 = MathUtils.addAndCheck(0L, 3093L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15;
      intArray0[1] = 525;
      intArray0[2] = 0;
      intArray0[3] = 2172;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      int int3 = MathUtils.mulAndCheck(1804, 1804);
      double double1 = MathUtils.scalb(0, 2172);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1954.51), (double) 1804);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1804;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1804;
      doubleArray0[3] = (double) 525;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 525;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 2172;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      byte byte0 = MathUtils.indicator((byte) (-42));
      long long0 = MathUtils.addAndCheck((long) 0, 4208363204685324176L);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.sign(479001600L);
      short short0 = MathUtils.sign((short)0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.round((double) (short)0, 0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 479001600L;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = 17.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = 124.500500757546;
      double double1 = MathUtils.indicator(124.500500757546);
      double double2 = MathUtils.sign(0.0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(124.500500757546, 1651.274, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)54);
      double double0 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equals((double) (byte)1, 0.0, (int) (byte)54);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)54;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.sign(39916800L);
      byte byte1 = MathUtils.sign((byte)54);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.round((double) 0, 0, 0);
      byte byte0 = MathUtils.indicator((byte) (-72));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5707963267948966;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3758.26901);
      doubleArray0[4] = 3333.3779;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.sign(5023.5442312311625);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(304, 0);
      byte byte0 = MathUtils.indicator((byte)14);
      long long1 = MathUtils.pow((-841L), 1L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (double) 0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2675.5434344021655);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3463.9323119870373;
      doubleArray0[3] = (-1427.00794406);
      doubleArray0[4] = 629.034953;
      doubleArray0[5] = 1.633123935319537E16;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (3,463.932 >= -1,427.008)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathUtils.indicator((-4149.3));
      long long0 = MathUtils.sign((-9218868437227405313L));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("real format");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.real format
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = MathUtils.indicator((-1263));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1263);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(191);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray0 = bigInteger2.toByteArray();
      BigInteger bigInteger3 = bigInteger2.multiply(bigInteger0);
      BigInteger bigInteger4 = bigInteger2.max(bigInteger0);
      BigInteger bigInteger5 = bigInteger0.xor(bigInteger2);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.mulAndCheck(720L, 2517L);
      long long1 = MathUtils.pow(1812240L, 1743);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        MathUtils.pow(0L, (-734));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-734)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.subAndCheck(0, 0);
      int int1 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equals((double) 1, (double) 0);
      double double0 = MathUtils.scalb(0.0, 7);
      int int2 = MathUtils.mulAndCheck(879, 879);
      long long1 = MathUtils.subAndCheck(87178291200L, (long) 1);
      boolean boolean1 = MathUtils.equals(0.0, (double) 7, 16);
      short short0 = MathUtils.sign((short)0);
      double double1 = MathUtils.sign((double) 1);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
      double double0 = MathUtils.factorialLog(8);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(0.0);
      long long0 = MathUtils.pow((long) 8, 0L);
      int int0 = MathUtils.gcd(8, 8);
      int int1 = MathUtils.compareTo(1777.180239741249, (-3644.962976403686), 0.0);
      boolean boolean0 = MathUtils.equals(0.2, (double) 0L);
      int int2 = MathUtils.lcm((-358), 8);
      boolean boolean1 = MathUtils.equals(0.2, (-1777.20201810514), 0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Object object0 = new Object();
      boolean boolean2 = bigInteger0.equals(object0);
      String string0 = bigInteger0.toString();
      String string1 = bigInteger0.toString(950);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      float float1 = MathUtils.sign(0.0F);
      long long1 = MathUtils.pow((long) 950, 0L);
      long long2 = MathUtils.addAndCheck(0L, 479001600L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      double double1 = MathUtils.factorialLog(112);
      int[] intArray0 = new int[3];
      intArray0[0] = 112;
      intArray0[1] = 112;
      intArray0[2] = 112;
      double double2 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-974.914);
      doubleArray0[3] = (-1947.59827871);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 46);
      long long0 = MathUtils.addAndCheck(766L, (long) 46);
      long long1 = MathUtils.pow(479001600L, 4398046511103L);
      double double0 = MathUtils.sign((double) 766L);
      int int0 = MathUtils.gcd(15, 15);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-73));
      int int0 = MathUtils.subAndCheck((-1714), (-788));
      long long0 = MathUtils.addAndCheck((long) (-788), (long) (-788));
      long long1 = MathUtils.subAndCheck(863L, 2401L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2452L, 2452L);
      double double0 = MathUtils.round((-1245.9), 66);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.gcd(243L, 0L);
      long long1 = MathUtils.binomialCoefficient(121, 121);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 121);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 0L, 0.0, (-0.5));
      boolean boolean2 = MathUtils.equals((double) 1L, (double) 121);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 11;
      int int1 = 1271;
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 11, 1271);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,271, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(0, 0);
      int int2 = MathUtils.pow(0, (long) 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.pow(51, 0L);
      double double0 = MathUtils.sign(0.0952233225107193);
      int int1 = MathUtils.subAndCheck(51, 4942);
      long long1 = MathUtils.gcd(2990L, 2990L);
      double double1 = MathUtils.cosh(2990L);
      long long2 = MathUtils.lcm(0L, 2990L);
      // Undeclared exception!
      try { 
        MathUtils.round(102.1868985, (-4891), 51);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.lcm(2213L, 20922789888000L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round(314.412F, 0, 0);
      boolean boolean0 = MathUtils.equals((double) 315.0F, (double) 314.412F, (-2180.06897764405));
      double double0 = MathUtils.scalb((-2180.06897764405), 0);
      int int0 = MathUtils.subAndCheck(0, 0);
      long long1 = MathUtils.indicator(46302134022144000L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2180.06897764405);
      doubleArray0[1] = (double) 46302134022144000L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0, 0.0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathUtils.indicator((-616.972505));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-616.972505);
      doubleArray0[2] = (-616.972505);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 6.283185307179586);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-616.972505);
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-616.972505);
      doubleArray2[4] = (-616.972505);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-616.972505);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray2);
      byte byte0 = MathUtils.sign((byte)11);
      double[] doubleArray3 = MathUtils.normalizeArray(doubleArray0, (-616.972505));
      double double1 = MathUtils.factorialDouble((byte)1);
      double double2 = MathUtils.binomialCoefficientDouble((byte)1, 0);
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-1.0), (double) (-727192415), (double) (byte)11);
      int int1 = MathUtils.addAndCheck(0, (int) (byte)11);
      int[] intArray0 = new int[9];
      intArray0[0] = (-727192415);
      intArray0[1] = 0;
      intArray0[2] = (-727192415);
      intArray0[3] = (-727192415);
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 0;
      intArray0[7] = (int) (byte)1;
      intArray0[8] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }
}
