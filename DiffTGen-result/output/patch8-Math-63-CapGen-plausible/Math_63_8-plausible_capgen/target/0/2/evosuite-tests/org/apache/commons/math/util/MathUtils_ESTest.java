/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:31:02 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.LongStream;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-564.5967962230178);
      doubleArray0[3] = 6.283185307179586;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-564.597 < 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2079.639782554468, 3144807.637150029, (-215.5109599861));
      int[] intArray0 = new int[2];
      intArray0[0] = (-35);
      intArray0[1] = 746;
      int[] intArray1 = new int[9];
      intArray1[0] = 746;
      intArray1[1] = 746;
      intArray1[2] = 1092;
      intArray1[3] = 2401;
      intArray1[4] = 746;
      intArray1[5] = (-35);
      intArray1[6] = (-35);
      intArray1[7] = 746;
      intArray1[8] = (-35);
      double double0 = MathUtils.distance(intArray0, intArray1);
      int int0 = MathUtils.addAndCheck((-1166), (-2356));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.cosh(6.283185307179586);
      long long0 = MathUtils.lcm(9139701367436487243L, 9139701367436487243L);
      int int0 = 537;
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(537, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: 537 - -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.log(483.715551408, 1526.0);
      double double1 = MathUtils.binomialCoefficientDouble(79, 79);
      int[] intArray0 = new int[7];
      intArray0[0] = 79;
      intArray0[1] = 79;
      intArray0[2] = 79;
      intArray0[3] = 79;
      intArray0[4] = 79;
      intArray0[5] = 79;
      intArray0[6] = 79;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.log(1.0, 427.701984);
      int[] intArray1 = new int[4];
      intArray1[0] = 79;
      intArray1[1] = 79;
      intArray1[2] = 79;
      intArray1[3] = 79;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.sinh((-4080.9323));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-4080.9323);
      doubleArray0[5] = (-4080.9323);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck(21, 21);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, (-1392));
      float float0 = MathUtils.indicator(0.0F);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 874;
      intArray0[2] = 1392;
      intArray0[3] = (-1392);
      intArray0[4] = 1392;
      intArray0[5] = (-1392);
      intArray0[6] = 0;
      intArray0[7] = (-1392);
      intArray0[8] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double0 = MathUtils.round(896.921, (-676), 0);
      long long0 = MathUtils.lcm((long) 1392, 362880L);
      float float1 = MathUtils.round((float) 0, 0, 0);
      int[] intArray1 = new int[8];
      intArray1[0] = (-676);
      intArray1[1] = 798;
      intArray1[2] = 0;
      intArray1[3] = (-1392);
      intArray1[4] = (-1392);
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 1634;
      int int2 = MathUtils.distanceInf(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.gcd(Integer.MIN_VALUE, 5248);
      int int1 = MathUtils.sign((-2915));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2915);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) Integer.MIN_VALUE;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 128;
      doubleArray0[6] = (double) Integer.MIN_VALUE;
      doubleArray0[7] = (double) 5248;
      doubleArray0[8] = (double) 5248;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-8));
      int int2 = MathUtils.gcd((-2915), 0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte1 = MathUtils.sign((byte) (-12));
      float float0 = MathUtils.round((float) (byte) (-1), (-4629), 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((byte) (-12));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -12
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-193.65);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-193.65));
      double double0 = MathUtils.log(0.074, (-193.65));
      double double1 = MathUtils.log(1.304E19, 2.7553817452272217E-6);
      int int0 = 224;
      // Undeclared exception!
      try { 
        MathUtils.factorial(224);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.signum();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 362880L);
      byte byte0 = (byte) (-114);
      byte byte1 = MathUtils.indicator((byte) (-114));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1969.4, 1969.4, 0.0);
      float float0 = MathUtils.round(655.84F, 0);
      int int0 = 57;
      int int1 = MathUtils.gcd(33, 57);
      byte byte0 = MathUtils.sign((byte) (-36));
      float float1 = MathUtils.sign((float) 0);
      double double0 = MathUtils.factorialLog(3);
      double double1 = MathUtils.round((-1.7168146928204135), 0);
      int int2 = MathUtils.gcd(0, 134);
      long long0 = MathUtils.pow((-2665L), 94);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-2665L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,665)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = (byte)125;
      byte byte1 = MathUtils.sign((byte)125);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.7168146928204135), 0.5, 14);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-1.7168146928204135);
      doubleArray0[2] = (-1.7168146928204135);
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) (byte)125;
      doubleArray0[5] = (double) 14;
      doubleArray0[6] = 0.5;
      doubleArray0[7] = (-1865.1538);
      doubleArray0[8] = (-1.7168146928204135);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.5 >= -1.717)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = MathUtils.pow(228, (long) 228);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1690.0);
      doubleArray0[1] = (double) 228;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals((-1595.38745831), (-1690.0), 1510.45);
      boolean boolean1 = MathUtils.equals(0.19999998807907104, 0.0, 228);
      long long0 = MathUtils.gcd((-1320L), (long) 228);
      float float0 = MathUtils.round((float) 228, 254);
      float float1 = MathUtils.round((float) 254, 228);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.mulAndCheck(65, 228);
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, (-1690.0), (-2672.4188875));
      int int2 = MathUtils.indicator(52);
      long long1 = MathUtils.indicator(12L);
      boolean boolean3 = MathUtils.equalsIncludingNaN(1510.45, 0.11111095942313305);
      double double2 = MathUtils.sinh(0.0);
      short short0 = MathUtils.sign((short)231);
      // Undeclared exception!
      try { 
        MathUtils.round((-480.9277729910063), 228, 14820);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-2876);
      int int1 = MathUtils.mulAndCheck((-2876), (-2876));
      int int2 = 19;
      double double0 = MathUtils.binomialCoefficientDouble(19, (-2876));
      long long0 = MathUtils.binomialCoefficient(19, 19);
      // Undeclared exception!
      try { 
        MathUtils.round((-1633.102742042), 19, 19);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = (-1772);
      double double0 = MathUtils.scalb((-3096.204317137895), (-1772));
      int int1 = 0;
      int int2 = MathUtils.addAndCheck((-1772), 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1772), (-1772));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,772
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 0;
      float float0 = MathUtils.round((-191.14754F), 0);
      double double0 = MathUtils.round((double) (-191.0F), 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-191.0F);
      doubleArray0[1] = (double) (-191.14754F);
      doubleArray0[2] = (double) (-191.0F);
      doubleArray0[3] = (-1942.04681997678);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-191.14754F);
      doubleArray1[1] = (double) (-191.14754F);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-1329);
      int int1 = MathUtils.indicator((-1329));
      int int2 = 61;
      int int3 = (-44);
      int int4 = MathUtils.gcd(61, (-44));
      long long0 = MathUtils.subAndCheck((long) 1, 2178L);
      long long1 = MathUtils.factorial(0);
      int int5 = 1202;
      int int6 = MathUtils.sign(1202);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equals(6.283185307179586, (double) 0, 1500);
      long long0 = MathUtils.sign(321L);
      float float0 = MathUtils.sign((float) 1L);
      long long1 = MathUtils.lcm((-66L), 338L);
      short short0 = MathUtils.indicator((short)1427);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1500;
      int int1 = MathUtils.hash(doubleArray0);
      short short1 = MathUtils.indicator((short)200);
      long long2 = MathUtils.factorial(19);
      double double0 = MathUtils.scalb(1500, (-536));
      byte byte0 = MathUtils.sign((byte)0);
      double double1 = MathUtils.log(1083666463, 1L);
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.compareTo((-139.1619654), 6.283185307179586, 1023.1314);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 156;
      double double1 = MathUtils.scalb(0.0, 156);
      double double2 = MathUtils.normalizeAngle(0.0, 0.0);
      long long0 = MathUtils.lcm(0L, (-273L));
      int int1 = 16;
      int int2 = MathUtils.lcm(156, 16);
      boolean boolean0 = MathUtils.equals(4.503599627370496E15, 0.0, 16);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.safeNorm(doubleArray0);
      int int3 = 949;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 949, 624);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 84;
      double double0 = MathUtils.binomialCoefficientDouble(84, 84);
      int int1 = (-1046);
      float float0 = MathUtils.round(2310.5088F, (-1046));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.cosh(0.0);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow((-810L), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.indicator(Double.NaN);
      boolean boolean0 = MathUtils.equals(614.595, (-287.124), Double.NaN);
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 63);
      int int0 = MathUtils.hash((-2434.026809));
      boolean boolean0 = MathUtils.equals((double) 63, 1.0, 0.0);
      long long0 = MathUtils.pow((long) 2035007607, 1746L);
      int[] intArray0 = new int[9];
      intArray0[0] = 2035007607;
      intArray0[1] = 2035007607;
      intArray0[2] = 63;
      intArray0[3] = 2035007607;
      intArray0[4] = 63;
      intArray0[5] = 2035007607;
      intArray0[6] = 12;
      intArray0[7] = 63;
      intArray0[8] = 2035007607;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.scalb(0.0, (-2718));
      int int2 = MathUtils.hash(0.0);
      double double2 = MathUtils.binomialCoefficientDouble(151, (-819));
      int int3 = MathUtils.mulAndCheck(63, 15);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 774.3077847657868);
      byte byte0 = (byte)5;
      byte byte1 = MathUtils.sign((byte)5);
      long long0 = 6722166367014452318L;
      int int0 = MathUtils.pow(0, 6722166367014452318L);
      long long1 = MathUtils.pow((long) (byte)5, 6722166367014452318L);
      float float0 = Float.NaN;
      int int1 = (-1771);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 627, (-1771));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,771, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.570796251296997, 1.570796251296997, 1.570796251296997);
      boolean boolean1 = MathUtils.equalsIncludingNaN(4.503599627370496E15, (-655.0), 4.503599627370496E15);
      byte byte0 = MathUtils.sign((byte)0);
      float float0 = MathUtils.sign((float) (byte)0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (-655.0);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.mulAndCheck((long) (-433278143), (long) (-433278143));
      long long1 = MathUtils.pow(3230L, 5);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.valueOf(351570649784300000L);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger[] bigIntegerArray1 = bigInteger0.divideAndRemainder(bigInteger3);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 351570649784300000L);
      double double0 = MathUtils.scalb(4.503599627370496E15, (byte)0);
      int int1 = MathUtils.indicator((int) (byte)0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-433278143));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -433,278,143
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
      int int0 = MathUtils.addAndCheck(505, 505);
      int int1 = MathUtils.addAndCheck(505, 3355);
      double double1 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equals(2.0, 0.0);
      float float0 = MathUtils.round((float) 1010, 3860);
      int int2 = MathUtils.hash(0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = MathUtils.pow(10, (long) 10);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1410065408, 1410065408);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-2978.142382387631), 1850.682253602531);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2978.142382387631);
      doubleArray0[1] = (-2978.142382387631);
      doubleArray0[2] = 1850.682253602531;
      doubleArray0[3] = 1853.6271188334704;
      doubleArray0[4] = (-2978.142382387631);
      doubleArray0[5] = 1850.682253602531;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1853.6271188334704;
      doubleArray1[1] = (-2978.142382387631);
      doubleArray1[2] = (-2978.142382387631);
      doubleArray1[3] = (-2978.142382387631);
      doubleArray1[4] = (-2978.142382387631);
      doubleArray1[5] = 1853.6271188334704;
      doubleArray1[6] = 1853.6271188334704;
      doubleArray1[7] = 1850.682253602531;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 66;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(66, 952);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 66, k = 952
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      int int0 = MathUtils.sign((int) (short)0);
      long long0 = MathUtils.indicator(2147483647L);
      int int1 = MathUtils.lcm(0, (-3293));
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int2 = MathUtils.hash(0.04168701738764507);
      int[] intArray0 = new int[3];
      intArray0[0] = 253186103;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)0;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.indicator((long) (short)0);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, (-1352), (-2772));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,772, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(1.0F);
      int int0 = MathUtils.compareTo(0.0, 0.0, (-2838.359458));
      int int1 = MathUtils.mulAndCheck(11, (-1967));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger2 = bigInteger0.shiftRight((-1967));
      long long1 = bigInteger0.longValueExact();
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientDouble(62, (-21637));
      int int2 = MathUtils.gcd((-21637), 962);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(1859, 1976);
      float float0 = MathUtils.sign((float) 1976);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(120);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byte byte0 = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)74;
      byte byte1 = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      try { 
        MathUtils.pow(bigInteger0, (-2919L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,919)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign(2361L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2361L;
      doubleArray1[1] = (double) 2361L;
      doubleArray1[2] = (double) 1L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,361 >= 2,361)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.factorialLog(128);
      int int0 = MathUtils.sign(128);
      short short0 = MathUtils.sign((short)17);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1;
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(7910884519577875640L, 7910884519577875640L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1514), (-1514));
      float float0 = MathUtils.indicator((-223.0F));
      int int1 = MathUtils.indicator((-3028));
      boolean boolean0 = MathUtils.equals((double) (-1.0F), (double) (-1.0F));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1514);
      intArray0[1] = 221;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(42.0, (double) 221, (-1514));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      long long1 = bigInteger0.longValueExact();
      byte byte0 = bigInteger0.byteValueExact();
      boolean boolean0 = bigInteger0.equals("");
      BigInteger bigInteger2 = bigInteger0.negate();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      int int0 = MathUtils.indicator(0);
      double double1 = MathUtils.round(0.0, 0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      int int1 = 1107;
      intArray0[0] = 1107;
      intArray0[1] = 1;
      double double2 = MathUtils.distance(intArray0, intArray0);
      double double3 = 0.75;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 0.75, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 627L;
      long long1 = MathUtils.lcm(627L, (-1461L));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 627L;
      doubleArray0[2] = (double) (-1461L);
      doubleArray0[3] = (double) (-1461L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 708;
      // Undeclared exception!
      try { 
        MathUtils.round((-1247.26806009), 750, 708);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = 492L;
      long long1 = MathUtils.sign(492L);
      double double0 = (-1702.979341375);
      double double1 = MathUtils.sign((-1702.979341375));
      float float0 = MathUtils.indicator((float) 492L);
      int int0 = MathUtils.sign(153);
      short short0 = MathUtils.sign((short) (-1447));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("convergence failed");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.convergence failed
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = MathUtils.sign((-2146865310));
      double double0 = MathUtils.cosh(1325.22896893);
      int int1 = MathUtils.mulAndCheck((-1), 4335);
      short short0 = MathUtils.sign((short) (-1161));
      int int2 = MathUtils.sign((-4335));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-4335), (double) 4335);
      double double1 = MathUtils.scalb((-2350.811), 4335);
      int int3 = MathUtils.sign((-883));
      try { 
        MathUtils.pow(9147798326946086803L, (-1607));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (9,147,798,326,946,086,803^-1,607)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 897.489278418652;
      doubleArray0[1] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.indicator(Float.NaN);
      int int0 = MathUtils.subAndCheck(191, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 191;
      intArray0[1] = 0;
      intArray0[2] = 191;
      intArray0[3] = 0;
      intArray0[4] = 191;
      intArray0[5] = 191;
      intArray0[6] = 191;
      intArray0[7] = 0;
      intArray0[8] = 191;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 8.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(8.0, 3.141592653589793, 8.0);
      long long0 = MathUtils.pow(0L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 8.0;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 8.0;
      doubleArray0[6] = 3.141592653589793;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long1 = 1944L;
      long long2 = MathUtils.addAndCheck(1L, 1944L);
      double double1 = MathUtils.binomialCoefficientDouble(16, 16);
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = 492;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 0, 492);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-241.0549683651769);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 3547.11478731671;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long0 = MathUtils.indicator((-2616L));
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.factorialDouble(0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-835.1700023104), (-1955));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3242;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3242;
      doubleArray0[1] = 0.0;
      int int1 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distance(intArray0, intArray0);
      int int2 = (-1028);
      int int3 = MathUtils.addAndCheck(3242, (-1028));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,242 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = MathUtils.round(3984.3025F, (-1326));
      int int0 = (-2127);
      try { 
        MathUtils.pow((-1326), (-2127));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,326^-2,127)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        MathUtils.pow(58, (-1627));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (58^-1,627)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.gcd(1510, 1510);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1510, 1.1102230246251565E-16, (double) 1510);
      double double0 = MathUtils.binomialCoefficientDouble(1510, 1510);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(6, 1510);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 6, k = 1,510
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double0 = 6.283185307179586;
      int int0 = 4194304;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (short)0, 6.283185307179586, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = 6722166367014452318L;
      long long1 = 9218868437227405312L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(6722166367014452318L, 9218868437227405312L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 6,722,166,367,014,452,318 + 9,218,868,437,227,405,312
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 2888L;
      long long1 = MathUtils.pow((-1834L), 2888L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1834L);
      double[] doubleArray1 = new double[1];
      double double0 = 759.8717581203234;
      doubleArray1[0] = 759.8717581203234;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = (-3139);
      // Undeclared exception!
      try { 
        MathUtils.round(5626.22276012971, (-3139), (-3139));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(2273.4932330758575, 0.0, (-3806));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.compareTo((-1778.433514181141), (-1778.433514181141), (-1778.433514181141));
      int int1 = MathUtils.mulAndCheck(0, 0);
      short short0 = MathUtils.indicator((short)20);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)20;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)20;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.sign((long) 0);
      float float0 = MathUtils.round((float) 0, (int) (short)20);
      long long1 = MathUtils.pow(4577762542105553359L, (long) (short)1);
      int int2 = (-4488);
      int int3 = MathUtils.sign((-4488));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2862, 251);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(523L, 523L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1737.753, 0.0);
      long long1 = MathUtils.pow(523L, 10);
      boolean boolean1 = MathUtils.equals((double) 523L, (-1361.9250198925747), 10);
      int int0 = MathUtils.gcd(627, 627);
      int int1 = (-629);
      try { 
        MathUtils.pow((long) 627, (-629));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (627^-629)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = MathUtils.round((-129.97755F), (-987));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-987);
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) (-129.97755F);
      doubleArray0[3] = (double) (-987);
      doubleArray0[4] = (double) (-987);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.304E19);
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.hash(0.0);
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
      try { 
        MathUtils.pow((long) 0, (-987));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-987)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = (byte) (-82);
      byte byte1 = MathUtils.indicator((byte) (-82));
      long long0 = (-170L);
      long long1 = MathUtils.mulAndCheck((long) (byte) (-1), (-170L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (-170L);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -170)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.scalb(979.977002, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-116.0);
      doubleArray0[1] = 979.977002;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 979.977002;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-116.0));
      long long0 = MathUtils.pow((long) 0, (long) 0);
      long long1 = MathUtils.factorial(0);
      double double1 = MathUtils.normalizeAngle(1L, 1.304E19);
      int int0 = MathUtils.pow(0, 15);
      long long2 = MathUtils.pow(0L, 15);
      double double2 = MathUtils.cosh((-2820.7171261));
      int int1 = MathUtils.gcd((-1436), (-550));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-1436);
      intArray0[3] = (-550);
      intArray0[4] = (-550);
      intArray0[5] = (-1436);
      intArray0[6] = 15;
      intArray0[7] = (-1436);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-98);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1494.80377));
      long long0 = MathUtils.pow(0L, 0L);
      double double0 = MathUtils.normalizeAngle(1L, 1L);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.factorial(0);
      long long3 = MathUtils.mulAndCheck(0L, 900L);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 38;
      long long0 = (-298L);
      try { 
        MathUtils.pow(38, (-298L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (38^-298)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 1040L;
      long long1 = MathUtils.indicator(1040L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1040L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = (-1329);
      int int1 = MathUtils.indicator((-1329));
      int int2 = MathUtils.gcd((-1), (-1329));
      long long0 = MathUtils.subAndCheck((long) 1, 2178L);
      long long1 = MathUtils.factorial(0);
      int int3 = 1202;
      int int4 = MathUtils.sign(1202);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-7278142539171889152L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-7278142539171889152L), (-901L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1635, 1635);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1635;
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1901.051);
      byte byte0 = MathUtils.indicator((byte) (-58));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double0 = MathUtils.distance1(doubleArray1, doubleArray0);
      float float0 = MathUtils.indicator((float) (byte) (-58));
      long long0 = MathUtils.subAndCheck((long) 0, 0L);
      double double1 = MathUtils.normalizeAngle((-2397.6), 1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4875.8);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2121.9273);
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-191.14754F);
      doubleArray0[3] = (-1942.04681997678);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-191.14754F);
      doubleArray1[1] = (double) (-191.14754F);
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 0.0, (-6.663542893624021E-14));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.lcm(95, (-423));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 40185;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(4294967295L, 0L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 927.743;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3453.199094880722;
      doubleArray0[4] = 0.01745329052209854;
      doubleArray0[5] = 317.3891385986592;
      doubleArray0[6] = 3579.208447056218;
      doubleArray0[7] = 842.73605275068;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd((-2235), 442);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3.141592653589793), (-3.141592653589793), 2714);
      double double0 = MathUtils.sign(0.0);
      byte byte0 = MathUtils.indicator((byte)105);
      int int0 = MathUtils.lcm((-3554), 0);
      double double1 = MathUtils.normalizeAngle((byte)105, (-525.025384234));
      long long0 = MathUtils.lcm(0L, 0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 17);
      boolean boolean1 = MathUtils.equals((-321.32101564), (double) 17);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-525.025384234);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (-3554);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 479001600L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1651));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,651
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      long long0 = MathUtils.sign(31L);
      float float1 = MathUtils.round((float) 1L, 0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 2.0F);
      long long1 = MathUtils.factorial(0);
      int int0 = 18;
      float float2 = MathUtils.round(2.0F, 18);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      int int1 = MathUtils.pow(4, (long) 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 4;
      int int2 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = MathUtils.round(2351.39F, 7, 7);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2351.39F;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 2351.39F;
      doubleArray0[3] = (double) 7;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(179, 179);
      long long0 = MathUtils.lcm((long) 179, (long) 7);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int1 = MathUtils.mulAndCheck(61, 61);
      int[] intArray0 = new int[7];
      intArray0[0] = 3721;
      intArray0[1] = 3721;
      intArray0[2] = 7;
      intArray0[4] = 1268945387;
      intArray0[5] = 179;
      intArray0[6] = (-1226);
      double double2 = MathUtils.distance(intArray0, intArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      short short0 = MathUtils.indicator((short)3344);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.mulAndCheck((int) (short)1, (-1340));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0036;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2099.32289;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0036;
      doubleArray1[5] = 1.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-477), 11);
      int int1 = MathUtils.hash((double) (-488));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-477), 0.1818181574344635, (-477));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(7, 7);
      int int0 = MathUtils.compareTo(0.0, (-267.4), 0.0);
      double double2 = MathUtils.indicator(1.0);
      long long0 = MathUtils.addAndCheck((long) 1, (long) 1);
      int int1 = MathUtils.subAndCheck(0, 1);
      MockRandom mockRandom0 = new MockRandom(2L);
      LongStream longStream0 = mockRandom0.longs((long) 15);
      BigInteger bigInteger0 = new BigInteger(15, 7, mockRandom0);
      double double3 = mockRandom0.nextDouble();
      BigInteger bigInteger1 = bigInteger0.pow(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double double0 = MathUtils.indicator((double) 0L);
      float float0 = MathUtils.round((float) 0L, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1924, (-4072));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (int) (byte) (-26));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (97,117,696^-26)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 1.0;
      double double1 = MathUtils.round(1.0, (-379));
      int[] intArray0 = new int[7];
      intArray0[0] = (-379);
      intArray0[1] = (-379);
      intArray0[2] = (-379);
      intArray0[3] = (-379);
      intArray0[4] = (-379);
      intArray0[5] = (-379);
      intArray0[6] = (-379);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 17;
      double double0 = MathUtils.scalb(2096.903, 17);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2096.903;
      doubleArray0[2] = 2.74845270016E8;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int1 = MathUtils.mulAndCheck(17, 2993);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = (-296L);
      try { 
        MathUtils.pow((long) 2993, (-296L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,993^-296)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.gcd(996L, 996L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3142.95541530138);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1325.22896893, 0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, (-3142.95541530138), (-536));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte byte1 = MathUtils.sign((byte) (-61));
      double double0 = MathUtils.binomialCoefficientLog(1143, 42);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double double1 = MathUtils.sign((double) (byte) (-1));
      int int0 = MathUtils.addAndCheck(4194304, 1703);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(1015.85394F, 0, 1010);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,010, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(322.725455955343, 0);
      int int1 = MathUtils.pow(0, 601);
      long long0 = (-1201L);
      try { 
        MathUtils.pow((-1201L), (-1201L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,201^-1,201)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = MathUtils.indicator((-46.36F));
      long long0 = MathUtils.pow((-752L), 1L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.058823529411764705;
      doubleArray0[1] = (-3594.9277045);
      doubleArray0[2] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.indicator((float) (-802543695));
      byte byte0 = MathUtils.indicator((byte)127);
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.indicator((-1.0F));
      long long0 = MathUtils.indicator((long) (byte)1);
      long long1 = MathUtils.addAndCheck((-5034868814120038111L), (long) (-802543695));
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short) (byte)127);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-802543695));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -802,543,695
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.round(1163.59637186, 0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1163.59637186;
      doubleArray0[2] = 1.0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      double double3 = MathUtils.scalb(1164.0, 0);
      double double4 = MathUtils.factorialDouble(0);
      double double5 = MathUtils.indicator(3887.87566164);
      double double6 = MathUtils.binomialCoefficientLog(0, 0);
      long long1 = MathUtils.gcd((-538L), (-538L));
      int int1 = MathUtils.lcm(63, 63);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 4499201580859392L;
      long long1 = 0L;
      long long2 = MathUtils.mulAndCheck(4499201580859392L, 0L);
      int int0 = (-3094);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-3094), (-3094));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,094, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sinh(0.0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1198.88928;
      doubleArray0[1] = (-388.8703685306);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1511.8453);
      doubleArray0[4] = (-990.9174912);
      doubleArray0[5] = (-1744.352236721654);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-1744.352236721654), (-1260.9348), (-1744.352236721654));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.indicator(3.834E-20);
      double double1 = MathUtils.normalizeAngle(1.0, 1899.1075993350196);
      int int0 = MathUtils.addAndCheck((-509), (-509));
      int int1 = MathUtils.sign((-1018));
      BigInteger bigInteger0 = null;
      int int2 = 695;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 695);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2519, 2519);
      int int0 = MathUtils.lcm(8, 2519);
      int int1 = MathUtils.subAndCheck(20152, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 20152;
      intArray0[1] = 2519;
      intArray0[2] = 0;
      double double1 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.sign((-2348));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)17);
      double double0 = MathUtils.sign(Double.NEGATIVE_INFINITY);
      int[] intArray0 = new int[0];
      double double1 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck((long) (byte)17, 0L);
      int int0 = MathUtils.mulAndCheck(4, (int) (byte)17);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-661));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -661
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3.834E-20, 3.834E-20);
      long long0 = MathUtils.lcm((-690L), 1418L);
      int int0 = MathUtils.addAndCheck(709, (-31));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 2210.28687;
      boolean boolean0 = MathUtils.equals(2210.28687, 2210.28687, 2210.28687);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = (-4478);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-4478));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,478
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(186);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-456);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-456));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -456
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1267);
      int int0 = MathUtils.gcd((int) (short)1, (int) (short)1);
      double double0 = MathUtils.factorialDouble(0);
      short short1 = MathUtils.indicator((short)1267);
      long long0 = MathUtils.pow(1238L, 156);
      // Undeclared exception!
      try { 
        MathUtils.round(2413.36587, 128, (int) (short)1267);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      int int0 = MathUtils.lcm(0, 0);
      double double1 = MathUtils.cosh(6.283185307179586);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 3152, 0);
      double double0 = MathUtils.sign((double) 1.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3152;
      doubleArray0[4] = (double) 1.0F;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck((-1637), (-1616));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.indicator(2756);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2756;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2756;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2756;
      doubleArray0[7] = (double) 2756;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.mulAndCheck(0, 0);
      short short0 = MathUtils.indicator((short) (byte)0);
      int int2 = MathUtils.hash((double) (byte)0);
      int int3 = MathUtils.subAndCheck((int) (short)1, 0);
      long long0 = MathUtils.sign(2000L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.scalb(Double.POSITIVE_INFINITY, (byte)0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1885);
      float float0 = MathUtils.sign((float) (short)1885);
      long long0 = MathUtils.subAndCheck((-1920L), (long) (short)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1920L);
      doubleArray0[1] = (double) (short)1885;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.addAndCheck((long) (short)1, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger3);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.sign(604);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(1560);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.SAFE_MIN;
      int int1 = MathUtils.indicator(604);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3874.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.factorialDouble(0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
      float float0 = MathUtils.sign((-2526.397F));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 3874.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-2105L), (-830L));
      float float0 = MathUtils.indicator((float) (-2105L));
      int[] intArray0 = new int[6];
      intArray0[0] = (-1292);
      intArray0[1] = 63;
      intArray0[2] = (-2135);
      intArray0[3] = 251;
      intArray0[4] = 449;
      intArray0[5] = (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1989L, 1989L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, (-2014), (-845));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -845, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1722.7354269711002;
      doubleArray0[1] = 4.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-\u221E < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = MathUtils.sign((-193L));
      double double0 = MathUtils.scalb((-1L), 0);
      int int0 = MathUtils.sign(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-193L);
      doubleArray0[1] = (double) (-193L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.and(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      double double0 = MathUtils.cosh(53.1011136944971);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1107.5025;
      doubleArray0[1] = (-4182.50329335);
      doubleArray0[2] = 1388.0;
      doubleArray0[3] = 489.974;
      doubleArray0[4] = 43.5;
      doubleArray0[5] = (-15.39);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals((-3522.0233385235124), (-15.39), 520);
      double double0 = MathUtils.factorialDouble(520);
      long long0 = MathUtils.addAndCheck(120L, 864L);
      long long1 = MathUtils.gcd(0L, (long) 520);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-15.39), (-801.434258732648));
      double double1 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 520;
      intArray0[1] = 520;
      intArray0[2] = 520;
      intArray0[3] = 520;
      intArray0[4] = 520;
      intArray0[5] = 520;
      int[] intArray1 = new int[6];
      intArray1[0] = (-551);
      intArray1[1] = 520;
      intArray1[2] = 520;
      intArray1[3] = 520;
      intArray1[4] = 1138;
      intArray1[5] = 520;
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.sign(2147L);
      long long1 = MathUtils.gcd(0L, (-1L));
      short short0 = MathUtils.sign((short)7);
      long long2 = MathUtils.gcd(1L, 0L);
      double double0 = MathUtils.log((-1L), (-90.5348720453295));
      double double1 = MathUtils.indicator((double) 1L);
      int int0 = MathUtils.compareTo(1L, (-2178.76998021711), 817.01);
      int int1 = MathUtils.sign(1);
      double double2 = MathUtils.indicator(0.0);
      int int2 = MathUtils.lcm(0, 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2147L;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 2147L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 2147L;
      doubleArray0[6] = (-2178.76998021711);
      doubleArray0[7] = Double.NaN;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-90.5348720453295));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = (-239);
      int int1 = 4046;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-239), 4046);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -239, k = 4,046
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.hash((-2694.308));
      short short0 = (short) (-2136);
      short short1 = MathUtils.indicator((short) (-2136));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-772), (short) (-2136));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -772
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.indicator((short)1030);
      double double0 = MathUtils.round((double) (short)1030, 256);
      double double1 = MathUtils.factorialDouble(256);
      byte byte0 = MathUtils.indicator((byte) (-87));
      long long0 = MathUtils.indicator((long) (byte) (-1));
      short short2 = MathUtils.indicator((short) (byte) (-1));
      double double2 = MathUtils.scalb(0.0, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) (-1), 5.0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 1757;
      int int1 = MathUtils.subAndCheck(1757, 1757);
      double double0 = MathUtils.sinh(0);
      double double1 = 0.15;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.15, 3.141592653589793);
      double double2 = MathUtils.binomialCoefficientDouble(1757, 0);
      int int2 = 2022;
      int int3 = 389;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2022, 389);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = MathUtils.sign(2739);
      short short0 = MathUtils.indicator((short)17);
      double double0 = MathUtils.binomialCoefficientDouble(248, (-1198));
      boolean boolean0 = MathUtils.equals(1442.5076324319064, (double) (-1198), 67);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2462.72), 0.0, (-2462.72));
      double double0 = MathUtils.cosh((-2462.72));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.sign(5040L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(784, 3892);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 784, k = 3,892
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3143);
      long long1 = MathUtils.pow((long) 3143, 0);
      long long2 = MathUtils.pow(0L, 1397);
      double double0 = MathUtils.factorialDouble(0);
      long long3 = MathUtils.sign(0L);
      int int1 = MathUtils.pow(0, 0);
      long long4 = MathUtils.binomialCoefficient(228, 0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(95, (-423));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-328);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-328), (-423));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -328
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      int int0 = MathUtils.subAndCheck((int) (short)1, (int) (short)0);
      long long0 = MathUtils.pow(0L, 740L);
      int int1 = MathUtils.gcd((int) (short)1, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.pow((-2104L), 1322L);
      double double0 = MathUtils.sinh(576.5);
      int int0 = MathUtils.addAndCheck((-2966), (-283));
      long long1 = MathUtils.pow((-4267615245585081135L), 52);
      double double1 = MathUtils.round(55.0, (-3249));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 12;
      int int1 = MathUtils.gcd(12, 12);
      double double0 = MathUtils.round(715.0, (-386));
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 12, (-0.2499999701976776));
      int int2 = 419;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1165, 419);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1339, (-5630));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 460.27, 34.0975419956);
      int int1 = MathUtils.pow((-1), 66);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2797.1864);
      doubleArray0[1] = (double) 1;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck(0, (-392));
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1832.1, 1832.1);
      int int0 = MathUtils.sign(1516);
      long long0 = MathUtils.lcm((-412L), 0L);
      float float0 = MathUtils.round((-897.7528F), (-693));
      int int1 = MathUtils.compareTo(2029.7385068882454, (-412L), 0L);
      long long1 = MathUtils.gcd(3687L, (-939L));
      double double0 = MathUtils.scalb(2029.7385068882454, 318);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.compareTo(0.75, 0.75, 1.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2544);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-1160L), (-4035746434778044925L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float float0 = MathUtils.round((-1572.255F), 17);
      long long0 = MathUtils.mulAndCheck((long) 17, (-1248L));
      boolean boolean0 = MathUtils.equals((double) 17, (double) 17, 202);
      int int0 = MathUtils.mulAndCheck((-1697), 17);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow((byte)67);
      try { 
        MathUtils.pow(bigInteger0, (-594L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-5,844,413^-594)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3952090531849364496L);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.5000000000042687, 0.5000000000042687, (-0.16624879837036133));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-591.785879);
      doubleArray0[4] = (-1955.3678640469816);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (10 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(52, 52);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = MathUtils.round((-2770.144F), 2882);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2882, 0.0, 2882);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2770.144F);
      doubleArray0[1] = (double) 2882;
      doubleArray0[2] = (double) (-2770.144F);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2770.144F);
      doubleArray0[5] = (double) 2882;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2882;
      intArray0[1] = 2882;
      intArray0[2] = 2882;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2770.14404296875));
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)20);
      int int2 = MathUtils.lcm((int) (byte)20, 2882);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(0.0, 0);
      int int0 = MathUtils.addAndCheck(492, 48);
      short short0 = MathUtils.indicator((short)0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.subAndCheck(1L, 0L);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 492;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 492;
      intArray0[4] = (int) (short)0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.binomialCoefficientLog(2761, 492);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.lcm(540, 540);
      int int3 = MathUtils.hash(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2282.30892038626));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.log((-926.772704663951), (-926.772704663951));
      long long0 = MathUtils.mulAndCheck(2440L, 2440L);
      int int0 = 86;
      float float0 = MathUtils.round((-1035.0F), 86);
      boolean boolean0 = MathUtils.equals((-926.772704663951), (double) 2440L, (double) Float.NaN);
      int int1 = 8684;
      double double1 = MathUtils.factorialDouble(8684);
      int int2 = (-1505);
      // Undeclared exception!
      try { 
        MathUtils.round((-2228.0945F), (-1505), (-1505));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,505, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 449.136776205;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1718.657426;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 1,718.657)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.hash((double) 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.factorialLog(23);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 78;
      // Undeclared exception!
      try { 
        MathUtils.factorial(78);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.gcd(387L, (-4828L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-4828L);
      doubleArray0[2] = (double) (-4828L);
      doubleArray0[3] = (double) (-4828L);
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.6366197723675814);
      long long1 = MathUtils.addAndCheck(1L, 387L);
      double double0 = MathUtils.binomialCoefficientLog(108, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2764);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(83.0978460942, 0.0);
      float float0 = MathUtils.indicator(3620.811F);
      long long2 = MathUtils.lcm(1L, 0L);
      double double1 = MathUtils.safeNorm(doubleArray1);
  }
}
