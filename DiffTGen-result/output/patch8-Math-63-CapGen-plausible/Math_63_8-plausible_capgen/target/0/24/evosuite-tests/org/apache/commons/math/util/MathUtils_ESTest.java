/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:42:06 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(4505.993587438426, 4505.993587438426);
      int int0 = MathUtils.subAndCheck(1570, 260);
      double double0 = MathUtils.indicator(Double.NaN);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2030));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,030
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-574L), 1407L);
      byte byte0 = MathUtils.sign((byte) (-102));
      byte byte1 = MathUtils.indicator((byte) (-61));
      short short0 = MathUtils.sign((short)2536);
      long long1 = MathUtils.mulAndCheck((-574L), 4038L);
      int int0 = MathUtils.sign((int) (short)2536);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2317812L);
      doubleArray0[2] = (double) (byte) (-61);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-574L);
      doubleArray0[5] = (double) (byte) (-61);
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = MathUtils.sign((float) (short)2536);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, (double) (-2317812L), (-573));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2491.87, (-1708.0));
      int int0 = (-309);
      byte byte0 = MathUtils.indicator((byte)16);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-309);
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.lcm((long) (-309), (-2147483648L));
      int int1 = MathUtils.gcd(0, (int) (byte)16);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean1 = bigInteger0.testBit((byte)16);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2122L);
      double double0 = Double.NaN;
      boolean boolean2 = MathUtils.equalsIncludingNaN(2491.87, Double.NaN, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.round(258.72580509, 67, 895);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = (-2146491944);
      double double0 = MathUtils.scalb(4015.5860846084, (-2146491944));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-2146491944), (-2146491944));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2454.35);
      doubleArray0[1] = (-915.2606696228256);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.gcd(0, 185);
      float float0 = MathUtils.round((float) 0, 185);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float float0 = MathUtils.round(1850.8213F, 221);
      long long0 = (-1640L);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 221;
      intArray0[1] = 1449;
      intArray0[2] = 2498;
      intArray0[3] = (-1);
      intArray0[4] = (-1642);
      intArray0[5] = (-1073741823);
      intArray0[6] = 5301;
      intArray0[7] = 163;
      intArray0[8] = (-1109);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.binomialCoefficientLog(4995, (-1109));
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 163;
      doubleArray0[1] = (double) 4995;
      doubleArray0[2] = (double) (-1073741823);
      doubleArray0[3] = 1307.6274295288;
      doubleArray0[4] = (double) 221;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 5301);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = MathUtils.sign((-2267));
      int int1 = (-1350);
      int int2 = MathUtils.indicator((-1350));
      long long0 = MathUtils.pow((-2418L), 720L);
      double double0 = MathUtils.cosh(3463.245329);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6.663542893624021E-14);
      doubleArray0[1] = (-3102.555306913987);
      doubleArray0[2] = (double) 720L;
      doubleArray0[3] = (double) (-2267);
      doubleArray0[4] = (-1188.11);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2418L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2787.7772280954946, 2.0, 17);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 17);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 199;
      int int1 = 27;
      int int2 = MathUtils.pow(199, 27);
      // Undeclared exception!
      MathUtils.factorialDouble(668574551);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = MathUtils.indicator(160.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN);
      float float1 = 0.0F;
      float float2 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      float float3 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int0 = bigInteger0.compareTo(bigInteger1);
      int int1 = 962;
      boolean boolean1 = bigInteger0.testBit(962);
      BigInteger bigInteger2 = BigInteger.valueOf(962);
      int int2 = bigInteger0.intValue();
      BigInteger[] bigIntegerArray0 = bigInteger1.divideAndRemainder(bigInteger0);
      String string0 = bigInteger0.toString(432);
      try { 
        MathUtils.pow(bigInteger0, (-3070));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,070)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float0 = 0.0F;
      float float1 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.log(5046.62316563212, 929.0);
      int int0 = MathUtils.sign((-27));
      long long0 = 9223372036854775807L;
      long long1 = MathUtils.subAndCheck((long) (-1), 9223372036854775807L);
      int int1 = 929;
      int int2 = MathUtils.mulAndCheck(929, (-1));
      long long2 = MathUtils.gcd((long) (-929), 9223372036854775807L);
      long long3 = MathUtils.mulAndCheck(24L, (long) (-1));
      long long4 = (-29L);
      long long5 = MathUtils.sign((-29L));
      int int3 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1955);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,955
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 19.47895;
      doubleArray0[1] = 2.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)1257);
      int int0 = MathUtils.lcm(1660, (int) (short)1257);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (short)1257;
      doubleArray1[1] = (double) 2086620;
      doubleArray1[2] = (double) 2086620;
      doubleArray1[3] = (double) (short)1;
      doubleArray1[4] = 19.47895;
      doubleArray1[5] = (double) (short)1;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (short)1, 2086620.0, 13.07);
      int int1 = MathUtils.indicator(1060);
      int int2 = MathUtils.gcd((int) (short)1257, (-2489));
      int int3 = MathUtils.compareTo(0.0, (-388.592589198), Double.NaN);
      int int4 = MathUtils.mulAndCheck(0, (-2489));
      boolean boolean2 = MathUtils.equals(0.0, (-500.4930188), 13.07);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2098.1921);
      doubleArray0[1] = (-1062.8597793962);
      doubleArray0[2] = 916.390564;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 7.549789948768648E-8;
      doubleArray0[5] = 924.0198;
      doubleArray0[6] = 3.834E-20;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.indicator((-2098.1921));
      short short0 = MathUtils.indicator((short)0);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.factorialLog((short)0);
      int int0 = MathUtils.indicator(37);
      double double4 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign((-2357L));
      short short1 = MathUtils.indicator((short)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.0);
      boolean boolean1 = MathUtils.equals((-1.7168146928204135), 1.0);
      int int0 = MathUtils.lcm(564, 1423);
      int int1 = MathUtils.lcm(564, 2790);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      int int2 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      long long0 = MathUtils.gcd((-3031L), (-3031L));
      int int0 = MathUtils.gcd(0, (-1800));
      try { 
        MathUtils.pow((BigInteger) null, (-1800));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,800)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.sinh(1388.2593753864355);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = 1598L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9218868437227405312L, 1598L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-217.75983), (-217.75983));
      int int0 = MathUtils.indicator(199);
      int int1 = 0;
      int int2 = MathUtils.pow(95, 0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4611686018427387904L, 4625478292286210048L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 67;
      intArray0[1] = 59;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1057;
      intArray0[6] = (-3538);
      intArray0[7] = 411;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.subAndCheck((long) 1057, (long) 0);
      long long1 = MathUtils.mulAndCheck(0L, (-2922L));
      int int0 = MathUtils.pow(0, (long) 0);
      long long2 = MathUtils.lcm((long) 0, 1136L);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1057;
      doubleArray0[2] = (double) 1057L;
      doubleArray0[3] = (double) 67;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1338;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-73);
      byte byte1 = MathUtils.sign((byte) (-73));
      int int0 = MathUtils.sign((int) (byte) (-1));
      double double0 = MathUtils.sign((double) (-1));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-53);
      byte byte1 = MathUtils.sign((byte) (-53));
      int int0 = 40;
      int int1 = MathUtils.pow(40, 40);
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      double double0 = MathUtils.sinh(0);
      long long0 = MathUtils.pow((-939L), 0);
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      int int1 = MathUtils.addAndCheck(0, 0);
      boolean boolean1 = MathUtils.equals(0.0, (double) (-939L));
      int int2 = MathUtils.indicator((-4560));
      int int3 = MathUtils.gcd(1163, 0);
      double double1 = MathUtils.indicator((double) 1163);
      long long1 = MathUtils.indicator((long) (-1));
      double double2 = MathUtils.sinh(1535.0);
      // Undeclared exception!
      try { 
        MathUtils.equals(2474.5470917, 0.0, (-97));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.087, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.087, 0.0, 1991.9);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-404);
      intArray0[2] = 416;
      intArray0[3] = 613;
      intArray0[4] = 0;
      intArray0[5] = 1154;
      intArray0[6] = 360;
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 613;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.log((byte)0, (byte)0);
      int int0 = MathUtils.addAndCheck((int) (byte)0, (int) (byte)0);
      long long0 = MathUtils.subAndCheck((long) (byte)0, (-432L));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.compareTo(0.0, 1339.2897972154578, 1339.2897972154578);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1339.2897972154578;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-884);
      int int1 = MathUtils.indicator((-884));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-884);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-884);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-884);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1 >= -884)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      short short0 = MathUtils.indicator((short)622);
      boolean boolean1 = MathUtils.equalsIncludingNaN(5.669184079525E-24, (double) (short)622, (double) (short)622);
      double double0 = MathUtils.normalizeAngle((-2722.301), 0.5000000000042687);
      int int0 = MathUtils.addAndCheck((int) (short)622, (int) (short)1);
      double double1 = MathUtils.sign(0.0);
      int int1 = MathUtils.pow(213, 1142L);
      byte byte0 = MathUtils.indicator((byte)11);
      byte byte1 = MathUtils.indicator((byte)18);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(205, mockRandom0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)11);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1382L, 1382L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2764L, 0.0, (double) 2764L);
      float float0 = MathUtils.indicator((float) 1382L);
      boolean boolean1 = MathUtils.equals(1259.89124774, (-1.9841269659586505E-4), (double) 1.0F);
      int int0 = MathUtils.gcd(1202, 1202);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1202, 0, 1202);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3227.8219272;
      doubleArray0[1] = (-2766.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.940510424527919E-20);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = 1574.566;
      doubleArray0[6] = (-180.911);
      doubleArray0[7] = (-3477.852316176259);
      doubleArray0[8] = 1530.8597921019898;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(1574.566);
      double double2 = MathUtils.normalizeAngle((-626.4277644), (-3477.852316176259));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 237.2779028, 237.2779028);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 3.141592653589793);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.sinh(1560.1852403);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      int int0 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ONE;
      short short0 = bigInteger3.shortValueExact();
      BigInteger bigInteger4 = bigInteger0.setBit(230);
      float float0 = bigInteger3.floatValue();
      BigInteger bigInteger5 = bigInteger3.negate();
      byte[] byteArray0 = bigInteger3.toByteArray();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger3);
      int int1 = 146;
      double double1 = MathUtils.round(Double.POSITIVE_INFINITY, 146, 0);
      int int2 = 0;
      float float1 = MathUtils.round(111.5843F, 146, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 146);
      long long1 = MathUtils.mulAndCheck((long) 146, 2742L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) Float.NaN, (double) 2742L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialDouble(1115);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(0L, 0L);
      float float0 = MathUtils.indicator((float) 0L);
      long long1 = MathUtils.pow((long) 1115, 1115);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = (-1099.2);
      boolean boolean1 = MathUtils.equals((-1099.2), 2.356194490192345, 1115);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = 2.356194490192345;
      double double3 = MathUtils.distance(doubleArray0, doubleArray1);
      int int0 = MathUtils.pow(1115, 66);
      float float1 = MathUtils.round((float) 2358114483498520195L, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = MathUtils.gcd(137, (-2124));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2124);
      doubleArray0[1] = (double) (-2124);
      doubleArray0[2] = (double) (-2124);
      doubleArray0[3] = (double) (-2124);
      doubleArray0[4] = (double) (-2124);
      doubleArray0[5] = (double) 137;
      doubleArray0[6] = (double) 137;
      doubleArray0[7] = (double) (-2124);
      doubleArray0[8] = (double) 137;
      double double0 = MathUtils.safeNorm(doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double double0 = MathUtils.cosh(0L);
      double double1 = MathUtils.scalb(1.0, 0);
      long long1 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("g:l8z:I,");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.g:l8z:I,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.log(0.2857142686843872, 0.2857142686843872);
      int[] intArray0 = new int[3];
      intArray0[0] = 1030;
      intArray0[1] = 5;
      intArray0[2] = 0;
      int[] intArray1 = new int[8];
      intArray1[0] = 5;
      intArray1[1] = 5;
      intArray1[2] = 0;
      intArray1[3] = 1030;
      intArray1[4] = 0;
      intArray1[5] = 1030;
      intArray1[6] = 0;
      intArray1[7] = 1030;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1030;
      doubleArray0[1] = (double) 1030;
      doubleArray0[2] = (double) 1030;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1025;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1030;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (1 < 1,025)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 2669.99109;
      double double1 = MathUtils.indicator(2669.99109);
      float float0 = (-2793.386F);
      float float1 = MathUtils.indicator((-2793.386F));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.pow((-1595L), 136L);
      int int0 = MathUtils.hash((-139.27816));
      byte byte0 = MathUtils.sign((byte)10);
      // Undeclared exception!
      try { 
        MathUtils.round(0.030589580535888672, 0, 57);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 2315;
      long long0 = MathUtils.pow(713L, 2315);
      int int1 = 1815;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1815, 2315);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,815, k = 2,315
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.hash(1333.19517202);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(4, mockRandom0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 4);
      BigInteger bigInteger3 = bigInteger2.multiply(bigInteger0);
      BigInteger bigInteger4 = bigInteger2.nextProbablePrime();
      int int1 = 202;
      int int2 = 1830;
      // Undeclared exception!
      try { 
        MathUtils.round(1333.19517202, 202, 1830);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.sign((-1219L));
      double double0 = MathUtils.round((double) (-1219L), 0);
      int int0 = 1595;
      try { 
        MathUtils.pow(1595, (-1219L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,595^-1,219)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.lcm(1L, (long) 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double double0 = MathUtils.distance(doubleArray1, doubleArray1);
      long long2 = MathUtils.binomialCoefficient(199, 199);
      long long3 = MathUtils.sign(1L);
      float float0 = MathUtils.round((float) 0L, 0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        MathUtils.pow((-560), (long) (-560));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-560^-560)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 98;
      int int1 = MathUtils.sign(98);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 98;
      doubleArray0[2] = 1.5707963267948966;
      doubleArray0[3] = (double) 98;
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) 98;
      doubleArray0[6] = (double) 98;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (98 >= 1.571)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(865, 114);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 114;
      MathUtils.checkOrder(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 865, Double.NaN, 141);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1726.3), 0.0);
      int int0 = MathUtils.addAndCheck((-325), (-325));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-650), (double) (-650));
      double double0 = MathUtils.scalb((-1726.3), (-325));
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (long) (-650));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-650)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = MathUtils.lcm((-1380), (-1380));
      long long0 = MathUtils.gcd((long) (-1380), (-408L));
      float float0 = MathUtils.indicator((-1.0F));
      short short0 = MathUtils.sign((short)179);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-3451L), 0L);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.log(0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3451L);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh(0);
      double double2 = MathUtils.indicator((double) 0L);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash((-435.724334495083));
      long long0 = MathUtils.pow((long) 532627558, 214);
      float float0 = MathUtils.indicator((float) 214);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(214, 5244);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 214, k = 5,244
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.lcm(720L, 720L);
      int int0 = MathUtils.gcd((-1119), 52);
      double double0 = MathUtils.sinh(720L);
      boolean boolean0 = MathUtils.equals((double) 1, 0.0, 52);
      short short0 = MathUtils.sign((short) (-3617));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 720L;
      doubleArray0[2] = (double) (-1119);
      doubleArray0[3] = (double) (short) (-3617);
      doubleArray0[4] = (double) 720L;
      doubleArray0[5] = (double) 52;
      doubleArray0[6] = (double) (-1119);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.pow(1108, 1108);
      int int1 = MathUtils.indicator(1108);
      double double0 = MathUtils.sinh(1108);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-729.7329370234679), (-729.7329370234679), (-4075.014457672632));
      float float0 = MathUtils.sign(1.0F);
      double double0 = MathUtils.sign((-1278.966758453));
      int int0 = (-884);
      float float1 = MathUtils.round(1.0F, (-884));
      int int1 = MathUtils.gcd((-884), (-581));
      short short0 = (short)1421;
      short short1 = MathUtils.indicator((short)1421);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-581));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -581
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-204));
      int[] intArray0 = new int[4];
      intArray0[0] = 4685;
      intArray0[1] = (int) (short) (-204);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.0, 1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = MathUtils.sign((-1268L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-1L), (double) (-1268L));
      double double0 = MathUtils.log((-733.9790687), (-733.9790687));
      double double1 = MathUtils.normalizeAngle(934.63661526032, (-1268L));
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 52;
      intArray0[2] = 0;
      intArray0[3] = 67;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = MathUtils.round((-950.1912F), 1853);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 1853;
      doubleArray0[3] = (double) 1853;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)7;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.cosh(0.11113807559013367);
      double double1 = (-3147.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3147.0), 1150.1374536140872, 1.006182195365655);
      // Undeclared exception!
      try { 
        MathUtils.factorial(33);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm((-1647), 0);
      int int2 = MathUtils.addAndCheck((-1363), (-1647));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-954.8));
      int int3 = MathUtils.mulAndCheck(1, (-1137));
      long long0 = MathUtils.gcd((long) (-3010), 720L);
      short short0 = MathUtils.indicator((short) (-923));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1647);
      doubleArray0[1] = (double) (-1647);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1323.7776694920863;
      doubleArray0[4] = (double) 720L;
      doubleArray0[5] = (double) (-3010);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.pow((long) (-1137), 0);
      int int4 = MathUtils.hash(0.0);
      short short1 = (short)0;
      short short2 = MathUtils.sign((short)0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      try { 
        MathUtils.pow(1727L, (long) (-1363));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,727^-1,363)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = MathUtils.indicator(1384.9205F);
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2150);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      try { 
        MathUtils.pow((-1787L), (-613L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,787^-613)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-17));
      int int0 = 80;
      boolean boolean0 = MathUtils.equals((double) (byte) (-1), (double) (byte) (-1), 80);
      try { 
        MathUtils.pow(80, (int) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (80^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 258.72580509;
      doubleArray0[1] = 4307.04553501;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1692.41782058;
      doubleArray0[4] = (-4.9E-324);
      doubleArray0[5] = 5735.4;
      doubleArray0[6] = (-3052.166970129);
      doubleArray0[7] = 9.313225746154785E-10;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(865, 114);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 865;
      doubleArray0[1] = (double) 114;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (865 >= 114)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = MathUtils.lcm(66, 66);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 66, (double) 66, 66);
      long long0 = MathUtils.gcd((long) 66, (long) 66);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-702.57928358), (double) 66, 83);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 66L;
      doubleArray0[1] = (double) 66;
      doubleArray0[0] = (double) 66L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (66 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.sign(4503599627370495L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4503599627370495L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(3.0, (double) 1L);
      short short0 = MathUtils.indicator((short)225);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      float float0 = MathUtils.round((float) 4503599627370495L, (int) (short)225, (int) (short)1);
      int int0 = MathUtils.lcm((int) (short)225, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.shiftLeft(229);
      BigInteger bigInteger5 = bigInteger0.setBit(0);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(14.0, (double) 229, (double) 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.negate();
      BigInteger bigInteger4 = bigInteger1.not();
      BigInteger bigInteger5 = bigInteger3.negate();
      BigInteger bigInteger6 = bigInteger3.multiply(bigInteger1);
      BigInteger bigInteger7 = bigInteger0.min(bigInteger5);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, 2819561105158720014L);
      BigInteger bigInteger9 = BigInteger.TEN;
      BigInteger bigInteger10 = MathUtils.pow(bigInteger9, bigInteger3);
      int int0 = MathUtils.sign(217);
      long long0 = MathUtils.pow((-1748L), 1);
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
      short short0 = MathUtils.indicator((short)1651);
      float float0 = MathUtils.round((float) 217, 0);
      BigInteger bigInteger11 = MathUtils.pow(bigInteger1, (long) 217);
      double double1 = MathUtils.round(0.0, (int) (short)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (-1748L);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.3841857910019882E-8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.16666666666666666);
      doubleArray0[4] = (-3713.19189602);
      doubleArray0[5] = (-1584.874);
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round((-667.9108F), 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 55.0);
      byte byte0 = MathUtils.sign((byte)20);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.factorialDouble((byte)20);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = MathUtils.lcm(66, 66);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 66, (double) 66, 66);
      long long0 = MathUtils.gcd((long) 66, (long) 66);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-702.57928358), (double) 66, 83);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-702.57928358);
      doubleArray0[1] = (double) 66;
      doubleArray0[2] = (double) 66L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.cosh(1531.15617);
      // Undeclared exception!
      try { 
        MathUtils.round(2326.964493469416, (-202), (-202));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.sinh((-500.6460230735943));
      int int0 = 3576;
      int int1 = MathUtils.sign(3576);
      boolean boolean0 = MathUtils.equalsIncludingNaN(15.0, (double) 3576, 3576);
      int int2 = MathUtils.compareTo((-455.51), (-2501.16086728886), (-1.3389834589228472E217));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.3389834589228472E217);
      doubleArray0[1] = (double) 3576;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3576;
      doubleArray0[4] = (-455.51);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 3576;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-13,389,834,589,228,472,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 < 3,576)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1747.315523602);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.lcm(0, 138);
      double double1 = MathUtils.indicator(2713.3);
      byte byte0 = MathUtils.sign((byte)99);
      long long0 = MathUtils.subAndCheck((long) (byte)1, (long) 0);
      int int2 = MathUtils.compareTo(613.5017947, 88.222, 0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(11, 689);
      double double0 = MathUtils.sign((double) 11);
      int int1 = MathUtils.mulAndCheck((-190), 689);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-130910);
      doubleArray0[1] = (double) 689;
      doubleArray0[2] = (double) (-130910);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-678);
      doubleArray0[5] = (double) (-130910);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-55));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-55);
      intArray0[1] = (int) (byte) (-55);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-1);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = MathUtils.round((-206.478F), (-389));
      double double0 = MathUtils.cosh((-1437.537063086));
      double double1 = MathUtils.sinh(727.8264);
      int int0 = MathUtils.subAndCheck((-389), 0);
      double double2 = MathUtils.factorialLog(0);
      float float1 = MathUtils.indicator(0.0F);
      float float2 = MathUtils.round((-2324.3186F), 19, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-206.478F);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.normalizeAngle(0.0, 0.0);
      try { 
        MathUtils.pow(622L, (-389));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (622^-389)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.indicator((-65.0));
      long long0 = 4095L;
      long long1 = MathUtils.indicator(4095L);
      double double1 = MathUtils.normalizeAngle((-1.0), 4095L);
      try { 
        MathUtils.pow((BigInteger) null, (-915));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-915)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.compareTo(230.0, 230.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.indicator(2788.183890031);
      long long0 = MathUtils.lcm((-92L), (-92L));
      int int0 = 1556;
      double double1 = MathUtils.binomialCoefficientLog(1556, 1556);
      double double2 = MathUtils.indicator((double) 92L);
      double double3 = MathUtils.sign((double) (-92L));
      int int1 = MathUtils.addAndCheck(2146, 0);
      double double4 = MathUtils.round((-1.0), 1556, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = (-2409L);
      int int0 = (-3295);
      try { 
        MathUtils.pow((-2409L), (-3295));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,409^-3,295)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      double double0 = MathUtils.factorialLog(6);
      double double1 = MathUtils.round((double) 0L, 6);
      double double2 = MathUtils.indicator((double) 0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-3264.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.gcd(1202, 20);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 1202;
      doubleArray0[5] = (double) 1202;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (double) 1202;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2021);
      intArray0[1] = (-869);
      intArray0[2] = (-2005);
      intArray0[3] = 0;
      intArray0[4] = 4;
      intArray0[5] = 0;
      intArray0[6] = (-398);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4113, 2);
      double double0 = MathUtils.factorialLog(0);
      long long1 = MathUtils.pow((long) 4113, 2L);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(37L, 37L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 37L, (double) 37L, 2087);
      int int0 = MathUtils.gcd(2, 2);
      float float0 = MathUtils.round((float) 37L, 119);
      int int1 = MathUtils.addAndCheck(2, 119);
      long long1 = MathUtils.gcd(0L, 37L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1386));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,386
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.sinh(0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2001));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,001
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = MathUtils.subAndCheck(0L, 0L);
      long long1 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      double double1 = MathUtils.sinh(0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = (double) 0L;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.008333333333329196;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2281.4666644083472;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3186.27144237164);
      doubleArray0[5] = 554.0518278396898;
      doubleArray0[6] = 728.235515;
      doubleArray0[7] = 3.834E-20;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(2815.0F, (-761), 0);
      float float1 = MathUtils.round((float) (-761), (-761));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2963.16826893662), (-2111.990471044411), 0.10526403784751892);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) Float.NaN, 554.0518278396898, 0.0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(0.0, 579.9277);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(92, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-4113);
      intArray0[1] = 92;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.sign((-2121.07));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2121.07);
      doubleArray0[6] = (-1.0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialDouble(1363);
      long long0 = MathUtils.gcd((long) 1363, (long) 1363);
      boolean boolean0 = MathUtils.equals(1259.22008324, (-2832.8939538), (double) 1363);
      int int0 = MathUtils.lcm(1363, 1363);
      long long1 = MathUtils.pow(0L, 2L);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2L;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 1363L;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (-1792.640539398156);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray0);
      double double3 = MathUtils.sign((-2851.341831726752));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(110.0, 0.0);
      long long0 = 411L;
      long long1 = MathUtils.pow(411L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 411L, (-3.097335529232552), 110.0);
      float float0 = MathUtils.sign((float) 1L);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double1 = MathUtils.log((-946.422061990238), 1.0F);
      long long2 = MathUtils.pow(0L, 1L);
      short short2 = MathUtils.indicator((short)662);
      float float1 = MathUtils.round((float) (short)0, (int) (short)1, (int) (short)0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (short)0, 2102.391733208581);
      int int0 = (-2052);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2052), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,052, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.scalb(1.1102230246251565E-16, 243);
      double double1 = MathUtils.binomialCoefficientLog(243, (-5067));
      double double2 = MathUtils.log(0.0, 243);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-2164.452F), 1706, 243);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 243, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.cosh(301.6402197021);
      double double1 = MathUtils.log(55.0, 10.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 2106);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,106
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1242.743), 0.0);
      double double0 = MathUtils.cosh(0.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-2813.0), (-1921.20910081346), (-3454));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 1192.6729;
      double double1 = MathUtils.normalizeAngle(1192.6729, 21.0);
      int int0 = 0;
      double double2 = MathUtils.binomialCoefficientDouble(17, 0);
      double double3 = (-753.933356990127);
      double double4 = MathUtils.normalizeAngle(1840.5145, (-753.933356990127));
      float float0 = MathUtils.indicator((float) 17);
      int int1 = MathUtils.sign(17);
      double double5 = MathUtils.factorialDouble(871);
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 3.141592653589793);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 2491.87;
      boolean boolean0 = MathUtils.equalsIncludingNaN(2491.87, (-1708.0));
      int int0 = (-309);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-309), (-309));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -309
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2726.9245919860427;
      doubleArray0[1] = (-1668.2322);
      doubleArray0[2] = 1.073741824E9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.5;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,726.925 >= -1,668.232)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-3176.651332740445), (-3176.651332740445));
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(7, 0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-3176.651332740445);
      doubleArray1[3] = (-3176.651332740445);
      doubleArray1[4] = (-3176.651332740445);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 1.0;
      boolean boolean2 = MathUtils.equals(doubleArray1, doubleArray1);
      float float0 = MathUtils.sign((-204.20798F));
      double double1 = MathUtils.factorialDouble(0);
      double double2 = MathUtils.scalb((-1.0F), 1220);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 1.0F;
      doubleArray1[4] = 263.56706016;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = (double) 1.0F;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int0 = MathUtils.indicator(21);
      int int1 = MathUtils.lcm(21, (-833));
      float float1 = MathUtils.round(1.0F, 382);
      float float2 = MathUtils.round(Float.NaN, (-833));
      double[] doubleArray2 = MathUtils.normalizeArray(doubleArray1, 0.0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(125);
      short short0 = MathUtils.indicator((short)2298);
      long long0 = MathUtils.gcd(4844L, (long) 125);
      byte byte0 = MathUtils.sign((byte)52);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.indicator(2193L);
      double double0 = MathUtils.binomialCoefficientDouble(1853, 1853);
      short short0 = MathUtils.indicator((short) (-326));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2193L;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (short) (-326);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (short) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.hash(0.0);
      short short0 = MathUtils.sign((short) (-2952));
      double double1 = MathUtils.scalb(0, (-44));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-2952);
      doubleArray0[1] = (double) (-44);
      doubleArray0[2] = 0.0;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(0L, (long) (short) (-1));
      double double3 = MathUtils.round(0.0, (int) (short) (-1), 0);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.sign((-4601));
      double double5 = MathUtils.cosh((-3139.992728));
      int int2 = MathUtils.mulAndCheck((-1), 2685);
      int[] intArray0 = new int[1];
      intArray0[0] = 2685;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
      double double6 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), (-44));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(4505.993587438426, 4505.993587438426);
      int int0 = MathUtils.subAndCheck(1570, 235);
      double double0 = MathUtils.indicator(2296.974870678);
      long long0 = MathUtils.pow(0L, 0);
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2030));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,030
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.round(1725.1858152, 1956);
      double double1 = MathUtils.sign(2994.10266);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1331), 2549);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,331, k = 2,549
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(0.0, 0.0);
      boolean boolean0 = MathUtils.equals(Double.NaN, 0.0, 0.0);
      double double2 = MathUtils.sinh(Double.NaN);
      int int0 = 0;
      int int1 = MathUtils.pow(0, 2047L);
      double double3 = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 2868);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,868
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      double double0 = MathUtils.binomialCoefficientLog(1886, 1886);
      int int0 = MathUtils.compareTo(0.0, (-195.3544), 107.7);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.scalb(6.283185307179586, (-1444));
      int int0 = MathUtils.indicator(191);
      int int1 = MathUtils.pow(191, 1195L);
      int int2 = MathUtils.indicator(35);
      long long0 = MathUtils.lcm(4607182418800017408L, (-2147483648L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4607182418800017408L;
      doubleArray0[1] = (double) (-1444);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign((-2164.452F));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.lcm((-347L), 2147483647L);
      int int0 = MathUtils.subAndCheck((-3278), (-3278));
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 0, 0);
      byte byte0 = MathUtils.indicator((byte)50);
      double double1 = MathUtils.indicator((double) 2147483647L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) (-347L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (-347L);
      int int1 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.sign(1894);
      long long0 = MathUtils.gcd((-431L), (long) 1894);
      long long1 = MathUtils.indicator(1L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1894, 1, 204);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 204, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 13;
      intArray0[0] = 13;
      double double0 = MathUtils.distance(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 13);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.sign(1254.7F);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0.0F, (double) 0.0F, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(20, 20);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2037, 2037);
      double double0 = MathUtils.factorialLog(0);
      int int1 = MathUtils.hash((-1621.20882201));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3925.6557363132);
      doubleArray0[4] = 6.0;
      doubleArray0[5] = (-3271.7797);
      doubleArray0[6] = (-6.032174644509064E-23);
      doubleArray0[7] = (-114.7474);
      doubleArray0[8] = 216.30017226;
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.addAndCheck((-503L), (-503L));
      int int1 = MathUtils.lcm(3708, (-882));
      int[] intArray0 = new int[4];
      intArray0[0] = (-882);
      intArray0[1] = 3708;
      intArray0[2] = 3708;
      intArray0[3] = 3708;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      byte byte0 = MathUtils.indicator((byte)3);
      long long0 = MathUtils.subAndCheck(5040L, (long) (byte)1);
      double double0 = MathUtils.round((double) (byte)3, (int) (byte)3);
      long long1 = MathUtils.gcd(5039L, 5039L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 95L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      long long0 = MathUtils.addAndCheck((long) (short)0, (long) (short)0);
      float float0 = MathUtils.indicator((float) (short)0);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(4015.5860846084, (double) 0L, (-1075.32587));
      boolean boolean1 = MathUtils.equals(1.1430250008909141E-8, (double) 0L, 29.63);
      int int0 = MathUtils.mulAndCheck((-162), (-162));
      long long2 = MathUtils.gcd((long) 26244, (long) 26244);
      long long3 = MathUtils.pow((long) (-162), 26244);
      double double0 = MathUtils.indicator(4015.5860846084);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = MathUtils.lcm(225, 136);
      double double0 = MathUtils.factorialLog(0);
      float float0 = MathUtils.round((float) 0, 30600);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.indicator(16);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (-2277.45);
      doubleArray0[2] = 3.145894820876798E-6;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.sinh(0.0F);
      long long0 = MathUtils.gcd((long) 30600, 0L);
      int int2 = MathUtils.pow(30600, 0);
      int int3 = MathUtils.addAndCheck(30600, 10);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(0L, 1639L);
      long long2 = MathUtils.indicator(1509L);
      int int4 = MathUtils.compareTo(0.0, 136, (-749.0026));
      double double3 = MathUtils.factorialLog(2566);
      long long3 = MathUtils.pow(0L, (long) 1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (16 >= -2,277.45)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2903.12475084, (-116.24505165), (-116.24505165));
      int int0 = MathUtils.indicator(0);
      long long0 = MathUtils.gcd((long) 1, (long) 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-116.24505165);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[0];
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
      double double1 = MathUtils.normalizeAngle(0.0, 805.405310685974);
      int int0 = MathUtils.gcd(0, 0);
      double double2 = MathUtils.factorialLog(0);
      double double3 = MathUtils.sinh(1281.638130838257);
      int int1 = MathUtils.addAndCheck((-1985), 0);
      double double4 = MathUtils.binomialCoefficientDouble(0, (-1985));
      int int2 = (-389);
      int int3 = MathUtils.lcm(0, (-389));
      int int4 = 781;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 5348, 781);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 781, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.05, (-1052.62446977284));
      int int0 = 0;
      int int1 = MathUtils.sign(0);
      int int2 = MathUtils.pow(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 289.09906;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.05;
      doubleArray0[6] = (-3833.37626037823);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 289.099)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 1356;
      double double0 = MathUtils.binomialCoefficientDouble(1356, (-4371));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-4371);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.scalb(0.3999999761581421, 1356);
      int int1 = MathUtils.hash(1768.5161320513);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.3, (-2738.963949));
      int int2 = 10;
      // Undeclared exception!
      try { 
        MathUtils.round((-823.03), 10, (-999292655));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 3034;
      // Undeclared exception!
      try { 
        MathUtils.factorial(3034);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (-6.663542893624021E-14);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm((long) 0, (long) 0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2.2250738585072014E-308, (double) 1L, 10);
      int int0 = MathUtils.lcm(10, (-1178));
      int int1 = MathUtils.addAndCheck(0, 5890);
      double double1 = MathUtils.sign(1160.7379412);
      int int2 = MathUtils.lcm((-385), 0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.pow(720L, 0);
      int int3 = MathUtils.mulAndCheck((-1647), 10);
      double double3 = MathUtils.round((-6.663542893624021E-14), 1049);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.mulAndCheck(16, 16);
      short short0 = MathUtils.sign((short)20);
      int int1 = MathUtils.indicator((int) (short)20);
      double double0 = MathUtils.factorialLog((short)20);
      double double1 = MathUtils.log((short)1, 0.0);
      double double2 = MathUtils.sign((double) (short)1);
      long long1 = MathUtils.indicator(0L);
      double double3 = MathUtils.sign(1550.337);
      long long2 = MathUtils.sign((long) (short)20);
      double double4 = MathUtils.binomialCoefficientDouble((short)20, 16);
      long long3 = MathUtils.mulAndCheck(0L, 0L);
  }
}
