/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:30:58 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 196;
      double double0 = MathUtils.cosh((-1669.0912432730302));
      double double1 = MathUtils.scalb(2025.92, (-1413));
      double double2 = MathUtils.binomialCoefficientDouble(2984, 196);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1413));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,413
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, (-1964), 61);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 61;
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.indicator((-1964));
      double double1 = MathUtils.scalb(316.82665216, (-1374));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.compareTo(2.2250738585072014E-308, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 61, (long) (-1964));
      long long1 = MathUtils.pow((long) 0, 1078886431);
      double double3 = MathUtils.cosh(4134.24639699);
      double double4 = MathUtils.sinh((-2.4833548778209007E205));
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (-3.141592653589793), 5);
      double double5 = MathUtils.indicator(15.417);
      double double6 = MathUtils.binomialCoefficientLog(1020, 8);
      double double7 = MathUtils.indicator(3146.4339489153);
      double double8 = MathUtils.binomialCoefficientLog(61, (-1273));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)84;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 543);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2744.62108317;
      doubleArray0[1] = (-402.9071454876467);
      doubleArray0[2] = (-364.3656496);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1401L, 1401L);
      double double0 = 131.45469;
      boolean boolean0 = MathUtils.equalsIncludingNaN(131.45469, 131.45469);
      double double1 = MathUtils.factorialLog(192);
      long long1 = MathUtils.subAndCheck(0L, (long) 192);
      long long2 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.lcm(61, 61);
      long long3 = (-302932621132653753L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((long) 192, (-302932621132653753L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 20);
      int int1 = MathUtils.compareTo(Double.NaN, 0.07490822288864472, 2485.322);
      long long0 = MathUtils.indicator((long) 0);
      long long1 = MathUtils.binomialCoefficient(82, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2485.322;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 2485.322;
      doubleArray0[3] = (double) 82;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.indicator(1.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = MathUtils.lcm((-716L), (-716L));
      int int0 = MathUtils.subAndCheck(1030, 1030);
      int int1 = MathUtils.addAndCheck(0, 1030);
      long long1 = MathUtils.subAndCheck(0L, 0L);
      float float0 = MathUtils.round((float) 0L, 21, 0);
      long long2 = MathUtils.pow((long) 0, 21);
      float float1 = MathUtils.round((float) 1030, 1030, 0);
      double double0 = MathUtils.indicator(618.47398);
      int int2 = MathUtils.lcm(1030, 0);
      long long3 = MathUtils.pow((long) 0, 0);
      long long4 = MathUtils.addAndCheck(0L, 0L);
      int int3 = MathUtils.lcm(21, 0);
      double double1 = MathUtils.sinh((-353.64207605));
      int int4 = MathUtils.hash((double) (-716L));
      boolean boolean0 = MathUtils.equalsIncludingNaN(766.2168834103, 2.0, 766.2168834103);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, (-3646));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 1.0F;
      int int0 = MathUtils.hash(doubleArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.setBit((byte)8);
      byte[] byteArray1 = bigInteger1.toByteArray();
      boolean boolean0 = bigInteger0.isProbablePrime((byte)8);
      int int1 = bigInteger1.compareTo(bigInteger2);
      int int2 = bigInteger1.getLowestSetBit();
      long long0 = bigInteger1.longValueExact();
      BigInteger bigInteger3 = bigInteger1.negate();
      BigInteger bigInteger4 = bigInteger1.shiftRight((byte)8);
      BigInteger bigInteger5 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, (long) (byte)8);
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.indicator((float) (byte)8);
      int int3 = MathUtils.subAndCheck((-1693575295), (int) (byte)8);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-803.67138434695));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0));
      long long1 = MathUtils.lcm((long) (byte)8, (long) (byte)8);
      boolean boolean2 = MathUtils.equals((-803.67138434695), 1.1430250008909141E-8);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.subAndCheck(2138L, 2138L);
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      float float0 = MathUtils.round(0.0F, 0, 0);
      long long1 = MathUtils.pow((-1202L), (long) 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2138L;
      doubleArray0[6] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-6));
      short short0 = MathUtils.sign((short) (byte) (-1));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-6);
      intArray0[1] = (int) (byte) (-6);
      intArray0[2] = (int) (byte) (-6);
      intArray0[3] = (int) (byte) (-1);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.round((double) (-6), (int) (short) (-1), 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      int int0 = MathUtils.hash(doubleArray0);
      double double0 = MathUtils.round(Double.NaN, 2146959391, 2146959391);
      short short0 = MathUtils.sign((short)2024);
      double double1 = MathUtils.sign((-3618.756350463344));
      try { 
        MathUtils.normalizeArray(doubleArray0, -0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 42.0;
      doubleArray0[2] = (-26.35183964188826);
      doubleArray0[3] = 805.53;
      doubleArray0[4] = (-1306.78);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.sign(0.0F);
      int int0 = MathUtils.pow((-1167), 2320);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-990.056433742436));
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.normalizeAngle((-1464.078215066495), 805.53);
      double double3 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-1102L), (-1102L));
      int[] intArray0 = new int[9];
      intArray0[0] = 1304239873;
      intArray0[1] = 2320;
      intArray0[2] = 2320;
      intArray0[3] = (-1167);
      intArray0[4] = 2320;
      intArray0[5] = 1304239873;
      intArray0[6] = 1304239873;
      intArray0[7] = 1304239873;
      intArray0[8] = (-1167);
      int[] intArray1 = new int[4];
      intArray1[0] = 1304239873;
      intArray1[1] = (-1167);
      intArray1[2] = 1304239873;
      intArray1[3] = 1304239873;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(1242L, 3628800L);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4506969600L;
      doubleArray1[1] = (double) 4506969600L;
      doubleArray1[2] = (double) 1242L;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.scalb(2.220446049250313E-16, 3770);
      long long0 = MathUtils.gcd(362880L, 2235L);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.mulAndCheck(913, 913);
      long long0 = MathUtils.lcm(1L, 0L);
      int int1 = MathUtils.pow(833569, 0);
      short short0 = MathUtils.sign((short) (byte)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 913;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 833569;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 833569;
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) 1L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.gcd(1, (-206));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 55.3501);
      boolean boolean0 = MathUtils.equals((double) (byte)0, (-1175.8), 0.0);
      int int3 = MathUtils.mulAndCheck((int) (byte)0, (-206));
      double double1 = MathUtils.round((double) 0L, (-2546), (int) (byte)0);
      long long1 = MathUtils.subAndCheck((-2471L), (long) 0);
      double double2 = MathUtils.round(1591.0, 95);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = MathUtils.cosh((-3134.367));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4.503599627370496E15), (-206.0));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 16.668;
      doubleArray0[2] = (-206.0);
      doubleArray0[3] = (-206.0);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = (-3134.367);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)4);
      double double2 = MathUtils.cosh(0.2);
      int[] intArray0 = new int[0];
      double double3 = MathUtils.distance(intArray0, intArray0);
      double double4 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1974.3804517;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 893.113616;
      doubleArray0[3] = (-2108.355603287);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck((-1218L), (-1218L));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1.304E19, 1.304E19);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.304E19);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.log(1.304E19, Double.POSITIVE_INFINITY);
      int int0 = MathUtils.indicator(0);
      int int1 = MathUtils.subAndCheck(1889, 0);
      boolean boolean0 = MathUtils.equals(0.4342944622039795, 0.4342944622039795, 2838.6695322);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 133, 2289);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = MathUtils.sign(1844.5414F);
      float float1 = MathUtils.sign(1.0F);
      long long0 = MathUtils.sign((-125L));
      int int0 = MathUtils.compareTo((-1L), (-7.44321345601866E-11), (-125L));
      try { 
        MathUtils.pow((-1L), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-250));
      int int0 = MathUtils.lcm(18, 201);
      double double1 = MathUtils.factorialDouble(1993);
      int int1 = MathUtils.subAndCheck(18, 18);
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-46));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.cosh(2874.58848842);
      int int0 = MathUtils.indicator((-1205));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2874.58848842;
      doubleArray0[1] = (double) (-1205);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 9.220590270857665E-9);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.subAndCheck((long) (byte)1, 0L);
      double double0 = MathUtils.factorialLog((byte)1);
      double double1 = MathUtils.normalizeAngle(1L, 0L);
      int int0 = 665;
      int int1 = 0;
      int int2 = MathUtils.subAndCheck(665, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      long long1 = bigInteger0.longValueExact();
      boolean boolean0 = bigInteger0.isProbablePrime(665);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 665);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 665;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = (-3631);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-3631));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,631
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = MathUtils.indicator((-3100L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3100L);
      doubleArray0[1] = (double) (-3100L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-3100L), (double) (-3100L));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-661));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -661
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = (-749);
      int int2 = MathUtils.pow((-749), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-749);
      doubleArray0[1] = (double) (-749);
      doubleArray0[2] = (double) (-749);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-749);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-749 >= -749)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = MathUtils.indicator(1112);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1033.9), (-1033.9), 1112);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(768L);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1L);
      long long1 = MathUtils.factorial(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.and((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 902;
      int int1 = 685;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(902, 685);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = MathUtils.gcd((-2644281811660520851L), (-3384L));
      long long1 = MathUtils.binomialCoefficient(559, (-1132));
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      int int0 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.mulAndCheck(484L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = (short)2713;
      short short1 = MathUtils.indicator((short)2713);
      int int0 = MathUtils.hash((double) (short)2713);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1084568064;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) 1084568064;
      doubleArray0[5] = (double) (short)2713;
      doubleArray0[6] = (double) 1084568064;
      doubleArray0[7] = (double) 1084568064;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      int int1 = MathUtils.sign((int) (short)1);
      // Undeclared exception!
      try { 
        MathUtils.equals(1.0, 775.337439202595, 1084568064);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 599.0566859390188;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.087;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (-967.282753311849);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1311.5282405603);
      doubleArray0[7] = 12.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(12.0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 1076363264);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-787));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -787
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.1666666567325592);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-0.1666666567325592);
      doubleArray1[1] = (-0.1666666567325592);
      doubleArray1[2] = (-0.1666666567325592);
      doubleArray1[3] = (-0.1666666567325592);
      doubleArray1[4] = 0.041666666666666664;
      doubleArray1[5] = (-0.1666666567325592);
      doubleArray1[6] = (-0.1666666567325592);
      doubleArray1[7] = (-0.1666666567325592);
      doubleArray1[8] = (-0.1666666567325592);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      long long0 = MathUtils.pow((-1364L), 318);
      int int0 = MathUtils.gcd(318, 318);
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-16^-16)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      float float1 = MathUtils.round(Float.NaN, 41);
      boolean boolean0 = MathUtils.equals(3552.64343591742, (double) Float.NaN);
      int int0 = MathUtils.mulAndCheck((-170), (-170));
      int int1 = MathUtils.sign((-3178));
      double double0 = MathUtils.scalb((-170), (-1335));
      boolean boolean1 = MathUtils.equals((double) 41, 0.0, (-2997.726778889007));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3178);
      doubleArray0[1] = (double) (-170);
      doubleArray0[2] = (-2997.726778889007);
      doubleArray0[3] = (double) (-1335);
      doubleArray0[4] = (double) 28900;
      doubleArray0[5] = (-2997.726778889007);
      doubleArray0[6] = 2746.4994028881;
      double double1 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((-3508.7028224072073), 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.round(2.0, 10);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, (double) 10, 2.0);
      int int0 = MathUtils.indicator(10);
      byte byte0 = MathUtils.sign((byte) (-123));
      try { 
        MathUtils.pow((-1177), (long) (byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,177^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3121.75918835, 0.0);
      byte byte0 = MathUtils.sign((byte) (-32));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int0 = MathUtils.lcm(547, (-678));
      short short0 = MathUtils.indicator((short)199);
      double double0 = MathUtils.cosh((short)199);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 109;
      intArray0[1] = (-2225);
      intArray0[2] = 926;
      intArray0[3] = (-711);
      intArray0[4] = 563;
      intArray0[5] = 51;
      intArray0[6] = (-1896);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.sign((-1691.8592698454063));
      double[] doubleArray0 = new double[0];
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(3384.0);
      long long0 = MathUtils.addAndCheck((long) 1084911616, 0L);
      long long1 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equals((-369.575694378628), 1.1921056801463227E-8, 0.0);
      double double2 = MathUtils.sign((double) 1084911616);
      long long2 = MathUtils.pow(0L, 90);
      double double3 = MathUtils.log(3384.0, 90);
      double double4 = MathUtils.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1274);
      intArray0[1] = (-2718);
      double double5 = MathUtils.distance(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)0);
      long long3 = MathUtils.subAndCheck((-4224L), 1084911616L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-302932621132653753L);
      long long1 = MathUtils.indicator((-302932621132653753L));
      double double0 = MathUtils.normalizeAngle((-1L), (-302932621132653753L));
      int int0 = (-169);
      double double1 = MathUtils.scalb((-3.0293262113265376E17), (-169));
      int int1 = MathUtils.pow(3156, 14);
      double double2 = 2040.240427;
      int int2 = 916;
      double double3 = MathUtils.scalb(2040.240427, 916);
      try { 
        MathUtils.pow((BigInteger) null, (long) (-169));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-169)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-1945);
      int int1 = MathUtils.indicator((-1945));
      int int2 = MathUtils.hash(0.0);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sinh((-1));
      double double2 = MathUtils.sinh((-1945));
      double double3 = MathUtils.sign(2.2250738585072014E-308);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      byte[] byteArray1 = bigInteger0.toByteArray();
      try { 
        MathUtils.pow(bigInteger0, (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = (-2300.401178616);
      boolean boolean0 = MathUtils.equals((-2300.401178616), (-2100.221));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
      long long0 = 120L;
      long long1 = (-2927L);
      try { 
        MathUtils.pow(120L, (-2927L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (120^-2,927)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 2);
      long long0 = MathUtils.addAndCheck((long) 2, 0L);
      boolean boolean0 = MathUtils.equals((double) 1.0F, (double) 2L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.gcd((-2671), 0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2843L), (-2843L));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2843L);
      doubleArray0[2] = (double) (-2843L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-2843L);
      doubleArray0[7] = (-2869.0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.pow((-2843L), 343);
      double double1 = MathUtils.scalb((-2787.86403804), 0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo(0.0, (-1772.4837016202346), 0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.sign((-523.7538));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-523.7538);
      doubleArray0[1] = (-523.7538);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-523.754 <= -523.754)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 3953.57);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-199.800326), (-199.800326));
      int int0 = 0;
      double double0 = MathUtils.round((-199.800326), 0, 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-199.800326), 942.8167293602717);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2491, 0);
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.subAndCheck(1431L, (-2923L));
      double double1 = MathUtils.log(0.0, 2491);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      byte byte0 = (byte)76;
      byte byte1 = MathUtils.indicator((byte)76);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, (byte)76);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.sinh((-4.503599627370496E15));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-4.503599627370496E15);
      doubleArray0[2] = (-4.503599627370496E15);
      doubleArray0[3] = (-4.503599627370496E15);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.sign(1L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4.503599627370496E15), 0.0, 9);
      int int0 = MathUtils.indicator(0);
      double double2 = MathUtils.sign((-2636.1183884));
      int int1 = MathUtils.hash(doubleArray0);
      double double3 = MathUtils.factorialLog(5445);
      long long1 = MathUtils.addAndCheck((long) 9, (long) 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not increasing (-4,503,599,627,370,496 > -\u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = MathUtils.pow(0L, 3695L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long1 = MathUtils.gcd(0L, 1859L);
      int int1 = MathUtils.lcm(0, 0);
      byte byte0 = MathUtils.indicator((byte)59);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 1859L, 1465.9740799999456, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.indicator((long) 0);
      long long1 = MathUtils.subAndCheck(1L, (-150L));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1520.25314642484, (double) 1L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.hash(0.05);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = 0.05;
      doubleArray0[2] = (double) (-1506803709);
      doubleArray0[3] = 0.05;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1506803709);
      doubleArray1[1] = (double) (-1506803709);
      doubleArray1[2] = (double) (-1506803709);
      doubleArray1[3] = 0.05;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      double double0 = MathUtils.indicator(1459.68);
      float float0 = MathUtils.round((float) (-1506803709), (-1506803709));
      double double1 = MathUtils.indicator((-2345.092809));
      String string0 = "";
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-58));
      double double0 = MathUtils.factorialLog(1005);
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-2906));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,906)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-1);
      try { 
        MathUtils.pow(0L, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = MathUtils.indicator((-2901));
      double double0 = MathUtils.normalizeAngle(3271.9, 0.0);
      int int1 = MathUtils.subAndCheck(0, (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int2 = MathUtils.sign((-2901));
      int int3 = MathUtils.indicator(1);
      double double1 = MathUtils.log(3617.4, 0.0);
      try { 
        MathUtils.pow((long) 1, (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double double0 = MathUtils.factorialLog(0);
      float float0 = 1.0F;
      float float1 = MathUtils.round(1.0F, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 1.0F;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray1);
      long long0 = 7910884519577875640L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(7910884519577875640L, 7910884519577875640L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, (-1964), 61);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 61;
      MathUtils.checkOrder(doubleArray0);
      int int0 = MathUtils.indicator((-1964));
      double double1 = MathUtils.scalb(316.82665216, (-1374));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.compareTo(2.2250738585072014E-308, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.subAndCheck((long) 61, (long) (-1964));
      double double3 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.pow((long) 0, 1078886431);
      double double4 = MathUtils.cosh(4134.24639699);
      double double5 = MathUtils.sinh((-2.4833548778209007E205));
      boolean boolean0 = MathUtils.equals(1.1102230246251565E-16, (-3.141592653589793), 5);
      double double6 = MathUtils.indicator(15.417);
      double double7 = MathUtils.binomialCoefficientLog(1020, 8);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1763, (-655));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
      int int0 = MathUtils.indicator(1161);
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9223372036854775807L, (long) 1161);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-12.2111607), 963);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 963, 0.0, 0.0);
      boolean boolean2 = MathUtils.equals((-12.2111607), (-12.2111607), 963);
      double double0 = MathUtils.round(0.0, 963, 0);
      int int0 = MathUtils.indicator((-2042));
      boolean boolean3 = MathUtils.equalsIncludingNaN((-1.5707963267948966), (-1275.0));
      double double1 = MathUtils.scalb(765.3458684064165, (-1));
      float float0 = MathUtils.round(0.0F, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.5707963267948966);
      boolean boolean4 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-1144));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,766,253^-1,144)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2355.2174684115557), (-407.4838562703437));
      boolean boolean1 = MathUtils.equalsIncludingNaN(3626.0100731212046, 3626.0100731212046);
      double double0 = MathUtils.binomialCoefficientDouble(70, 70);
      int int0 = MathUtils.subAndCheck(70, 163);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 163);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 163
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 3233L;
      long long1 = MathUtils.mulAndCheck((-2147483648L), 3233L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (-2147483648L);
      doubleArray0[2] = (double) (-6942814633984L);
      doubleArray0[3] = (double) (-2147483648L);
      doubleArray0[4] = (double) 3233L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.sign(3233.0);
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 10.0, 983);
      double double2 = MathUtils.cosh(3233.0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (10 >= -2,147,483,648)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(2491, 0);
      double double0 = MathUtils.sinh(0.0);
      long long0 = MathUtils.subAndCheck(1431L, (long) 2491);
      double double1 = MathUtils.log(0.0, 2491);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)43);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      float float0 = MathUtils.round((-2323.3F), 4);
      long long0 = MathUtils.pow((-3875L), (int) (byte)1);
      long long1 = MathUtils.indicator((-9223372036854775808L));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)43;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        MathUtils.pow((-3775), (-3775));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,775^-3,775)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int0 = MathUtils.pow(0, (long) 0);
      short short0 = MathUtils.indicator((short) (-1117));
      float float0 = MathUtils.round((float) (short) (-1117), (int) (short) (-1), 0);
      double double0 = MathUtils.round((double) (-1120.0F), 12, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      long long0 = MathUtils.factorial(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte)64;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      double double0 = MathUtils.log((-1053.3291695604619), 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1143.6912293577);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3421.506133;
      doubleArray0[1] = 1.225743062930824E-8;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-1148.4968035273);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-8447.9135726);
      doubleArray0[6] = (-200.86917475339);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1715.52;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd((-853), 3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1121L, 1121L);
      double double0 = MathUtils.indicator((double) 1256641L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1121L;
      doubleArray0[1] = (double) 1256641L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(461.66452F, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-2771));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,771)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double double1 = MathUtils.indicator(0.041666666666666664);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.041666666666666664;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0.042 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = (-1675.4F);
      int int0 = 0;
      int int1 = 3545;
      // Undeclared exception!
      try { 
        MathUtils.round((-1675.4F), 0, 3545);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,545, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = MathUtils.indicator(771);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 771);
      int int1 = MathUtils.pow(1, 6402373705728000L);
      double double0 = MathUtils.factorialLog(4);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1371), 225);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 225, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.sinh(1272.54837265);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-705.4511769143927);
      doubleArray0[2] = 1576.3185477874215;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 945.93241469;
      doubleArray0[5] = (-2206.808803);
      doubleArray0[6] = 3.834E-20;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.mulAndCheck(91, 140);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 282.0;
      double double1 = MathUtils.normalizeAngle((-123.1141763102), 282.0);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.clearBit((short)0);
      BigInteger bigInteger2 = bigInteger0.setBit((short)0);
      String string0 = bigInteger0.toString((int) (short)0);
      BigInteger bigInteger3 = bigInteger1.min(bigInteger2);
      double double2 = bigInteger0.doubleValue();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0L);
      boolean boolean0 = bigInteger4.isProbablePrime(3209);
      // Undeclared exception!
      try { 
        bigInteger4.divideAndRemainder(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 38;
      double double0 = MathUtils.binomialCoefficientLog(38, 38);
      float float0 = MathUtils.sign(0.0F);
      int int1 = MathUtils.compareTo(38, 571.172164, Double.POSITIVE_INFINITY);
      int int2 = (-3841);
      double double1 = MathUtils.round(0.0, (-3841));
      // Undeclared exception!
      try { 
        MathUtils.factorial(38);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-46.8617882939655), (-2572.33734));
      byte byte0 = MathUtils.indicator((byte) (-82));
      double double0 = MathUtils.cosh((byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1076), (-1076));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,076
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.round(0.0F, 153);
      short short0 = MathUtils.indicator((short)201);
      double double0 = 0.0;
      int int0 = (-1752);
      double double1 = MathUtils.round(0.0, (-1752));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1752);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1752));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,752
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(592.5715519453465, 0.0, 592.5715519453465);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[3] = 2111.46539;
      doubleArray0[4] = 2111.46539;
      doubleArray0[6] = 2111.46539;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = MathUtils.sign((-969.8217F));
      long long0 = 0L;
      long long1 = MathUtils.pow(0L, 0);
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sign(0.003);
      int int0 = 1737;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1737);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,737
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
      double double0 = MathUtils.factorialDouble((short)0);
      short short1 = MathUtils.sign((short)0);
      double double1 = MathUtils.indicator(0.0);
      float float0 = MathUtils.sign((float) (short)1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1830;
      double double0 = MathUtils.scalb(1.0, 1830);
      short short0 = MathUtils.indicator((short)87);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1912.7), (-2796.555625));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-2796.555625);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2.3738919364399497E-66);
      doubleArray0[5] = (double) (short)87;
      doubleArray0[6] = (-2.3738919364399497E-66);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-\u221E < -2,796.556)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.mulAndCheck((-1080L), (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-800));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -800
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.sign(968.359832032);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-135.3));
      double double1 = MathUtils.sinh((-135.3));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      double double3 = MathUtils.factorialDouble(2204);
      double double4 = MathUtils.round(Double.POSITIVE_INFINITY, 2204);
      int int0 = MathUtils.lcm(2204, 17);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 2, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.sign(968.359832032);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-135.3));
      double double1 = MathUtils.sinh((-135.3));
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      double double3 = MathUtils.factorialDouble(2204);
      double double4 = MathUtils.round(Double.POSITIVE_INFINITY, 2204);
      int int0 = MathUtils.lcm(2204, 17);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2, 61);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 2, k = 61
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-5395.351096471792);
      doubleArray0[2] = (-3461.72);
      doubleArray0[3] = 211.975;
      doubleArray0[4] = 1130.67721108051;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1484.359107992));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.lcm((-2890), (-2890));
      double double0 = MathUtils.indicator(1.997844754509471E-9);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.997844754509471E-9;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3533.776109496935;
      doubleArray0[3] = 1.997844754509471E-9;
      doubleArray0[4] = 1.997844754509471E-9;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) (-2890);
      doubleArray0[8] = 1.0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(6.283185307179586, (-2184.52));
      int int0 = MathUtils.compareTo((-2184.52), 6.283185307179586, 6.283185307179586);
      int int1 = MathUtils.pow(67, 730);
      float float0 = MathUtils.round((float) 730, 67);
      double double0 = MathUtils.factorialDouble(1695);
      double double1 = MathUtils.binomialCoefficientLog(2131, 808);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 808;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.indicator((-1.0));
      long long0 = 1944L;
      long long1 = MathUtils.sign(1944L);
      int int0 = 230;
      int int1 = 1180;
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1L, 230, 1180);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(333.44190623027, 333.44190623027, Integer.MIN_VALUE);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(281L, 281L);
      int int0 = 2609;
      // Undeclared exception!
      try { 
        MathUtils.factorial(2609);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 677;
      int int1 = MathUtils.subAndCheck(677, (-1789));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-632.0), (-1.0), 2466);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 677;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = 0;
      int int3 = MathUtils.sign(0);
      double double1 = MathUtils.log(2321.898, (-4.9E-324));
      int int4 = MathUtils.hash(doubleArray0);
      boolean boolean1 = MathUtils.equals(Double.NaN, (-4254.5135502));
      double double2 = MathUtils.normalizeAngle((-632.0), (-632.0));
      short short0 = MathUtils.indicator((short)900);
      short short1 = MathUtils.sign((short)900);
      int int5 = MathUtils.hash((-1889.012));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1354), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,354, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1210.98595;
      doubleArray0[2] = (-1156.094907311106);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2062.931914766131);
      double double0 = 985.1243330197;
      doubleArray0[5] = 985.1243330197;
      doubleArray0[6] = (-581.247);
      double double1 = (-138.12016465929244);
      doubleArray0[7] = (-138.12016465929244);
      doubleArray0[8] = 6.283185307179586;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,210.986 >= -1,156.095)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.sign(6722166367014452318L);
      long long1 = MathUtils.subAndCheck(6722166367014452318L, 6722166367014452318L);
      int int0 = MathUtils.indicator(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.0));
      short short0 = MathUtils.indicator((short) (-437));
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), 20922789888000L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-4.19367788467), (-803.67138434695), (-1849));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(2202.390792, 2202.390792, (-344));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.pow(4398046511103L, 0);
      short short0 = MathUtils.sign((short)529);
      double double0 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.lcm(0L, 1828L);
      boolean boolean0 = MathUtils.equals(0.0, (double) 4398046511103L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.sign((-1597));
      byte byte0 = MathUtils.sign((byte)0);
      double double0 = MathUtils.round(10.0, 179, (int) (byte)0);
      long long0 = MathUtils.gcd(568L, (long) (byte)0);
      long long1 = MathUtils.pow(568L, (long) (byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1597);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.lcm((int) (byte)0, 0);
      int int2 = MathUtils.compareTo((-669.029908035755), 1643.188, 2.718281828459045);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.scalb(0, 0);
      int int1 = MathUtils.lcm(0, 0);
      float float0 = MathUtils.round(2014.9338F, 0);
      boolean boolean0 = MathUtils.equals(2.0, (double) 0);
      int int2 = MathUtils.hash(2.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.sign((-2671));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = MathUtils.indicator((-352.0F));
      double double0 = 2926.6739;
      double double1 = MathUtils.indicator(2926.6739);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 0.07842259109020233;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      int int0 = 56;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(56, 1332);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 56, k = 1,332
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = MathUtils.gcd((-954L), (-954L));
      long long1 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 954L;
      doubleArray0[1] = (double) 954L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 954L, (double) 0L);
      float float0 = MathUtils.indicator((float) 0L);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2053L), 0L);
      int int0 = 188;
      // Undeclared exception!
      try { 
        MathUtils.factorial(188);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-556.33370161), (-556.33370161));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-556.33370161);
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.log((-556.33370161), 0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.1102230246251565E-16, (-556.33370161));
      float float0 = MathUtils.round(0.0F, 0);
      double double2 = MathUtils.sinh((-556.33370161));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = MathUtils.round((-1183.609157031), 118);
      long long0 = MathUtils.gcd((-110L), (-4267615245585081135L));
      int int0 = MathUtils.pow(118, 118);
      long long1 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(4515.646908852865, (double) 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, (-1972));
      long long0 = MathUtils.gcd((long) (-1972), (long) (-1972));
      int int0 = MathUtils.addAndCheck(67, 135);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-822), 202);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -822, k = 202
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-4478.8459), 10.0, 10.0);
      long long0 = MathUtils.lcm(1L, 1L);
      int int0 = MathUtils.hash((double) 1L);
      double double0 = MathUtils.binomialCoefficientLog(1072693248, 13);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathUtils.log(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3974.76312775;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-479), (-479));
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.log(1L, 0);
      long long1 = MathUtils.lcm((long) 0, 3362L);
      long long2 = MathUtils.gcd((long) 0, (-4267615245585081135L));
      float float0 = MathUtils.indicator((-2488.6F));
      long long3 = MathUtils.pow((-1629L), 4267615245585081135L);
      double double1 = MathUtils.round(1418.683186214966, 0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-35L), (-35L));
      try { 
        MathUtils.pow(0L, (-2551L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,551)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
      int int1 = MathUtils.lcm((-636), 0);
      double double0 = MathUtils.round((double) 0, 0);
      double double1 = MathUtils.indicator(8.0E298);
      try { 
        MathUtils.pow((-1), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      float float0 = MathUtils.sign((float) (byte)0);
      short short0 = MathUtils.indicator((short) (byte)0);
      float float1 = MathUtils.round(0.0F, 0);
      short short1 = MathUtils.sign((short)0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short2 = MathUtils.indicator((short)72);
      int int1 = MathUtils.compareTo(0, 1.2393345855018391E-8, 0.0);
      int int2 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      int int1 = MathUtils.compareTo(Double.NaN, 0.07490822288864472, 2485.322);
      long long0 = MathUtils.indicator((long) 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 379.591954474177;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.lcm(6722166367014452318L, 6722166367014452318L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6722166367014452318L;
      doubleArray0[1] = (double) 6722166367014452318L;
      doubleArray0[2] = (double) 6722166367014452318L;
      doubleArray0[3] = (double) 6722166367014452318L;
      doubleArray0[4] = (double) 6722166367014452318L;
      doubleArray0[5] = (double) 6722166367014452318L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6,722,166,367,014,452,200 >= 6,722,166,367,014,452,200)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-502.32);
      doubleArray0[1] = (-685.44437902141);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-502.32 > -685.444)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equals(0.0, 1.304E19, 0.0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.304E19, 2.0);
      long long0 = MathUtils.indicator(9223372036854775807L);
      double double1 = MathUtils.sign(1170.4020416607088);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.pow(606, (long) 606);
      int int1 = MathUtils.subAndCheck(66, 0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      int int2 = MathUtils.sign(185);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 66;
      intArray0[4] = 66;
      intArray0[5] = 606;
      intArray0[6] = 1;
      int int3 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(499.386861465, (double) 606, 157);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = MathUtils.cosh(3638.8933902);
      long long0 = MathUtils.indicator((-3116L));
      int int0 = MathUtils.gcd(1091, 2894);
      float float0 = MathUtils.round(Float.NaN, 2369);
      long long1 = MathUtils.addAndCheck(0L, (-1L));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-1774);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-1774), (-1774));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,774, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(3562L, 0L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3562L;
      doubleArray0[1] = (double) 3562L;
      doubleArray0[2] = (double) 3562L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 3562L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 3562L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm(3562L, 0L);
      int int0 = MathUtils.mulAndCheck(0, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 117;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 28.80780351;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1826.20393408877;
      doubleArray0[3] = 2031.72736;
      doubleArray0[4] = 471.8379;
      doubleArray0[5] = 0.6666666269302368;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 282.29;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 471.8379;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathUtils.log(2376.1, 2376.1);
      double double1 = MathUtils.round(2376.1, 3);
      double double2 = MathUtils.binomialCoefficientDouble(3, 3);
      int int0 = MathUtils.sign(3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 1;
      double double3 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 180;
      double double0 = MathUtils.scalb(461.5549622, 180);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.9699272335463627E-8, 0.0);
      int int0 = MathUtils.compareTo(1.9699272335463627E-8, 1.9699272335463627E-8, 1.9699272335463627E-8);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck(0, 0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean3 = MathUtils.equals(895.26, 2.404307984052299E-9, (double) 0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.lcm((-152L), (-4079L));
      int int0 = MathUtils.addAndCheck((-642), (-642));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_EVEN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_EVEN
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
