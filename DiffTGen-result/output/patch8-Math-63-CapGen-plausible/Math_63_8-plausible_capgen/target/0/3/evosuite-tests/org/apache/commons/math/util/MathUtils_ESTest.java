/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:31:03 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(631, 631);
      double double1 = MathUtils.round(1.0, 25);
      float float0 = MathUtils.round((float) 25, 25, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 25.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 25.0F;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 631;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow(25, 0);
      int int1 = MathUtils.addAndCheck(1030, 25);
      double double2 = MathUtils.factorialDouble(0);
      double double3 = MathUtils.binomialCoefficientLog(631, 0);
      int[] intArray0 = new int[0];
      double double4 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(2646.274058229201, (double) 1);
      double double5 = MathUtils.cosh(285.174779731765);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double6 = MathUtils.distance(intArray0, intArray0);
      double double7 = MathUtils.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 1030;
      doubleArray1[5] = (-5563.137);
      doubleArray1[6] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (1 <= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.log((-2289.095791442), 0.0);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      double double0 = MathUtils.sign(3.834E-20);
      int int0 = (-2652);
      int int1 = MathUtils.indicator((-2652));
      long long0 = MathUtils.sign((long) (-2652));
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4740);
      int int0 = (-3117);
      double double0 = MathUtils.scalb(4740, (-3117));
      double double1 = MathUtils.indicator(0.0);
      int int1 = 14;
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-3117), 4740, 14);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 14, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = MathUtils.lcm(2723, 30);
      int int1 = MathUtils.pow(30, 1L);
      int int2 = MathUtils.gcd(1408, 81690);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4825.6403719145);
      doubleArray0[1] = 880.8431;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int3 = MathUtils.lcm(81690, 1408);
      long long0 = MathUtils.pow((-225L), 0L);
      boolean boolean0 = MathUtils.equals((-4825.6403719145), (double) 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double1 = MathUtils.cosh(898.63814);
      double double2 = MathUtils.round(0.0, 0);
      long long1 = MathUtils.subAndCheck((-136L), 0L);
      short short0 = MathUtils.sign((short)501);
      long long2 = MathUtils.addAndCheck(967L, 0L);
      int int4 = MathUtils.compareTo(2, 2723, 0.15);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-136L), 626.692, (double) 967L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2723);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 358.0651420914452;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 13.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1780.449044813);
      doubleArray0[6] = 2062.2;
      doubleArray0[7] = (-1006.24148);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long0 = (-1253L);
      long long1 = MathUtils.mulAndCheck((-1253L), (-1253L));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.sign(3628800L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long1 = MathUtils.addAndCheck(3628800L, 1L);
      double double0 = MathUtils.round((-108.8672107909459), 184, 0);
      int int0 = MathUtils.gcd(1506, 5);
      int int1 = MathUtils.hash(3.141592653589793);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 340593891;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      long long2 = MathUtils.mulAndCheck((-245L), 1L);
      int int2 = MathUtils.addAndCheck(0, 5);
      long long3 = MathUtils.indicator((-428L));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1506);
      int int3 = MathUtils.subAndCheck(2276, 340593891);
      double double1 = MathUtils.round((double) 0, 0, 0);
      int int4 = MathUtils.pow(1506, (long) 2276);
      double double2 = MathUtils.factorialLog(205);
      float float0 = MathUtils.round((float) 340593891, 5);
      double double3 = MathUtils.sign(1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(4, 274);
      double double0 = MathUtils.sign(1091.029035);
      double double1 = MathUtils.sign(1091.029035);
      boolean boolean0 = MathUtils.equals((double) 278, 4234.11927, (double) 4);
      int int1 = MathUtils.gcd(507, 274);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 4;
      MathUtils.checkOrder(doubleArray0);
      int int2 = MathUtils.compareTo(356.0, 1.0, 1);
      double double2 = MathUtils.binomialCoefficientLog(507, 507);
      long long0 = MathUtils.lcm((long) 1, 4503599627370496L);
      int int3 = MathUtils.pow(1, 3059);
      int int4 = MathUtils.indicator(1024);
      int int5 = MathUtils.addAndCheck(18, (-400));
      // Undeclared exception!
      try { 
        MathUtils.round(3.834E-20, 4436, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1559;
      long long0 = MathUtils.binomialCoefficient(1559, 1559);
      double double0 = MathUtils.log(642.5884, 785.0);
      short short0 = (short)3;
      short short1 = MathUtils.indicator((short)3);
      float float0 = MathUtils.sign((float) 1L);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2.957007209750105E-8);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 1411;
      double double1 = MathUtils.round((-340.0), 1411);
      long long0 = 5111L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 5111L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = MathUtils.sign(201.0F);
      int int0 = 3379;
      int int1 = MathUtils.mulAndCheck(3379, 3379);
      int int2 = 0;
      int int3 = MathUtils.addAndCheck(0, 11417641);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 11417641, (-1482.5), 11417641);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1297.73032;
      doubleArray0[1] = 227.0;
      doubleArray0[2] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)20);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)20;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)20;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte)20;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)1;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (20 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      int int0 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1313.12354);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      double double2 = MathUtils.factorialLog(0);
      int int1 = MathUtils.pow(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, 0L);
      int int2 = MathUtils.lcm(212, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      double double3 = MathUtils.distance(intArray0, intArray0);
      try { 
        MathUtils.pow((-1032), (-1904L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,032^-1,904)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      boolean boolean1 = MathUtils.equals(Double.NEGATIVE_INFINITY, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1004.26808);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(0.0);
      int int0 = MathUtils.subAndCheck(1704, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-218);
      intArray0[2] = 1704;
      intArray0[3] = 0;
      intArray0[4] = 1704;
      intArray0[5] = 0;
      intArray0[6] = 1704;
      intArray0[7] = (-1856);
      intArray0[8] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-2011.60348), 0.0, 2435);
      int int0 = MathUtils.hash((double) 2435);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2435;
      doubleArray0[1] = (-2011.60348);
      doubleArray0[2] = (double) 2435;
      doubleArray0[3] = (-2011.60348);
      doubleArray0[4] = (-2011.60348);
      doubleArray0[5] = (double) 1084425728;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.round(1.084425728E9, 2435);
      int[] intArray0 = new int[8];
      intArray0[0] = 2435;
      intArray0[1] = 1084425728;
      intArray0[2] = 2435;
      intArray0[3] = 1084425728;
      intArray0[4] = 2435;
      intArray0[5] = 2435;
      intArray0[6] = 2435;
      intArray0[7] = 1084425728;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.sign(2435);
      int int3 = MathUtils.compareTo(55.0, 3.141592653589793, 2435);
      float float0 = MathUtils.round(728.4879F, 2435);
      int[] intArray1 = new int[4];
      intArray1[0] = 2435;
      intArray1[1] = 2435;
      intArray1[2] = 154;
      intArray1[3] = 3369;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      double double0 = MathUtils.scalb(0.0F, 1377);
      long long0 = MathUtils.binomialCoefficient(1377, 2);
      int int0 = 148;
      int int1 = MathUtils.subAndCheck((-1478), 148);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 947376L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1626);
      doubleArray0[3] = (double) 947376L;
      doubleArray0[4] = (double) (-1626);
      doubleArray0[5] = (double) 947376L;
      doubleArray0[6] = (double) (-1478);
      doubleArray0[7] = (double) (-1626);
      double double1 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.cosh((-1626.0));
      double double3 = MathUtils.normalizeAngle(0.0, 0.0);
      long long1 = MathUtils.addAndCheck(40320L, 40320L);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 40320L;
      doubleArray1[2] = (double) 947376L;
      doubleArray1[3] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.gcd(2253, 115);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.sinh(0.0);
      int int1 = MathUtils.hash(0.0);
      byte byte0 = MathUtils.indicator((byte)108);
      boolean boolean1 = MathUtils.equals((double) 2253, 3226.3244, (-2457.7653));
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      double double2 = MathUtils.round((-2457.7653), 115);
      double double3 = MathUtils.log(3.88624077508, 2.2250738585072014E-308);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((float) 1, 698, (int) (short)0);
      byte byte1 = (byte)17;
      byte byte2 = MathUtils.sign((byte)17);
      double double4 = MathUtils.binomialCoefficientLog(1801, (-5051));
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte)108);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(87178291200L, 20922789888009L);
      long long1 = MathUtils.indicator(87178291200L);
      long long2 = MathUtils.pow((-20835611596809L), 356);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1975.00657);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (-1275.7588583);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      doubleArray0[6] = 484.23205;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 179.24265);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(55, 55);
      int int1 = MathUtils.pow(110, 0);
      long long0 = MathUtils.mulAndCheck(2048L, (-1608L));
      double double0 = MathUtils.sign((double) 55);
      long long1 = MathUtils.pow(581L, 110);
      long long2 = MathUtils.gcd((long) 110, (long) 55);
      double double1 = MathUtils.binomialCoefficientLog(381, 12);
      double double2 = MathUtils.round(328.0, 381);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      int int0 = bigInteger0.bitCount();
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 1438);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.mulAndCheck(0L, (long) (short)0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-280);
      intArray0[0] = (-280);
      intArray0[1] = 0;
      intArray0[2] = 747;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-435);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-435);
      intArray1[3] = (-280);
      intArray1[4] = 0;
      intArray1[5] = 0;
      double double0 = MathUtils.distance(intArray0, intArray1);
      int int1 = MathUtils.mulAndCheck(0, (-2333));
      int int2 = MathUtils.subAndCheck(0, 1030);
      try { 
        MathUtils.pow((long) (-1030), (-280));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,030^-280)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 535;
      intArray0[1] = 0;
      intArray0[2] = (-45);
      intArray0[3] = 890;
      intArray0[4] = 147;
      int[] intArray1 = new int[9];
      intArray1[0] = 147;
      intArray1[1] = 535;
      intArray1[2] = 535;
      intArray1[3] = 0;
      intArray1[4] = 890;
      intArray1[5] = (-45);
      intArray1[6] = 147;
      intArray1[7] = 890;
      intArray1[8] = (-45);
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.304E19, 1.304E19);
      double double0 = 2118.59752928121;
      double double1 = MathUtils.log(16.0, 2118.59752928121);
      int int0 = MathUtils.indicator(66);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (double) 66;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-205.583365);
      doubleArray0[6] = 2.7622234572790925;
      doubleArray0[7] = 9.140260083262505E-9;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.097;
      doubleArray0[2] = 1.176342548272881E-8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.mulAndCheck(1307L, 1307L);
      byte byte0 = MathUtils.sign((byte) (-2));
      int int0 = MathUtils.addAndCheck((int) (byte) (-1), (int) (byte) (-2));
      float float0 = MathUtils.round((float) 1307L, (-3));
      int int1 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1161.0), (-1161.0), 1224.66410868);
      int int0 = 52;
      int int1 = MathUtils.addAndCheck(1023, 52);
      int int2 = (-1865);
      int int3 = MathUtils.gcd((-1865), (-1865));
      // Undeclared exception!
      MathUtils.factorialLog(4194304);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.99, 1495.059602200479, 2856.1248356519);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2557;
      intArray0[2] = 244;
      intArray0[3] = 1030;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-273);
      intArray0[7] = 0;
      intArray0[8] = 2057;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.sinh(Double.POSITIVE_INFINITY);
      int int0 = 3008;
      double double1 = MathUtils.binomialCoefficientDouble(3008, 3008);
      int int1 = (-474);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-474), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -474, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553359L, 4577762542105553359L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = MathUtils.hash((double[]) null);
      int int1 = MathUtils.gcd(0, 0);
      double double0 = 1734.631876803222;
      double double1 = MathUtils.round(1734.631876803222, 0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1207.59509;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = bigInteger0.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftRight((byte) (-49));
      int int0 = bigInteger1.bitLength();
      int int1 = bigInteger0.compareTo(bigInteger1);
      boolean boolean1 = bigInteger0.equals("3.vE])usdCP5X");
      BigInteger bigInteger4 = bigInteger0.pow(12);
      BigInteger bigInteger5 = BigInteger.valueOf(3286L);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientDouble(12, 12);
      byte byte0 = MathUtils.sign((byte) (-49));
      int int2 = 13;
      long long0 = MathUtils.binomialCoefficient(13, (byte) (-49));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(6, 2284);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 6, k = 2,284
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 1805);
      int int1 = MathUtils.gcd(1805, 1030);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2732, 103);
      boolean boolean0 = MathUtils.equals((double) 2732, (double) 103, 0.0);
      byte byte0 = MathUtils.sign((byte) (-81));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 363.01;
      doubleArray0[1] = 363.01;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      double double3 = (-1.0);
      doubleArray0[3] = (-1.0);
      double double4 = 621.8678;
      doubleArray0[4] = 621.8678;
      doubleArray0[5] = 2859.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (363.01 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-819L), (-819L));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1884);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-92);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = (-157L);
      long long1 = MathUtils.sign((-157L));
      int int0 = MathUtils.pow(221, 221);
      short short0 = MathUtils.sign((short) (-2075));
      // Undeclared exception!
      try { 
        MathUtils.factorial(221);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = MathUtils.pow(0, 2244L);
      double double0 = MathUtils.cosh(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.multiply(bigInteger1);
      int int1 = bigInteger1.getLowestSetBit();
      BigInteger bigInteger3 = bigInteger0.negate();
      int int2 = bigInteger0.intValueExact();
      BigInteger bigInteger4 = bigInteger1.shiftLeft(11);
      BigInteger bigInteger5 = bigInteger1.modPow(bigInteger0, bigInteger0);
      BigInteger bigInteger6 = bigInteger0.and(bigInteger1);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger7 = bigInteger0.modInverse(bigInteger1);
      BigInteger bigInteger8 = MathUtils.pow(bigInteger0, 0L);
      BigInteger bigInteger9 = BigInteger.ZERO;
      float float1 = bigInteger9.floatValue();
      BigInteger bigInteger10 = bigInteger0.add(bigInteger9);
      BigInteger bigInteger11 = bigInteger0.abs();
      double double1 = MathUtils.normalizeAngle(0.3333333333332802, 0);
      double double2 = MathUtils.sign(0.3333333333332802);
      long long0 = MathUtils.pow((long) 1, 17);
      int int3 = MathUtils.mulAndCheck(0, 1);
      double double3 = MathUtils.sign(1.0);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(130);
      int[] intArray0 = new int[7];
      intArray0[0] = 130;
      intArray0[1] = 130;
      intArray0[2] = 130;
      intArray0[3] = (-1);
      intArray0[4] = 130;
      intArray0[5] = 130;
      intArray0[6] = 130;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.pow((-2424L), 130);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = MathUtils.gcd(14, 14);
      int int1 = MathUtils.gcd(14, 14);
      double double0 = MathUtils.factorialLog(2008);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 14, 0.0);
      long long0 = MathUtils.pow((long) 2008, 0L);
      int int2 = MathUtils.compareTo(1205.84, 1.1102230246251565E-16, (-673.6290012103694));
      int int3 = MathUtils.pow(2047, 1388);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = MathUtils.gcd((-1873L), (-1873L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1873L;
      doubleArray0[1] = (double) (-1873L);
      doubleArray0[2] = (double) (-1873L);
      doubleArray0[3] = (double) (-1873L);
      doubleArray0[4] = (double) 1873L;
      doubleArray0[5] = (double) (-1873L);
      doubleArray0[6] = 2242.27164877364;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,873 > -1,873)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = (short) (-811);
      short short1 = MathUtils.sign((short) (-811));
      long long0 = 4146L;
      long long1 = MathUtils.addAndCheck((long) (short) (-811), 4146L);
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (int) (short) (-811));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.indicator(4004);
      double double0 = MathUtils.normalizeAngle(4004, (-247.0));
      int int1 = 63;
      int int2 = MathUtils.gcd((-1958), 63);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-247.0);
      double double1 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.pow((long) 4004, 4004);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1342.68134124611, 0.0, 1);
      long long1 = MathUtils.pow((long) 1, 0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.sign((long) 0);
      long long1 = MathUtils.mulAndCheck(2489L, (-7L));
      short short0 = MathUtils.indicator((short)8);
      int int0 = MathUtils.addAndCheck(0, (-4844));
      byte byte1 = MathUtils.indicator((byte)52);
      long long2 = MathUtils.sign(1076L);
      long long3 = MathUtils.pow((-528L), 0);
      long long4 = MathUtils.subAndCheck((long) (byte)0, (-143L));
      int int1 = MathUtils.addAndCheck((int) (byte)1, (int) (short)8);
      long long5 = MathUtils.indicator((-1605L));
      short short1 = MathUtils.sign((short) (byte)52);
      double double1 = MathUtils.normalizeAngle(0, (-1L));
      int int2 = MathUtils.sign((-1583));
      try { 
        MathUtils.pow(21, (-2159L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (21^-2,159)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.log(0.0, Double.NaN);
      long long0 = 2854L;
      long long1 = MathUtils.lcm(2854L, (-2083L));
      boolean boolean0 = MathUtils.equals(0.0, 151.222453, 0.0);
      boolean boolean1 = MathUtils.equals(151.222453, (double) 2854L);
      int int0 = MathUtils.subAndCheck(239, 239);
      double double1 = MathUtils.binomialCoefficientLog(239, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = 1241L;
      long long1 = (-5034868814120038111L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1241L, (-5034868814120038111L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = MathUtils.indicator((-2073.0F));
      int int0 = MathUtils.compareTo(1572.7991303017661, 0.5, 1572.7991303017661);
      long long0 = MathUtils.addAndCheck((-2644281811660520851L), 1955L);
      double double0 = MathUtils.sign((double) (-2644281811660520851L));
      double double1 = MathUtils.sinh((-1.0));
      long long1 = MathUtils.sign((-2644281811660518896L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2644281811660520851L);
      doubleArray0[1] = (double) 1955L;
      doubleArray0[2] = (-1.1752011936438014);
      doubleArray0[3] = (double) (-2644281811660520851L);
      doubleArray0[4] = (double) (-2073.0F);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (-1L);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      long long2 = MathUtils.addAndCheck((-2644281811660520851L), 3239L);
      double double3 = MathUtils.factorialLog(1263);
      int[] intArray0 = new int[5];
      intArray0[0] = 1263;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double4 = MathUtils.sign((double) (-1L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-2644281811660517612L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,644,281,811,660,517,612)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = (-637);
      int int1 = MathUtils.lcm((-637), 270);
      float float0 = MathUtils.sign((float) (-637));
      int int2 = (-2375);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2375), 270);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,375, k = 270
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.lcm(8, 8);
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.pow((long) 8, (long) 8);
      long long1 = MathUtils.pow(2146L, 0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(87178291200L, 20922789888000L);
      long long1 = MathUtils.indicator(87178291200L);
      long long2 = MathUtils.pow((-20835611596800L), 356);
      boolean boolean0 = MathUtils.equals(308.1895, 2645.45558953745, (-1355.0));
      boolean boolean1 = MathUtils.equals(1.25, (double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("'!YBQ7bbK!Yt\"3}_W");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.'!YBQ7bbK!Yt\"3}_W
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.shiftRight((byte)4);
      BigInteger bigInteger3 = bigInteger1.shiftRight((byte) (-68));
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      long long0 = 0L;
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 0L);
      int int0 = MathUtils.pow((-2224), (long) (byte)4);
      try { 
        MathUtils.pow(39916800L, (-3958705157555305932L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (39,916,800^-3,958,705,157,555,305,932)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(1554, 0);
      int int2 = 17;
      int int3 = MathUtils.pow(Integer.MIN_VALUE, 17);
      double double0 = 2.2250738585072014E-308;
      double double1 = MathUtils.cosh(2.2250738585072014E-308);
      try { 
        MathUtils.pow((long) 0, (long) Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,147,483,648)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.lcm((-559), (-559));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.round((double) (-559), (-654));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-654);
      double double1 = (-2086.2);
      doubleArray0[1] = (-2086.2);
      doubleArray0[2] = (double) 559;
      doubleArray0[3] = (double) 559;
      doubleArray0[4] = (double) (-559);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-654 >= -2,086.2)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-793.281044167407), (-793.281044167407), 31);
      int int0 = MathUtils.pow((-3426), (long) 31);
      int int1 = MathUtils.subAndCheck(18, 640);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.indicator((short)82);
      double double0 = MathUtils.factorialDouble((short)1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      int int0 = MathUtils.hash(doubleArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1072693279);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1754L, 1754L);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 5.650007086920087E-9, (double) 0L);
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 1070;
      int int1 = MathUtils.subAndCheck(1130, 1070);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      byte byte2 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.factorialLog((byte)1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1130;
      doubleArray0[1] = (double) 1130;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) 1130;
      doubleArray0[6] = (double) 1130;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) (byte)1;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int2 = MathUtils.hash((-63.894328682297));
      float float0 = MathUtils.indicator((float) (byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)1, 1130.0, 60);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.indicator((-1493.0250333232023));
      float float0 = MathUtils.sign(3585.917F);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.indicator(1389.147455235);
      double double2 = 653.75829;
      int int0 = 21;
      double double3 = MathUtils.scalb(653.75829, 21);
      double double4 = MathUtils.cosh(483.0);
      int[] intArray0 = new int[5];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 21;
      intArray0[3] = 21;
      intArray0[4] = 21;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = bigInteger0.byteValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 9218868437227405312L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1339.322238182);
      doubleArray0[1] = (-1705.01408334273);
      doubleArray0[2] = (-1793.41749);
      doubleArray0[3] = (-1873.75007387351);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1861.2762971460581;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-1,873.75 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.lcm(237, 853);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 853;
      doubleArray0[1] = (double) 202161;
      doubleArray0[2] = (double) 202161;
      doubleArray0[3] = 1181.75213695301;
      doubleArray0[4] = (double) 202161;
      doubleArray0[5] = (double) 853;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (853 < 202,161)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.pow((int) (byte)1, (long) (byte)1);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.scalb((-541.5991), (-1851));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2168;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.mulAndCheck(497L, 2082L);
      double double0 = MathUtils.normalizeAngle(497L, 2082L);
      long long1 = MathUtils.pow((long) 2168, 2168);
      double double1 = MathUtils.cosh(2080.362697409256);
      double double2 = MathUtils.round((double) 2168, 0);
      double[] doubleArray0 = new double[0];
      double double3 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.subAndCheck((-1136L), (-7278142539171889152L));
      int int1 = MathUtils.compareTo(Double.NEGATIVE_INFINITY, 0.0, 1034754L);
      double double4 = MathUtils.sign(0.0);
      double double5 = MathUtils.sinh((-1));
      int int2 = MathUtils.distance1(intArray0, intArray0);
      long long3 = MathUtils.addAndCheck(2771L, 2819561105158720014L);
      long long4 = MathUtils.indicator((long) 0);
      long long5 = MathUtils.gcd((long) 0, 1091L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-2820);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2820), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,820, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      int int0 = 179;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 1.1102230246251565E-16, 179);
      int int1 = MathUtils.lcm(179, 179);
      double double1 = MathUtils.scalb(179, 179);
      int int2 = 0;
      int int3 = 2014;
      int int4 = MathUtils.lcm(0, 2014);
      int int5 = MathUtils.hash((double) 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = (-914.8811);
      int int0 = (-4249);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, (-914.8811), (-4249));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 86;
      double double0 = MathUtils.scalb((-576.104070237515), 86);
      long long0 = MathUtils.pow((long) 86, (long) 86);
      int int1 = MathUtils.hash((double) 86);
      long long1 = MathUtils.mulAndCheck(0L, (long) 86);
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 1079345152);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 1,079,345,152
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1474L);
      long long2 = MathUtils.gcd(0L, (-1474L));
      int int0 = 151;
      float float0 = MathUtils.round((float) 0L, 151);
      int int1 = (-909);
      try { 
        MathUtils.pow((-909), (-909));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-909^-909)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.11764700710773468;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      byte byte0 = MathUtils.indicator((byte)4);
      long long0 = MathUtils.indicator((long) (byte)1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.11764700710773468;
      doubleArray2[2] = 0.3333333134651184;
      double double0 = MathUtils.distance(doubleArray1, doubleArray2);
      int int0 = MathUtils.indicator(213);
      long long1 = MathUtils.gcd(0L, 618L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(53);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = null;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2732.15;
      doubleArray0[1] = 3.145894820876798E-6;
      doubleArray0[2] = 1479.787;
      doubleArray0[3] = 859.3397017897;
      doubleArray0[4] = 559.5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1900.384);
      doubleArray0[1] = (-3009.84940068588);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      long long0 = MathUtils.lcm(0L, 0L);
      float float0 = MathUtils.sign((float) 0L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1500.38409), (-2.609));
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2479, 653950574);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3474.898658301, 3474.898658301, 3474.898658301);
      int int0 = (-3649);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-3649), (-3649));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -3,649
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1097.9137242926022);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.round(215.0F, (-666));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-666);
      doubleArray1[1] = (double) 215.0F;
      doubleArray1[2] = (double) (-666);
      doubleArray1[3] = (double) Float.NaN;
      double double0 = MathUtils.distance(doubleArray1, doubleArray1);
      int int0 = MathUtils.mulAndCheck((-666), (-3178));
      byte byte0 = MathUtils.sign((byte)85);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 3.141592653589793, (double) 2116548);
      long long0 = MathUtils.subAndCheck(479001600L, (long) (-3178));
      short short0 = MathUtils.indicator((short) (byte)85);
      double double1 = MathUtils.indicator(111.41144819);
      double double2 = MathUtils.sign((double) (-3178));
      double double3 = MathUtils.sign(1144.3280305821534);
      int int1 = MathUtils.mulAndCheck(251, 251);
      int int2 = MathUtils.pow((-3178), (long) 2116548);
      long long1 = MathUtils.addAndCheck(479001600L, 2165L);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1686.887);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 974.9245;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-53.72180041102);
      doubleArray0[5] = 1463.8786557828178;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-53.72180041102);
      doubleArray1[1] = (-1686.887);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1463.8786557828178;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1463.8786557828178;
      doubleArray1[6] = (-1686.887);
      doubleArray1[7] = (-1686.887);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = MathUtils.indicator(815L);
      int int0 = (-3018);
      int int1 = 2812;
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1L, (-3018), 2812);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,812, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 5081L;
      long long1 = MathUtils.sign(5081L);
      boolean boolean0 = MathUtils.equals(0.0, (double) 1L, 0.0);
      int int0 = (-1882);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1882));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,882
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)47);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-618));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -618
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = MathUtils.pow(173, 173);
      long long0 = MathUtils.mulAndCheck(4294967295L, (long) 173);
      int int1 = MathUtils.lcm(1, 173);
      int int2 = MathUtils.indicator(1381589149);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 2385L;
      long long1 = MathUtils.sign(2385L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2385L;
      doubleArray0[1] = (double) 2385L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 2385L;
      doubleArray0[8] = (double) 2385L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = (-4073);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-4073));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,073
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, 13.07, 13.07);
      double double1 = MathUtils.round(Double.NaN, (-2344));
      double double2 = MathUtils.log(Double.NaN, (-4410.0909529));
      long long0 = MathUtils.pow(2147483648L, 495L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2147483648L;
      doubleArray0[1] = 1.5707963267948966;
      doubleArray0[2] = (double) 2147483648L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 495L;
      doubleArray0[5] = (double) 0L;
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.lcm((-639L), 0L);
      double double4 = MathUtils.binomialCoefficientDouble(176, (-2746));
      int int0 = MathUtils.sign(220);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (double) 176, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.scalb(0, 0);
      long long0 = MathUtils.factorial(0);
      int int1 = MathUtils.pow(4194304, 1);
      int int2 = MathUtils.gcd(4194304, 4194304);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = MathUtils.mulAndCheck(1, 0);
      double double1 = MathUtils.sinh(4194304);
      int int4 = MathUtils.compareTo(0, 0, 0.0);
      double double2 = MathUtils.log(4194304, 3.141592653589793);
      double double3 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0750680058851054;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4194304;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1;
      double double4 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 4194304, 0.0, 4194304);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 1275);
      long long0 = MathUtils.pow((long) 0, (long) 0);
      int int1 = MathUtils.subAndCheck(1275, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1689.2158295148);
      doubleArray1[2] = (double) 1275;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 1L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[0];
      double double1 = MathUtils.safeNorm(doubleArray2);
      int int2 = MathUtils.pow(1275, 0);
      boolean boolean1 = MathUtils.equals((double) 0, (double) 0);
      double double2 = MathUtils.sinh(1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-2093);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2093));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,093
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-637);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-637));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -637
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.log(0.0, (-1292.082407));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = (-937);
      double double1 = MathUtils.round(Double.NaN, (-937), 2146959391);
      double double2 = MathUtils.round(Double.NaN, (-937));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-937), 0.0);
      long long0 = MathUtils.lcm((long) 2146959391, 2595L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-937), (-937), (-937));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -937, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.sign((-1600));
      int int1 = MathUtils.pow(11, 0L);
      int int2 = MathUtils.sign((-1167));
      double double0 = MathUtils.sign((double) 11);
      int int3 = 0;
      long long0 = MathUtils.factorial(0);
      int int4 = MathUtils.sign(0);
      int int5 = MathUtils.compareTo(0.0, 0L, (-1600));
      double double1 = MathUtils.scalb(0, 11);
      double double2 = MathUtils.round(2.2250738585072014E-308, (-1167), 0);
      int int6 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.gcd((-1468), (-1468));
      int int1 = MathUtils.compareTo(1468, 3.834E-20, 1468);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1468);
      doubleArray0[1] = (double) (-1468);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.binomialCoefficientDouble(1468, 52);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.003;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.addAndCheck(11, (-3276));
      double double1 = MathUtils.normalizeAngle(32.0, (-3276));
      int int1 = MathUtils.sign((-3265));
      int int2 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.003, (-1297.405874150522));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathUtils.cosh((-161.533));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-161.533);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(17.0, 2670.57, 17.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      byte byte0 = (byte)90;
      byte byte1 = MathUtils.sign((byte)90);
      int int0 = bigInteger0.bitCount();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 17.0;
      doubleArray0[1] = (double) (short)10;
      boolean boolean1 = bigInteger0.equals((Object) null);
      doubleArray0[2] = (double) (short)10;
      doubleArray0[3] = (double) (byte)90;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = (-134);
      try { 
        MathUtils.pow((int) (byte)1, (-134));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-134)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(66, 66);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 66;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 66;
      doubleArray0[4] = (double) 66;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 66;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double1 = MathUtils.indicator(1.0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 66.0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(1.0, 0, 66);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(14, 14);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("1");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-1565);
      try { 
        MathUtils.pow((-1565), (-1565));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,565^-1,565)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.indicator(1848);
      double double0 = MathUtils.indicator(1081.952937966197);
      boolean boolean0 = MathUtils.equals((double) 1, 1.0, 1875);
      int int1 = MathUtils.compareTo(1, 1081.952937966197, 0.0);
      short short0 = MathUtils.sign((short)1205);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 1848, (int) (short)1205);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,205, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.abs();
      BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 562L);
      short short0 = MathUtils.sign((short)0);
      int int0 = MathUtils.lcm((int) (short)0, (-522));
      double double0 = MathUtils.indicator(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1065, 0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-544);
      intArray0[1] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.indicator(2244);
      double double0 = MathUtils.round((-1480.5), 1);
      boolean boolean0 = MathUtils.equals((-1480.5), (-2.356194490192345));
      long long0 = MathUtils.lcm(1008L, 2222L);
      byte byte0 = MathUtils.sign((byte)99);
      float float0 = MathUtils.round(790.0F, (int) (byte)99, 0);
      long long1 = MathUtils.indicator(2432902008176640000L);
      double double1 = MathUtils.sinh((-892.322451));
      byte byte1 = MathUtils.sign((byte)14);
      boolean boolean1 = MathUtils.equalsIncludingNaN(925.1044520888, (-664.18125645));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = MathUtils.sign(412L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2983);
      long long1 = MathUtils.lcm(1L, 0L);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.sign((-354.1746520092437));
      long long0 = MathUtils.gcd(648L, 187L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 289;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-38.8963565), (double) 289, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (-2103.7), 289);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2103.7);
      doubleArray0[4] = (-38.8963565);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2103.7);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = Double.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = MathUtils.pow((-1344), 3493L);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.round((float) (-1344), 746, (int) (byte)0);
      int int1 = MathUtils.mulAndCheck((int) (byte)0, (int) (byte)1);
      short short0 = MathUtils.indicator((short)135);
      double double0 = MathUtils.factorialDouble(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-2564));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-2,564)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.round(940.34216, (-37));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathUtils.checkOrder(doubleArray0);
      long long0 = MathUtils.mulAndCheck(9193070505571053912L, 0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.sinh(66.5335452);
      long long1 = MathUtils.indicator(9193070505571053912L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 1831.93998, 1112);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) 0L, 0.0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.round((-1530.924F), 1112, 6);
      float float1 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.indicator(4112.328F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4112.328F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 4112.328F;
      doubleArray0[3] = (double) 4112.328F;
      doubleArray0[4] = (double) 4112.328F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 4112.328F;
      doubleArray0[7] = (double) 1.0F;
      doubleArray0[8] = (double) 1.0F;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
      double double1 = MathUtils.scalb(4112.328125, 392);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = MathUtils.sinh((-65.8452459519));
      long long0 = MathUtils.indicator(3952090531849364496L);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = MathUtils.lcm((-3259L), 0L);
      short short0 = MathUtils.indicator((short) (-2970));
      int int0 = MathUtils.addAndCheck((int) (short) (-1), (-1));
      byte byte0 = MathUtils.sign((byte)2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      float float0 = MathUtils.round((-834.9028F), 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long0 = (-1133L);
      long long1 = MathUtils.sign((-1133L));
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (-834.9028F), 1984.2747437981636, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = MathUtils.round((-159.43F), 2193);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = MathUtils.indicator((-5034868814120038111L));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-779.32219638231);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.75;
      doubleArray0[3] = (-667.0486084);
      doubleArray0[4] = 2257.679702;
      doubleArray0[5] = (-5740.36934336924);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(209L, 209L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long1 = MathUtils.mulAndCheck(0L, 0L);
      long long2 = MathUtils.mulAndCheck(209L, 1142L);
      long long3 = MathUtils.pow(0L, 2825);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1963L, 416L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short short0 = MathUtils.indicator((short)3171);
      int int0 = MathUtils.compareTo(0.0, (short)1, (-0.16624882440418567));
      float float0 = MathUtils.indicator((-790.303F));
      byte byte0 = MathUtils.sign((byte)63);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-2348.7003624), (-2348.7003624), 2306.06178949);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-2348.7003624), (-2348.7003624), (-342.8));
      boolean boolean2 = MathUtils.equals((-2348.7003624), (-342.8));
      int int0 = MathUtils.subAndCheck((-1011), 1249);
      double double0 = MathUtils.sign((double) (-2260));
      int int1 = MathUtils.subAndCheck(0, 0);
      boolean boolean3 = MathUtils.equals(2306.06178949, 741.2675, (-2348.7003624));
      try { 
        MathUtils.pow((BigInteger) null, (long) (-1011));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (null^-1,011)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(0, 0);
      double double0 = 1.1102230246251565E-16;
      double double1 = MathUtils.normalizeAngle(3.834E-20, 1.1102230246251565E-16);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.1102230246251565E-16;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.1102230246251565E-16;
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int2 = 19;
      int int3 = MathUtils.mulAndCheck(0, 19);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1611.1032492033);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-1017.0623503203309), 0.0);
      int int0 = (-722);
      int int1 = MathUtils.gcd((-722), (-722));
      // Undeclared exception!
      try { 
        MathUtils.factorial(722);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2635.6;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1759), 0);
      boolean boolean0 = MathUtils.equals((-1973.664673), (-128.600732902));
      short short0 = MathUtils.sign((short)20);
      double double0 = MathUtils.binomialCoefficientLog(1150, (short)1);
      double double1 = MathUtils.sinh(195.4033794234906);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.sign((-3215));
      int[] intArray0 = new int[5];
      intArray0[0] = (-3215);
      intArray0[1] = 1046;
      intArray0[2] = (-3215);
      intArray0[3] = (-3215);
      intArray0[4] = (-3215);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.sign((-2154.589781));
      int int0 = MathUtils.mulAndCheck(2368, (-396));
      double double1 = MathUtils.sinh((-2154.589781));
      long long0 = MathUtils.gcd(1026L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-396);
      MathUtils.checkOrder(doubleArray0);
      int int1 = MathUtils.subAndCheck((-937728), (-4032));
      int int2 = MathUtils.addAndCheck(2169, 2368);
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double3 = MathUtils.cosh(4537);
      int int3 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)63);
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 59.17861967863;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 554.77324;
      doubleArray0[4] = (-7.44321345601866E-11);
      doubleArray0[5] = (-735.1592555588105);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4339L, (-2110L));
      try { 
        MathUtils.pow(1533, (-2110L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,533^-2,110)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.indicator(1027);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      int int1 = MathUtils.pow((-2538), (long) 1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-970L));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) (-970L);
      doubleArray1[3] = (double) (-970L);
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 0L;
      doubleArray1[8] = (double) (-970L);
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      short short0 = (short)3482;
      short short1 = MathUtils.sign((short)3482);
      long long2 = MathUtils.sign((-970L));
      double double1 = MathUtils.factorialLog((short)3482);
      try { 
        MathUtils.normalizeArray(doubleArray0, (-970.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.pow(2481, 2481);
      long long0 = MathUtils.subAndCheck(959L, 0L);
      double double0 = MathUtils.log(0.0, 0.11113807559013367);
      double double1 = MathUtils.normalizeAngle(0.0, 959L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = MathUtils.lcm(6, (-200));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-317.332112361);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1137.136864672569);
      int int0 = MathUtils.mulAndCheck(2, 2);
      long long0 = MathUtils.binomialCoefficient(56, 8);
      int int1 = MathUtils.gcd(4, 0);
      int int2 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray1);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.round(1137.136864672569, 7, (-2179));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = 1841.50876592;
      double double1 = MathUtils.sinh(1841.50876592);
      int int0 = 0;
      int int1 = 2293;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 2293);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 2,293
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 3500;
      // Undeclared exception!
      try { 
        MathUtils.round(87.85F, 3500, 3500);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,500, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 49.1189;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1357.5);
      doubleArray0[3] = 3502.3382;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 150.1295193;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte) (-14));
      byte byte1 = MathUtils.indicator((byte) (-14));
      int int0 = MathUtils.subAndCheck((int) (byte) (-1), (int) (byte) (-14));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (49.119 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.addAndCheck(1, 1);
      double double0 = MathUtils.sinh(1);
      int int2 = 1955;
      // Undeclared exception!
      try { 
        MathUtils.factorial(1955);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3778.329129);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = MathUtils.gcd((-307), 63);
      int int1 = MathUtils.sign(153);
      MathUtils.checkOrder(doubleArray0);
      boolean boolean0 = MathUtils.equals(1.2675934823758863E-8, (-664.54675794627), (-3778.329129));
      long long1 = MathUtils.lcm((-673L), (-664L));
      double double0 = MathUtils.factorialDouble(0);
      long long2 = MathUtils.subAndCheck((long) 63, (long) 1);
      byte byte0 = MathUtils.sign((byte)48);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.041666666666666664, 0.6366197723675814, 0.041666666666666664);
      long long0 = MathUtils.pow((-771L), 2478L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      int int0 = bigInteger0.signum();
      int int1 = 0;
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.pow(1);
      BigInteger bigInteger3 = bigInteger0.setBit(0);
      BigInteger bigInteger4 = bigInteger0.abs();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.indicator((-1225.0F));
      long long1 = 9193070505571053912L;
      long long2 = MathUtils.addAndCheck(9193070505571053912L, 2478L);
      double double0 = 3656.19617962;
      // Undeclared exception!
      try { 
        MathUtils.round(3656.19617962, (-724), (-724));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = MathUtils.gcd(2684L, 2684L);
      int int0 = (-34);
      int int1 = 0;
      int int2 = MathUtils.lcm((-34), 0);
      int int3 = 3813;
      // Undeclared exception!
      try { 
        MathUtils.factorial(3813);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
