/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:38:43 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 11;
      intArray0[2] = (-2040);
      intArray0[3] = 514;
      intArray0[4] = 15;
      intArray0[5] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((-134.8943169579), 6.032174644509064E-23, (double) (-2040));
      long long0 = MathUtils.sign(4095L);
      int int1 = MathUtils.pow(514, (long) 15);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 681.588080691106;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1080.0);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = 4369;
      double double1 = MathUtils.factorialLog(4369);
      int int1 = MathUtils.addAndCheck(20, (-124));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      double double3 = MathUtils.safeNorm(doubleArray0);
      long long0 = (-3958705157555305932L);
      long long1 = MathUtils.gcd(106L, (-3958705157555305932L));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-227));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -227
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = MathUtils.EPSILON;
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.pow(0L, 0);
      int int0 = MathUtils.sign(0);
      double double1 = MathUtils.indicator((double) 1L);
      double double2 = MathUtils.sign((double) 0L);
      long long2 = MathUtils.lcm(1L, 1L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      int int1 = MathUtils.hash(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2010));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (103^-2,010)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = (-0.5);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.15, (-0.5));
      double double1 = MathUtils.binomialCoefficientLog(1279, 973);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.mulAndCheck((long) (short)1, (long) (short)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-0.5);
      doubleArray0[2] = (double) 1279;
      doubleArray0[3] = 700.0783800086898;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -0.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = MathUtils.indicator((-1887L));
      int int0 = 20;
      int int1 = MathUtils.mulAndCheck(2432, 20);
      double double0 = MathUtils.factorialDouble(20);
      double double1 = MathUtils.sign((double) 20);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.43290200817664E18;
      doubleArray0[1] = (double) 2432;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-1887L);
      doubleArray0[4] = 398.4482453693944;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,432,902,008,176,640,000 >= 2,432)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 163;
      intArray0[1] = 39;
      intArray0[2] = 0;
      intArray0[3] = 119;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 163;
      intArray1[2] = 39;
      intArray1[3] = 163;
      intArray1[4] = 0;
      intArray1[5] = 119;
      intArray1[6] = 39;
      intArray1[7] = 39;
      intArray1[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
      long long0 = MathUtils.pow((long) 163, 39);
      double double0 = MathUtils.cosh(728.5);
      short short0 = MathUtils.indicator((short) (-423));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2021.3586051818;
      doubleArray0[1] = 1297.0;
      doubleArray0[2] = 62.0;
      doubleArray0[3] = (-1224.04278820095);
      doubleArray0[4] = (-899.7142442599211);
      doubleArray0[5] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = (-972);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-972), 1628);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -972, k = 1,628
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)19);
      int int0 = MathUtils.compareTo(0.0, 0.0, 3.141592653589793);
      long long0 = MathUtils.sign((long) (byte)19);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double1 = MathUtils.factorialDouble(792);
      int int2 = MathUtils.mulAndCheck((-2800), (-987));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = 3.141592653589793;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 792;
      doubleArray1[8] = (double) (byte)19;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object0 = new Object();
      boolean boolean1 = bigInteger0.equals(object0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte)1, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(4503599627370495L, 3415L);
      int int0 = 0;
      int int1 = MathUtils.gcd(0, 0);
      double double0 = MathUtils.normalizeAngle(4503599627370495L, 1.304E19);
      long long1 = MathUtils.gcd((long) 0, 4503599627373910L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(745.4519193351, 745.4519193351);
      long long0 = MathUtils.addAndCheck((-125L), (-125L));
      long long1 = MathUtils.sign(0L);
      float float0 = MathUtils.indicator(1.0F);
      int int0 = MathUtils.mulAndCheck(180, 953);
      double double0 = MathUtils.log(2.2250738585072014E-308, (-250L));
      long long2 = MathUtils.mulAndCheck(878L, 0L);
      int int1 = MathUtils.gcd(180, 171540);
      boolean boolean1 = MathUtils.equals(0.0, (double) 953);
      double double1 = MathUtils.round(0.0, 171540);
      int int2 = MathUtils.lcm(0, 180);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathUtils.factorial(171540);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 954;
      int int1 = MathUtils.addAndCheck(954, 954);
      int int2 = MathUtils.pow(1908, (long) 954);
      double double0 = MathUtils.log(0.0, 954);
      double double1 = MathUtils.scalb(0.0, 1908);
      int int3 = MathUtils.gcd(954, 954);
      double double2 = MathUtils.sign((double) 954);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-4267615245585081135L), 24L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1229.41850682;
      doubleArray0[1] = 3731.96520862486;
      doubleArray0[2] = 0.6931470632553101;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-555.27);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 3
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 488.1639022;
      doubleArray0[1] = 146.491;
      doubleArray0[2] = (-1141.378291751);
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long0 = MathUtils.mulAndCheck((-2897L), (-2836L));
      int int0 = 87;
      double double1 = MathUtils.binomialCoefficientDouble(87, 87);
      float float0 = MathUtils.round(0.0F, 469);
      // Undeclared exception!
      try { 
        MathUtils.factorial(87);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sinh((-700.5636546));
      long long0 = MathUtils.gcd(5040L, 0L);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      double double1 = MathUtils.distance(doubleArray0, doubleArray1);
      long long1 = MathUtils.subAndCheck(5040L, 5040L);
      double double2 = MathUtils.factorialDouble(576);
      int int0 = MathUtils.compareTo(5040L, 0L, 576);
      boolean boolean0 = MathUtils.equalsIncludingNaN(48.0, (-7.44321345601866E-11), 1250);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1);
      double double3 = MathUtils.sinh(3.834E-20);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2820.0325);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = 244;
      int int1 = MathUtils.addAndCheck(244, 244);
      double double2 = MathUtils.round((-2820.0325), 244);
      float float0 = MathUtils.round((float) 244, 244);
      int int2 = 21;
      double double3 = MathUtils.factorialDouble(21);
      int int3 = (-1927);
      double double4 = MathUtils.binomialCoefficientLog(447, (-1927));
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2182.2703854656597;
      doubleArray0[1] = (-0.16624879837036133);
      doubleArray0[2] = 3401.343;
      doubleArray0[3] = 10.0;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-546.8681630259523);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 465.20061339523;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 167.22548855029777;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.11111095942313305);
      long long0 = MathUtils.mulAndCheck((-2351L), 6227020800L);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("DIMENSIONS_MISMATCH_SIMPLE");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.DIMENSIONS_MISMATCH_SIMPLE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equals((double) 0, 0.0);
      int int0 = MathUtils.lcm(0, 135);
      double double0 = MathUtils.factorialDouble(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 135;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.sign(0.0);
      double double2 = MathUtils.indicator((double) 0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) 1L;
      doubleArray2[5] = (double) 1L;
      doubleArray2[6] = (double) 135;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = 1.0;
      int int1 = MathUtils.hash(doubleArray2);
      float float0 = MathUtils.indicator((-1.0F));
      double double3 = MathUtils.distanceInf(doubleArray1, doubleArray2);
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-280));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -280
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1070.89276745);
      doubleArray0[1] = (-942.0411669069354);
      doubleArray0[2] = 0.16666666666745392;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-681.658901);
      doubleArray0[6] = 0.49999999999999994;
      doubleArray0[7] = 1.225743062930824E-8;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      int int0 = 287;
      int int1 = 67;
      // Undeclared exception!
      try { 
        MathUtils.round(358.95, 287, 67);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 55.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 55.0;
      doubleArray1[1] = 55.0;
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 55.0;
      doubleArray1[4] = 55.0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      long long0 = MathUtils.lcm(0L, (-1864L));
      boolean boolean1 = MathUtils.equals(3.834E-20, 6.283185307179586);
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      double double1 = MathUtils.normalizeAngle(55.0, 3.834E-20);
      byte byte0 = MathUtils.sign((byte)16);
      int int0 = 72;
      float float0 = MathUtils.round(1602.1764F, 72);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.sign((-343.68812262818));
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      int int0 = MathUtils.hash(1303.5377647);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger1);
      int int1 = bigInteger0.intValueExact();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      int int2 = MathUtils.lcm((-346143776), (-346143776));
      int int3 = (-4208);
      // Undeclared exception!
      try { 
        MathUtils.lcm(346143776, (-4208));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(738L, (-2001L));
      int int0 = MathUtils.compareTo((-1263L), (-1263L), 3.834E-20);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2001L);
      doubleArray0[1] = (double) (-1263L);
      doubleArray0[2] = (double) (-2001L);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1263L);
      doubleArray1[1] = (double) (-1263L);
      doubleArray1[2] = (double) (-1263L);
      doubleArray1[3] = 1437.0980854736;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 3.834E-20;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-2783));
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, (int) (short) (-2783), (int) (short) (-2783));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-1460.714065563);
      double double1 = MathUtils.sinh((-1460.714065563));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 623;
      long long0 = MathUtils.binomialCoefficient(623, 623);
      double double2 = MathUtils.cosh(Double.NEGATIVE_INFINITY);
      int int1 = 2251;
      double double3 = MathUtils.scalb((-1460.714065563), 2251);
      double double4 = MathUtils.cosh((-1460.714065563));
      double double5 = MathUtils.factorialDouble(623);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = (byte) (-7);
      byte byte1 = MathUtils.indicator((byte) (-7));
      try { 
        MathUtils.pow((long) 623, (int) (byte) (-7));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (623^-7)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 2.0;
      int int0 = MathUtils.hash(2.0);
      // Undeclared exception!
      MathUtils.factorialLog(1073741824);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(90, 0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 90;
      intArray0[2] = 0;
      intArray0[3] = 90;
      intArray0[4] = 90;
      intArray0[5] = 90;
      intArray0[6] = 90;
      intArray0[7] = 90;
      intArray0[8] = 0;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double double1 = MathUtils.sinh(0);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.sinh((-7080.0));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-7080.0);
      doubleArray0[1] = (-7080.0);
      doubleArray0[2] = (double) 90;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 90;
      double double3 = MathUtils.safeNorm(doubleArray0);
      double double4 = MathUtils.sinh(0.0);
      int int2 = MathUtils.compareTo((-7080.0), 728.47643176582, 90);
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = 2118.393F;
      float float1 = MathUtils.sign(2118.393F);
      int int0 = (-224);
      int int1 = MathUtils.indicator((-224));
      double double0 = 1065.324239;
      double double1 = MathUtils.normalizeAngle(3013.00852383861, 1065.324239);
      float float2 = 1257.05F;
      float float3 = MathUtils.sign(1257.05F);
      short short0 = (short)0;
      short short1 = MathUtils.sign((short)0);
      long long0 = MathUtils.subAndCheck((long) (-1), 87178291200L);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = MathUtils.sign((byte) (-1));
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-1));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)99;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      String string0 = bigInteger1.toString((int) (byte)99);
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.shiftLeft((-1));
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      long long0 = MathUtils.lcm((long) (-1), (long) (-1));
      double double1 = MathUtils.normalizeAngle((-1100.32965311), 0.0);
      short short0 = MathUtils.sign((short)0);
      long long1 = MathUtils.addAndCheck(1L, 1L);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long2 = MathUtils.pow((long) (byte)41, 1030);
      float float0 = MathUtils.indicator((float) (byte)70);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 1L, (double) 1L, (double) 0);
      double double0 = MathUtils.cosh(1L);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1967.821963275767, (double) 0, 1.5430806348152437);
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      try { 
        MathUtils.normalizeArray(doubleArray0, 17.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 1349.7463);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 2368;
      int int1 = MathUtils.sign(2368);
      double double0 = 1.0;
      boolean boolean0 = MathUtils.equals((double) 2368, 1.0, 6.283185307179586);
      boolean boolean1 = MathUtils.equals(1.0, 6.283185307179586);
      double double1 = MathUtils.log(1, 2368);
      boolean boolean2 = MathUtils.equals(0.0, 0.0);
      boolean boolean3 = MathUtils.equals(0.0, (double) 1, 1894.04581);
      float float0 = (-1919.0F);
      // Undeclared exception!
      try { 
        MathUtils.round((-1919.0F), 2368, 1268);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,268, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 130;
      int int1 = MathUtils.subAndCheck(130, 130);
      long long0 = MathUtils.pow(6402373705728000L, (long) 130);
      float float0 = MathUtils.round((-1.0F), 0, 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, (-2.0F));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-466);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-466));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -466
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.sign((-262L));
      long long1 = MathUtils.lcm(0L, (-1L));
      short short0 = MathUtils.sign((short)866);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (int) (short)866;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals((double) (-262L), (double) 1, 146);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      long long0 = bigInteger1.longValueExact();
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger4 = new BigInteger(byteArray0);
      BigInteger bigInteger5 = bigInteger0.and(bigInteger4);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, bigInteger0);
      int int0 = MathUtils.pow((int) (byte)0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = (int) (byte)0;
      intArray1[3] = (int) (byte) (-48);
      int int1 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 1436;
      int int1 = MathUtils.subAndCheck(0, 1436);
      int int2 = 2914;
      int int3 = MathUtils.mulAndCheck(0, 2914);
      short short0 = MathUtils.sign((short) (-756));
      long long0 = MathUtils.mulAndCheck((long) 0, 1307674368000L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1436);
      doubleArray0[1] = (double) 2914;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (short) (-756);
      doubleArray0[4] = (double) 2914;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (-1436);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialLog(2914);
      long long1 = MathUtils.gcd(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-1005.190335), 1.01, (int) (short) (-756));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.log(2635.69795492, 21.46656);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(4339.883351066, 4339.883351066);
      float float0 = MathUtils.round(5227.5F, (-246));
      double double0 = MathUtils.normalizeAngle(Double.NaN, (-246));
      int int0 = MathUtils.sign((-246));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.sinh(Float.NaN);
      double double2 = MathUtils.sinh(247.3184787503);
      double double3 = MathUtils.factorialLog(338);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 338;
      doubleArray0[1] = 1634.0202207024602;
      doubleArray0[2] = (double) 5227.5F;
      doubleArray0[3] = (double) (-246);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1153.3556887888283);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 289.0;
      doubleArray0[4] = 0.0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.factorialDouble(187);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(0, 20);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (289 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1901.01799062855);
      doubleArray0[2] = (-2.957007209750105E-8);
      doubleArray0[3] = 758.7227303241;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (-3218.9120307966);
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd(0L, 2816L);
      long long1 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2850.134;
      doubleArray0[1] = 0.16666666666666666;
      double double0 = 2749.046860461325;
      doubleArray0[2] = 2749.046860461325;
      doubleArray0[3] = (-1445.57155768);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.5;
      double double1 = 5453.1;
      doubleArray0[6] = 5453.1;
      double double2 = 10.0;
      doubleArray0[7] = 10.0;
      doubleArray0[8] = (-571.457);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,850.134 > 0.167)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.compareTo(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-372.0));
      long long0 = MathUtils.pow((long) 0, (long) 0);
      int int1 = MathUtils.indicator((-2176));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-638);
      intArray0[1] = 3;
      intArray0[2] = (-1731);
      intArray0[3] = 0;
      intArray0[4] = (-2709);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2709);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) (-2709);
      doubleArray0[3] = (double) (-2709);
      doubleArray0[4] = (double) (-2709);
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(3887.115F);
      int int1 = MathUtils.gcd((-2472), 1372);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 40320L;
      long long1 = MathUtils.indicator(40320L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 40320L, (double) 40320L);
      short short0 = MathUtils.indicator((short) (-1122));
      float float0 = MathUtils.indicator((float) 40320L);
      try { 
        MathUtils.pow(0, (-2771));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,771)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 2.2250738585072014E-308;
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, 2.2250738585072014E-308, 0.0);
      double double2 = 0.0;
      int int0 = (-2014);
      double double3 = MathUtils.round(0.0, (-2014));
      long long0 = (-273L);
      int int1 = (-461);
      try { 
        MathUtils.pow((-273L), (-461));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-273^-461)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-96.482298646969);
      double double0 = (-2164.3598);
      doubleArray0[1] = (-2164.3598);
      doubleArray0[2] = (-1063.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3336.0929);
      doubleArray0[5] = 2053.38;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,164.36 <= -1,063)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 96;
      float float0 = MathUtils.round(0.0F, 96);
      float float1 = MathUtils.round((-4499.6F), (-198));
      double double0 = MathUtils.normalizeAngle(0.0, (-4499.6F));
      try { 
        MathUtils.pow(96, (-198));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (96^-198)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (-955));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-955);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 2591.0;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) (-955);
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) Float.NaN;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-955 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathUtils.EPSILON;
      try { 
        MathUtils.pow(0L, (-2));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-3285);
      int int1 = (-1480);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-3285), (-1480));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,480, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1660), (-1660));
      int[] intArray0 = new int[5];
      int int1 = 18;
      intArray0[0] = 18;
      intArray0[1] = 0;
      intArray0[2] = (-3320);
      intArray0[3] = (-1660);
      intArray0[4] = (-1660);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2.0, 4231.719026, 3301.35);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4231.719026;
      doubleArray0[1] = 4231.719026;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int0 = 2350;
      double double1 = MathUtils.factorialDouble(2350);
      long long0 = MathUtils.gcd((long) 2350, 660L);
      double double2 = MathUtils.normalizeAngle(Double.POSITIVE_INFINITY, 0.0);
      long long1 = MathUtils.addAndCheck(121645100408832000L, 2723L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(596);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2685, (-1680));
      byte byte0 = MathUtils.sign((byte) (-60));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 4365;
      doubleArray0[1] = (double) (byte) (-60);
      doubleArray0[2] = (double) (-1680);
      doubleArray0[3] = (double) (-1680);
      doubleArray0[4] = 896.0;
      doubleArray0[5] = (double) 4365;
      doubleArray0[6] = (double) (byte) (-1);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1680);
      doubleArray1[1] = (double) (byte) (-60);
      doubleArray1[2] = 3483.3363885;
      doubleArray1[3] = 896.0;
      doubleArray1[4] = 2463.23;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) (-1680);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(106, 106);
      int int0 = MathUtils.subAndCheck(0, 0);
      long long0 = MathUtils.sign(1175L);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double1 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 106;
      intArray0[1] = 0;
      intArray0[2] = 454;
      intArray0[3] = 0;
      intArray0[4] = 106;
      intArray0[5] = 106;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      int int1 = MathUtils.addAndCheck(0, 20);
      int int2 = MathUtils.hash(2960.71790024078);
      int int3 = MathUtils.sign(20);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 62.0;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 1450.0207834705;
      doubleArray0[4] = 514.843191318049;
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      byte byte0 = (byte)111;
      byte byte1 = MathUtils.sign((byte)111);
      int int0 = MathUtils.subAndCheck((int) (byte)1, (int) (byte)111);
      short short0 = MathUtils.indicator((short) (byte)111);
      int int1 = MathUtils.hash((-1135.68739480732));
      int int2 = (-745);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-745));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -745
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = null;
      long long0 = 880L;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 880L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 4092.0012210012;
      int int0 = (-3280);
      // Undeclared exception!
      try { 
        MathUtils.equals(4092.0012210012, 4092.0012210012, (-3280));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-2386.5496);
      int int0 = MathUtils.hash((-2386.5496));
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1517717798));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,517,717,798
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = MathUtils.gcd((-5578L), 1823L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-5578L);
      doubleArray0[1] = (double) 1823L;
      MathUtils.checkOrder(doubleArray0);
      long long1 = MathUtils.indicator((-5578L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long2 = bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger1.or(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.mod(bigInteger1);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, 1823L);
      long long3 = MathUtils.addAndCheck((-4099L), (-5578L));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      double double0 = MathUtils.round((double) (byte)1, (int) (byte)0, (int) (byte)0);
      double double1 = MathUtils.cosh(1.0);
      int int0 = MathUtils.addAndCheck((-2026), (int) (byte)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2025);
      doubleArray0[1] = (double) (-2026);
      doubleArray0[2] = (double) (-2026);
      doubleArray0[3] = (double) (-2025);
      int int1 = MathUtils.hash(doubleArray0);
      int int2 = MathUtils.mulAndCheck((-51996799), (int) (byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2026);
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (-51996799);
      int int3 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.indicator((float) (byte)0);
      long long0 = MathUtils.binomialCoefficient((byte)1, (-51996799));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = MathUtils.sign((short)52);
      double double0 = MathUtils.factorialDouble(142);
      double double1 = MathUtils.binomialCoefficientDouble(1447, (short)52);
      double double2 = MathUtils.round((double) 142, (int) (short)52);
      double double3 = MathUtils.indicator((-1080.0));
      float float0 = MathUtils.indicator(Float.NaN);
      byte byte0 = MathUtils.indicator((byte)15);
      long long0 = MathUtils.pow(108L, 0);
      long long1 = MathUtils.lcm(2223L, 20922789888000L);
      long long2 = MathUtils.pow(399L, 20922789888000L);
      double double4 = MathUtils.round(Double.NEGATIVE_INFINITY, 142, 142);
      int int0 = MathUtils.addAndCheck(1447, (int) (byte)15);
      double[] doubleArray0 = new double[0];
      double double5 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 1447;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)1;
      intArray0[4] = 0;
      double double6 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double7 = MathUtils.sign((double) 399L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-1188);
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-1188), (-1188));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,188, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(495.245695409682, 495.245695409682, 495.245695409682);
      double double0 = MathUtils.scalb((-2442.60366), 1187);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1187;
      doubleArray0[1] = (-2442.60366);
      doubleArray0[2] = (-2442.60366);
      doubleArray0[3] = (-1.588644548598722E-256);
      doubleArray0[4] = 495.245695409682;
      doubleArray0[5] = (-2442.60366);
      doubleArray0[6] = 479.0;
      doubleArray0[7] = (-2442.60366);
      doubleArray0[8] = (-2442.60366);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-107));
      float float0 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.gcd(249, 249);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 249;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 249;
      doubleArray0[5] = (double) (byte) (-107);
      doubleArray0[6] = (-273.25137322432);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.log((-1.0), 249);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2226.89213, 2226.89213, (-1416.94561622928));
      int int0 = (-92);
      int int1 = 0;
      int int2 = MathUtils.gcd((-92), 0);
      long long0 = 0L;
      long long1 = MathUtils.addAndCheck(0L, (long) 92);
      double double0 = MathUtils.binomialCoefficientDouble(2231, 0);
      int int3 = MathUtils.subAndCheck(1270, 92);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.087;
      doubleArray0[1] = (double) 1270;
      doubleArray0[2] = (double) 1178;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,270 >= 1,178)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.pow(67, 67);
      float float0 = MathUtils.round((float) 67, 0, 0);
      double double0 = MathUtils.binomialCoefficientDouble(882693595, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      long long1 = MathUtils.pow((long) 882693595, (long) 0);
      boolean boolean0 = MathUtils.equals(3684.0, (double) 68.0F);
      long long2 = MathUtils.lcm(0L, 0L);
      long long3 = MathUtils.addAndCheck(0L, (-4723L));
      double double1 = MathUtils.sinh(0L);
      int[] intArray0 = new int[0];
      double double2 = MathUtils.distance(intArray0, intArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 199;
      int int1 = 11;
      double double0 = MathUtils.binomialCoefficientDouble(199, 11);
      long long0 = 4607182418800017408L;
      long long1 = MathUtils.pow((long) 199, 4607182418800017408L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.indicator((-943.62335F));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      int int0 = MathUtils.sign(0);
      double double1 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = MathUtils.compareTo(0, 1790.891087814, 6.0);
      short short0 = (short)14;
      short short1 = MathUtils.sign((short)14);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = MathUtils.pow((-9223372036854775808L), 48);
      long long1 = MathUtils.addAndCheck(0L, 0L);
      int[] intArray0 = new int[2];
      intArray0[0] = 48;
      intArray0[1] = 48;
      double double0 = MathUtils.distance(intArray0, intArray0);
      int int0 = MathUtils.indicator(48);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.compareTo((-9223372036854775808L), Double.NEGATIVE_INFINITY, 0.07692307692307693);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 1062);
      int int1 = MathUtils.indicator(0);
      int int2 = MathUtils.pow(0, 0);
      long long0 = MathUtils.mulAndCheck((long) 0, (long) 0);
      float float0 = MathUtils.round((float) 0, 0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int3 = MathUtils.hash(doubleArray0);
      int int4 = MathUtils.addAndCheck(0, (-1017));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1267.4863);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-560.139561875);
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)4497);
      short short1 = MathUtils.sign((short)109);
      int int0 = MathUtils.sign(61);
      float float0 = MathUtils.sign(1.0F);
      int int1 = MathUtils.mulAndCheck(0, 1);
      byte byte0 = MathUtils.sign((byte)0);
      long long0 = MathUtils.addAndCheck((long) (short)1, (long) (short)1);
      byte byte1 = MathUtils.indicator((byte)76);
      double double2 = MathUtils.indicator((-0.1666666567325592));
      long long1 = MathUtils.lcm((long) 0, (long) (short)1);
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double4 = MathUtils.factorialLog((byte)1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-0.1666666567325592), (double) (byte)76, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        MathUtils.pow((-4035746434778044925L), (-4035746434778044925L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-4,035,746,434,778,044,925^-4,035,746,434,778,044,925)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = MathUtils.pow(1473, 1473);
      int int1 = MathUtils.sign(1473);
      long long0 = MathUtils.lcm(0L, (long) 1473);
      long long1 = MathUtils.indicator(2555L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-3991.70295592717), 0.0, (-1.0E-6));
      boolean boolean1 = MathUtils.equalsIncludingNaN((-3991.70295592717), (-3991.70295592717));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3991.70295592717);
      doubleArray0[1] = (-600.0);
      doubleArray0[2] = (-3991.70295592717);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3991.70295592717);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-3991.70295592717);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2400);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1709L), 1L);
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-641.0865763);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-641.0865763));
      byte byte0 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((-3147.2664), (double) (byte)0);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean1 = MathUtils.equals((-1.0), 742.472);
      double double1 = MathUtils.safeNorm(doubleArray1);
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.pow(456, 255);
      double double2 = MathUtils.indicator((-1642.99694393));
      int int2 = MathUtils.addAndCheck(2596, 5);
      long long0 = MathUtils.indicator((long) 2601);
      byte byte1 = MathUtils.sign((byte)0);
      long long1 = MathUtils.indicator(0L);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double3 = MathUtils.scalb((byte)0, (byte)0);
      boolean boolean2 = MathUtils.equals((-641.0865763), 0.0);
      long long2 = MathUtils.factorial(5);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      double double1 = MathUtils.sign((double) 0);
      byte byte0 = (byte)124;
      byte byte1 = MathUtils.sign((byte)124);
      int int0 = (-582);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-582), (byte)124);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -582, k = 124
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = MathUtils.sign(44);
      int int1 = MathUtils.lcm(44, 98);
      double double0 = MathUtils.normalizeAngle(44, (-441.84));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1729L), (-1132L));
      double double0 = MathUtils.sinh(0.3333333134651184);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      try { 
        MathUtils.pow(bigInteger0, (-1729L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,729)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb(0.0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double1 = MathUtils.log(0.0, 844.227634);
      float float0 = MathUtils.sign(381.77F);
      double double2 = MathUtils.round(0.0, 0);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.scalb(0.04168701738764507, 0);
      boolean boolean0 = MathUtils.equals(2.0, 0.04168701738764507);
      int int0 = MathUtils.pow(0, 4499201580859392L);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(735.9576323, 0.04168701738764507, (-1661));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.addAndCheck((int) (byte)0, (-2087));
      boolean boolean0 = MathUtils.equals((double) (byte)0, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(16, 16);
      int int0 = MathUtils.gcd(0, 1488);
      double double0 = MathUtils.cosh(0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1488;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double double1 = MathUtils.indicator((-0.2499999997677497));
      long long1 = MathUtils.mulAndCheck(387L, (long) 1488);
      double double2 = MathUtils.round((-1.0), 186);
      long long2 = MathUtils.subAndCheck((long) 1488, 0L);
      double double3 = MathUtils.round(0.0, 13);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-0.09088450866185192), (double) 186);
      double double4 = MathUtils.cosh(13);
      int int1 = MathUtils.subAndCheck(0, 137);
      double double5 = MathUtils.log(2.0, 1L);
      long long3 = MathUtils.addAndCheck((long) (-137), 1488L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-0.09088450866185192), 0.0);
      boolean boolean2 = MathUtils.equalsIncludingNaN(1454.16, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(8L, 1825L);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-31));
      double double0 = MathUtils.cosh(0.0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      String string0 = bigInteger0.toString((-4104));
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short short0 = MathUtils.indicator((short)11);
      long long0 = MathUtils.subAndCheck((-919L), 0L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2191.4363;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.sign(109.43);
      int int0 = MathUtils.gcd(0, 2221);
      boolean boolean0 = MathUtils.equals((double) 2221, 1.0, 10);
      boolean boolean1 = MathUtils.equals((double) 10, Double.NEGATIVE_INFINITY);
      float float0 = MathUtils.indicator((-2266.79F));
      byte byte0 = (byte) (-63);
      byte byte1 = MathUtils.sign((byte) (-63));
      double double1 = MathUtils.round(109.43, 10, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((byte) (-63), (-373));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -63
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      long long0 = MathUtils.binomialCoefficient(791, 791);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.sign((-2220.03F));
      long long0 = MathUtils.pow(0L, 52);
      long long1 = MathUtils.lcm((long) 52, 1380L);
      long long2 = MathUtils.subAndCheck(1380L, 1380L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2220.03F);
      doubleArray0[1] = (double) (-2220.03F);
      doubleArray0[2] = (double) 17940L;
      doubleArray0[3] = (double) 0L;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = 819.62F;
      int int0 = 0;
      float float1 = MathUtils.round(819.62F, 0);
      int int1 = 739;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(739, 838);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 739, k = 838
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = MathUtils.indicator((-982.1F));
      double double0 = MathUtils.indicator(2113.303289351);
      int int0 = 214;
      float float1 = MathUtils.round((-1888.8883F), 214);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int1 = 1575;
      byte[] byteArray0 = bigInteger0.toByteArray();
      int int2 = bigInteger0.intValueExact();
      BigInteger bigInteger1 = bigInteger0.shiftRight(1575);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) 214);
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger2);
      try { 
        MathUtils.pow(1575, (-364L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,575^-364)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.19999999999923582;
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.19999999999923582);
      byte byte0 = (byte) (-47);
      byte byte1 = MathUtils.sign((byte) (-47));
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-47));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -47
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 691;
      int int1 = 0;
      int int2 = MathUtils.mulAndCheck(691, 0);
      int int3 = 13;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1470.0), (double) 0, 13);
      double double0 = MathUtils.sign(121.978330497974);
      float float0 = MathUtils.sign((float) 0);
      int int4 = 100;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 100);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 100
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-3458.5490860528), 1543.14436);
      float float0 = 2472.9F;
      int int0 = 28;
      float float1 = MathUtils.round(2472.9F, 28);
      int int1 = 0;
      int int2 = MathUtils.pow(0, 362880L);
      int int3 = MathUtils.subAndCheck((-2560), 28);
      double double0 = MathUtils.sign((-310.01645));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) 362880L, 1220.95261, (double) 2472.9F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1196.6092544002186;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2588), (-2588));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,588
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = bigInteger0.intValue();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-37);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)80);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte)80, (double) (byte)1, 62.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 62.0;
      doubleArray0[1] = (double) (byte)80;
      doubleArray0[2] = 62.0;
      doubleArray0[3] = 62.0;
      doubleArray0[4] = 62.0;
      doubleArray0[5] = 62.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 62.0;
      doubleArray1[1] = 62.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray1);
      short short0 = MathUtils.sign((short) (byte)1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = MathUtils.sign((short)218);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)218;
      doubleArray0[2] = (double) (short)218;
      int int0 = MathUtils.hash(doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(218.0, 0.0);
      int int1 = MathUtils.subAndCheck((int) (short)218, 0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.sign((-1.0E-6));
      long long0 = MathUtils.addAndCheck(1656L, 1310L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-40));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1866));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,866
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.indicator((-2406L));
      double double0 = MathUtils.normalizeAngle(0.0, 0.3333333134651184);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.3333333134651184, 0.0, 206);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      float float1 = MathUtils.indicator(0.0F);
      int int0 = MathUtils.subAndCheck((-1444), (-320));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(12.0, 12.0, 12.0);
      double double1 = MathUtils.cosh((-4516.7956619));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = MathUtils.log((-1.0E-6), (-1.0E-6));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-737), (-737));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -737
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 599.0;
      doubleArray0[1] = (-1191.0);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 599.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1191.0);
      doubleArray1[3] = 599.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2926.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 94;
      int int1 = MathUtils.pow(94, 94);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.pow(0, 2935890503282001226L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2935890503282001226L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0952233225107193;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2935890503282001226L;
      doubleArray0[6] = (double) 2935890503282001226L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,935,890,503,282,001,400 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2731));
      double double0 = MathUtils.indicator((double) (short) (-2731));
      int int0 = MathUtils.hash((double) (short) (-1));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (short) (-2731), (-1074790400));
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = 1.1102230246251565E-16;
      double double1 = MathUtils.indicator(1.1102230246251565E-16);
      try { 
        MathUtils.pow((-213L), (-213L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-213^-213)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.hash(1108.324054974);
      try { 
        MathUtils.pow(0L, (long) (-1786741516));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-1,786,741,516)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.lcm(1, 16);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[7];
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (double) 0);
      int int0 = MathUtils.compareTo(0, 0, (-1224.862880233));
      long long0 = MathUtils.sign(569L);
      long long1 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.633123935319537E16;
      doubleArray0[1] = 1.633123935319537E16;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      short short0 = MathUtils.indicator((short) (-124));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3120.522346290638;
      doubleArray0[1] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,120.522 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-910.7095), 10.0);
      int int0 = MathUtils.pow(61, (long) 61);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.11764700710773468;
      doubleArray0[1] = 8.0E298;
      doubleArray0[2] = (-18.202119113735);
      doubleArray0[3] = (-3322.001611);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2126.268715621078;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.round(3299.4847793278, 8);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.lcm(2338, 8);
      long long0 = MathUtils.addAndCheck((long) 2338, 7910884519577875640L);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      long long2 = MathUtils.addAndCheck(0L, 0L);
      long long3 = 0L;
      long long4 = MathUtils.pow(0L, 0L);
      double double0 = MathUtils.factorialDouble(187);
      boolean boolean0 = MathUtils.equals((double) 0L, (double) 0L, 484);
      // Undeclared exception!
      try { 
        MathUtils.factorial(484);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(745.4519193351, 745.4519193351);
      long long0 = MathUtils.addAndCheck((-125L), (-125L));
      long long1 = MathUtils.sign(0L);
      float float0 = MathUtils.indicator(1.0F);
      double double0 = MathUtils.log(2.2250738585072014E-308, (-250L));
      long long2 = MathUtils.mulAndCheck(878L, 0L);
      boolean boolean1 = MathUtils.equals(0.0, (double) 953);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = (byte)52;
      byte byte1 = MathUtils.indicator((byte)52);
      double double0 = MathUtils.sinh((byte)52);
      double double1 = MathUtils.sign((double) (byte)52);
      long long0 = MathUtils.gcd(3061L, (long) (byte)1);
      float float0 = MathUtils.sign((float) 1L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)52;
      MathUtils.checkOrder(doubleArray0);
      int int0 = 11;
      float float1 = MathUtils.round(0.0F, 11, (int) (byte)1);
      double double2 = MathUtils.sinh((-1.0E-11F));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double3 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathUtils.round(556.8892529422127, 0, (int) (byte)52);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 3220;
      boolean boolean0 = MathUtils.equals(0.0, 3.834E-20, 3220);
      long long0 = MathUtils.mulAndCheck((long) 3220, (-330L));
      int int1 = MathUtils.mulAndCheck(3220, 3220);
      int[] intArray0 = new int[6];
      intArray0[0] = 3220;
      intArray0[1] = 10368400;
      intArray0[2] = 10368400;
      intArray0[3] = 10368400;
      intArray0[4] = 3220;
      intArray0[5] = 10368400;
      int int2 = MathUtils.distance1(intArray0, intArray0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
      long long1 = MathUtils.pow((-2147483648L), 4147);
      float float0 = MathUtils.round(0.0F, 5);
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 87);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 87
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.pow(115, 115);
      long long0 = MathUtils.factorial(0);
      long long1 = MathUtils.sign((long) 412388395);
      short short0 = MathUtils.sign((short) (-531));
      int int1 = MathUtils.lcm(0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 0;
      intArray0[2] = 2926;
      intArray0[3] = (-271);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = 0;
      int int2 = MathUtils.distanceInf(intArray0, intArray0);
      int int3 = MathUtils.pow(230, 0L);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1956));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,956
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(3135, 13);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = bigInteger0.toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger2 = BigInteger.probablePrime(13, mockRandom0);
      int int0 = bigInteger1.signum();
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 428);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)95;
      doubleArray0[1] = (double) (byte)95;
      doubleArray0[2] = (double) (byte)95;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, (byte)95);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 95
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.indicator(2854L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 2854L;
      doubleArray0[2] = 1.1730463525082348E-7;
      doubleArray0[3] = (double) 2854L;
      doubleArray0[4] = (double) 2854L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 2854L;
      doubleArray0[8] = 408.5041223765669;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }
}
