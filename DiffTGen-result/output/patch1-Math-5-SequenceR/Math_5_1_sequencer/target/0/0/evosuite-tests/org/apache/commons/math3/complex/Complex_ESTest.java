/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:49:17 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4570.18942784659);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex3.ONE.pow(2407.55);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = Complex.valueOf(0.0);
      double double0 = complex0.NaN.abs();
      Complex complex8 = complex0.multiply(1);
      Complex complex9 = complex2.NaN.conjugate();
      Complex complex10 = complex8.ZERO.tanh();
      Complex complex11 = complex3.conjugate();
      ComplexField complexField0 = complex7.NaN.getField();
      double double1 = complex8.ONE.getArgument();
      boolean boolean0 = complex2.equals(complex1);
      boolean boolean1 = complex5.equals(complex8);
      double double2 = complex1.ZERO.getArgument();
      Object object0 = complex5.readResolve();
      Complex complex12 = complex10.subtract(0.0);
      Complex complex13 = complex9.divide(1580.6135831621013);
      Complex complex14 = complex13.ONE.pow(complex0);
      Object object1 = complex10.ONE.readResolve();
      Complex complex15 = complex7.cosh();
      List<Complex> list0 = complex10.nthRoot(1);
      Complex complex16 = Complex.INF;
      Complex complex17 = complex4.subtract(complex16);
      Complex complex18 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1806.162));
      Complex complex1 = complex0.createComplex((-1806.162), (-1806.162));
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.INF.multiply(complex3);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex4.I.sqrt();
      Complex complex8 = complex0.multiply(complex6);
      double double0 = complex1.INF.abs();
      Complex complex9 = complex3.NaN.multiply(345746452);
      String string0 = complex8.toString();
      Complex complex10 = complex0.log();
      ComplexField complexField0 = complex4.getField();
      Complex complex11 = complex0.NaN.atan();
      Complex complex12 = complex11.ONE.conjugate();
      Complex complex13 = complex10.pow((-1806.162));
      Complex complex14 = complex4.ONE.sin();
      Complex complex15 = complex8.cos();
      double double1 = 1.830322504043579;
      Complex complex16 = complex7.divide((-364.006367889828));
      Complex complex17 = complex0.I.createComplex(1.830322504043579, (-3385.1174915733));
      Complex complex18 = complex6.divide(1.830322504043579);
      Complex complex19 = complex15.sin();
      Complex complex20 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex21 = complex0.negate();
      try { 
        complex6.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.exp();
      double double0 = complex0.NaN.abs();
      String string0 = complex0.toString();
      Complex complex3 = complex1.INF.multiply(Double.NaN);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex2.ZERO.multiply(complex0);
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex6.NaN.negate();
      String string1 = complex1.toString();
      Complex complex9 = complex1.ONE.sinh();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex2.add(0.0);
      Complex complex12 = complex11.ZERO.divide(complex0);
      Complex complex13 = complex11.I.log();
      ComplexField complexField0 = complex1.getField();
      Object object0 = complex2.readResolve();
      double double1 = complex11.getReal();
      ComplexField complexField1 = complex11.getField();
      String string2 = complex10.toString();
      Complex complex14 = complex10.negate();
      Complex complex15 = complex11.ZERO.add((-331.336566));
      String string3 = complex9.toString();
      Complex complex16 = complex3.add(complex0);
      Complex complex17 = complex10.tan();
      Complex complex18 = complex1.multiply(2.718281828459045);
      Complex complex19 = complex5.exp();
      Complex complex20 = complex17.divide((-331.336566));
      Complex complex21 = complex5.sinh();
      String string4 = complex19.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2493.0);
      ComplexField complexField0 = complex0.INF.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.INF.add(2493.0);
      Complex complex4 = complex1.I.tan();
      Complex complex5 = Complex.valueOf((-4.776104368314602E-8), (-4.776104368314602E-8));
      Complex complex6 = Complex.valueOf(2.2036094805348692E-9, 2493.0);
      Complex complex7 = complex2.NaN.tan();
      Complex complex8 = complex7.NaN.sin();
      double double0 = complex1.ZERO.abs();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.I.asin();
      double double1 = complex9.NaN.getArgument();
      double double2 = complex9.I.getArgument();
      Complex complex11 = complex9.INF.reciprocal();
      Complex complex12 = complex11.NaN.subtract(complex0);
      Complex complex13 = complex9.multiply(complex1);
      Complex complex14 = complex2.subtract(2493.0);
      Object object1 = complex13.INF.readResolve();
      Complex complex15 = complex12.ZERO.log();
      Complex complex16 = complex4.subtract(215.502);
      Complex complex17 = complex2.sqrt1z();
      Complex complex18 = complex17.tanh();
      Complex complex19 = complex14.cos();
      Complex complex20 = complex13.tan();
      Complex complex21 = complex12.atan();
      boolean boolean0 = complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.pow((-1.0));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = new Complex((-1.0));
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex3.I.createComplex((-20.0), 2202.329);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex5.NaN.createComplex(0.0, (-1.0));
      double double0 = complex0.getReal();
      Complex complex10 = complex1.subtract(complex0);
      Complex complex11 = complex0.INF.subtract(0.0);
      Complex complex12 = complex10.INF.subtract(complex0);
      boolean boolean0 = complex3.equals(complex1);
      Complex complex13 = complex2.exp();
      Complex complex14 = complex13.log();
      Complex complex15 = complex13.sqrt();
      Complex complex16 = complex15.ZERO.log();
      Complex complex17 = complex2.divide(814.4507);
      Complex complex18 = complex12.subtract(1208.237591);
      Complex complex19 = complex8.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-2704.524), 0.0);
      ComplexField complexField0 = complex0.ZERO.getField();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex4.INF.tan();
      int int1 = complex2.ONE.hashCode();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.multiply(complex9);
      Complex complex12 = complex1.cos();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4807.05), (-4807.05));
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ONE.add(0.0);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.NaN.divide(0.0);
      Complex complex5 = complex0.ONE.createComplex(0.0, (-4807.05));
      Complex complex6 = Complex.valueOf((-4807.05));
      Complex complex7 = new Complex(2.820392733542077E-8, Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.NaN.subtract(complex7);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex10.acos();
      Complex complex12 = Complex.valueOf(0.0);
      Complex complex13 = complex12.ZERO.reciprocal();
      Complex complex14 = complex9.INF.negate();
      Complex complex15 = complex1.sqrt();
      Complex complex16 = complex1.conjugate();
      Complex complex17 = complex9.cosh();
      boolean boolean0 = complex10.equals(complex1);
      Complex complex18 = complex4.cosh();
      Complex complex19 = Complex.valueOf(Double.POSITIVE_INFINITY, 2873.0);
      Complex complex20 = complex9.subtract((-1696.928));
      Complex complex21 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-3931.0));
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = Complex.valueOf((-1.5685449228299222E-7));
      double double0 = complex0.getReal();
      Complex complex3 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ONE.cosh();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.NaN.cos();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex7 = complex1.divide(Double.NaN);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex8.ZERO.atan();
      Complex complex10 = complex5.acos();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex5.log();
      String string0 = complex12.ZERO.toString();
      Complex complex13 = complex2.createComplex(1.4565123573071036E164, Double.NaN);
      Complex complex14 = complex13.ONE.subtract(1.4565123573071036E164);
      Complex complex15 = Complex.valueOf(1.5707963267948966);
      int int1 = complex5.hashCode();
      Complex complex16 = complex14.asin();
      Complex complex17 = complex16.ZERO.multiply(1.5707963267948966);
      Complex complex18 = complex7.divide(1.4565123573071036E164);
      Complex complex19 = complex10.sinh();
      Complex complex20 = complex8.ONE.atan();
      Complex complex21 = complex0.acos();
      Complex complex22 = complex4.add(1.4565123573071036E164);
      Complex complex23 = complex1.subtract(complex13);
      double double1 = complex9.getArgument();
      Complex complex24 = complex4.sinh();
      Complex complex25 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ONE.multiply(complex3);
      Complex complex5 = complex3.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex6 = complex4.ONE.exp();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex4.I.pow(Double.NaN);
      Complex complex9 = complex8.INF.pow(complex0);
      Complex complex10 = complex3.I.divide(complex4);
      Complex complex11 = complex9.ZERO.cos();
      Complex complex12 = complex8.NaN.conjugate();
      Complex complex13 = complex12.add(complex6);
      Complex complex14 = complex9.NaN.pow(Double.NaN);
      Complex complex15 = complex12.INF.sin();
      String string0 = complex15.ONE.toString();
      Complex complex16 = complex9.NaN.multiply((-2387));
      Complex complex17 = complex7.subtract(Double.NaN);
      Complex complex18 = complex17.ZERO.subtract(complex15);
      Complex complex19 = complex6.asin();
      Complex complex20 = complex7.conjugate();
      Complex complex21 = complex20.INF.tan();
      Complex complex22 = complex9.add(Double.NaN);
      Object object0 = complex3.readResolve();
      Complex complex23 = complex6.add((double) (-2387));
      Complex complex24 = complex4.add(complex13);
      String string1 = complex15.toString();
      Complex complex25 = complex12.atan();
      try { 
        complex21.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex1.NaN.add(2.8930193727937684E208);
      Complex complex6 = complex1.ONE.cos();
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex7.INF.pow(2.8930193727937684E208);
      List<Complex> list0 = complex7.I.nthRoot(915);
      Complex complex9 = complex7.sin();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex2.subtract(2.8930193727937684E208);
      Complex complex11 = complex3.sqrt1z();
      Complex complex12 = complex4.acos();
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex13 = complex10.pow(complex2);
      Complex complex14 = complex13.I.asin();
      Complex complex15 = complex10.acos();
      boolean boolean1 = complex5.isInfinite();
      Complex complex16 = complex11.multiply((-318.19795922756));
      Complex complex17 = Complex.valueOf((-1038.9), 1.8521166948363666E-45);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2369.95);
      Complex complex1 = complex0.INF.add((-3454.1081));
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.subtract(complex2);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex4.I.exp();
      List<Complex> list0 = complex2.NaN.nthRoot(958);
      Complex complex6 = complex3.I.atan();
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex3.ZERO.add(complex0);
      Complex complex8 = complex6.ONE.exp();
      double double0 = complex0.getReal();
      String string1 = complex0.toString();
      Complex complex9 = complex2.ONE.exp();
      Complex complex10 = complex1.ONE.add(complex7);
      Complex complex11 = complex7.pow(complex6);
      Complex complex12 = complex2.exp();
      Complex complex13 = complex11.ONE.multiply(2369.95);
      Complex complex14 = Complex.valueOf(2448.159081361476, (-3454.1081));
      Complex complex15 = complex14.I.sqrt();
      Complex complex16 = complex15.I.reciprocal();
      Complex complex17 = complex14.tanh();
      double double1 = complex1.getReal();
      List<Complex> list1 = complex3.nthRoot(339);
      Complex complex18 = complex17.createComplex(2448.159081361476, 2200.0756);
      double double2 = complex18.abs();
      Complex complex19 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-608.490868), 246.39537576433258);
      Complex complex1 = complex0.I.divide(1.0);
      Complex complex2 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex3 = complex0.ONE.sqrt();
      Object object0 = complex0.I.readResolve();
      double double0 = complex1.getReal();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.I.reciprocal();
      int int0 = complex0.I.hashCode();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex2.multiply((-979.631049500382));
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = Complex.valueOf(246.39537576433258);
      Complex complex11 = complex8.divide((-2219.38246502552));
      Object object1 = complex1.readResolve();
      Complex complex12 = complex4.sqrt1z();
      ComplexField complexField0 = complex12.I.getField();
      Complex complex13 = Complex.valueOf(6.283185307179586, (-979.631049500382));
      Complex complex14 = complex4.multiply(complex13);
      Complex complex15 = complex14.I.cos();
      Complex complex16 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex17 = complex8.acos();
      Complex complex18 = complex0.tan();
      Complex complex19 = complex12.multiply(0.0);
      Complex complex20 = complex4.asin();
      Complex complex21 = complex20.sqrt();
      Complex complex22 = complex20.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-444.3270388), (-444.3270388));
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add((-444.3270388));
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.NaN.pow(complex1);
      Complex complex7 = complex6.INF.createComplex(2790.4, 0.0);
      double double0 = complex3.getArgument();
      Complex complex8 = complex3.ONE.tanh();
      Complex complex9 = Complex.valueOf((-444.3270388));
      Complex complex10 = complex8.ZERO.divide((-444.3270388));
      Complex complex11 = complex5.reciprocal();
      double double1 = complex11.INF.abs();
      Complex complex12 = complex0.multiply(6.283185307179586);
      Complex complex13 = complex2.createComplex(2.147872807236627, (-444.3270388));
      double double2 = complex6.getArgument();
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex10.subtract(complex1);
      Complex complex16 = complex1.sin();
      int int0 = complex16.INF.hashCode();
      Complex complex17 = complex12.negate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.NaN.multiply(complex1);
      double double1 = complex0.NaN.abs();
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf((-1199.27402), Double.NaN);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.valueOf(1.0);
      double double2 = complex6.getArgument();
      double double3 = complex8.getReal();
      boolean boolean0 = complex0.equals(complex6);
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex1.multiply(complex0);
      int int0 = complex8.hashCode();
      Complex complex11 = complex0.subtract((-1199.27402));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      String string0 = complex0.NaN.toString();
      double double1 = complex0.INF.getArgument();
      double double2 = complex0.INF.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = null;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1311.92091037));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.sqrt();
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex1.hashCode();
      Complex complex5 = complex0.log();
      Complex complex6 = complex4.ZERO.createComplex(1076.41, (-1311.92091037));
      Complex complex7 = complex4.NaN.asin();
      Complex complex8 = complex5.subtract(complex0);
      Complex complex9 = complex8.INF.negate();
      Complex complex10 = complex3.multiply(complex8);
      Complex complex11 = complex10.I.cosh();
      List<Complex> list0 = complex0.nthRoot(562);
      Complex complex12 = complex5.subtract(complex4);
      Complex complex13 = complex3.exp();
      Complex complex14 = complex10.I.reciprocal();
      Complex complex15 = complex10.acos();
      Complex complex16 = complex1.NaN.conjugate();
      Complex complex17 = complex15.NaN.sqrt();
      Complex complex18 = complex17.I.sqrt();
      Complex complex19 = complex6.acos();
      Complex complex20 = complex10.exp();
      boolean boolean1 = complex20.isInfinite();
      Complex complex21 = complex6.createComplex(562, 562);
      Complex complex22 = complex3.createComplex(1076.41, 0.0);
      double double0 = complex16.getImaginary();
      Complex complex23 = Complex.valueOf(0.0, (double) 562);
      int int1 = complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.multiply((-1210));
      Complex complex3 = complex1.ONE.cos();
      int int0 = 1;
      try { 
        complex0.nthRoot((-1210));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,210
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 728.1734274149;
      double double1 = (-1412.825895);
      Complex complex0 = Complex.valueOf(728.1734274149, (-1412.825895));
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.negate();
      String string0 = complex1.ONE.toString();
      ComplexField complexField0 = complex0.getField();
      Object object0 = complex0.readResolve();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.multiply((-469));
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = complex3.INF.divide(complex1);
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.tan();
      Complex complex8 = complex7.multiply((-469));
      Complex complex9 = complex0.pow(0.0);
      try { 
        complex2.nthRoot((-469));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -469
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(355.9699);
      double double0 = 0.0;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.add(355.9699);
      ComplexField complexField0 = complex0.NaN.getField();
      int int0 = 1456;
      Complex complex3 = complex0.ONE.multiply(1456);
      try { 
        complex0.INF.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.multiply((-1787));
      String string1 = complex1.toString();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex2.NaN.multiply((-1787));
      Complex complex5 = complex4.I.subtract((double) (-1787));
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex0.createComplex((-1787), (-1787));
      Complex complex9 = complex8.tan();
      Complex complex10 = complex2.pow((double) (-1787));
      double double0 = complex6.getArgument();
      double double1 = complex0.getReal();
      double double2 = complex3.abs();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex1.acos();
      boolean boolean0 = complex0.equals(complex11);
      Complex complex13 = complex10.add(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex3.createComplex(6.283185307179586, (-1015.8753144));
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.INF.subtract(complex7);
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex9.NaN.createComplex(0.4580921530723572, 3.815359096108819E217);
      Complex complex11 = complex6.cos();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex1.reciprocal();
      Complex complex14 = complex13.acos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add((-11.74));
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.I.acos();
      List<Complex> list0 = complex0.nthRoot(786);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.cosh();
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.divide(complex7);
      Complex complex9 = complex0.pow(2.5685958862304688);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex6.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.multiply(750);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.createComplex(750, (-1112.8147420370099));
      int int0 = complex0.hashCode();
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9257892371894816E-17, (-3212.705359907857));
      Complex complex1 = complex0.tanh();
      int int0 = complex1.ZERO.hashCode();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.pow(complex1);
      int int1 = 1;
      Complex complex5 = complex2.multiply(1);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex4.ZERO.reciprocal();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex8.ZERO.negate();
      double double0 = complex2.abs();
      Complex complex10 = complex1.ONE.sinh();
      Complex complex11 = complex10.ONE.multiply(complex9);
      Complex complex12 = complex10.ONE.add((-1.0));
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex13 = complex2.ONE.divide((-3212.705359907857));
      try { 
        complex2.nthRoot((-988));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -988
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1710.8758046424784);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.9507744508973654E-8, (-2377.395861037407));
      Complex complex1 = complex0.createComplex((-2377.395861037407), (-2377.395861037407));
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex0.subtract(2306.0);
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(0.0);
      int int0 = complex5.NaN.hashCode();
      Complex complex6 = complex0.NaN.multiply((-268.59176979847));
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.getReal();
      double double2 = complex0.getImaginary();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.INF.reciprocal();
      Complex complex9 = complex7.subtract(complex1);
      Complex complex10 = complex0.pow(0.0);
      Complex complex11 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.799340708992666E66);
      double double0 = complex0.abs();
      Complex complex1 = complex0.divide(2.799340708992666E66);
      Complex complex2 = complex1.I.multiply((-398));
      Complex complex3 = complex0.NaN.reciprocal();
      double double1 = complex0.getArgument();
      double double2 = complex1.abs();
      double double3 = complex0.getArgument();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.multiply(2.799340708992666E66);
      double double4 = complex2.abs();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex2.add(1.285159987981792E19);
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1682026251371384E-8, 1.1682026251371384E-8);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = new Complex((-1435.37138));
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex0.divide(complex1);
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex5.multiply(1.9219114780426025);
      Complex complex8 = complex7.ONE.cos();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.I.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ZERO.createComplex(65.69851, 4.388125271425036E166);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex0.multiply(complex3);
      Complex complex8 = complex7.I.multiply(736.828);
      Complex complex9 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = complex0.INF.multiply(39);
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex5.subtract((double) 39);
      Complex complex8 = complex0.log();
      double double0 = complex5.getReal();
      double double1 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.pow(0.0);
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = complex1.ONE.createComplex((-1851.3354811), (-1851.3354811));
      Complex complex5 = complex0.ONE.cos();
      Complex complex6 = complex0.INF.multiply(Double.NaN);
      double double1 = complex6.INF.abs();
      List<Complex> list0 = complex1.nthRoot(1);
      ComplexField complexField0 = complex4.getField();
      Complex complex7 = complex4.subtract((-1851.3354811));
      Complex complex8 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add((-44.35154276366585));
      Complex complex2 = Complex.valueOf((-44.35154276366585), 741.197393189);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.pow(complex1);
      ComplexField complexField0 = complex4.NaN.getField();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.add(701.3261790685018);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex0.subtract(701.3261790685018);
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex6 = Complex.valueOf(3015.0, Double.NaN);
      Complex complex7 = complex6.acos();
      double double1 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply(0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.INF.reciprocal();
      Complex complex7 = complex4.INF.divide(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.ONE.createComplex(0.0, 0.0);
      Complex complex10 = complex4.divide(complex0);
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex4.sqrt();
      List<Complex> list0 = complex10.nthRoot(1731);
      Complex complex14 = complex11.cosh();
      Complex complex15 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-9.53795080582038E-9), 580.5);
      Complex complex1 = complex0.multiply((-9.53795080582038E-9));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add((-51.6403512235));
      Complex complex2 = Complex.valueOf((-51.6403512235), 741.197393189);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.pow(complex1);
      ComplexField complexField0 = complex4.NaN.getField();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      double double0 = complex1.getReal();
      Complex complex2 = complex0.INF.add(0.0);
      double double1 = complex2.NaN.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.multiply(0);
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex3.INF.asin();
      Object object0 = complex5.ONE.readResolve();
      double double2 = complex1.getImaginary();
      Complex complex7 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1971.7393771, (-4654.97848));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.createComplex(370.46632, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.log();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.subtract(1653.43889922);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.INF.atan();
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.valueOf(491.65);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = new Complex(491.65, 1653.43889922);
      Complex complex9 = complex7.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-359.754999256));
      Complex complex1 = complex0.NaN.multiply((-359.754999256));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.multiply((-359.754999256));
      Complex complex6 = new Complex((-359.754999256));
      Complex complex7 = complex2.multiply(complex6);
      double double0 = complex1.getReal();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex8.createComplex(1.0, 20.0);
      Complex complex12 = complex2.add((-359.754999256));
      Complex complex13 = complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.5834785706), 0.0);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(0.0, (-1504.0));
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.NaN.createComplex(0.0, 1405.661);
      String string0 = complex4.ZERO.toString();
      Complex complex6 = complex1.sin();
      List<Complex> list0 = complex6.INF.nthRoot(17);
      Complex complex7 = complex2.add(359.9798641839436);
      ComplexField complexField0 = complex7.getField();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex2.pow(complex8);
      Complex complex11 = complex10.negate();
      Complex complex12 = Complex.valueOf((-63.5556482224879));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.NaN.multiply((-241));
      String string0 = complex0.toString();
      Complex complex3 = Complex.valueOf(Double.NaN, (-456.9480533541));
      double double0 = complex1.abs();
      Complex complex4 = complex1.reciprocal();
      double double1 = complex0.abs();
      double double2 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      String string0 = complex0.NaN.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.ONE.divide(9.39987974788905E-8);
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.multiply(0.0);
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.getReal();
      Complex complex5 = complex1.cos();
      boolean boolean1 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.asin();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.INF.exp();
      double double1 = complex3.I.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex5.pow(complex1);
      Complex complex8 = complex0.tanh();
      double double2 = complex5.getReal();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex3.exp();
      boolean boolean0 = complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1845.697668732), (-1845.697668732));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sin();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex0.NaN.add((-2.356194490192345));
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.NaN.tan();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex3.pow(complex8);
      Complex complex10 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.multiply(2.010216236114502);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(2590.651, 2590.651);
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.multiply(37);
      Complex complex7 = complex4.pow(2940.74893);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.sqrt();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0, (-3142.3700960233));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.multiply((-379));
      boolean boolean0 = complex2.equals(")?nr;MYPB1nPaP ");
      Complex complex4 = complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3597.53));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.multiply(64.41141);
      Complex complex3 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(365.5, 365.5);
      double double0 = complex0.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.createComplex(516.8950570473663, 2.0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double1 = (-3696.34713);
      Complex complex1 = Complex.valueOf(2238.371, (-3696.34713));
      int int0 = complex0.INF.hashCode();
      Complex complex2 = Complex.valueOf(1837.2950114);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.I.pow((-3569.5049639));
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex3.NaN.sqrt1z();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex8.conjugate();
      int int1 = (-1528);
      Complex complex12 = complex3.INF.divide((double) (-1528));
      try { 
        complex2.nthRoot((-1528));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,528
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4664.4));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.ONE.createComplex((-4664.4), 0.0);
      Complex complex5 = complex3.ZERO.cosh();
      Complex complex6 = complex3.log();
      Complex complex7 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.NaN.tanh();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-2145.662098787843));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.subtract(781.0);
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex4.ZERO.divide(complex3);
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex2.negate();
      int int0 = complex6.hashCode();
      double double0 = complex2.getArgument();
      Object object0 = complex0.readResolve();
      double double1 = complex2.getArgument();
      Complex complex7 = complex6.pow(781.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex0.isInfinite();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.I.divide(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex4.ZERO.sqrt1z();
      Complex complex7 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(7.753690709912764E-96, 0.0);
      int int0 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex3.INF.multiply((-760));
      Complex complex6 = complex4.NaN.divide(0.0);
      Complex complex7 = Complex.valueOf(1219.6);
      Complex complex8 = complex3.divide((-2125.79));
      Complex complex9 = complex6.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-152.66992767474034), 20.0);
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(4.71524479659295E-8);
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.add((-766.462082504));
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2646.153938218587));
      Complex complex1 = new Complex((-2646.153938218587), (-1730.5417372232548));
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex0.add(complex1);
      int int0 = complex1.hashCode();
      String string0 = complex1.toString();
      Complex complex6 = complex1.createComplex((-1730.5417372232548), (-1730.5417372232548));
      Complex complex7 = complex1.NaN.add(0.0);
      Complex complex8 = complex0.createComplex(0.0, 1.2038767337799072);
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2985.0034742562525);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.cosh();
      List<Complex> list0 = complex2.I.nthRoot(44);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.exp();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.divide(complex1);
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double double0 = (-1651.0453895829678);
      Complex complex0 = new Complex((-1651.0453895829678));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.add(2.3525345191912968E288);
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = complex1.ONE.sinh();
      Complex complex6 = complex0.ONE.subtract(complex1);
      Complex complex7 = complex0.asin();
      Complex complex8 = Complex.valueOf((-1651.0453895829678));
      Complex complex9 = complex7.ONE.sinh();
      Complex complex10 = complex6.multiply(complex5);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.ONE.add((-482.4));
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.multiply(813);
      Complex complex5 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-810.662439492071));
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ZERO.atan();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.log();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex1.subtract((-1537.3));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.53312232);
      Complex complex1 = complex0.acos();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.add(493.210219796);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1.4894955158233643, (-1767.357272084));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1201.734), (-1201.734));
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.761163062156018E179, 9.761163062156018E179);
      Complex complex1 = complex0.sinh();
      String string0 = complex0.ZERO.toString();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.conjugate();
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.ONE.multiply(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex5.INF.add(complex3);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex2.divide(524.28331600983);
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.761628769925529E-8, 3009.647884);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.pow((-503.4052517609254));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.valueOf(2.761628769925529E-8, 2.761628769925529E-8);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.createComplex((-446.12214), 2.761628769925529E-8);
      Complex complex7 = Complex.valueOf((-446.12214), (-5.292913162607026E-9));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(2110.8593277558);
      int int0 = complex0.ZERO.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = Complex.valueOf(2311.23762, 20.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.NaN.add(complex1);
      boolean boolean0 = complex2.equals(complex0);
      Complex complex6 = complex1.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(848.96159, 1.2433054447174072);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.I.add((-7.177274244758699E-91));
      Complex complex4 = complex0.pow(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.0);
      Complex complex1 = Complex.valueOf(7.0, 7.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.add(7.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-319.8748));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.divide(Double.NaN);
      double double0 = complex3.INF.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex2.reciprocal();
      List<Complex> list0 = complex2.nthRoot(516);
      boolean boolean0 = complex2.equals(complex0);
      boolean boolean1 = complex4.isNaN();
      Complex complex8 = complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.pow(852.3568940879);
      Complex complex5 = complex4.I.subtract(852.3568940879);
      Complex complex6 = complex3.multiply((-255));
      boolean boolean0 = complex4.equals(complex5);
      Complex complex7 = complex6.divide(complex1);
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(663.176423);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-4137.077));
      Complex complex2 = complex1.INF.multiply(1);
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.ONE.tan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.reciprocal();
      List<Complex> list1 = complex2.NaN.nthRoot(1);
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-527.8087083633482));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.sinh();
      List<Complex> list0 = complex2.ZERO.nthRoot(28);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex5.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(291.2, 291.2);
      Complex complex1 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.divide(0.0);
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.atan();
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex0.divide(complex7);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex1.ZERO.multiply(551);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.NaN.atan();
      List<Complex> list0 = complex3.nthRoot(2970);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = complex5.NaN.subtract(complex2);
      Complex complex8 = complex7.acos();
      int int0 = complex8.ONE.hashCode();
      boolean boolean0 = complex5.isNaN();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex9.ZERO.log();
      double double1 = 2.591899541396432E-175;
      Complex complex11 = complex2.createComplex(2.591899541396432E-175, 551);
      Complex complex12 = complex11.negate();
      Complex complex13 = complex12.I.conjugate();
      Complex complex14 = complex2.NaN.sqrt();
      Complex complex15 = complex0.subtract((-1458.96672316));
      Complex complex16 = complex2.negate();
      // Undeclared exception!
      complex1.nthRoot(2225);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.NaN.sinh();
      double double0 = complex2.I.abs();
      String string0 = complex1.I.toString();
      Complex complex3 = complex0.sqrt1z();
      String string1 = complex1.toString();
      Complex complex4 = complex0.multiply((-375.75561603));
      double double1 = complex3.getArgument();
      Complex complex5 = complex0.add(Double.NaN);
      Complex complex6 = complex4.ZERO.multiply((-1397.515498500662));
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex7.NaN.subtract(complex4);
      Complex complex10 = complex7.add(complex2);
      Complex complex11 = complex4.divide(complex10);
      Complex complex12 = complex4.INF.asin();
      Complex complex13 = complex10.ZERO.multiply(1100.0);
      try { 
        complex3.nthRoot((-1533));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,533
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = Complex.valueOf(3061.051077554, 3061.051077554);
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex2.ONE.sinh();
      String string0 = complex0.toString();
      Complex complex7 = complex1.multiply(complex2);
      double double0 = complex3.abs();
      double double1 = complex3.getReal();
      Complex complex8 = complex0.exp();
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex1.NaN.divide((-4.0873400635183405E225));
      Complex complex10 = complex9.I.multiply((-632));
      Complex complex11 = complex8.ONE.sinh();
      Object object0 = new Object();
      boolean boolean1 = complex8.equals(object0);
      Complex complex12 = complex1.negate();
      Complex complex13 = complex4.multiply((-1759));
      Complex complex14 = complex12.tan();
      double double2 = complex11.getImaginary();
      Complex complex15 = complex13.atan();
      Complex complex16 = complex2.cos();
      Complex complex17 = complex15.reciprocal();
      Complex complex18 = complex0.tanh();
      Complex complex19 = complex7.cos();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3062.732882459, 2.1520078872608393E-5);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.add(3062.732882459);
      Complex complex3 = complex1.INF.pow(2.1520078872608393E-5);
      Complex complex4 = complex0.subtract(complex1);
      double double0 = complex1.getReal();
      Complex complex5 = complex3.multiply((-1));
      Complex complex6 = complex2.NaN.atan();
      int int0 = complex6.I.hashCode();
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex3.I.subtract((double) (-1));
      Complex complex9 = complex8.ONE.subtract((double) (-1));
      Object object0 = complex3.readResolve();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.subtract((double) (-1));
      Complex complex13 = complex10.I.cosh();
      Complex complex14 = complex13.I.cosh();
      boolean boolean1 = complex2.equals(object0);
      double double1 = complex2.NaN.getArgument();
      Complex complex15 = complex2.subtract(complex5);
      double double2 = complex7.getImaginary();
      Complex complex16 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex17 = complex16.exp();
      Object object1 = complex3.readResolve();
      Complex complex18 = complex2.sinh();
      Complex complex19 = complex18.NaN.subtract((-20.0));
      Complex complex20 = complex0.ONE.multiply(660);
      Complex complex21 = complex2.add(3062.732882459);
      int int1 = complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      double double0 = (-20.0);
      Complex complex2 = complex1.ONE.createComplex((-20.0), 1640.2500801289457);
      Complex complex3 = complex0.add((-1744.633126859));
      try { 
        complex3.ONE.nthRoot((-233));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -233
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex7.exp();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(901.182561139, 1751.577228633);
      Complex complex1 = Complex.valueOf((-711.06));
      Complex complex2 = complex1.ONE.divide((-73.085768476881));
      Complex complex3 = complex1.NaN.exp();
      double double0 = complex2.NaN.getArgument();
      Complex complex4 = Complex.valueOf(901.182561139);
      Complex complex5 = complex2.NaN.sqrt();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.I.negate();
      double double1 = complex7.ONE.getArgument();
      Complex complex8 = complex2.I.atan();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.INF.pow((-73.085768476881));
      double double2 = complex0.getImaginary();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex9.NaN.cosh();
      Complex complex13 = complex9.INF.divide(1751.577228633);
      Complex complex14 = complex13.sin();
      Complex complex15 = complex11.sqrt();
      Complex complex16 = complex15.NaN.tan();
      String string0 = complex9.toString();
      Complex complex17 = complex1.sqrt();
      Complex complex18 = complex1.sin();
      Complex complex19 = complex17.exp();
      Complex complex20 = complex0.acos();
      Complex complex21 = complex20.add(1751.577228633);
      double double3 = complex18.getArgument();
      Complex complex22 = complex10.createComplex(6.283185307179586, (-503026.35399045417));
      double double4 = complex11.abs();
  }
}
