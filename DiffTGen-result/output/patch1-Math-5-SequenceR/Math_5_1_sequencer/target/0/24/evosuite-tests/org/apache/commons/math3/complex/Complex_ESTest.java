/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:59:42 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex4.reciprocal();
      String string1 = complex4.I.toString();
      Complex complex11 = complex7.negate();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex complex13 = complex1.subtract(0.0);
      Complex complex14 = complex2.tan();
      ComplexField complexField0 = complex14.INF.getField();
      Complex complex15 = complex4.pow(0.0);
      Object object0 = complex0.readResolve();
      Complex complex16 = new Complex((-358.6764641338077));
      Complex complex17 = complex8.add(complex16);
      boolean boolean0 = complex0.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4556184411048889, 0.4556184411048889);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.INF.subtract((-1972.44));
      Complex complex4 = complex3.NaN.sqrt1z();
      double double0 = complex1.ONE.abs();
      Complex complex5 = complex2.I.subtract(complex4);
      Complex complex6 = complex0.ZERO.add(0.4556184411048889);
      Complex complex7 = Complex.valueOf(0.4556184411048889, (-1972.44));
      double double1 = complex2.getArgument();
      Complex complex8 = complex1.ZERO.pow(complex0);
      Complex complex9 = complex8.INF.sqrt();
      int int0 = complex0.hashCode();
      Complex complex10 = complex2.add(0.4556184411048889);
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex11.ZERO.pow(complex0);
      Complex complex13 = Complex.valueOf(1.0, (-1972.44));
      Complex complex14 = complex1.pow(20.0);
      Complex complex15 = complex6.cosh();
      Complex complex16 = complex6.divide(2176.09507709785);
      try { 
        complex6.nthRoot((-1981));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,981
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2795.21587));
      Complex complex1 = complex0.tanh();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.cosh();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex0.NaN.tan();
      Complex complex9 = complex8.NaN.divide(complex2);
      double double1 = complex6.NaN.getArgument();
      double double2 = complex5.ONE.getArgument();
      Complex complex10 = complex6.ZERO.divide(0.0);
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex11.INF.reciprocal();
      int int0 = complex7.hashCode();
      Complex complex13 = complex8.I.createComplex(1.1974215507507324, Double.NaN);
      Complex complex14 = Complex.valueOf((-2795.21587));
      Complex complex15 = complex9.subtract(0.0);
      ComplexField complexField0 = complex11.getField();
      Complex complex16 = complex9.INF.sin();
      Complex complex17 = complex9.sqrt1z();
      Complex complex18 = complex3.reciprocal();
      Complex complex19 = complex7.pow(0.0);
      int int1 = complex17.hashCode();
      Complex complex20 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1095.05613133));
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex2.I.multiply(7);
      Complex complex5 = complex2.INF.tan();
      int int0 = complex2.INF.hashCode();
      Object object1 = complex2.ONE.readResolve();
      Object object2 = complex0.ONE.readResolve();
      Complex complex6 = complex0.pow((-1118.0));
      Complex complex7 = complex6.INF.tan();
      Object object3 = new Object();
      boolean boolean0 = complex6.equals(object3);
      Complex complex8 = Complex.valueOf((-3898.62), (-3898.62));
      int int1 = complex7.I.hashCode();
      Complex complex9 = complex0.add((-1118.0));
      Complex complex10 = complex9.NaN.multiply(1);
      int int2 = complex9.hashCode();
      Complex complex11 = complex8.ONE.multiply(complex6);
      Complex complex12 = Complex.valueOf((-3616.1950829286548), (-1118.0));
      Complex complex13 = complex7.divide(complex8);
      Complex complex14 = complex13.atan();
      Complex complex15 = complex13.subtract(complex8);
      Complex complex16 = complex13.multiply(complex0);
      Complex complex17 = complex0.subtract((double) 1);
      Complex complex18 = complex10.sinh();
      String string0 = complex15.toString();
      Complex complex19 = complex0.divide((-1095.05613133));
      Complex complex20 = complex12.cosh();
      Complex complex21 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1511.099, 1511.099);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(2.0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = Complex.valueOf(2.0, 1731.141106629954);
      Complex complex6 = complex5.I.multiply(37);
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex1.divide(1031.10346214);
      Complex complex9 = complex8.add(0.0);
      Complex complex10 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.multiply(3793);
      List<Complex> list0 = complex0.nthRoot(3793);
      // Undeclared exception!
      complex0.nthRoot(3793);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2320.729612128136));
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex1.getImaginary();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.valueOf(4.005882964287806E-150);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.I.sin();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex4.subtract(complex1);
      double double2 = complex9.I.getArgument();
      Complex complex11 = new Complex(2518.77);
      Complex complex12 = complex11.ZERO.asin();
      Complex complex13 = complex9.ZERO.add(complex11);
      Complex complex14 = Complex.valueOf(4.005882964287806E-150, (-2320.729612128136));
      double double3 = complex3.getImaginary();
      Complex complex15 = complex1.subtract(complex0);
      Complex complex16 = complex15.pow(complex9);
      Complex complex17 = complex16.ZERO.sin();
      String string0 = complex16.NaN.toString();
      Complex complex18 = complex16.subtract(complex3);
      Complex complex19 = complex16.sin();
      double double4 = complex3.getArgument();
      boolean boolean1 = complex1.isNaN();
      Complex complex20 = complex6.acos();
      Complex complex21 = complex10.multiply(complex3);
      double double5 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 6.079434951446575E-234;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.INF.pow((-2227.007));
      Complex complex3 = complex0.NaN.subtract((-2227.007));
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex2.ZERO.divide((-1282.465261));
      Complex complex6 = complex5.INF.sinh();
      Complex complex7 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.divide(640.13101);
      Complex complex9 = complex2.atan();
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex1.asin();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex8.pow(2157.009);
      Complex complex14 = complex1.createComplex(640.13101, 640.13101);
      Complex complex15 = complex1.sinh();
      boolean boolean0 = complex1.isNaN();
      Complex complex16 = complex9.tan();
      Complex complex17 = complex14.atan();
      Complex complex18 = complex10.add(complex3);
      int int0 = complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex3 = Complex.valueOf((-540.39));
      Complex complex4 = new Complex(0.0, Double.NaN);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = Complex.valueOf(0.0, (-871.549312413131));
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex8 = complex0.sin();
      Object object0 = complex8.I.readResolve();
      double double0 = complex8.getReal();
      Complex complex9 = complex5.INF.divide(complex8);
      Complex complex10 = complex3.tan();
      Complex complex11 = complex9.ZERO.add(Double.NaN);
      double double1 = complex5.getImaginary();
      Complex complex12 = complex3.divide(0.0);
      Complex complex13 = complex4.NaN.sqrt();
      Complex complex14 = complex0.ONE.cosh();
      double double2 = complex7.getArgument();
      Complex complex15 = complex9.pow(complex6);
      Complex complex16 = complex3.pow((-871.549312413131));
      Object object1 = complex2.readResolve();
      double double3 = complex9.getReal();
      Complex complex17 = Complex.valueOf(424.051143589809);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.6754127740859985, 0.3757305145263672);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.sqrt();
      Object object0 = complex3.NaN.readResolve();
      double double0 = complex3.getImaginary();
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.ZERO.multiply(0.3757305145263672);
      Complex complex8 = complex7.NaN.pow(3551.12899294);
      Complex complex9 = complex8.I.createComplex(0.3757305145263672, Double.NaN);
      double double1 = complex2.getImaginary();
      double double2 = complex2.getImaginary();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex1.pow(979.606961);
      List<Complex> list0 = complex2.nthRoot(37);
      boolean boolean0 = complex2.equals(complex10);
      Complex complex12 = complex5.divide(complex6);
      Object object1 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2857.5077));
      Complex complex2 = Complex.valueOf((-2857.5077));
      Complex complex3 = Complex.valueOf((-2857.5077));
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex1.ONE.pow(complex0);
      Complex complex6 = complex2.ONE.reciprocal();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex6.ONE.atan();
      Complex complex9 = complex1.add(complex2);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex2.subtract((-2047.291544));
      Complex complex13 = complex8.conjugate();
      String string0 = complex13.NaN.toString();
      String string1 = complex7.toString();
      Complex complex14 = complex0.subtract(complex6);
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1957.01143565722));
      Complex complex16 = complex6.add(complex15);
      double double0 = complex12.getReal();
      Complex complex17 = complex9.pow((-1957.01143565722));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex1.createComplex(0.0, 1861.55588);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex3.sqrt1z();
      boolean boolean0 = complex1.equals(complex2);
      Complex complex7 = complex1.subtract(0.0);
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      ComplexField complexField0 = complex1.NaN.getField();
      double double0 = complex0.abs();
      Complex complex2 = complex1.add((-1664.446817));
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, 521.3639741595382);
      Complex complex5 = complex0.pow((-1416.0));
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex5.pow((-1664.446817));
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex2.ZERO.conjugate();
      double double1 = complex5.getArgument();
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.ONE.sqrt();
      Complex complex12 = complex10.ONE.atan();
      Complex complex13 = complex0.sinh();
      Complex complex14 = Complex.valueOf(521.3639741595382);
      Complex complex15 = complex2.sqrt1z();
      Complex complex16 = complex15.ONE.subtract(complex8);
      Complex complex17 = complex7.divide((-1664.446817));
      Complex complex18 = complex17.I.atan();
      Complex complex19 = complex1.pow(complex11);
      Complex complex20 = complex1.tanh();
      Complex complex21 = complex19.divide(521.3639741595382);
      Complex complex22 = complex0.atan();
      Complex complex23 = complex8.cosh();
      Complex complex24 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1854.994584910548);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(1854.994584910548);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex1.subtract(1854.994584910548);
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(0.0, 1854.994584910548);
      Complex complex8 = complex7.ZERO.negate();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex1.multiply((-1130.1862));
      double double0 = complex2.getImaginary();
      Complex complex10 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Object object0 = complex0.readResolve();
      String string0 = complex0.toString();
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.INF.subtract(Double.NaN);
      Complex complex3 = complex2.ZERO.asin();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex3.I.subtract(Double.NaN);
      Complex complex5 = complex3.I.divide((-1.0));
      double double1 = complex1.getReal();
      Complex complex6 = complex2.INF.log();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.I.cos();
      double double2 = complex1.getImaginary();
      Complex complex9 = complex3.cos();
      double double3 = complex9.abs();
      try { 
        complex8.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.164902728917601E-224, 712.574463073);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.divide(712.574463073);
      Object object0 = complex0.I.readResolve();
      String string0 = complex0.toString();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.6218081151910012E-71, 2.0);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.acos();
      List<Complex> list0 = complex0.NaN.nthRoot(252);
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.ZERO.subtract(0.0);
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex6.cosh();
      double double0 = complex2.abs();
      Complex complex8 = complex4.atan();
      String string0 = complex2.toString();
      Complex complex9 = complex0.subtract(0.0);
      double double1 = complex9.abs();
      Complex complex10 = complex0.NaN.sinh();
      Complex complex11 = complex8.asin();
      Complex complex12 = complex11.I.acos();
      Complex complex13 = complex9.sin();
      double double2 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-3.52597540499141E189));
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = Complex.valueOf((-3.52597540499141E189));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ONE.negate();
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex5.ONE.createComplex((-3.52597540499141E189), (-3.52597540499141E189));
      Complex complex8 = Complex.valueOf((-3.52597540499141E189), (-2758.40672302575));
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.ZERO.sqrt();
      double double0 = complex8.getArgument();
      Complex complex11 = complex0.tan();
      Complex complex12 = complex11.pow(complex2);
      List<Complex> list0 = complex1.I.nthRoot(1114);
      Complex complex13 = complex12.NaN.sqrt1z();
      Complex complex14 = Complex.valueOf((-2758.40672302575));
      Complex complex15 = complex2.subtract(complex14);
      double double1 = complex12.getImaginary();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1658.4234574014279, 1658.4234574014279);
      double double0 = complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(1658.4234574014279, 20.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.NaN.log();
      int int0 = complex4.ZERO.hashCode();
      Complex complex5 = complex2.NaN.multiply(1);
      double double1 = complex4.I.abs();
      double double2 = complex5.NaN.getArgument();
      Complex complex6 = complex0.sqrt();
      String string0 = complex1.toString();
      Complex complex7 = complex2.exp();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex4.multiply((-2206.01424968));
      Complex complex11 = complex5.sinh();
      Complex complex12 = complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-1663));
      Complex complex2 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6446255445480347, 0.6446255445480347);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(0.6446255445480347);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-966.1), (-709.399286702));
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf((-2730.72156644763), (-966.1));
      Complex complex2 = complex0.divide(452.1446);
      Complex complex3 = complex2.ONE.divide(complex1);
      String string0 = complex2.ZERO.toString();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.add(complex4);
      String string1 = complex5.ZERO.toString();
      Complex complex6 = Complex.valueOf(3042.1258485214094, (-1307.728569));
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex0.multiply((-2730.72156644763));
      Complex complex9 = complex6.multiply(3230);
      boolean boolean0 = complex8.equals(complex2);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex1.divide(complex10);
      Complex complex12 = complex6.multiply(complex8);
      Complex complex13 = complex7.subtract((-348.3306608702));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 3333.0;
      Complex complex0 = Complex.valueOf(3333.0, 3333.0);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1209.9434188092);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex0.abs();
      double double1 = complex2.ZERO.abs();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ZERO.add(complex1);
      double double2 = complex2.abs();
      double double3 = complex2.abs();
      List<Complex> list0 = complex4.nthRoot(7);
      Complex complex6 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2250.77758547503), (-2250.77758547503));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.createComplex((-2084.408413418519), (-1598.599));
      Complex complex3 = complex2.multiply(385);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex6.ONE.cos();
      Complex complex8 = complex2.subtract(complex3);
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex10.ONE.negate();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex12.ONE.reciprocal();
      Complex complex14 = complex13.sqrt1z();
      double double0 = complex2.getArgument();
      Complex complex15 = complex1.divide((-2399.9));
      Complex complex16 = complex15.I.multiply(794);
      Complex complex17 = complex3.cos();
      Complex complex18 = complex4.cosh();
      Complex complex19 = complex12.atan();
      Complex complex20 = complex6.log();
      Complex complex21 = complex3.sinh();
      Complex complex22 = complex8.pow((double) 385);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(2019.152, (-1102.489318967418));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.I.pow(complex0);
      Complex complex5 = complex4.NaN.subtract(1413.22);
      Complex complex6 = complex1.I.reciprocal();
      Complex complex7 = complex6.divide((-1102.489318967418));
      Object object0 = complex3.ONE.readResolve();
      double double0 = complex3.abs();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex2.multiply(complex1);
      double double1 = complex3.I.getArgument();
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex0.ONE.exp();
      Complex complex12 = complex10.I.tanh();
      Complex complex13 = complex0.add((-1102.489318967418));
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex15 = complex3.add(complex1);
      Complex complex16 = complex15.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 7.389056205749512);
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(7.389056205749512);
      Complex complex7 = complex5.ONE.reciprocal();
      Complex complex8 = complex3.ONE.divide(0.0);
      double double0 = complex8.INF.getArgument();
      Complex complex9 = complex0.ZERO.cosh();
      Complex complex10 = complex3.add(2192.0);
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex11.NaN.cos();
      Complex complex13 = complex10.I.acos();
      String string0 = complex12.ZERO.toString();
      Complex complex14 = complex10.subtract(complex1);
      Complex complex15 = complex14.log();
      String string1 = complex12.toString();
      Complex complex16 = complex3.sinh();
      Object object0 = complex1.readResolve();
      Complex complex17 = complex0.add(complex5);
      Complex complex18 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 311.685);
      Complex complex1 = complex0.ZERO.pow(0.13243216276168823);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex1.I.tan();
      int int0 = (-974);
      Complex complex5 = complex4.I.multiply((-974));
      Complex complex6 = complex0.add(2.0);
      Complex complex7 = complex6.INF.tan();
      Complex complex8 = Complex.valueOf((-1092.780199833));
      Complex complex9 = complex6.subtract(complex0);
      Complex complex10 = complex9.NaN.createComplex(0.13243216276168823, (-974));
      Complex complex11 = complex6.divide(6.283185307179586);
      try { 
        complex11.INF.nthRoot((-974));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -974
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.pow((-1140.591469578));
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(5245.721321869927, 5245.721321869927);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 90.757114);
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex7.add(0.0);
      Complex complex10 = complex6.subtract(complex1);
      try { 
        complex6.nthRoot((-912));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -912
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(8.98570720774568E-8);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      String string0 = complex0.INF.toString();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.INF.add(Double.NaN);
      Complex complex4 = complex2.I.conjugate();
      Complex complex5 = complex4.ZERO.multiply(0.0);
      Complex complex6 = complex2.INF.reciprocal();
      Complex complex7 = complex6.I.multiply(Double.NaN);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex2.INF.asin();
      Complex complex10 = Complex.valueOf((-2304.49832));
      ComplexField complexField0 = complex2.getField();
      Object object0 = complex1.readResolve();
      Complex complex11 = Complex.valueOf((-2304.49832));
      Complex complex12 = complex1.asin();
      boolean boolean0 = complex12.isInfinite();
      Object object1 = complex3.readResolve();
      Complex complex13 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1347.5736353693);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.I.multiply((-88));
      Object object0 = complex0.I.readResolve();
      Complex complex4 = complex3.ZERO.multiply((-88));
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex0.I.divide(complex3);
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex0.pow((-263.467631));
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.ONE.divide(complex3);
      Complex complex9 = complex7.exp();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = complex0.ZERO.sinh();
      Complex complex12 = complex7.NaN.multiply(complex9);
      Complex complex13 = complex9.I.tan();
      Complex complex14 = complex8.multiply(6.283185307179586);
      Complex complex15 = complex7.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex16 = complex2.atan();
      Complex complex17 = complex16.I.add(6.283185307179586);
      double double0 = complex13.getArgument();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(6.714184569587689E-79, 6.714184569587689E-79);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex2.NaN.sqrt1z();
      Complex complex6 = Complex.valueOf(6.283185307179586);
      Complex complex7 = complex4.ONE.atan();
      Complex complex8 = complex5.INF.pow(complex6);
      Object object0 = complex8.NaN.readResolve();
      Complex complex9 = complex4.ONE.multiply(1247);
      double double0 = complex0.getImaginary();
      Complex complex10 = complex0.ONE.subtract(6.283185307179586);
      Complex complex11 = complex0.log();
      double double1 = complex3.getImaginary();
      ComplexField complexField0 = complex3.getField();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex12.conjugate();
      double double2 = complex9.getArgument();
      Complex complex14 = complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.pow(1972.02493219);
      Complex complex4 = complex0.multiply((-2633));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.add((-1492.72442));
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex0.log();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex4.divide(complex3);
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = complex7.sin();
      Complex complex13 = complex9.createComplex((-2633), 0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(961.1989754);
      Complex complex1 = complex0.INF.divide(961.1989754);
      Complex complex2 = complex0.ZERO.log();
      try { 
        complex2.NaN.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.406189112730307E-11));
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1963.584695782);
      Complex complex1 = new Complex(1492.65239536, 1963.584695782);
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex0.acos();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex5.ZERO.multiply(0.0);
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex2.divide(0.0);
      try { 
        complex3.INF.nthRoot((-1738));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,738
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.NaN.divide((-2731.8));
      Complex complex2 = complex1.ZERO.divide(1.6089565753936768);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.INF.pow(complex5);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex8.ZERO.pow(complex3);
      double double1 = complex8.getArgument();
      double double2 = complex8.getArgument();
      Complex complex11 = complex0.subtract(complex8);
      Complex complex12 = complex2.asin();
      Complex complex13 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.atan();
      String string0 = complex0.toString();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex2.I.multiply(1082.58);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex3.subtract((-1755.251));
      String string1 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.ZERO.divide(complex0);
      double double0 = complex0.INF.getArgument();
      double double1 = complex1.ONE.getArgument();
      String string0 = complex0.toString();
      String string1 = complex0.ONE.toString();
      Complex complex3 = Complex.valueOf(0.0, (-20.0));
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex3.ZERO.multiply((-20.0));
      boolean boolean0 = complex3.isInfinite();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex2.divide(1558.282568668744);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1386.5);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.valueOf(1386.5, (-224.4));
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      int int0 = complex1.hashCode();
      Complex complex6 = complex2.sin();
      ComplexField complexField0 = complex1.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = complex4.divide((-3831.4));
      Complex complex10 = complex3.subtract(complex2);
      Complex complex11 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex2.ONE.subtract(0.0);
      Complex complex4 = complex0.ONE.tanh();
      List<Complex> list0 = complex2.I.nthRoot(295);
      Complex complex5 = complex1.NaN.conjugate();
      double double0 = complex5.ZERO.getArgument();
      String string0 = complex0.toString();
      double double1 = complex0.getReal();
      Complex complex6 = complex0.add(0.0);
      double double2 = complex6.getArgument();
      Complex complex7 = complex4.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2705.6510578), 2537.49875974);
      Complex complex2 = complex1.INF.createComplex(2537.49875974, (-2705.6510578));
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-6.0532562245379));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1527.074), 0.0);
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex1.NaN.multiply(complex0);
      List<Complex> list0 = complex0.nthRoot(24);
      Complex complex4 = Complex.valueOf((double) 24);
      Complex complex5 = complex4.sin();
      double double1 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-581.0), (-581.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.I.add(complex2);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.ZERO.multiply(complex2);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.divide(Double.NaN);
      Complex complex9 = complex1.add(complex5);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex3.log();
      Complex complex13 = complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(2254.0, 888.303593329);
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      double double1 = complex0.NaN.abs();
      double double2 = complex0.I.getArgument();
      double double3 = complex0.getReal();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.ONE.divide(complex2);
      Complex complex6 = complex4.ZERO.tan();
      String string0 = complex4.INF.toString();
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex4.negate();
      Complex complex8 = Complex.valueOf(Double.NaN, 888.303593329);
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex2.add(2254.0);
      try { 
        complex10.nthRoot((-1945));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,945
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.subtract(complex1);
      int int0 = complex1.hashCode();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.pow(complex3);
      boolean boolean0 = complex3.equals(complex5);
      Complex complex7 = complex6.multiply(838.1);
      Complex complex8 = complex7.log();
      Complex complex9 = complex1.multiply(876);
      Complex complex10 = complex9.I.divide((-462.84544761497));
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1084.8938), 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.divide(complex2);
      Complex complex4 = complex1.INF.divide(complex0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex1.atan();
      Complex complex9 = complex6.INF.conjugate();
      Complex complex10 = complex8.subtract(complex1);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex2.divide(complex11);
      Complex complex13 = complex3.add(1686.8157);
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex4.I.pow(complex1);
      Complex complex7 = complex1.ONE.tan();
      double double0 = complex7.I.abs();
      Complex complex8 = complex0.multiply((-1246));
      Complex complex9 = complex8.ONE.pow(0.0);
      boolean boolean0 = complex7.equals(complex0);
      Complex complex10 = complex7.asin();
      Complex complex11 = Complex.valueOf((double) (-1246), Double.NaN);
      Complex complex12 = complex2.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(0.0);
      String string0 = complex1.toString();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex1.tan();
      Complex complex8 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(842.0851, (-1625.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.multiply((-528));
      double double0 = complex1.abs();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.divide(Double.NaN);
      Complex complex5 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(0.0);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex0.multiply(complex1);
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1467.415792071917), 696.8389);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex(3931.5070042);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.ZERO.sqrt1z();
      Complex complex7 = complex0.I.multiply(20.0);
      Complex complex8 = complex7.I.multiply((-4214));
      Complex complex9 = complex7.I.add(20.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex10 = complex5.subtract((-1467.415792071917));
      Complex complex11 = Complex.valueOf(1052.2508);
      Complex complex12 = complex5.multiply(complex11);
      Complex complex13 = complex12.ZERO.exp();
      Complex complex14 = complex1.subtract(2079.95);
      Complex complex15 = complex12.sqrt1z();
      int int0 = complex6.hashCode();
      Complex complex16 = complex13.sqrt();
      boolean boolean1 = complex13.isInfinite();
      Complex complex17 = complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(959.83);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = Complex.valueOf((-1415.036883689), 959.83);
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.NaN.add(complex3);
      Complex complex8 = complex6.ONE.reciprocal();
      Complex complex9 = complex8.I.pow(complex5);
      String string0 = complex1.toString();
      Complex complex10 = complex2.subtract(complex5);
      Complex complex11 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.acos();
      double double0 = complex4.ZERO.abs();
      Complex complex7 = complex5.subtract(502.3660778);
      Complex complex8 = complex7.createComplex(1.0, 0.0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(26.29981072, 2.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.divide(2.0);
      Complex complex4 = complex1.pow(complex0);
      double double0 = complex0.getReal();
      Complex complex5 = Complex.valueOf(26.29981072, 0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.I.sin();
      int int0 = (-2130);
      try { 
        complex0.nthRoot((-2130));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,130
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(1.7622455019548098E-8);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.add(1.7622455019548098E-8);
      Complex complex4 = complex3.ZERO.divide(6.283185307179586);
      double double0 = complex4.ZERO.getArgument();
      double double1 = complex3.getImaginary();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex1.subtract((-4.019569741253664E-293));
      Complex complex8 = complex1.I.cos();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex9.tan();
      Complex complex11 = Complex.valueOf((-4.019569741253664E-293));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2671.5614), (-2671.5614));
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.ONE.divide((-1.0));
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.sinh();
      boolean boolean0 = complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-1389.07649), (-1389.07649));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.pow((-961.2669923285125));
      double double0 = complex0.getImaginary();
      double double1 = complex0.getReal();
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.multiply(744);
      Complex complex7 = Complex.valueOf((-1389.07649));
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1625.7296618632859), 1199.0);
      Complex complex1 = complex0.subtract((-1625.7296618632859));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex1.createComplex(1199.0, 1.2574995962791943E-166);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply((-921));
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(351.0, 4289.53);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.asin();
      double double0 = complex2.getReal();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex0.ONE.sqrt();
      double double1 = complex5.abs();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.multiply(1);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex5.I.tan();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex7.equals(complex2);
      Complex complex13 = complex5.conjugate();
      Object object0 = complex6.readResolve();
      Complex complex14 = complex2.divide(complex6);
      Complex complex15 = complex13.add(1.0);
      Complex complex16 = complex1.multiply(1);
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex15.cosh();
      Complex complex19 = complex5.ONE.multiply(1417);
      Complex complex20 = complex15.cosh();
      Complex complex21 = complex6.pow(complex18);
      Complex complex22 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add((-367.8745615269));
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(20.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.ONE.log();
      Complex complex7 = complex2.log();
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = complex8.ZERO.reciprocal();
      Object object0 = complex9.NaN.readResolve();
      String string0 = complex1.NaN.toString();
      Complex complex10 = complex7.ONE.createComplex(0.0, 0.0);
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex3.ONE.cos();
      Complex complex13 = complex0.cos();
      Complex complex14 = new Complex(20.0, 20.0);
      Complex complex15 = complex14.INF.exp();
      Complex complex16 = complex15.ONE.asin();
      Complex complex17 = complex0.divide(complex14);
      Complex complex18 = complex0.add(complex14);
      Complex complex19 = complex7.conjugate();
      Object object1 = complex7.readResolve();
      Complex complex20 = complex0.exp();
      double double0 = complex4.NaN.getArgument();
      double double1 = 930.0;
      Complex complex21 = Complex.valueOf(930.0);
      Complex complex22 = complex0.subtract(0.07068414986133575);
      Complex complex23 = complex22.I.multiply(0.0);
      Complex complex24 = complex13.multiply(1.4034725764547136E-8);
      try { 
        complex5.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract((-1342.038839487));
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex1.INF.tanh();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex0.atan();
      ComplexField complexField1 = complex6.getField();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex6.subtract(complex7);
      Complex complex9 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.INF.sqrt();
      double double0 = complex3.NaN.abs();
      Complex complex4 = complex0.multiply((-1573.2243990566149));
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 2748.98963598533);
      boolean boolean0 = complex0.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1.1752011936438014);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex0.subtract((-1292.75764));
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex1.nthRoot(655);
      Complex complex2 = complex1.sqrt1z();
      boolean boolean1 = complex2.isNaN();
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = Complex.valueOf((-1301.87754));
      Complex complex6 = complex3.NaN.cosh();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex0.subtract(complex1);
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex0.ONE.tan();
      Complex complex10 = complex9.I.sqrt();
      Complex complex11 = complex0.divide((-139.433727782096));
      List<Complex> list0 = complex3.nthRoot(812);
      Complex complex12 = complex1.ONE.sinh();
      Complex complex13 = complex11.multiply(1379.754815);
      Complex complex14 = complex3.sin();
      double double0 = complex7.getReal();
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = complex8.divide(0.0);
      Complex complex17 = complex16.NaN.multiply(812);
      Complex complex18 = complex8.sin();
      Complex complex19 = complex15.log();
      Complex complex20 = complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.cosh();
      int int0 = complex2.ZERO.hashCode();
      Complex complex3 = complex0.subtract(complex1);
      int int1 = complex0.NaN.hashCode();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.asin();
      double double0 = complex4.getReal();
      String string0 = complex2.toString();
      Complex complex6 = complex4.INF.multiply(complex3);
      Complex complex7 = complex2.multiply((-291));
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex0.divide(Double.NEGATIVE_INFINITY);
      Complex complex10 = complex9.ZERO.cosh();
      double double1 = complex2.getImaginary();
      ComplexField complexField0 = complex2.getField();
      Complex complex11 = complex5.asin();
      Complex complex12 = complex1.multiply(Double.NaN);
      double double2 = complex12.INF.getArgument();
      double double3 = complex2.getReal();
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = complex1.add(complex10);
      boolean boolean1 = complex13.equals("v9`j}w");
      Complex complex14 = complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(5229.53349457);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.subtract(5229.53349457);
      Complex complex3 = Complex.valueOf(5229.53349457, (-742.5460113131));
      Complex complex4 = complex0.NaN.sqrt();
      Complex complex5 = complex3.I.cosh();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.multiply((-2539.9273));
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex6.ONE.conjugate();
      Complex complex10 = complex9.ONE.createComplex(5229.53349457, (-2539.9273));
      Complex complex11 = complex6.pow(894.60415924326);
      Complex complex12 = complex5.atan();
      double double0 = complex6.getArgument();
      String string0 = complex11.toString();
      String string1 = complex11.toString();
      Complex complex13 = complex4.acos();
      Complex complex14 = complex12.add(complex11);
      Complex complex15 = complex14.cos();
      ComplexField complexField1 = complex3.getField();
      double double1 = complex14.abs();
      Complex complex16 = complex3.tan();
      Complex complex17 = complex13.subtract(71.0);
      int int0 = complex4.INF.hashCode();
      Complex complex18 = complex17.I.tan();
      Complex complex19 = complex6.reciprocal();
      Complex complex20 = complex8.conjugate();
      double double2 = complex13.getArgument();
      Complex complex21 = complex7.acos();
      Complex complex22 = complex18.multiply(5229.53349457);
      Complex complex23 = complex6.multiply((-2539.9273));
      Complex complex24 = complex23.cos();
      Complex complex25 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex0.INF.sin();
      Complex complex4 = complex2.multiply((-183.1546725299));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.cosh();
      Object object0 = complex7.ZERO.readResolve();
      Complex complex8 = complex0.log();
      Object object1 = complex8.readResolve();
      Complex complex9 = complex8.add(0.0);
      Complex complex10 = complex2.createComplex(2189.0287357, 0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.tanh();
      double double0 = complex0.abs();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.I.subtract(1.0);
      double double1 = complex1.ONE.abs();
      Complex complex5 = complex4.ZERO.multiply((-1151));
      List<Complex> list0 = complex4.ONE.nthRoot(1289);
      Complex complex6 = complex3.I.pow(0.0);
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex8.I.acos();
      Complex complex11 = complex6.sin();
      List<Complex> list1 = complex0.nthRoot(1581);
      Complex complex12 = complex0.cos();
  }
}
