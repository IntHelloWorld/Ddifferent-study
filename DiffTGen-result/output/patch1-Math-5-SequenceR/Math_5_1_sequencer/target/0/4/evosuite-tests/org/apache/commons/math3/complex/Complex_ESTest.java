/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:49:17 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.I.sqrt();
      double double0 = complex3.ZERO.abs();
      Complex complex4 = complex0.I.asin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex5.pow(0.0);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex0.exp();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = Complex.valueOf((-3.219119568928366E-9), 1542.8425336863);
      Complex complex12 = complex11.exp();
      Complex complex13 = complex6.log();
      Complex complex14 = complex11.I.sin();
      Complex complex15 = complex6.multiply(0.0);
      String string0 = complex15.ZERO.toString();
      Complex complex16 = complex8.tan();
      Complex complex17 = complex1.sinh();
      Complex complex18 = complex7.multiply(563);
      Complex complex19 = complex18.ONE.log();
      ComplexField complexField1 = complex18.ZERO.getField();
      Complex complex20 = complex17.reciprocal();
      Complex complex21 = complex20.cos();
      Complex complex22 = complex11.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.tanh();
      double double0 = complex1.ZERO.getArgument();
      Complex complex6 = complex4.I.add(1198.288933126);
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.pow(complex0);
      double double1 = complex1.getImaginary();
      Complex complex9 = complex4.reciprocal();
      int int0 = complex8.hashCode();
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex3.reciprocal();
      ComplexField complexField1 = complex11.getField();
      Complex complex13 = complex5.subtract(complex6);
      Complex complex14 = complex9.multiply((-3212));
      Complex complex15 = complex12.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      double double0 = complex1.abs();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex3.INF.multiply(complex1);
      Object object0 = complex4.readResolve();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = Complex.valueOf((-3741.8782099), Double.POSITIVE_INFINITY);
      double double1 = complex0.getImaginary();
      Complex complex7 = complex5.acos();
      double double2 = complex7.INF.getArgument();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex7.asin();
      Complex complex10 = complex0.add(0.0);
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex11.I.sin();
      Complex complex13 = complex5.ZERO.atan();
      Complex complex14 = complex8.cos();
      Complex complex15 = complex1.exp();
      Complex complex16 = complex12.NaN.reciprocal();
      Complex complex17 = complex16.NaN.cosh();
      Complex complex18 = complex12.divide(complex7);
      Complex complex19 = complex12.cos();
      Complex complex20 = complex6.add(complex5);
      Complex complex21 = complex20.acos();
      Complex complex22 = complex7.divide(0.7853981633974483);
      Complex complex23 = complex22.pow((-3741.8782099));
      Complex complex24 = complex4.multiply((-1080.84537768737));
      Complex complex25 = complex8.multiply(complex6);
      Complex complex26 = complex16.divide(complex15);
      Complex complex27 = complex6.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 2002.66);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.INF.pow((-643.2324377742289));
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex6.subtract(9.670771210463886E128);
      Complex complex11 = complex10.NaN.cosh();
      Complex complex12 = complex6.cos();
      Complex complex13 = Complex.valueOf(2002.66);
      Complex complex14 = complex12.negate();
      Complex complex15 = complex5.multiply(complex14);
      Complex complex16 = complex15.negate();
      double double0 = complex1.getReal();
      Complex complex17 = complex12.I.tanh();
      Complex complex18 = complex14.conjugate();
      Complex complex19 = complex5.ZERO.divide(0.0);
      Complex complex20 = complex3.createComplex(6.283185307179586, 1.2904307529671472E-176);
      ComplexField complexField0 = complex15.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1375.798, 1375.798);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.subtract(complex1);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = Complex.valueOf(1375.798, 1375.798);
      Complex complex7 = complex6.tanh();
      String string0 = complex1.toString();
      Complex complex8 = complex0.ONE.exp();
      Complex complex9 = complex8.I.tanh();
      double double0 = complex2.getReal();
      Complex complex10 = complex2.multiply(complex0);
      Complex complex11 = complex1.tan();
      String string1 = complex2.toString();
      Complex complex12 = complex3.divide(1375.798);
      Complex complex13 = complex9.ONE.subtract(complex0);
      Complex complex14 = complex6.add(Double.NaN);
      Complex complex15 = complex9.sqrt();
      Complex complex16 = complex7.createComplex((-2505.267860936), 0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1584.453674), (-1584.453674));
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = new Complex(1.9106833934783936, 1.9106833934783936);
      Complex complex2 = complex0.multiply(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      boolean boolean0 = complex1.isNaN();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.ZERO.multiply(1.9106833934783936);
      double double1 = complex1.ZERO.abs();
      Complex complex6 = complex0.ONE.multiply(3078);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex6.ONE.exp();
      String string0 = complex0.toString();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex1.log();
      double double2 = complex3.getImaginary();
      Complex complex11 = complex10.divide(55.9890274673027);
      Complex complex12 = complex9.INF.cosh();
      Complex complex13 = complex5.reciprocal();
      boolean boolean1 = complex7.isNaN();
      Complex complex14 = complex9.asin();
      Complex complex15 = complex10.multiply(3078);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-935.9386563226361), (-1897.6427036049326));
      String string0 = complex0.toString();
      Complex complex1 = complex0.negate();
      int int0 = complex1.ZERO.hashCode();
      int int1 = complex0.INF.hashCode();
      Complex complex2 = complex0.multiply((-935.9386563226361));
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex2.ONE.createComplex(2034.0, (-1897.6427036049326));
      Complex complex6 = complex2.add(complex0);
      double double0 = complex6.getReal();
      Complex complex7 = complex5.ONE.subtract(complex2);
      Complex complex8 = complex2.ONE.multiply(875045.229742699);
      Complex complex9 = complex6.multiply(1);
      Complex complex10 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex0.hashCode();
      Complex complex4 = complex0.sqrt1z();
      int int1 = complex0.hashCode();
      Complex complex5 = complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Object object0 = new Object();
      Complex complex2 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.multiply((-3162));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex0.multiply((-2112));
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex1.pow(complex2);
      Complex complex10 = complex4.subtract((-677.7648028));
      Complex complex11 = complex6.divide(complex10);
      Complex complex12 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex2.I.divide(complex0);
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.valueOf(0.0, (-268.966089289));
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex7.NaN.asin();
      Complex complex10 = complex1.sin();
      Object object1 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(64.34553, 64.34553);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.divide((-2076.935836303));
      Complex complex4 = complex3.NaN.pow(1.0);
      try { 
        complex3.NaN.nthRoot((-241));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -241
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.INF.createComplex((-20.0), 20.0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getReal();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ZERO.atan();
      double double1 = complex0.getImaginary();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.tan();
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex3.INF.reciprocal();
      List<Complex> list0 = complex1.I.nthRoot(1);
      Complex complex6 = complex0.multiply((-8.966500602352001E-8));
      Complex complex7 = complex6.ONE.tanh();
      try { 
        complex7.NaN.nthRoot((-2227));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,227
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.ZERO.subtract(1058.07913);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.ZERO.sinh();
      Complex complex7 = complex4.NaN.sinh();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex5.subtract(1058.07913);
      Complex complex11 = complex9.tan();
      String string0 = complex4.INF.toString();
      Complex complex12 = complex0.ONE.createComplex(6.686758417135634E116, 1254.0);
      Complex complex13 = complex12.ZERO.subtract(1427.22);
      int int0 = complex13.INF.hashCode();
      Complex complex14 = complex11.INF.createComplex(1427.22, (-3972.2425));
      Complex complex15 = complex4.acos();
      Object object0 = complex15.I.readResolve();
      Complex complex16 = complex12.tanh();
      double double0 = complex5.getArgument();
      Complex complex17 = complex4.divide((-20.2886));
      Complex complex18 = complex2.pow(0.0);
      Complex complex19 = complex13.multiply(1058.07913);
      try { 
        complex16.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.add(5.914537964556077E-8);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.I.divide(Double.NaN);
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex5.INF.sinh();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex7 = complex5.INF.divide(5.914537964556077E-8);
      Complex complex8 = complex4.ONE.multiply(complex0);
      double double1 = complex1.ZERO.abs();
      ComplexField complexField1 = complex0.getField();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex5.atan();
      String string0 = complex9.toString();
      Complex complex11 = complex6.reciprocal();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(810.4666852318841);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.pow(810.4666852318841);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex0.createComplex(6.283185307179586, 810.4666852318841);
      Complex complex8 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1574.7257145));
      List<Complex> list0 = complex0.INF.nthRoot(1);
      Complex complex1 = complex0.divide((-1574.7257145));
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ZERO.multiply((-1.0));
      String string0 = complex6.I.toString();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex4.subtract(470.992862973348);
      Complex complex9 = complex8.pow(470.992862973348);
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex2.negate();
      try { 
        complex11.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1528.4463221775181);
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = Complex.valueOf(0.0, (-2299.21));
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.ZERO.reciprocal();
      Complex complex7 = complex0.atan();
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.pow(Double.NaN);
      Complex complex3 = complex0.multiply(complex1);
      double double0 = complex3.getArgument();
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex1.getArgument();
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.createComplex((-20.0), Double.NaN);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.negate();
      Complex complex7 = Complex.valueOf((-1.3019742873005683E-98), Double.NaN);
      Complex complex8 = complex3.pow(complex7);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex3.sqrt();
      String string0 = complex4.toString();
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-589.26104), (-589.26104));
      Complex complex1 = new Complex(0.0, (-589.26104));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.multiply(0.0);
      Complex complex4 = complex2.ZERO.negate();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.atan();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex2.createComplex(1.0, 2.0);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = Complex.valueOf(1180.16488, 901.7838369);
      Complex complex7 = complex1.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex8 = complex7.log();
      Complex complex9 = complex2.add(complex1);
      double double1 = complex7.I.getArgument();
      Complex complex10 = complex7.subtract(78.94);
      Complex complex11 = complex9.ZERO.conjugate();
      double double2 = complex7.getReal();
      Complex complex12 = complex10.divide(78.94);
      Complex complex13 = complex0.pow(complex1);
      Complex complex14 = complex0.add(1.5707963267948966);
      ComplexField complexField0 = complex13.INF.getField();
      Complex complex15 = complex9.pow(complex14);
      int int0 = complex15.ONE.hashCode();
      Complex complex16 = complex10.divide(complex13);
      Complex complex17 = complex16.createComplex(78.94, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex2.subtract(complex0);
      String string0 = complex4.toString();
      Complex complex5 = complex0.subtract(complex1);
      List<Complex> list0 = complex3.nthRoot(639);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(3201.957628075, 3201.957628075);
      Complex complex1 = complex0.add(3201.957628075);
      Complex complex2 = complex1.I.multiply(3201.957628075);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = Complex.valueOf(3751.7);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex5.multiply(702);
      Complex complex8 = complex7.subtract(complex2);
      Complex complex9 = complex8.INF.pow(3751.7);
      int int0 = complex6.hashCode();
      Complex complex10 = complex3.asin();
      Complex complex11 = complex4.subtract(complex3);
      double double0 = complex11.INF.getArgument();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.sin();
      Complex complex14 = complex10.divide(complex12);
      Complex complex15 = complex14.multiply(complex7);
      Complex complex16 = complex8.add((double) 702);
      Complex complex17 = Complex.ONE;
      Complex complex18 = complex0.pow(complex17);
      Complex complex19 = complex18.cosh();
      Complex complex20 = complex6.subtract(3201.957628075);
      Complex complex21 = complex8.cosh();
      Object object0 = complex21.readResolve();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2189.0));
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.multiply((-2189.0));
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex6.pow(2347.83318402967);
      Complex complex10 = complex6.INF.atan();
      Complex complex11 = complex6.divide((-2189.0));
      ComplexField complexField0 = complex0.getField();
      double double0 = complex11.INF.abs();
      Complex complex12 = complex11.sqrt();
      List<Complex> list0 = complex12.INF.nthRoot(1);
      Complex complex13 = complex12.NaN.sin();
      Complex complex14 = complex0.atan();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(3190.798256821503, 3190.798256821503);
      Complex complex1 = complex0.multiply(3190.798256821503);
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = complex0.reciprocal();
      try { 
        complex4.nthRoot((-2016));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,016
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.INF.sqrt();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.INF.pow((-2430.28));
      boolean boolean0 = complex0.equals(complex6);
      Object object0 = complex2.readResolve();
      Complex complex8 = complex3.negate();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1716.106312847);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = Complex.valueOf(111.1, 0.0);
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2767.8740736526), 40.4);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.log();
      int int0 = complex2.I.hashCode();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.cos();
      boolean boolean0 = complex5.equals(complex1);
      Complex complex6 = complex1.multiply(complex4);
      Complex complex7 = complex1.createComplex((-2767.8740736526), (-2767.8740736526));
      Complex complex8 = complex4.multiply(1);
      List<Complex> list0 = complex8.nthRoot(429);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex0.add(complex1);
      double double0 = complex1.getArgument();
      Complex complex6 = complex0.cos();
      double double1 = complex6.abs();
      Complex complex7 = complex0.multiply(1);
      Complex complex8 = complex2.cos();
      Complex complex9 = complex7.NaN.log();
      Complex complex10 = complex6.multiply(1);
      double double2 = complex5.abs();
      boolean boolean0 = complex2.equals(complex1);
      double double3 = complex2.getImaginary();
      Complex complex11 = complex9.divide(1.5707963267948966);
      Complex complex12 = Complex.valueOf((-2335.1), 405.3104154);
      boolean boolean1 = complex5.isNaN();
      int int0 = complex7.hashCode();
      Complex complex13 = complex10.add(complex5);
      Complex complex14 = complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.divide((-7.97192256794005));
      Complex complex5 = complex3.sinh();
      Complex complex6 = new Complex((-55.98771186112), (-7.97192256794005));
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex5.ONE.divide(complex6);
      double double0 = complex3.getReal();
      Complex complex10 = complex1.sin();
      double double1 = complex10.INF.abs();
      Complex complex11 = complex4.sinh();
      Complex complex12 = complex1.atan();
      boolean boolean0 = complex2.equals(complex5);
      Complex complex13 = complex4.multiply(0.0);
      Complex complex14 = complex3.multiply(complex12);
      Complex complex15 = complex1.add((-1116.345));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7660598745907915E115);
      Complex complex1 = new Complex(3.7660598745907915E115);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = Complex.valueOf(1726.4335940527121, (-2529.74392));
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex7.ONE.multiply((-1876));
      Complex complex9 = complex3.tan();
      Complex complex10 = complex0.subtract(complex3);
      ComplexField complexField0 = complex9.ZERO.getField();
      String string0 = complex10.toString();
      Complex complex11 = complex3.divide(complex9);
      Complex complex12 = complex1.atan();
      Complex complex13 = complex6.I.tan();
      double double0 = complex13.getArgument();
      double double1 = complex11.getArgument();
      Complex complex14 = complex11.exp();
      Complex complex15 = complex1.ONE.negate();
      Complex complex16 = Complex.valueOf(3.7660598745907915E115, 0.0);
      double double2 = complex9.ZERO.abs();
      Complex complex17 = complex9.conjugate();
      String string1 = complex6.toString();
      Complex complex18 = complex10.log();
      Complex complex19 = complex0.reciprocal();
      Complex complex20 = complex14.sqrt();
      Complex complex21 = complex18.exp();
      Complex complex22 = complex4.sin();
      Complex complex23 = complex4.sqrt();
      Object object0 = complex14.readResolve();
      Complex complex24 = Complex.valueOf(1726.4335940527121);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-960));
      Complex complex2 = complex1.subtract(Double.NaN);
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.divide((-1335.98897654));
      Complex complex4 = complex0.asin();
      double double1 = complex4.INF.getArgument();
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex5.INF.divide((-1335.98897654));
      double double2 = complex1.getArgument();
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex0.subtract(complex3);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.I.createComplex((-20.0), 0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(2334.7586552341);
      Complex complex6 = complex2.atan();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-107.19668), 0.0);
      Complex complex1 = Complex.valueOf((-107.19668), 0.0);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-599.91));
      Complex complex1 = complex0.I.divide((-599.91));
      ComplexField complexField0 = complex1.I.getField();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.tan();
      double double0 = complex2.abs();
      Complex complex7 = complex2.divide(complex6);
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex6.NaN.divide((-599.91));
      Complex complex10 = Complex.valueOf((-599.91));
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.cos();
      boolean boolean0 = complex8.equals(complex10);
      Complex complex13 = complex7.tanh();
      Complex complex14 = complex6.exp();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(78.76858125554, 78.76858125554);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.INF.tanh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex1.NaN.negate();
      Complex complex6 = complex0.createComplex(78.76858125554, 197.2892707822);
      Complex complex7 = complex0.pow(complex1);
      boolean boolean0 = complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(454.387922337142, 454.387922337142);
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.pow((-3.987619123706934E79));
      Complex complex5 = complex4.ONE.multiply(454.387922337142);
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.add((-2939.899189398));
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.ZERO.add(complex4);
      Complex complex6 = complex0.I.sqrt1z();
      Complex complex7 = complex0.I.cosh();
      Complex complex8 = complex6.INF.sqrt1z();
      Complex complex9 = complex1.I.asin();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex1.multiply(complex0);
      Complex complex12 = complex2.atan();
      Complex complex13 = complex9.log();
      Complex complex14 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2440.9372, (-3.1327120557842516E145));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.NaN.createComplex(2440.9372, 2440.9372);
      Complex complex4 = complex3.ONE.pow(0.0);
      double double0 = complex0.abs();
      Complex complex5 = complex0.add(1.0);
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex6.INF.sin();
      String string0 = complex6.ONE.toString();
      Complex complex8 = complex0.add(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex3.acos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex4.ZERO.multiply(7);
      Complex complex7 = complex0.ONE.negate();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex8 = complex5.ONE.atan();
      Complex complex9 = complex4.acos();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex complex13 = complex12.ZERO.sqrt();
      boolean boolean1 = complex2.equals(complex11);
      Complex complex14 = complex3.multiply(complex10);
      List<Complex> list0 = complex14.ZERO.nthRoot(7);
      Complex complex15 = complex4.cosh();
      Complex complex16 = complex14.reciprocal();
      Complex complex17 = complex8.I.conjugate();
      Complex complex18 = complex16.ONE.createComplex(7, 0.0);
      Complex complex19 = complex9.subtract(0.0);
      Complex complex20 = complex1.sinh();
      Complex complex21 = complex20.log();
      Complex complex22 = complex10.divide(0.0);
      Complex complex23 = complex10.sqrt();
      Complex complex24 = complex21.multiply(2622.953);
      Complex complex25 = complex23.asin();
      boolean boolean2 = complex8.isNaN();
      Complex complex26 = complex22.sinh();
      Complex complex27 = complex14.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.INF.createComplex(20.0, 20.0);
      int int0 = complex0.hashCode();
      double double1 = complex0.getReal();
      Complex complex5 = complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1094.5819265207);
      Complex complex2 = complex1.INF.multiply(1094.5819265207);
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex0.subtract(complex1);
      int int0 = complex0.NaN.hashCode();
      Complex complex5 = complex0.ZERO.exp();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.I.add(complex1);
      Complex complex9 = complex6.asin();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2698.438620713), (-1971.9314954));
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(863.8018);
      Complex complex1 = complex0.ONE.asin();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex4.ZERO.sqrt();
      double double1 = complex2.getArgument();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex1.pow(0.0);
      Complex complex10 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.createComplex((-1501.9149), (-2010.361531115538));
      Complex complex2 = Complex.valueOf(681.598942577648, (-1501.9149));
      Complex complex3 = complex0.INF.divide((-2010.361531115538));
      Object object0 = complex3.I.readResolve();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex4.ONE.add((double) 211);
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex7.I.sin();
      List<Complex> list0 = complex0.nthRoot(211);
      double double1 = complex3.getReal();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex9.NaN.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex11 = complex4.I.negate();
      Complex complex12 = complex1.pow(2305.789980333);
      double double2 = complex3.ONE.getArgument();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex4.negate();
      Complex complex15 = Complex.valueOf(Double.NEGATIVE_INFINITY);
      Complex complex16 = complex15.multiply(681.598942577648);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf(5.688906371296133E-247, 5.688906371296133E-247);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.INF.cosh();
      double double0 = complex0.getReal();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex3.acos();
      Complex complex10 = Complex.valueOf(20.0, 0.0);
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex1.I.atan();
      Complex complex6 = complex5.subtract(complex2);
      String string0 = complex5.INF.toString();
      double double0 = complex3.getReal();
      int int0 = complex3.hashCode();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex8.I.multiply(3764.34668350679);
      Object object0 = complex7.readResolve();
      int int1 = complex1.hashCode();
      double double1 = complex4.getImaginary();
      Complex complex10 = complex1.subtract(0.0);
      Complex complex11 = complex3.reciprocal();
      List<Complex> list0 = complex11.ONE.nthRoot(3441);
      Complex complex12 = complex11.INF.multiply(complex5);
      Complex complex13 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.add((-1628.0887695160607));
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.NaN.add((-507.652612));
      Complex complex7 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.createComplex((-3891.047), (-3891.047));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.multiply((-2267.0));
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.INF.add(2.0);
      Complex complex3 = complex2.subtract(2.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.ONE.conjugate();
      Complex complex6 = complex4.ZERO.reciprocal();
      Complex complex7 = complex0.NaN.multiply(1273.434030761168);
      Complex complex8 = complex0.subtract(complex4);
      Complex complex9 = complex8.ZERO.add(complex2);
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex1.pow(0.0);
      Complex complex13 = complex12.ZERO.sin();
      Complex complex14 = complex12.INF.sin();
      boolean boolean0 = complex0.equals(complex6);
      Complex complex15 = complex6.createComplex(2.0, (-16.0));
      Complex complex16 = complex15.createComplex(3652.56, 1273.434030761168);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      double double0 = 0.0;
      Complex complex2 = complex0.ONE.exp();
      try { 
        complex2.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4972.0);
      Complex complex1 = Complex.valueOf(4972.0);
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex2.INF.subtract(complex1);
      Complex complex6 = complex5.ONE.pow(1.0);
      Complex complex7 = complex6.ZERO.divide(0.0);
      Complex complex8 = complex5.ONE.subtract(4972.0);
      Complex complex9 = complex8.ONE.subtract(complex5);
      Complex complex10 = complex0.I.negate();
      int int0 = complex8.ONE.hashCode();
      Complex complex11 = complex0.multiply(1272.08800892);
      Complex complex12 = complex4.negate();
      Complex complex13 = complex12.NaN.conjugate();
      List<Complex> list0 = complex13.nthRoot(1);
      Complex complex14 = complex2.add(complex4);
      Complex complex15 = complex11.sinh();
      boolean boolean0 = complex1.isNaN();
      Complex complex16 = complex15.divide(complex12);
      try { 
        complex2.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.I.log();
      int int0 = complex0.NaN.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.add(2381.59904);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.ZERO.add(0.0);
      double double0 = complex6.I.abs();
      Complex complex8 = complex1.cos();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex2.subtract(2381.59904);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = Complex.valueOf(0.6629093885421753);
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex0.toString();
      double double0 = complex0.abs();
      Complex complex3 = complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(640.63571328067, 640.63571328067);
      Complex complex1 = complex0.I.add(5.962956589227457E199);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.multiply(137.13953403);
      String string0 = complex0.toString();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex4.createComplex(640.63571328067, 3.499747150995707E-8);
      Complex complex8 = Complex.valueOf(137.13953403);
      List<Complex> list0 = complex8.nthRoot(1711);
      Complex complex9 = complex3.divide((-1430.644459));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ONE.abs();
      Complex complex1 = Complex.valueOf((-1428.2667461795), (-1428.2667461795));
      Complex complex2 = complex1.NaN.sqrt();
      double double1 = complex0.getArgument();
      Complex complex3 = complex1.multiply(20.0);
      Complex complex4 = complex3.multiply((-1428.2667461795));
      Complex complex5 = Complex.valueOf((-656.49), 767.876005536847);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.NaN.pow(1.6036460343275798E-8);
      Complex complex8 = complex6.log();
      Complex complex9 = complex3.subtract(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(531.3764797, (-1437.8071014257));
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex1.ZERO.divide((-59.18515));
      String string0 = complex0.NaN.toString();
      Complex complex5 = complex1.ONE.multiply(177);
      double double0 = complex0.getReal();
      Complex complex6 = complex0.pow(0.0);
      int int0 = complex6.hashCode();
      Complex complex7 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      Complex complex3 = Complex.valueOf((-3182.0));
      Complex complex4 = complex3.multiply((-3182.0));
      Complex complex5 = complex4.I.subtract(complex2);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex0.divide(complex3);
      Complex complex8 = complex7.ONE.subtract(0.0);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex5.multiply(complex1);
      Complex complex11 = complex10.add(0.0);
      Complex complex12 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.negate();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.sinh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.multiply(280);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      Object object0 = complex0.I.readResolve();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.valueOf((-9.799351869734466E-8), (-9.799351869734466E-8));
      double double0 = complex2.getImaginary();
      Complex complex7 = complex1.divide(1.0);
      Complex complex8 = complex4.conjugate();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4652.4085342), (-4652.4085342));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(2181.7265026409896, 2181.7265026409896);
      Complex complex4 = complex1.I.createComplex(2744.90859, (-4652.4085342));
      Complex complex5 = complex2.divide((-4652.4085342));
      boolean boolean0 = complex2.isNaN();
      double double0 = complex3.getArgument();
      Complex complex6 = complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.8609623908996582);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.conjugate();
      int int0 = complex1.hashCode();
      Object object1 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(3033.6019799, 3033.6019799);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.pow((-20.0));
      Complex complex4 = complex1.divide(complex3);
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2468.5936988133));
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3601.086384));
      Complex complex2 = complex1.INF.multiply(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex2.divide((-2758.45));
      Complex complex4 = complex3.ZERO.cos();
      Object object0 = complex3.INF.readResolve();
      String string0 = complex2.ONE.toString();
      String string1 = complex0.toString();
      double double0 = 1489.5228;
      Complex complex5 = Complex.valueOf(1489.5228, 1489.5228);
      int int0 = (-67);
      Complex complex6 = complex5.ZERO.multiply((-67));
      int int1 = complex0.hashCode();
      try { 
        complex0.nthRoot((-121));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -121
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 7.200489472E10);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.INF.multiply(Double.NaN);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex2.INF.reciprocal();
      Complex complex5 = complex0.NaN.multiply((-1190));
      Complex complex6 = complex5.INF.sinh();
      boolean boolean1 = complex0.equals("BPU|tsYzY");
      Complex complex7 = complex6.NaN.pow((double) (-1190));
      double double0 = complex0.getImaginary();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.ONE.pow(Double.NaN);
      Complex complex10 = complex9.I.multiply((-1190));
      Complex complex11 = complex9.I.subtract(7.200489472E10);
      Complex complex12 = complex8.INF.cos();
      Complex complex13 = complex5.INF.multiply(0.0);
      boolean boolean2 = complex0.isInfinite();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex12.sqrt();
      ComplexField complexField0 = complex6.getField();
      Complex complex16 = complex13.divide(3389.35156797233);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.log();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.createComplex(1347.1830714, 0.0);
      Complex complex7 = complex2.NaN.atan();
      Complex complex8 = complex2.add((-227.32452726142282));
      Complex complex9 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add((-8.833499967268279E225));
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = Complex.valueOf(0.0, 1.4411566290936352E-64);
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf((-8.833499967268279E225));
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex8.pow((double) 1);
      Complex complex10 = Complex.valueOf(1123.459797652444);
      Complex complex11 = Complex.valueOf(1123.459797652444, 0.0);
      Complex complex12 = complex10.subtract(1123.459797652444);
      Complex complex13 = complex12.I.multiply(566);
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.pow(1802.927505110555);
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex1.I.multiply(complex0);
      Complex complex6 = complex5.INF.add(0.7615941559557649);
      Complex complex7 = complex0.divide(1802.927505110555);
      Complex complex8 = complex7.atan();
      List<Complex> list0 = complex8.ONE.nthRoot(810);
      Complex complex9 = complex7.negate();
      Complex complex10 = complex8.INF.sin();
      Complex complex11 = complex7.negate();
      Complex complex12 = complex7.divide(1802.927505110555);
      Complex complex13 = complex12.NaN.cosh();
      Complex complex14 = Complex.valueOf((double) 810);
      Complex complex15 = complex7.subtract(1802.927505110555);
      Complex complex16 = complex15.I.cos();
      Complex complex17 = complex16.NaN.add(complex15);
      int int0 = complex0.hashCode();
      Complex complex18 = complex11.cosh();
      Complex complex19 = complex16.negate();
      Complex complex20 = complex15.I.tan();
      Complex complex21 = complex16.pow((-2076.935836303));
      Complex complex22 = complex21.I.asin();
      Complex complex23 = complex15.acos();
      Complex complex24 = Complex.valueOf((double) 810, (double) 810);
      Complex complex25 = complex10.add(9.352988830045413E-4);
      Complex complex26 = complex24.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.asin();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex1.NaN.exp();
      ComplexField complexField0 = complex0.ZERO.getField();
      int int1 = complex1.hashCode();
      String string0 = complex0.ONE.toString();
      List<Complex> list0 = complex1.I.nthRoot(1462);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.multiply(complex1);
      double double0 = complex0.getImaginary();
      Complex complex8 = complex2.divide(2661.52908305788);
      Complex complex9 = complex8.I.multiply(complex7);
      String string1 = complex8.ONE.toString();
      Complex complex10 = complex8.INF.negate();
      Complex complex11 = complex8.multiply((-1.0));
      List<Complex> list1 = complex8.nthRoot(1462);
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex4.pow(complex3);
      double double0 = complex2.ONE.getArgument();
      Complex complex7 = complex0.log();
      double double1 = complex2.abs();
      Complex complex8 = complex7.conjugate();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex8.isInfinite();
      Complex complex9 = complex0.ZERO.sin();
      double double2 = complex7.abs();
      Complex complex10 = complex5.negate();
      Complex complex11 = complex10.negate();
      double double3 = complex2.getReal();
      boolean boolean1 = complex4.isNaN();
      Complex complex12 = complex0.multiply(Double.NaN);
      Complex complex13 = complex11.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-114.09513), 20.0);
      Complex complex1 = complex0.ZERO.createComplex(9.78476998200719E-186, 9.78476998200719E-186);
      Complex complex2 = complex0.ONE.multiply(1314);
      Complex complex3 = complex1.I.conjugate();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex3.ONE.pow(0.0);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.INF.tan();
      Complex complex7 = complex6.ONE.subtract((-2350.49473175479));
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex7.I.subtract((-3479.390464407));
      Complex complex11 = complex7.ZERO.createComplex(9.78476998200719E-186, (-3479.390464407));
      Complex complex12 = complex11.INF.cosh();
      Complex complex13 = complex7.divide(complex5);
      Object object0 = new Object();
      boolean boolean0 = complex7.equals(object0);
      Complex complex14 = complex0.sinh();
      double double1 = complex10.getReal();
      Complex complex15 = complex4.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.NaN.multiply(1993.2963527422728);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex2.negate();
      Complex complex10 = complex9.cos();
      double double0 = complex10.ZERO.getArgument();
      Object object0 = complex3.readResolve();
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(161.694);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex0.ONE.multiply(1);
      Complex complex4 = complex1.pow((-1300.528877154));
      Complex complex5 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ONE.acos();
      double double0 = (-1200.09952780475);
      Complex complex3 = complex2.ONE.subtract((-1200.09952780475));
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.INF.multiply(complex2);
      String string0 = complex3.ZERO.toString();
      int int0 = (-3057);
      try { 
        complex0.nthRoot((-3057));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,057
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.createComplex(9.15109220707761E72, 6214.0);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex1.I.atan();
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex4.ONE.sqrt();
      Complex complex7 = complex1.multiply(1);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex4.cos();
      Complex complex10 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      boolean boolean1 = complex3.isInfinite();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex5.log();
      boolean boolean2 = complex11.isInfinite();
      Complex complex13 = complex0.sin();
      Complex complex14 = new Complex(9.15109220707761E72);
      Complex complex15 = complex11.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-810.7783829), (-810.7783829));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-810.7783829));
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.NaN.tanh();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.NaN.subtract(complex3);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex8 = complex0.divide((-810.7783829));
      Complex complex9 = complex6.conjugate();
      double double0 = complex9.NaN.getArgument();
      List<Complex> list0 = complex4.I.nthRoot(1125);
      Complex complex10 = complex0.asin();
      double double1 = complex6.ONE.abs();
      Complex complex11 = complex10.ZERO.cosh();
      Complex complex12 = complex11.NaN.sqrt1z();
      Complex complex13 = complex11.NaN.sqrt();
      Complex complex14 = complex10.I.cosh();
      Complex complex15 = complex9.divide((-1787.51575));
      Complex complex16 = complex10.asin();
      Complex complex17 = complex7.multiply(complex4);
      Complex complex18 = complex10.sin();
      Complex complex19 = complex10.tanh();
      Complex complex20 = complex19.pow(0.0);
      String string0 = complex5.toString();
      Complex complex21 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-527.81841663324));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex2.NaN.tanh();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex5.ZERO.createComplex((-527.81841663324), (-751.342));
      Complex complex8 = complex0.INF.cosh();
      Complex complex9 = complex0.ZERO.pow(0.0);
      Complex complex10 = complex0.sqrt1z();
      int int0 = complex5.I.hashCode();
      String string0 = complex10.toString();
      Complex complex11 = complex9.ZERO.sin();
      Complex complex12 = complex0.pow((-1.0));
      Complex complex13 = complex7.multiply(complex0);
      Complex complex14 = complex13.INF.multiply(1);
      Object object0 = complex14.readResolve();
      Complex complex15 = complex9.cos();
      Complex complex16 = complex15.I.asin();
      Complex complex17 = complex12.tan();
      Complex complex18 = complex17.ONE.asin();
      Complex complex19 = Complex.valueOf((-751.342));
      double double0 = complex5.abs();
      Complex complex20 = complex1.sin();
      Complex complex21 = complex15.conjugate();
      Complex complex22 = complex21.ZERO.atan();
      Complex complex23 = complex19.ONE.sinh();
      Complex complex24 = complex7.multiply(complex11);
      Complex complex25 = complex7.sqrt();
      Complex complex26 = complex19.subtract(Double.NaN);
      double double1 = complex11.abs();
  }
}
