/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:56:32 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex4.INF.divide(complex3);
      int int0 = (-279);
      try { 
        complex0.nthRoot((-279));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -279
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3.9793609609721186E-8));
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = Complex.valueOf((-3.9793609609721186E-8), (-3.9793609609721186E-8));
      Complex complex4 = complex0.NaN.add(complex3);
      Complex complex5 = complex4.createComplex((-941.5110097417), (-941.5110097417));
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex0.I.pow(complex5);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.pow(39.899);
      Complex complex10 = complex2.cos();
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex0.multiply(complex5);
      Complex complex13 = complex4.ZERO.tan();
      Complex complex14 = complex9.pow(complex3);
      Complex complex15 = complex5.divide((-3.9793609609721186E-8));
      Complex complex16 = complex2.subtract(complex6);
      Complex complex17 = complex10.cos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.multiply(1277);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex6.divide(complex0);
      int int0 = complex8.ZERO.hashCode();
      Complex complex9 = complex8.NaN.createComplex(Double.NaN, 1277);
      Complex complex10 = Complex.valueOf((double) 1277);
      double double0 = complex5.getArgument();
      Complex complex11 = complex2.multiply(complex0);
      Complex complex12 = complex4.sinh();
      double double1 = complex7.getArgument();
      Complex complex13 = complex9.multiply(Double.NaN);
      Complex complex14 = complex9.NaN.cosh();
      Complex complex15 = Complex.valueOf(-0.0, (-1566.0));
      Complex complex16 = complex15.ONE.multiply(complex3);
      Complex complex17 = complex15.INF.subtract(complex9);
      Complex complex18 = complex1.sinh();
      Complex complex19 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.ZERO.createComplex((-405.1), (-103.35998282372));
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex3.atan();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.sqrt();
      double double0 = complex1.getImaginary();
      Complex complex7 = complex2.sqrt();
      Object object0 = complex4.readResolve();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-83.74214));
      Complex complex2 = complex1.ONE.createComplex(0.0, (-83.74214));
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex0.add((-83.74214));
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex4.subtract((-83.74214));
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.pow(0.0);
      Complex complex3 = complex2.multiply(709);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex5.ZERO.pow(complex1);
      String string0 = complex7.I.toString();
      Complex complex8 = complex7.NaN.divide(complex1);
      Complex complex9 = complex5.divide(complex0);
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex12.I.divide(complex10);
      Complex complex14 = complex13.INF.sinh();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex1.sin();
      Complex complex17 = complex16.ZERO.reciprocal();
      List<Complex> list0 = complex17.INF.nthRoot(709);
      Object object0 = complex12.INF.readResolve();
      int int0 = complex16.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex18 = complex16.multiply(complex15);
      Complex complex19 = complex13.negate();
      double double0 = complex13.getArgument();
      Complex complex20 = complex12.ONE.multiply(709);
      double double1 = complex13.ONE.abs();
      Complex complex21 = complex1.add(0.0);
      Complex complex22 = complex6.multiply(979);
      Complex complex23 = complex12.conjugate();
      String string1 = complex23.ZERO.toString();
      Complex complex24 = complex4.divide(Double.NaN);
      Complex complex25 = complex17.createComplex(979, (-1317.0775629));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2.0740270614624023, Double.NaN);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-78.3880485168083), (-78.3880485168083));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.acos();
      double double0 = complex2.abs();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex3.pow((-78.3880485168083));
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex0.pow((-471.215137125));
      Complex complex9 = complex0.tanh();
      Complex complex10 = Complex.valueOf((-78.3880485168083), (-78.3880485168083));
      Complex complex11 = complex4.subtract((-584.77));
      Complex complex12 = complex4.subtract(complex1);
      Complex complex13 = complex8.add(complex12);
      Complex complex14 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex1.pow((double) 4624);
      Complex complex3 = Complex.valueOf((double) 4624, 0.0);
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex1.multiply(4624);
      Complex complex5 = complex4.I.divide(complex1);
      ComplexField complexField0 = complex5.I.getField();
      List<Complex> list0 = complex4.ONE.nthRoot(4624);
      Complex complex6 = complex0.multiply((double) 4624);
      String string1 = complex0.toString();
      Complex complex7 = complex1.createComplex((-778.575426729312), (-778.575426729312));
      Complex complex8 = complex0.negate();
      Complex complex9 = complex5.I.atan();
      Complex complex10 = complex8.pow((-2107.3702169613));
      Complex complex11 = complex8.INF.multiply(37);
      double double0 = complex0.getReal();
      Complex complex12 = complex5.conjugate();
      Complex complex13 = complex12.INF.reciprocal();
      Complex complex14 = complex4.multiply(435);
      double double1 = 1297.12552;
      Complex complex15 = Complex.valueOf(1297.12552);
      // Undeclared exception!
      complex12.nthRoot(4624);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-1639.67), (-5907.064));
      Complex complex1 = complex0.createComplex(0.0, (-2052.73172));
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.valueOf((-5907.064), 7152.6);
      Complex complex4 = complex3.NaN.cos();
      double double0 = complex1.getArgument();
      Complex complex5 = Complex.valueOf((-1639.67), (-5401.1702305546));
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.I.acos();
      Object object0 = complex2.readResolve();
      ComplexField complexField0 = complex2.getField();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.valueOf((-421.688642516403));
      Complex complex4 = Complex.valueOf(0.0, (-685.4));
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex5.I.divide(2.424783229827881);
      Complex complex7 = Complex.valueOf(322.6671227742882, 0.0);
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.valueOf(0.0, (-2070.1014096098834));
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex9.ONE.tanh();
      Complex complex12 = complex0.I.subtract(complex8);
      int int0 = complex0.hashCode();
      Complex complex13 = complex8.tan();
      Complex complex14 = complex8.I.multiply(322.6671227742882);
      Complex complex15 = complex4.tan();
      Complex complex16 = complex0.pow((-2070.1014096098834));
      Complex complex17 = complex8.tan();
      Complex complex18 = complex17.I.sinh();
      double double0 = complex1.getReal();
      Complex complex19 = complex15.divide((-1696.7));
      Complex complex20 = Complex.valueOf(0.0, 0.0);
      Complex complex21 = complex15.multiply(complex12);
      double double1 = complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-758.59224767));
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex2.ONE.acos();
      double double1 = complex0.abs();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex2.asin();
      int int0 = complex6.I.hashCode();
      Object object0 = complex0.readResolve();
      double double2 = complex2.abs();
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9941628263579332E-164, (-1.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex2.ZERO.divide(complex4);
      Complex complex6 = complex2.subtract(complex1);
      double double0 = complex1.getImaginary();
      Complex complex7 = complex6.pow(complex1);
      Complex complex8 = complex7.pow((-1.0));
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex5.subtract(complex6);
      Complex complex11 = complex10.cosh();
      Complex complex12 = Complex.valueOf(1.4100860573078262E-164, 1.4100860573078262E-164);
      Complex complex13 = complex5.createComplex((-8.324100783330331E-109), 0.0);
      ComplexField complexField0 = complex1.getField();
      Complex complex14 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-340.647775));
      Complex complex1 = Complex.valueOf(2.2316346168518066, 2.2316346168518066);
      Complex complex2 = complex1.I.createComplex(0.0, 6.283185307179586);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex3.multiply(0.0);
      Complex complex6 = new Complex(0.0, (-4251.0));
      boolean boolean0 = complex4.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex4.INF.createComplex((-5.6696107089038004E-8), 0.0);
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, (-2566.5496));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.log();
      double double0 = complex1.abs();
      List<Complex> list0 = complex3.nthRoot(17);
      Complex complex4 = complex3.asin();
      boolean boolean0 = complex1.equals((Object) null);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex3.ONE.cos();
      Complex complex8 = complex7.ONE.cosh();
      double double1 = complex0.getArgument();
      Complex complex9 = complex3.negate();
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex3.subtract((-2566.5496));
      Complex complex12 = complex2.ONE.conjugate();
      Complex complex13 = complex11.ONE.subtract(complex5);
      Complex complex14 = complex13.I.sqrt1z();
      Complex complex15 = complex4.multiply(2566.5496);
      Complex complex16 = Complex.valueOf(2566.5496);
      Complex complex17 = complex2.cosh();
      Complex complex18 = complex5.multiply(1110.6874520259817);
      Complex complex19 = complex11.sin();
      Complex complex20 = complex5.divide(1110.6874520259817);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-297.4319202438));
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex0.multiply((-1138));
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex2.divide((double) (-1138));
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex2.log();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex5.NaN.add(complex0);
      Complex complex9 = complex2.INF.divide(complex7);
      Complex complex10 = Complex.valueOf(0.0, (-1321.637067661977));
      Complex complex11 = complex4.ONE.asin();
      Complex complex12 = complex10.I.negate();
      Complex complex13 = complex12.INF.pow((double) (-1138));
      Complex complex14 = complex0.multiply((double) (-1138));
      Complex complex15 = complex14.I.tanh();
      ComplexField complexField0 = complex4.getField();
      Complex complex16 = complex7.sqrt();
      Complex complex17 = complex16.I.divide(complex6);
      Object object0 = complex16.I.readResolve();
      Complex complex18 = complex17.ZERO.subtract((-5372.67));
      try { 
        complex17.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.INF.multiply(0.0);
      double double0 = complex0.abs();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.add(1.0);
      Complex complex5 = complex1.pow(59.285952817195);
      Complex complex6 = complex5.ONE.multiply(59.285952817195);
      Complex complex7 = Complex.valueOf(59.285952817195, 0.0);
      Complex complex8 = complex5.ZERO.negate();
      Complex complex9 = complex5.tan();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex10.NaN.conjugate();
      ComplexField complexField0 = complex10.getField();
      ComplexField complexField1 = complex1.getField();
      Complex complex12 = complex3.tan();
      Complex complex13 = complex10.sinh();
      Complex complex14 = complex11.exp();
      List<Complex> list0 = complex5.nthRoot(1);
      Complex complex15 = complex3.sqrt1z();
      Complex complex16 = complex14.multiply(0.0);
      Complex complex17 = complex1.asin();
      double double1 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.reciprocal();
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex1.nthRoot(1205);
      double double1 = complex0.getArgument();
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.log();
      Complex complex8 = complex3.log();
      Complex complex9 = complex3.multiply(complex2);
      Complex complex10 = complex5.subtract(complex9);
      Complex complex11 = complex10.tan();
      Complex complex12 = complex8.acos();
      Complex complex13 = complex6.sqrt1z();
      Complex complex14 = complex13.asin();
      double double2 = complex0.getImaginary();
      Complex complex15 = Complex.valueOf((-1711.780085595143));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.8581732071331E174, 3.8581732071331E174);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.createComplex(3.8581732071331E174, 1563.21313);
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.createComplex(3.8581732071331E174, 0.0);
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex6.createComplex(0.0, (-2067.8950206));
      Complex complex9 = complex0.tan();
      Complex complex10 = complex1.pow(Double.NaN);
      Complex complex11 = complex9.multiply(complex7);
      Complex complex12 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.ZERO.exp();
      List<Complex> list0 = complex4.nthRoot(112);
      double double0 = complex2.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex5 = complex2.I.pow(complex4);
      Complex complex6 = complex3.INF.add(Double.NaN);
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex4.ZERO.tanh();
      int int0 = complex5.INF.hashCode();
      Complex complex6 = Complex.valueOf((-542.9150102919));
      Complex complex7 = complex1.sqrt1z();
      Object object0 = complex1.readResolve();
      double double0 = complex0.abs();
      Complex complex8 = complex2.asin();
      List<Complex> list0 = complex8.NaN.nthRoot(37);
      Complex complex9 = complex7.NaN.reciprocal();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex3.ONE.divide(complex5);
      Complex complex12 = complex4.negate();
      boolean boolean0 = complex7.isNaN();
      Complex complex13 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex14 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex15 = complex2.reciprocal();
      Complex complex16 = complex8.multiply(complex14);
      Complex complex17 = complex13.I.add(complex3);
      ComplexField complexField0 = complex3.getField();
      Complex complex18 = complex13.log();
      Complex complex19 = complex18.ONE.tan();
      int int1 = complex8.hashCode();
      Complex complex20 = complex11.add(complex18);
      Complex complex21 = complex20.pow(complex13);
      List<Complex> list1 = complex1.nthRoot(37);
      Complex complex22 = complex4.multiply(complex5);
      Complex complex23 = complex12.createComplex(Double.NaN, 2.5938024520874023);
      int int2 = complex5.hashCode();
      boolean boolean1 = complex12.isInfinite();
      Complex complex24 = complex15.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.pow((-1164.6046785600136));
      Complex complex4 = complex1.NaN.pow(complex2);
      Complex complex5 = complex1.I.subtract(complex0);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex7.ZERO.sin();
      double double0 = complex0.getReal();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex9 = complex6.reciprocal();
      Object object0 = new Object();
      boolean boolean0 = complex6.equals(object0);
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex5.sin();
      Complex complex12 = complex6.log();
      Complex complex13 = complex10.cosh();
      List<Complex> list0 = complex12.nthRoot(17);
      double double1 = complex0.getImaginary();
      Complex complex14 = complex8.add(complex10);
      Complex complex15 = complex8.atan();
      List<Complex> list1 = complex10.nthRoot(17);
      Complex complex16 = complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1643.827);
      Complex complex1 = complex0.ZERO.subtract(1643.827);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.ONE.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.pow(1643.827);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ONE.subtract(1643.827);
      Complex complex8 = complex3.NaN.multiply(0.0);
      Complex complex9 = complex5.ONE.negate();
      int int0 = complex9.I.hashCode();
      Complex complex10 = complex5.I.exp();
      Complex complex11 = Complex.valueOf((-5919.74419076));
      double double0 = complex0.abs();
      Complex complex12 = complex11.ONE.divide(0.0);
      Complex complex13 = Complex.valueOf(0.0, 20.0);
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = complex11.conjugate();
      Complex complex16 = complex15.INF.cosh();
      double double1 = complex6.getReal();
      Complex complex17 = complex14.multiply(1643.827);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1.2351697477129173E-65), (-20.0));
      Complex complex1 = complex0.INF.add((-1.2351697477129173E-65));
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.I.divide((-20.0));
      Complex complex5 = complex0.NaN.reciprocal();
      double double0 = complex0.INF.getArgument();
      Complex complex6 = complex0.tanh();
      ComplexField complexField0 = complex6.getField();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex4.add(0.0);
      Complex complex9 = complex8.INF.multiply(1);
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.valueOf(1835.1890065, (-20.0));
      Complex complex12 = complex4.sin();
      ComplexField complexField1 = complex12.NaN.getField();
      boolean boolean0 = complex5.isInfinite();
      Complex complex13 = complex1.sinh();
      double double1 = complex6.getArgument();
      Complex complex14 = complex11.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3709.0), (-1635.09647));
      double double0 = complex0.getReal();
      double double1 = complex0.getImaginary();
      Complex complex1 = complex0.multiply(2701);
      Complex complex2 = complex1.ONE.add(2.9731739067444943E32);
      double double2 = complex1.I.abs();
      double double3 = complex1.INF.getArgument();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(4.940883275207154E117, 4.940883275207154E117);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = Complex.valueOf(0.0, 936.954248711);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.add(complex0);
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex0.createComplex(4.940883275207154E117, (-8.846040040259342E-8));
      boolean boolean1 = complex7.isInfinite();
      Complex complex8 = complex6.tan();
      double double0 = complex8.I.abs();
      boolean boolean2 = complex6.equals(complex2);
      double double1 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.INF.createComplex((-927.91661342), (-927.91661342));
      Complex complex3 = complex1.ONE.negate();
      List<Complex> list0 = complex3.I.nthRoot(543);
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = Complex.valueOf((-927.91661342));
      Complex complex7 = Complex.valueOf((-529.4805688));
      Object object1 = complex1.readResolve();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.ONE.reciprocal();
      double double0 = complex2.getArgument();
      Complex complex10 = complex2.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2507.0125731));
      Complex complex1 = complex0.INF.multiply((-2507.0125731));
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex1.ONE.sin();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex0.divide((-1177.8436897633035));
      Complex complex4 = complex3.cos();
      boolean boolean0 = complex1.isNaN();
      String string0 = complex4.toString();
      Complex complex5 = complex3.INF.createComplex(1490.0, (-1314.9));
      Complex complex6 = complex4.tan();
      Complex complex7 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-3779.671509194));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.NaN.divide((-3779.671509194));
      Complex complex5 = Complex.valueOf((-1392.973766));
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex6.pow(complex0);
      String string0 = complex7.NaN.toString();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex7.ZERO.acos();
      Complex complex10 = complex9.NaN.negate();
      Complex complex11 = complex7.INF.divide((-3779.671509194));
      Complex complex12 = complex7.NaN.createComplex((-3779.671509194), (-3779.671509194));
      double double0 = complex6.abs();
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex0.multiply(2374);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.sin();
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.tanh();
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.tanh();
      double double0 = complex5.abs();
      boolean boolean0 = complex4.isNaN();
      Complex complex6 = complex3.asin();
      Complex complex7 = complex1.multiply(0.0);
      boolean boolean1 = complex5.isInfinite();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-481.05317));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex0.cos();
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex1.ZERO.nthRoot(2565);
      int int0 = complex0.hashCode();
      Complex complex5 = complex4.atan();
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex5.tanh();
      ComplexField complexField1 = complex6.ONE.getField();
      Complex complex7 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow((-2172.71));
      double double0 = complex0.INF.getArgument();
      Complex complex3 = Complex.valueOf((-2172.71), (-643.8616439));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1590.08855945);
      Complex complex1 = complex0.INF.sinh();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.add(5.685720022003016E24);
      double double0 = complex1.I.abs();
      Complex complex2 = complex1.INF.add(3046.7);
      Complex complex3 = complex0.add(5.685720022003016E24);
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex1.multiply(complex3);
      Complex complex7 = complex1.tan();
      Complex complex8 = complex3.NaN.asin();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex3.isNaN();
      Complex complex9 = complex2.sin();
      boolean boolean1 = complex4.isInfinite();
      Complex complex10 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.divide(616.24);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ONE.cos();
      ComplexField complexField0 = complex3.ZERO.getField();
      String string0 = complex2.NaN.toString();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.ONE.cos();
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex7.add(616.24);
      Complex complex12 = complex11.I.add(1.512274346576166E-160);
      Complex complex13 = complex11.sqrt1z();
      Complex complex14 = complex6.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1534.0192, (-3989.061151145701));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.INF.pow((-3989.061151145701));
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex2.NaN.sqrt();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex0.multiply(0.37907832860946655);
      int int0 = 0;
      try { 
        complex0.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-179.3492), (-179.3492));
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.INF.pow((-179.3492));
      String string0 = complex0.toString();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex1.NaN.createComplex(0.0, (-179.3492));
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex1.NaN.sqrt1z();
      try { 
        complex2.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(641.7146378297, 641.7146378297);
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.NaN.pow((-1670.6));
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ZERO.subtract(complex3);
      Complex complex5 = complex0.subtract((-7.531570328611));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.ONE;
      try { 
        complex2.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.pow(1.5707963267948966);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.ONE.add((-1070.07572));
      double double2 = complex4.ZERO.abs();
      Complex complex6 = complex4.ONE.add(complex3);
      Complex complex7 = complex6.ZERO.exp();
      double double3 = complex0.getImaginary();
      ComplexField complexField0 = complex6.NaN.getField();
      int int0 = complex2.hashCode();
      Complex complex8 = complex4.NaN.tanh();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      String string0 = complex3.toString();
      Complex complex10 = complex6.cos();
      Complex complex11 = complex10.NaN.multiply(complex5);
      Complex complex12 = complex5.atan();
      double double4 = complex1.abs();
      Complex complex13 = complex7.createComplex(1.0, (-1070.07572));
      ComplexField complexField1 = complex7.getField();
      Complex complex14 = complex1.sqrt();
      Object object1 = complex7.readResolve();
      boolean boolean0 = complex0.equals(object1);
      Complex complex15 = complex8.sqrt();
      Complex complex16 = complex6.cosh();
      Complex complex17 = new Complex(1.0);
      Complex complex18 = complex14.divide(complex17);
      Complex complex19 = complex15.sinh();
      boolean boolean1 = complex19.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2478.5354793926354));
      Complex complex1 = complex0.add(2562.0);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.log();
      double double0 = complex0.NaN.abs();
      Complex complex5 = complex3.NaN.subtract(complex0);
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex1.multiply(2562.0);
      Complex complex8 = complex0.add(complex1);
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex9.cos();
      Complex complex12 = complex4.cos();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex1.acos();
      Object object1 = complex7.readResolve();
      double double1 = complex3.getImaginary();
      Complex complex14 = complex3.INF.exp();
      Complex complex15 = complex4.subtract(complex6);
      Complex complex16 = complex3.subtract((-3612.325804));
      Complex complex17 = complex16.asin();
      Complex complex18 = complex15.NaN.subtract(Double.NaN);
      double double2 = complex13.getReal();
      Complex complex19 = complex10.log();
      Complex complex20 = complex11.subtract(0.0);
      boolean boolean0 = complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1752.0, 1752.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = Complex.valueOf((-2783.114), (-1486.27));
      double double0 = complex0.getArgument();
      String string0 = complex0.ONE.toString();
      Complex complex3 = Complex.valueOf(1752.0, 3968.890045342652);
      String string1 = complex3.toString();
      Complex complex4 = complex3.subtract(3472.8073);
      Complex complex5 = complex0.pow(3472.8073);
      Complex complex6 = complex5.multiply((-811));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2252.4, 1034.0249);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex0.ONE.multiply(complex1);
      Complex complex5 = complex0.pow(1034.0249);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex0.ONE.acos();
      Complex complex8 = complex7.negate();
      boolean boolean0 = complex3.equals("org.apache.commons.math3.complex.Complex");
      Complex complex9 = complex6.pow((-580.4229));
      Complex complex10 = complex9.sin();
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex6.subtract(complex8);
      ComplexField complexField0 = complex10.getField();
      double double0 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(768.92632837, 768.92632837);
      Complex complex1 = complex0.ONE.pow((-2205.77));
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex3.INF.cos();
      Complex complex6 = complex1.multiply((-1224.465651886639));
      double double0 = complex3.getArgument();
      Complex complex7 = complex5.NaN.exp();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex1.subtract(complex5);
      Complex complex10 = complex5.acos();
      Complex complex11 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex0.multiply(2957);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.multiply((-569.02252435));
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex1.negate();
      double double0 = complex4.NaN.getArgument();
      Complex complex7 = complex3.ONE.log();
      Object object0 = complex2.readResolve();
      Complex complex8 = complex1.divide(complex3);
      double double1 = complex8.NaN.abs();
      Complex complex9 = complex2.subtract(complex7);
      Complex complex10 = complex7.pow(complex1);
      Complex complex11 = complex7.sin();
      Complex complex12 = complex10.ONE.tanh();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex13.ONE.log();
      Complex complex15 = complex7.conjugate();
      Complex complex16 = complex15.sqrt();
      Complex complex17 = complex10.cosh();
      Complex complex18 = Complex.valueOf(0.0, Double.NaN);
      boolean boolean0 = complex15.isInfinite();
      Complex complex19 = Complex.valueOf((double) 2957);
      double double2 = complex9.abs();
      boolean boolean1 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(321);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex0.add((double) 321);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.add(0.0);
      Complex complex2 = complex0.divide(0.0);
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex4.ZERO.subtract(0.0);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex4.ZERO.add(complex3);
      Complex complex8 = complex3.ONE.add(0.0);
      boolean boolean0 = complex2.isNaN();
      Complex complex9 = complex2.tan();
      boolean boolean1 = complex3.isInfinite();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.NaN.pow(complex7);
      Complex complex12 = complex2.ONE.multiply(5455);
      Complex complex13 = Complex.valueOf((double) 5455);
      int int0 = (-395);
      try { 
        complex8.nthRoot((-395));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -395
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4122.0, 4122.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex2.multiply(4122.0);
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = complex4.NaN.reciprocal();
      Complex complex7 = complex4.ZERO.pow(complex6);
      Complex complex8 = complex3.I.sqrt1z();
      Complex complex9 = complex7.INF.exp();
      Complex complex10 = complex4.INF.add(complex3);
      Complex complex11 = complex10.ZERO.multiply(complex5);
      Complex complex12 = complex4.conjugate();
      Complex complex13 = complex0.subtract(4122.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2995.90654);
      Complex complex1 = Complex.valueOf(2995.90654, 2995.90654);
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex0.ZERO.asin();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.multiply(2995.90654);
      Complex complex11 = complex9.asin();
      Complex complex12 = complex9.reciprocal();
      boolean boolean0 = complex12.isInfinite();
      double double1 = complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf((-2504.8214));
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(4077.934521046, 4077.934521046);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.I.pow((-2367.141));
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex5.I.createComplex(4077.934521046, 0.0);
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex7 = complex1.divide(4077.934521046);
      double double0 = complex7.ZERO.abs();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex1.sinh();
      String string0 = complex9.toString();
      Complex complex10 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = complex1.ZERO.asin();
      Complex complex7 = complex0.createComplex((-646.956), (-646.956));
      Complex complex8 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.multiply((-1));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex0.INF.subtract(complex3);
      double double0 = complex0.getReal();
      Complex complex6 = complex0.divide(Double.NaN);
      double double1 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-738.96222));
      Complex complex1 = complex0.createComplex((-738.96222), (-738.96222));
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex0.conjugate();
      boolean boolean0 = complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ONE.multiply((-907));
      Complex complex4 = complex0.reciprocal();
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex4.multiply((double) (-907));
      Complex complex7 = complex0.multiply((double) (-907));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ZERO.tan();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-1036.1209), (-1036.1209));
      double double0 = complex0.abs();
      Complex complex1 = complex0.ONE.divide(1.7578073785142153E246);
      Complex complex2 = complex0.createComplex(1466.3, 1465.2962290382172);
      Complex complex3 = complex2.sinh();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex2.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.subtract(complex4);
      double double2 = complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf((-315.5606425), 0.0);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex1.getImaginary();
      Object object0 = complex0.ONE.readResolve();
      String string1 = complex1.toString();
      Object object1 = complex0.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.sqrt();
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(98.4);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1095.24799353575));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.ONE.multiply(2397);
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.multiply((-1095.24799353575));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = Complex.valueOf(0.0, 31.516);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex0.cos();
      int int0 = complex4.hashCode();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.log();
      Complex complex8 = complex6.add(complex1);
      Complex complex9 = Complex.I;
      Complex complex10 = complex5.ZERO.tanh();
      Complex complex11 = complex5.divide(complex9);
      Complex complex12 = complex11.I.subtract(complex6);
      Complex complex13 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow(2043.60265786);
      Complex complex2 = complex0.reciprocal();
      boolean boolean0 = complex2.isInfinite();
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.divide(8.688424478730524E-9);
      try { 
        complex1.nthRoot((-2742));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,742
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1847.0831795245);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0, (-730.858079));
      Complex complex3 = complex2.multiply(0.32623589038848877);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.pow(1847.0831795245);
      Complex complex6 = complex4.ZERO.add(complex3);
      Complex complex7 = complex4.multiply((-3429.18950881));
      Complex complex8 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1168.256077661));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(4243.4621782, 4243.4621782);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-261.3389006457));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.INF.multiply(1);
      Complex complex5 = complex0.ZERO.pow(1.3115046679980076E-8);
      double double0 = complex0.getImaginary();
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.ONE.sqrt();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.ONE.sinh();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1229.3293177708922));
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex3.multiply(37);
      Complex complex6 = complex2.divide(complex0);
      Object object0 = complex1.readResolve();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-101.0), (-101.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex1.add((-725.393));
      double double0 = complex2.abs();
      double double1 = complex5.getReal();
      Complex complex6 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide((-684.826022473508));
      Complex complex3 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.I.add(complex1);
      double double0 = 1745.245;
      Complex complex4 = complex3.I.acos();
      try { 
        complex3.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.sqrt1z();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex3.getImaginary();
      Complex complex4 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = Complex.valueOf((-1384.326574577254), 0.0);
      Complex complex3 = complex1.INF.tan();
      boolean boolean0 = complex0.equals(", ");
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1773.94));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(98.4);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2646.92253339, 2646.92253339);
      Complex complex1 = complex0.NaN.multiply(8.528268445871411E254);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex2.multiply(2646.92253339);
      double double0 = complex2.getArgument();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.pow(0.0);
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.acos();
      boolean boolean0 = complex4.isNaN();
      Complex complex7 = complex3.multiply(0);
      boolean boolean1 = complex1.isNaN();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex8.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex2.INF.cosh();
      Complex complex6 = complex0.createComplex(0.0, 0.0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.add(complex6);
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex9.I.sin();
      Complex complex11 = complex4.atan();
      Complex complex12 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-235.4953407));
      Complex complex1 = complex0.ZERO.multiply(1);
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex0.ZERO.divide((-235.4953407));
      double double1 = complex1.INF.abs();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.ONE.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex0.createComplex(1, 1);
      Complex complex6 = complex1.I.exp();
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex5.tan();
      int int0 = complex1.hashCode();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.INF.multiply(1);
      Complex complex11 = complex10.I.divide((double) 1);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex9.ZERO.log();
      Complex complex14 = Complex.valueOf((-1.0));
      Complex complex15 = complex12.NaN.pow(complex14);
      boolean boolean0 = complex8.isInfinite();
      Complex complex16 = complex12.multiply(2120);
      Complex complex17 = complex9.cos();
      double double2 = complex11.getImaginary();
      double double3 = complex5.abs();
      Complex complex18 = complex2.cosh();
      Complex complex19 = complex18.sqrt1z();
      Complex complex20 = complex17.ZERO.pow(complex11);
      boolean boolean1 = complex5.equals(complex11);
      Complex complex21 = complex17.sqrt();
      Complex complex22 = complex21.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(759.82, 759.82);
      Complex complex1 = Complex.valueOf(20.0, 759.82);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.I.multiply(211.5521277586978);
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex0.multiply(759.82);
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex3.cosh();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1967.329602098496);
      Complex complex1 = complex0.subtract(1967.329602098496);
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.valueOf(0.49686139822006226);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.valueOf(420.66, 8.013164089994031E46);
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex2.multiply(0);
      Complex complex7 = complex6.I.negate();
      Complex complex8 = complex0.sqrt1z();
      int int0 = (-640);
      try { 
        complex8.ZERO.nthRoot((-640));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -640
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(1811.02413284, (-1833.8690460915816));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      int int0 = complex0.ONE.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      String string0 = complex4.toString();
      List<Complex> list0 = complex0.nthRoot(892);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.add((-20.0));
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.valueOf((-20.0));
      Object object0 = complex8.INF.readResolve();
      Complex complex9 = complex7.ONE.acos();
      Complex complex10 = complex9.INF.divide(complex6);
      Complex complex11 = complex7.ZERO.multiply((double) 892);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex3.negate();
      Complex complex14 = complex2.subtract((double) 892);
      Complex complex15 = complex4.divide(0.0);
      List<Complex> list1 = complex15.NaN.nthRoot(892);
      Complex complex16 = Complex.valueOf((-20.0), (-319.24328));
      boolean boolean0 = complex0.equals(complex4);
      Complex complex17 = Complex.valueOf(1811.02413284, (-30.010972));
      Complex complex18 = Complex.valueOf((double) 892, (-30.010972));
      Complex complex19 = complex11.asin();
      Complex complex20 = Complex.valueOf((-20.0), 0.0);
  }
}
