/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:49:19 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.sinh();
      boolean boolean0 = complex0.equals("I/HX?9#");
      Complex complex3 = complex1.I.log();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex8.I.negate();
      int int0 = 2045222521;
      Complex complex10 = complex3.I.subtract(complex4);
      String string0 = complex10.INF.toString();
      // Undeclared exception!
      complex6.ONE.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1.38336616));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.reciprocal();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex2.subtract((-1.38336616));
      double double0 = 0.0;
      Complex complex4 = complex3.NaN.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = Complex.valueOf((-1.38336616), 0.0);
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex8.INF.multiply(870);
      Complex complex10 = complex2.INF.add(complex0);
      String string0 = complex9.INF.toString();
      Complex complex11 = complex10.ONE.multiply((double) 870);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex9.I.pow(complex2);
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex14.ONE.cosh();
      int int1 = (-178);
      try { 
        complex1.NaN.nthRoot((-178));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex0.sinh();
      int int0 = complex0.I.hashCode();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.NaN.subtract((-645.5997974975171));
      Complex complex6 = complex4.divide(complex0);
      Complex complex7 = complex4.atan();
      Complex complex8 = Complex.valueOf(0.0);
      double double0 = complex6.getImaginary();
      boolean boolean0 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.pow(0.567397952079773);
      Complex complex3 = complex2.INF.subtract(1008.5468251046);
      Complex complex4 = complex0.INF.exp();
      Object object0 = complex0.I.readResolve();
      Complex complex5 = complex0.I.reciprocal();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex4.createComplex(0.0, 0.0);
      double double0 = complex8.abs();
      Complex complex9 = complex8.add(1.4251641388208515E-21);
      double double1 = complex4.abs();
      Complex complex10 = complex4.sqrt();
      Complex complex11 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex12 = complex11.INF.add(complex5);
      double double2 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3.735333866258403E-239, 3.735333866258403E-239);
      Complex complex1 = complex0.createComplex(1.5979955196380615, 1.5979955196380615);
      Complex complex2 = new Complex(0.0, 6.283185307179586);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.INF.asin();
      double double0 = complex3.getArgument();
      Complex complex5 = complex2.add((-274.94931));
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.cosh();
      int int0 = complex7.ZERO.hashCode();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1246.63241294), (-1246.63241294));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = Complex.valueOf((-99.541684));
      Complex complex4 = Complex.valueOf((-99.541684), (-99.541684));
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.INF.divide((-99.541684));
      Complex complex8 = complex7.NaN.divide((-199.93885163420833));
      Complex complex9 = complex6.ONE.negate();
      Complex complex10 = complex4.INF.add((-1246.63241294));
      Complex complex11 = Complex.valueOf((-1246.63241294), (-589.8735010674861));
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex12.NaN.subtract(complex4);
      try { 
        complex12.ZERO.nthRoot((-773));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -773
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1045.08);
      Complex complex2 = complex0.INF.subtract(Double.NaN);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.ONE.multiply(0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex3.I.acos();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex0.INF.log();
      Complex complex9 = complex8.pow(complex3);
      Complex complex10 = complex8.tan();
      Complex complex11 = complex7.NaN.asin();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex11.I.pow(complex12);
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex2.negate();
      Complex complex16 = Complex.valueOf((-2127.60352652), 1045.08);
      Complex complex17 = Complex.valueOf((double) 0);
      Complex complex18 = complex11.negate();
      Complex complex19 = complex7.exp();
      Complex complex20 = Complex.valueOf(Double.NaN);
      Complex complex21 = complex15.sinh();
      Complex complex22 = complex0.sinh();
      boolean boolean0 = complex17.isInfinite();
      Complex complex23 = complex21.divide(complex14);
      List<Complex> list0 = complex23.nthRoot(223);
      Complex complex24 = Complex.INF;
      Complex complex25 = complex23.add(complex24);
      Complex complex26 = complex23.acos();
      Complex complex27 = complex26.NaN.pow(complex18);
      Complex complex28 = complex2.tan();
      Complex complex29 = complex28.multiply(complex8);
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-200.439163052559), (-200.439163052559));
      List<Complex> list0 = complex0.I.nthRoot(2619);
      Complex complex1 = complex0.INF.asin();
      int int0 = complex0.hashCode();
      double double0 = complex0.getReal();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.log();
      double double0 = complex4.NaN.abs();
      int int0 = complex3.hashCode();
      Complex complex5 = complex4.subtract((-137.96604510347));
      double double1 = complex5.getReal();
      Object object0 = complex5.I.readResolve();
      double double2 = complex4.getArgument();
      Complex complex6 = complex3.sqrt();
      List<Complex> list0 = complex6.nthRoot(881);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex5.pow(Double.NaN);
      Complex complex8 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1753.995412);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = complex1.add(1753.995412);
      Complex complex6 = complex4.I.log();
      Complex complex7 = complex3.NaN.subtract((-714.1254377992));
      List<Complex> list0 = complex3.NaN.nthRoot(2291);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex1.sqrt1z();
      String string0 = complex0.toString();
      boolean boolean0 = complex4.isNaN();
      int int0 = complex3.hashCode();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex10.negate();
      Complex complex12 = complex2.add((double) 2291);
      Complex complex13 = complex4.cos();
      Complex complex14 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(0.0);
      Complex complex3 = complex2.NaN.add(complex0);
      double double0 = complex1.I.getArgument();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.add(1841.56139);
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = Complex.ONE;
      boolean boolean0 = complex4.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1880.16838970125), (-1880.16838970125));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.multiply((-1880.16838970125));
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex0.INF.log();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex1.subtract((-1240.183887296));
      List<Complex> list0 = complex8.NaN.nthRoot(3225);
      Complex complex9 = complex7.createComplex(0.0, 0.0);
      Complex complex10 = complex9.sqrt1z();
      double double0 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2119.82));
      Complex complex1 = complex0.add(4692.4019883816);
      Complex complex2 = complex1.ZERO.multiply((-2119.82));
      Complex complex3 = Complex.valueOf(0.0, 4498.280254263015);
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex0.ONE.asin();
      Complex complex7 = Complex.valueOf(4692.4019883816, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(0.0, 4692.4019883816);
      double double0 = complex1.abs();
      Complex complex9 = complex7.I.sinh();
      double double1 = complex7.getImaginary();
      Complex complex10 = complex7.conjugate();
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex7.getField();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ZERO.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      Object object1 = complex0.readResolve();
      ComplexField complexField1 = complex0.NaN.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.multiply(1);
      boolean boolean0 = complex0.equals(object1);
      double double0 = complex0.getReal();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = Complex.valueOf(2507.96, (-4046.8637642355234));
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.NaN.multiply((-2121));
      Complex complex8 = complex7.NaN.divide((-4046.8637642355234));
      Complex complex9 = complex8.I.cosh();
      int int0 = complex9.I.hashCode();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.ONE.sqrt();
      int int1 = complex10.ZERO.hashCode();
      Complex complex12 = complex10.INF.subtract(complex1);
      Complex complex13 = complex1.acos();
      Complex complex14 = complex13.INF.sqrt1z();
      Complex complex15 = Complex.valueOf(1.172548532485962, (-1448.3705231));
      int int2 = complex1.hashCode();
      Complex complex16 = complex13.sqrt1z();
      double double1 = complex12.getImaginary();
      Complex complex17 = complex10.atan();
      Complex complex18 = complex15.cos();
      Complex complex19 = complex14.pow(3221.4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 8.426174035728768E257);
      Complex complex1 = complex0.atan();
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.I.add(8.426174035728768E257);
      Complex complex5 = complex1.createComplex(8.426174035728768E257, 0.0);
      Complex complex6 = complex1.NaN.asin();
      double double0 = complex1.abs();
      Complex complex7 = complex0.multiply(0.0);
      String string0 = complex1.toString();
      boolean boolean0 = complex1.isNaN();
      Complex complex8 = complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.I.multiply((-20.0));
      Complex complex3 = complex1.add(0.0);
      double double0 = 3871.354899844;
      Complex complex4 = Complex.valueOf((-20.0), 3871.354899844);
      Complex complex5 = complex0.add(3871.354899844);
      Complex complex6 = complex5.exp();
      int int0 = complex5.hashCode();
      int int1 = (-1048);
      try { 
        complex6.ONE.nthRoot((-1048));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,048
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-821.95439));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = Complex.valueOf((-821.95439));
      Complex complex5 = complex4.I.divide((-821.95439));
      Complex complex6 = complex2.NaN.add((-821.95439));
      String string0 = complex3.NaN.toString();
      Complex complex7 = complex0.pow(complex4);
      Complex complex8 = Complex.valueOf((-821.95439), (-821.95439));
      Complex complex9 = Complex.valueOf((-196.29169), 0.0);
      Complex complex10 = complex9.ZERO.atan();
      Complex complex11 = complex3.log();
      ComplexField complexField0 = complex4.getField();
      Complex complex12 = complex9.NaN.negate();
      Complex complex13 = complex8.NaN.sqrt();
      Complex complex14 = complex3.sqrt();
      Complex complex15 = complex4.sqrt();
      Complex complex16 = complex8.cos();
      Complex complex17 = complex8.sqrt();
      Complex complex18 = complex17.pow(0.0);
      Complex complex19 = complex10.divide(complex3);
      Complex complex20 = complex5.tan();
      Complex complex21 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 2854.4564;
      Complex complex0 = Complex.valueOf(2854.4564);
      double double1 = complex0.getReal();
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-2196.025169));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.createComplex(3.141592653589793, (-2196.025169));
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.multiply(complex0);
      double double1 = complex2.getImaginary();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.valueOf((-2338.46043248), 3.141592653589793);
      String string0 = complex0.toString();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex5.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.ZERO.multiply(0.6588751077651978);
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex0.I.createComplex((-380.001), (-380.001));
      ComplexField complexField0 = complex2.I.getField();
      Complex complex6 = complex0.tan();
      double double0 = complex0.abs();
      Complex complex7 = complex0.pow(complex2);
      double double1 = complex7.getArgument();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex1.createComplex((-380.001), (-7.875434494414498E-9));
      Complex complex10 = complex9.NaN.log();
      Complex complex11 = complex5.pow(1.0);
      Complex complex12 = complex11.exp();
      double double2 = complex7.abs();
      Complex complex13 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex6.negate();
      double double0 = complex0.getReal();
      Complex complex8 = complex6.multiply(complex3);
      Complex complex9 = complex0.atan();
      ComplexField complexField0 = complex2.getField();
      Complex complex10 = complex1.ONE.multiply((-20.0));
      Complex complex11 = Complex.valueOf(153.32404079754116);
      Complex complex12 = complex7.pow(20.0);
      Complex complex13 = complex0.atan();
      Complex complex14 = complex0.asin();
      boolean boolean0 = complex7.equals(complex8);
      Object object0 = new Object();
      try { 
        complex8.nthRoot((-762));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -762
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.asin();
      boolean boolean0 = complex1.equals(complex4);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex0.tan();
      ComplexField complexField0 = complex3.getField();
      boolean boolean1 = complex3.equals(complexField0);
      Complex complex7 = Complex.valueOf((-555.5), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex0.NaN.multiply(753.3745475702999);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex7.I.subtract(complex6);
      Complex complex9 = complex0.tan();
      double double0 = complex6.NaN.abs();
      double double1 = 1.777477741241455;
      Complex complex10 = complex6.NaN.multiply(1.777477741241455);
      Complex complex11 = complex9.I.reciprocal();
      Complex complex12 = complex7.pow(complex3);
      try { 
        complex10.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1904.7164067));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex2.ONE.sqrt();
      double double0 = complex2.ZERO.abs();
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex5.NaN.subtract(0.0);
      Complex complex8 = complex0.negate();
      double double1 = complex0.getReal();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex5.INF.subtract(complex7);
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex0.pow(1130.456);
      Complex complex13 = complex1.multiply(598);
      Complex complex14 = complex6.divide(complex2);
      Complex complex15 = Complex.valueOf(1130.456, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.negate();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.ZERO.conjugate();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex0.ZERO.subtract(complex2);
      Complex complex6 = complex3.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex7 = complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.I.createComplex(0.0, 0.0);
      double double0 = complex4.I.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2641.98), 4.5604151934208014E-10);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.NaN.negate();
      int int0 = complex0.INF.hashCode();
      Complex complex3 = complex1.NaN.multiply(0);
      int int1 = complex3.ONE.hashCode();
      double double0 = complex0.I.getArgument();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex0.reciprocal();
      boolean boolean0 = complex10.isNaN();
      boolean boolean1 = complex2.isNaN();
      Complex complex11 = complex6.add(complex2);
      Complex complex12 = complex8.subtract(complex11);
      Complex complex13 = complex2.tan();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex14.cosh();
      Complex complex16 = complex14.acos();
      double double1 = complex11.getImaginary();
      Complex complex17 = complex8.sin();
      Complex complex18 = complex8.createComplex(4.5604151934208014E-10, 20.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1426.255402283);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = Complex.valueOf((-2697.554430809113), 1426.255402283);
      String string0 = complex2.ZERO.toString();
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex5.negate();
      Object object0 = complex2.readResolve();
      Complex complex9 = complex0.NaN.sqrt();
      boolean boolean1 = complex4.isInfinite();
      Object object1 = complex0.INF.readResolve();
      Complex complex10 = complex1.createComplex((-685.9888797744212), 1.7177785285061278E-7);
      Complex complex11 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-139.3823010387), (-139.3823010387));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.reciprocal();
      double double0 = complex2.NaN.getArgument();
      Complex complex3 = complex1.add(0.0);
      List<Complex> list0 = complex1.nthRoot(2840);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), 2.757030889767851E-8);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2242.21, 2242.21);
      String string0 = complex0.toString();
      Complex complex1 = complex0.I.createComplex(2242.21, 2242.21);
      Complex complex2 = complex0.divide(2242.21);
      Complex complex3 = complex2.atan();
      String string1 = complex3.NaN.toString();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex6.log();
      Complex complex8 = complex0.createComplex(2242.21, (-1379.03));
      ComplexField complexField0 = complex8.I.getField();
      Complex complex9 = complex8.multiply((-1379.03));
      Complex complex10 = complex1.tan();
      Complex complex11 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1212.4, (-984.125768486));
      Complex complex1 = Complex.valueOf(0.0, 1212.4);
      Complex complex2 = complex1.INF.exp();
      List<Complex> list0 = complex0.nthRoot(650);
      double double0 = complex0.abs();
      double double1 = complex2.NaN.getArgument();
      double double2 = complex0.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex3.ONE.cosh();
      double double3 = complex5.INF.abs();
      Complex complex6 = Complex.valueOf(202.2);
      Complex complex7 = complex0.INF.multiply(1);
      Complex complex8 = complex2.divide(complex0);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex4.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-781.048), (-781.048));
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex1.pow((-781.048));
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex0.pow((-324.3356));
      Complex complex6 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.ONE.subtract((-2886.732043));
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex0.divide((-724.510641899251));
      Complex complex6 = complex5.I.negate();
      Object object0 = complex0.readResolve();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex5.ZERO.sinh();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex6.negate();
      double double0 = complex9.ONE.getArgument();
      Object object1 = complex10.ZERO.readResolve();
      Complex complex11 = complex10.ZERO.add(complex6);
      double double1 = complex9.getArgument();
      ComplexField complexField0 = complex5.getField();
      boolean boolean0 = complex9.isNaN();
      boolean boolean1 = complex9.isNaN();
      Complex complex12 = complex9.cosh();
      Complex complex13 = complex9.pow(complex10);
      double double2 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(409.585612828);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.I.add(409.585612828);
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex1.ONE.subtract(2253.1131651879);
      Complex complex6 = complex4.NaN.sqrt1z();
      Complex complex7 = complex0.pow(9.975892708522332E-8);
      Complex complex8 = complex7.NaN.cosh();
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex0.add(complex4);
      double double0 = complex11.getReal();
      Complex complex12 = complex1.NaN.sqrt();
      Complex complex13 = complex4.subtract(123.529);
      Complex complex14 = complex4.pow(complex13);
      Complex complex15 = complex0.sin();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.tanh();
      double double0 = complex0.getImaginary();
      double double1 = 0.0;
      try { 
        complex0.nthRoot((-3022));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,022
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1348.1750066980776);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ONE.divide(complex3);
      Complex complex6 = complex4.ONE.add(0.0);
      Complex complex7 = complex3.multiply(complex1);
      Complex complex8 = complex2.ZERO.tan();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf(0.0, 533.3374);
      Complex complex5 = complex3.NaN.add(complex4);
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.subtract(complex0);
      Complex complex9 = complex1.multiply(complex3);
      Complex complex10 = complex5.add(complex6);
      double double0 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      Complex complex5 = complex0.subtract(1.2493910789489746);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2808.97371);
      Complex complex1 = new Complex((-152.26), (-152.26));
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.multiply(1272);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex0.readResolve();
      Object object1 = complex1.NaN.readResolve();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.atan();
      double double0 = complex4.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.acos();
      double double1 = complex1.getImaginary();
      Complex complex7 = complex5.multiply(complex1);
      double double2 = complex7.I.abs();
      boolean boolean1 = complex5.isInfinite();
      Complex complex8 = complex7.I.tanh();
      Complex complex9 = complex2.add(0.0);
      Complex complex10 = complex7.multiply(169);
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex4.createComplex((-755.5151440019852), 1.4578359127044678);
      Complex complex13 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-714.4838), (-714.4838));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.add((-3703.2627));
      Complex complex3 = complex1.ZERO.pow(complex0);
      double double0 = complex0.getReal();
      Complex complex4 = complex3.ONE.subtract((-714.4838));
      Complex complex5 = complex4.I.tanh();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.abs();
      Complex complex6 = complex3.divide(complex0);
      Complex complex7 = complex3.subtract((-57.471588121873));
      Complex complex8 = Complex.valueOf((-714.4838));
      Complex complex9 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.subtract((-893.8));
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex3.multiply(complex1);
      Complex complex7 = complex1.pow((-893.8));
      Object object0 = complex1.readResolve();
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-83.31316), 2.174860642202632E-8);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.ZERO.sqrt();
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.log();
      ComplexField complexField1 = complex1.INF.getField();
      Complex complex7 = complex1.INF.multiply(complex6);
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex6.NaN.add(complex2);
      Object object0 = new Object();
      boolean boolean0 = complex6.equals(object0);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex5.negate();
      Complex complex13 = complex11.divide(4121.6100639070055);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Object object0 = complex0.INF.readResolve();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex0.I.createComplex(20.0, (-3748.2));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex3.ZERO.negate();
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex6.NaN.reciprocal();
      ComplexField complexField0 = complex3.getField();
      Complex complex8 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.reciprocal();
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex1.NaN.subtract(complex0);
      Complex complex5 = Complex.valueOf(2852.1522250930598, Double.NaN);
      Object object0 = complex1.readResolve();
      Complex complex6 = complex1.pow(Double.NaN);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.NaN.divide(0.0);
      Complex complex4 = complex0.multiply(1767);
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex0.ZERO.pow(complex2);
      Complex complex7 = complex2.cos();
      double double0 = complex1.getReal();
      double double1 = complex2.abs();
      Complex complex8 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.ONE.exp();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.ONE.multiply(complex5);
      Complex complex8 = complex7.ZERO.createComplex(2.0, (-56.07317805881));
      Object object0 = complex1.readResolve();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.negate();
      String string0 = complex1.NaN.toString();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.ZERO.conjugate();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex3.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract((-6.480706118857055E-9));
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.I.atan();
      Complex complex5 = complex2.NaN.cos();
      Complex complex6 = new Complex(0.0, 2321.099627576645);
      Complex complex7 = complex5.I.pow(complex6);
      Complex complex8 = complex5.subtract(complex1);
      double double0 = complex2.I.getArgument();
      int int0 = complex2.hashCode();
      Complex complex9 = complex1.add((-6.480706118857055E-9));
      double double1 = complex9.ZERO.abs();
      double double2 = complex1.abs();
      Complex complex10 = complex3.cosh();
      boolean boolean0 = complex9.isNaN();
      double double3 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = Complex.valueOf((-3122.642344475068), (-3122.642344475068));
      Complex complex4 = complex0.ONE.createComplex(0.0, (-3122.642344475068));
      double double0 = complex0.abs();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.conjugate();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex2.isNaN();
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1770.4914784, 2475.0);
      Complex complex1 = complex0.INF.acos();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.multiply((-1117));
      Complex complex3 = complex2.subtract((-1.0));
      Complex complex4 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.pow(0.0);
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2236.185377663902));
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.valueOf(2269.16996458);
      double double0 = complex0.getImaginary();
      double double1 = complex0.getImaginary();
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.ZERO.pow(complex1);
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.multiply(527);
      ComplexField complexField0 = complex6.getField();
      Complex complex8 = complex3.createComplex(2.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.219508285637377E-115);
      Complex complex1 = complex0.ZERO.multiply(617);
      Complex complex2 = complex0.ONE.asin();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      double double0 = complex1.abs();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex3.INF.divide(Double.NaN);
      ComplexField complexField0 = complex2.ONE.getField();
      try { 
        complex1.INF.nthRoot((-3331));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,331
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ONE.tanh();
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.acos();
      boolean boolean1 = complex1.isInfinite();
      Complex complex4 = complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.multiply(382.0);
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.tanh();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.multiply(2126);
      Complex complex3 = complex2.multiply(129.1575275319912);
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.NaN.tanh();
      List<Complex> list0 = complex6.nthRoot(2126);
      Complex complex8 = complex6.sin();
      Complex complex9 = Complex.valueOf((double) 2126, 1191.391306523);
      Complex complex10 = complex8.tanh();
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.multiply(0.0);
      String string0 = complex0.toString();
      Complex complex2 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.log();
      ComplexField complexField0 = complex0.ONE.getField();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.cos();
      int int0 = complex0.hashCode();
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex0.I.negate();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(605.3553941);
      int int0 = complex0.INF.hashCode();
      int int1 = complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, 605.3553941);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.ONE.createComplex(605.3553941, 0.0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.INF.atan();
      Complex complex9 = complex2.pow(complex0);
      Complex complex10 = complex0.acos();
      Complex complex11 = complex1.divide((-1680.4));
      double double0 = complex11.abs();
      Complex complex12 = complex1.divide(86.75209);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-409.77725), (-409.77725));
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sin();
      double double0 = (-1.0);
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex4.INF.negate();
      double double1 = complex6.NaN.abs();
      String string0 = complex6.ONE.toString();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex3.NaN.sqrt1z();
      Complex complex10 = complex7.NaN.atan();
      Complex complex11 = Complex.valueOf((-1.0));
      Complex complex12 = complex2.INF.pow(complex1);
      try { 
        complex1.I.nthRoot((-496));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -496
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.multiply((-4402));
      Complex complex3 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.ZERO.getArgument();
      double double1 = complex0.NaN.abs();
      Complex complex1 = complex0.ZERO.divide(5.390620378060543E-9);
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.NaN.atan();
      double double2 = complex4.NaN.getArgument();
      Complex complex5 = complex1.I.createComplex(0.0, 2908.206122);
      Complex complex6 = complex2.I.reciprocal();
      double double3 = complex0.getArgument();
      double double4 = complex0.getReal();
      Complex complex7 = complex0.sqrt();
      double double5 = complex1.getReal();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = Complex.valueOf(5.390620378060543E-9, (-2966.92));
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex12.ONE.tan();
      Complex complex14 = complex13.INF.multiply(complex8);
      int int0 = complex1.hashCode();
      Complex complex15 = Complex.valueOf(0.0, 0.0);
      double double6 = complex7.getReal();
      Complex complex16 = complex5.log();
      Complex complex17 = complex12.multiply((-660));
      Complex complex18 = complex11.sqrt();
      Complex complex19 = complex6.cos();
      Complex complex20 = complex13.multiply(0);
      Complex complex21 = complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.add(0.0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex2 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = Complex.valueOf(0.0, 724.5);
      Complex complex7 = complex5.ZERO.divide(complex6);
      Complex complex8 = Complex.valueOf(2657.84, 2657.84);
      Object object0 = complex8.INF.readResolve();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      String string0 = complex0.toString();
      double double0 = complex4.getArgument();
      Complex complex10 = complex5.multiply(1407.9274354516183);
      Complex complex11 = complex8.multiply((-701.643));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1147.96));
      Complex complex1 = complex0.NaN.subtract((-3849.27006470606));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex3.I.add(complex5);
      Complex complex7 = complex2.ZERO.divide(5530.5);
      List<Complex> list0 = complex3.nthRoot(454);
      Complex complex8 = complex5.NaN.subtract((-862.1));
      Complex complex9 = complex0.add((-1949.5188));
      Complex complex10 = complex6.subtract(5530.5);
      Complex complex11 = complex5.tan();
      Complex complex12 = complex2.pow((double) 454);
      List<Complex> list1 = complex12.nthRoot(357);
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex10.createComplex(3163.68960985308, 454);
      Complex complex15 = complex14.INF.sinh();
      ComplexField complexField0 = complex5.getField();
      Complex complex16 = complex0.sqrt();
      Complex complex17 = complex10.tan();
      int int0 = complex11.hashCode();
      Complex complex18 = Complex.valueOf(0.46424978971481323, 0.46424978971481323);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.divide(complex0);
      String string0 = complex2.I.toString();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex2.NaN.atan();
      double double0 = complex4.NaN.getArgument();
      double double1 = complex0.getReal();
      Complex complex5 = complex0.createComplex((-1968.83859), Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.subtract(1454.852629);
      Complex complex7 = complex0.subtract((-1195.8202012867));
      Complex complex8 = complex7.cos();
      Complex complex9 = complex0.divide(311.4440201985667);
      Complex complex10 = complex9.INF.pow(3.947457923821984E-183);
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex3.I.conjugate();
      Complex complex13 = complex9.asin();
      Complex complex14 = complex0.divide(311.4440201985667);
      Complex complex15 = complex14.NaN.multiply(0);
      Complex complex16 = complex14.I.pow(3.947457923821984E-183);
      Complex complex17 = complex3.sqrt();
      Complex complex18 = complex17.ZERO.sqrt();
      Complex complex19 = complex3.asin();
      double double2 = complex19.getReal();
      int int0 = complex3.hashCode();
      Complex complex20 = complex19.add(0.0);
      Complex complex21 = complex19.pow(0.6441128253936768);
      ComplexField complexField0 = complex0.getField();
      Complex complex22 = Complex.valueOf(311.4440201985667, (-1968.83859));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 1.5886595249176025;
      Complex complex1 = complex0.INF.subtract(1.5886595249176025);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf((-2441.3926028362), 0.0);
      int int0 = 0;
      Complex complex6 = complex5.ZERO.asin();
      try { 
        complex5.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 3013.55058449);
      Complex complex1 = complex0.I.subtract(3013.55058449);
      Complex complex2 = complex0.divide(2.0);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex2.I.atan();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.I.divide(complex4);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex8.NaN.divide(complex4);
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
      Complex complex10 = complex6.createComplex(1012.223, (-2475.0026276836));
      ComplexField complexField0 = complex1.getField();
      Complex complex11 = complex6.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex3.I.add((-587.5));
      Complex complex6 = complex5.INF.subtract(539.561595636);
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex6.INF.sin();
      Complex complex9 = complex6.reciprocal();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex2.NaN.tanh();
      Complex complex12 = complex10.NaN.log();
      int int0 = complex12.I.hashCode();
      double double0 = complex1.getArgument();
      Complex complex13 = complex0.subtract(539.561595636);
      Complex complex14 = complex4.NaN.cos();
      Complex complex15 = complex12.atan();
      Complex complex16 = complex0.NaN.cos();
      Complex complex17 = complex12.add(complex5);
      Complex complex18 = complex10.INF.pow(complex0);
      Complex complex19 = complex10.multiply(complex17);
      int int1 = complex4.hashCode();
      Complex complex20 = complex2.cos();
      Complex complex21 = complex20.atan();
      Complex complex22 = complex21.asin();
      double double1 = complex17.abs();
      Complex complex23 = complex4.exp();
      double double2 = complex13.getArgument();
      Complex complex24 = complex16.exp();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ONE.atan();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.NaN.divide(Double.NaN);
      Complex complex4 = complex0.INF.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = complex2.NaN.multiply(complex0);
      int int0 = complex5.INF.hashCode();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.ONE.sin();
      Complex complex8 = complex2.ZERO.atan();
      Complex complex9 = complex6.INF.atan();
      Object object1 = complex9.INF.readResolve();
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = new Complex(Double.NaN, 1954);
      Complex complex12 = complex10.I.subtract(complex11);
      List<Complex> list0 = complex0.nthRoot(1954);
      Complex complex13 = complex2.tan();
      double double0 = complex13.getImaginary();
      Complex complex14 = complex7.add((double) 1954);
      Complex complex15 = complex2.I.pow(complex6);
      double double1 = complex7.getArgument();
      Complex complex16 = complex14.pow(2.0483260435783403E-214);
      Complex complex17 = complex16.I.subtract(complex6);
      boolean boolean0 = complex13.isInfinite();
      int int1 = complex1.hashCode();
  }
}
