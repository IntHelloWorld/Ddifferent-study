/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:56:28 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(0.0);
      double double1 = complex0.getReal();
      Complex complex3 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = Complex.valueOf((-1.2281487504266522E-8), 5013.78612);
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex1.I.subtract((-3685.992474772175));
      Complex complex4 = complex0.INF.createComplex(3564.16601, (-3685.992474772175));
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex4.I.exp();
      List<Complex> list0 = complex6.ONE.nthRoot(1);
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      double double0 = complex8.ZERO.getArgument();
      Complex complex9 = complex8.ZERO.add(complex0);
      Complex complex10 = complex0.I.sinh();
      Complex complex11 = complex0.multiply(1);
      Complex complex12 = complex10.log();
      Complex complex13 = complex12.ZERO.multiply((double) 1);
      ComplexField complexField0 = complex12.NaN.getField();
      Complex complex14 = complex1.INF.multiply((-1));
      Complex complex15 = complex12.ONE.divide(complex4);
      ComplexField complexField1 = complex8.getField();
      Complex complex16 = complex1.reciprocal();
      Complex complex17 = complex16.divide(complex4);
      Complex complex18 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(888.8721359463293, 8886110.0);
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.ZERO.divide(8886110.0);
      Complex complex2 = complex0.sqrt1z();
      double double0 = complex2.NaN.abs();
      Complex complex3 = Complex.valueOf(3247.8831945817, 3247.8831945817);
      Complex complex4 = complex1.ONE.add(complex3);
      Complex complex5 = complex3.ZERO.tanh();
      Complex complex6 = complex3.multiply(357);
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.ZERO.sqrt1z();
      Complex complex9 = complex1.add(Double.NaN);
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex0.NaN.log();
      Complex complex12 = complex9.subtract((-6.329342805230603E-8));
      Complex complex13 = complex1.sinh();
      List<Complex> list0 = complex5.nthRoot(1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex14 = complex8.multiply(357);
      Complex complex15 = complex13.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2413.67), (-2413.67));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex3 = complex2.subtract(461.3221353);
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.NaN.exp();
      Complex complex7 = complex5.INF.sqrt();
      Complex complex8 = complex2.ZERO.multiply(complex0);
      Complex complex9 = complex0.createComplex(461.3221353, 0.0);
      Complex complex10 = complex3.ZERO.tan();
      String string0 = complex5.toString();
      String string1 = complex0.toString();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1433.61782964);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex4.NaN.cosh();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex1.INF.multiply(26);
      Complex complex10 = complex3.sin();
      Complex complex11 = complex1.pow(complex4);
      Complex complex12 = complex0.sinh();
      Object object0 = complex8.readResolve();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.INF.sqrt1z();
      try { 
        complex14.I.nthRoot((-690));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -690
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-898.45));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(Double.NaN);
      Complex complex3 = complex0.ONE.atan();
      Complex complex4 = complex0.ONE.negate();
      Complex complex5 = complex3.ZERO.tan();
      List<Complex> list0 = complex5.ONE.nthRoot(130);
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.conjugate();
      boolean boolean0 = complex5.equals(complex7);
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex8.multiply(1573.2042601);
      Complex complex11 = complex3.divide(complex0);
      Complex complex12 = complex8.ZERO.add(3866.91841);
      Complex complex13 = complex7.asin();
      Complex complex14 = complex3.acos();
      Complex complex15 = complex13.multiply(130);
      Complex complex16 = complex15.ONE.subtract(complex10);
      Complex complex17 = complex8.pow(0.0);
      List<Complex> list1 = complex3.nthRoot(130);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.I.cosh();
      List<Complex> list0 = complex0.nthRoot(3235);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.NaN.log();
      double double0 = complex3.abs();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.sqrt();
      double double1 = complex6.getArgument();
      Complex complex7 = complex3.NaN.pow(421.4);
      Complex complex8 = complex6.ZERO.asin();
      Complex complex9 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.asin();
      String string0 = complex10.I.toString();
      Complex complex11 = complex10.NaN.sinh();
      Complex complex12 = complex1.sqrt1z();
      int int0 = complex3.hashCode();
      Complex complex13 = complex12.subtract(complex4);
      Complex complex14 = complex13.ZERO.pow(2939.699);
      Complex complex15 = Complex.valueOf(6.283185307179586);
      Complex complex16 = complex6.acos();
      Complex complex17 = complex4.exp();
      Complex complex18 = complex17.INF.conjugate();
      Complex complex19 = complex7.add(1555.0);
      double double2 = complex0.abs();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex2.divide(20.0);
      Complex complex4 = complex1.INF.pow(20.0);
      Complex complex5 = complex1.ONE.pow((double) 1);
      Object object0 = complex0.readResolve();
      Complex complex6 = Complex.valueOf((-1.0), (double) 1);
      Complex complex7 = complex0.ONE.add(complex6);
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex6.multiply(complex2);
      List<Complex> list1 = complex9.ONE.nthRoot(1);
      int int0 = complex9.ONE.hashCode();
      Complex complex10 = complex3.multiply((-1.0));
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex11 = complex0.subtract(complex6);
      String string0 = complex11.ZERO.toString();
      Complex complex12 = complex7.add(20.0);
      List<Complex> list2 = complex0.nthRoot(1);
      Complex complex13 = complex12.atan();
      Complex complex14 = complex13.I.sqrt1z();
      Complex complex15 = complex0.NaN.add(714.9325374);
      Complex complex16 = complex14.I.conjugate();
      double double0 = complex4.abs();
      Complex complex17 = complex0.cosh();
      ComplexField complexField1 = complex9.getField();
      Complex complex18 = complex16.reciprocal();
      String string1 = complex13.toString();
      Complex complex19 = complex13.I.add((double) 1);
      Complex complex20 = complex0.sinh();
      Complex complex21 = complex16.cos();
      Complex complex22 = complex12.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-860.0));
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.valueOf(1451.6520386, 1451.6520386);
      Complex complex2 = complex1.I.divide(1451.6520386);
      Complex complex3 = complex0.log();
      double double0 = complex0.getReal();
      int int0 = complex0.hashCode();
      List<Complex> list0 = complex2.nthRoot(435);
      Complex complex4 = complex1.subtract(213.065);
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = complex7.ZERO.atan();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex4.atan();
      Complex complex13 = complex2.add((-2095.8));
      String string0 = complex12.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex2.ONE.exp();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex1.INF.exp();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex5 = complex4.ZERO.add(5.6656680900216754E-52);
      ComplexField complexField1 = complex1.ZERO.getField();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex4.ZERO.add(complex5);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.ZERO.tan();
      Complex complex10 = new Complex(5.6656680900216754E-52);
      ComplexField complexField2 = complex10.I.getField();
      Complex complex11 = complex8.cos();
      boolean boolean0 = complex5.equals(complex10);
      Complex complex12 = complex0.pow(complex6);
      double double0 = complex12.abs();
      Complex complex13 = complex9.sinh();
      double double1 = complex5.abs();
      Complex complex14 = complex0.sqrt();
      String string1 = complex14.toString();
      Complex complex15 = complex5.sin();
      Complex complex16 = complex15.cos();
      Complex complex17 = complex13.subtract(Double.NaN);
      ComplexField complexField3 = complex0.getField();
      Complex complex18 = complex9.add(complex6);
      Complex complex19 = complex7.log();
      Object object1 = complex19.readResolve();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2978.95515);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.pow((-1776.08));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.INF.add((-1776.08));
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = Complex.valueOf(2978.95515, 2978.95515);
      Complex complex8 = complex0.acos();
      double double0 = complex6.ZERO.getArgument();
      Complex complex9 = complex8.log();
      boolean boolean0 = complex1.equals(complex6);
      Complex complex10 = Complex.valueOf((-407.020507));
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex12.ONE.sqrt();
      Complex complex14 = complex13.ZERO.log();
      Complex complex15 = complex9.divide(complex12);
      double double1 = complex13.getReal();
      Complex complex16 = complex12.tan();
      Complex complex17 = complex10.multiply(complex1);
      Complex complex18 = complex12.add(complex6);
      Complex complex19 = complex4.sin();
      double double2 = complex5.getImaginary();
      Complex complex20 = complex12.asin();
      Complex complex21 = complex17.createComplex((-1776.08), 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = null;
      try { 
        complex0.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.I.divide((-305.9));
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.pow((-305.9));
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex5.divide((-305.9));
      Complex complex10 = complex1.multiply((-2164));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.ONE.sqrt1z();
      int int0 = complex2.hashCode();
      Complex complex4 = Complex.valueOf(0.0);
      List<Complex> list0 = complex0.nthRoot(2429);
      double double1 = complex0.getReal();
      Complex complex5 = complex0.multiply((-1310));
      Complex complex6 = complex1.subtract(1.5707963267948966);
      Complex complex7 = complex5.ONE.multiply(2713.3);
      Complex complex8 = complex5.INF.multiply(complex4);
      Complex complex9 = complex6.subtract(complex3);
      Complex complex10 = complex9.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex5.asin();
      ComplexField complexField0 = complex1.getField();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex9.acos();
      double double2 = complex13.abs();
      Complex complex14 = complex6.pow(complex7);
      Complex complex15 = complex7.cos();
      Complex complex16 = complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf((-3808.495882969), (-3808.495882969));
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.sinh();
      boolean boolean0 = complex4.equals((Object) null);
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.NaN.createComplex((-3078.441417238), (-3078.441417238));
      Complex complex6 = complex0.ONE.log();
      Complex complex7 = Complex.valueOf(755.94);
      Complex complex8 = complex2.multiply(1199);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.ZERO.divide(complex0);
      double double0 = complex1.abs();
      Complex complex11 = complex8.createComplex(1199, 1199);
      Complex complex12 = complex11.I.exp();
      double double1 = complex2.abs();
      List<Complex> list0 = complex2.nthRoot(1199);
      Complex complex13 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4533.8, 4533.8);
      Complex complex1 = complex0.ONE.divide(4533.8);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf(0.0, 4533.8);
      Complex complex6 = complex2.ZERO.tanh();
      Complex complex7 = complex5.ZERO.multiply(0.0);
      double double0 = complex6.getArgument();
      Complex complex8 = complex6.INF.add(4533.8);
      Object object0 = complex5.INF.readResolve();
      Complex complex9 = complex2.multiply(1);
      Complex complex10 = complex9.createComplex(0.0, 516.1);
      Complex complex11 = complex10.INF.add(complex7);
      Complex complex12 = complex10.I.pow((-3721.34));
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex5.ONE.multiply(complex13);
      Complex complex15 = Complex.valueOf((-3721.34), (double) 1);
      Complex complex16 = complex15.INF.multiply(complex0);
      Complex complex17 = complex5.cosh();
      Complex complex18 = complex17.INF.multiply(complex10);
      boolean boolean0 = complex1.equals(complex4);
      Complex complex19 = complex3.subtract((-490.90861));
      Complex complex20 = complex19.divide((-2.5243286814648133E-8));
      Complex complex21 = complex4.acos();
      Complex complex22 = complex21.ONE.add(complex11);
      Complex complex23 = complex19.cosh();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1495.16320906), (-1495.16320906));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(3452);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.ONE.multiply((-265));
      double double0 = complex0.getImaginary();
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex1.exp();
      double double1 = complex0.getReal();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex5.atan();
      Complex complex10 = Complex.valueOf((-2.268994961992292E125), (-1.0));
      String string0 = complex5.toString();
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.022795961737854E153, (-1.3155828104004438E-8));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex0.INF.sqrt();
      Object object0 = complex1.INF.readResolve();
      Complex complex5 = complex2.ZERO.cos();
      double double0 = complex1.ZERO.abs();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.ZERO.sqrt1z();
      double double1 = complex7.INF.getArgument();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex1.ONE.multiply((-1151));
      Complex complex10 = complex8.ONE.atan();
      Complex complex11 = complex5.exp();
      Complex complex12 = new Complex(0.0);
      Complex complex13 = complex0.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1970.30331, 1970.30331);
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.divide(complex2);
      boolean boolean1 = complex2.isNaN();
      Complex complex4 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      double double0 = 0.0;
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.NaN.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex0.INF.atan();
      Complex complex6 = complex4.I.multiply((-2318));
      Complex complex7 = complex4.cosh();
      try { 
        complex7.nthRoot((-2318));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,318
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.createComplex(23.57, 0.0);
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex4.pow(complex0);
      Complex complex7 = complex5.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.INF.cos();
      Complex complex9 = complex6.INF.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex8.ZERO.pow((-1.145810806477298E-8));
      try { 
        complex6.nthRoot((-968));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -968
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-931.812620855357));
      Complex complex1 = complex0.ONE.createComplex((-931.812620855357), (-3811.1030021));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(8.725629524586503E-103, 8.725629524586503E-103);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = Complex.valueOf(2724.0);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex0.ONE.cos();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex8 = complex7.log();
      Complex complex9 = complex7.atan();
      Complex complex10 = complex5.multiply(Double.NaN);
      double double1 = complex9.getImaginary();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.751606149833694E244, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.NaN.divide(979.019);
      Complex complex5 = Complex.valueOf(0.0, 3247.077052092);
      Complex complex6 = Complex.valueOf(1268.792);
      Complex complex7 = complex4.INF.cos();
      Complex complex8 = complex7.ZERO.divide(complex3);
      Complex complex9 = complex6.I.multiply(1268.792);
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex5.INF.subtract(1268.792);
      Complex complex12 = complex6.reciprocal();
      Complex complex13 = complex0.I.exp();
      boolean boolean0 = complex1.isNaN();
      int int0 = complex4.INF.hashCode();
      Complex complex14 = complex5.exp();
      Complex complex15 = complex14.pow(complex3);
      Complex complex16 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-841.99945), (-841.99945));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(1.0);
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.add((-841.99945));
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.multiply((-841.99945));
      Complex complex6 = complex0.cosh();
      double double0 = complex6.getReal();
      Complex complex7 = complex2.add(complex5);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sinh();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex4.pow((-4576.806852));
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex1.I.sqrt1z();
      Object object1 = complex6.readResolve();
      Complex complex8 = complex1.tanh();
      boolean boolean0 = complex0.equals("");
      ComplexField complexField0 = complex3.getField();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex1.multiply(0.0);
      double double0 = complex8.getImaginary();
      Complex complex11 = complex7.I.tanh();
      Complex complex12 = complex5.tanh();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex8.NaN.sin();
      Complex complex15 = complex1.NaN.negate();
      Complex complex16 = complex0.pow(Double.NaN);
      Complex complex17 = complex7.sqrt();
      double double1 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 1934.076634451);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = Complex.valueOf((-20.0), 0.6043586730957031);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex5.ONE.asin();
      Object object0 = complex6.INF.readResolve();
      double double0 = complex6.I.getArgument();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex7.ONE.multiply(complex5);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex8.ZERO.getField();
      double double1 = complex1.getArgument();
      double double2 = complex8.getArgument();
      Complex complex9 = complex5.add(complex6);
      Complex complex10 = complex8.add(complex5);
      Complex complex11 = complex9.acos();
      Complex complex12 = complex1.tan();
      Complex complex13 = complex5.subtract(complex7);
      boolean boolean1 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-5244.70922594415));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1505.9175856132));
      Complex complex2 = complex1.ONE.createComplex((-1.1679889049814275E-265), (-1.1679889049814275E-265));
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex4.ZERO.multiply(0.0);
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex3.add((-1556.616991));
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex1.I.multiply(complex3);
      Complex complex10 = complex8.NaN.cos();
      Complex complex11 = complex10.NaN.acos();
      Complex complex12 = complex10.asin();
      Complex complex13 = complex8.asin();
      Complex complex14 = complex13.INF.negate();
      Complex complex15 = complex14.ONE.sin();
      Complex complex16 = complex1.cos();
      ComplexField complexField0 = complex8.getField();
      Complex complex17 = complex4.atan();
      Complex complex18 = complex17.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.INF.negate();
      String string0 = complex0.toString();
      double double0 = complex2.getImaginary();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1259.13610367669), (-1259.13610367669));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex0.I.divide((-1259.13610367669));
      Complex complex5 = complex4.I.pow((-1259.13610367669));
      Complex complex6 = Complex.valueOf((-1259.13610367669), 1079.1630310294001);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.log();
      String string0 = complex7.ONE.toString();
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.multiply(0);
      boolean boolean0 = complex1.equals(complex0);
      Complex complex11 = complex5.divide(complex4);
      Complex complex12 = complex0.log();
      Complex complex13 = complex2.sin();
      Complex complex14 = complex8.multiply(complex13);
      boolean boolean1 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2932.31026), (-2932.31026));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex0.negate();
      int int0 = complex4.hashCode();
      Complex complex5 = complex4.multiply(37);
      Complex complex6 = complex0.sinh();
      String string0 = complex3.toString();
      ComplexField complexField0 = complex1.getField();
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex3.I.divide((-314.28));
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.ZERO.sin();
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.sin();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex7.acos();
      Complex complex12 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7591819833844019E252, 1.7591819833844019E252);
      Complex complex1 = complex0.ONE.tan();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-78.480231681098), (-78.480231681098));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.getArgument();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.createComplex(0.0, (-0.7853575733597369));
      Complex complex4 = complex3.ZERO.sqrt();
      List<Complex> list0 = complex3.INF.nthRoot(1100);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex0.cosh();
      int int0 = complex5.hashCode();
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.ZERO.sqrt();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex7 = Complex.valueOf(3212.0);
      boolean boolean1 = complex7.isInfinite();
      Complex complex8 = complex7.cosh();
      Complex complex9 = Complex.valueOf(0.0, 3212.0);
      Complex complex10 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.createComplex(0.0, (-2930.32));
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.tan();
      Object object0 = complex3.readResolve();
      String string0 = complex4.toString();
      double double0 = complex5.getReal();
      Complex complex6 = complex4.log();
      Object object1 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1357.4717));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.ZERO.subtract((-1357.4717));
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex0.sinh();
      ComplexField complexField0 = complex3.getField();
      Complex complex6 = complex5.reciprocal();
      boolean boolean0 = complex3.equals(complex5);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.INF.divide(complex4);
      boolean boolean1 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Object object0 = complex0.NaN.readResolve();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.ONE.pow(Double.POSITIVE_INFINITY);
      Object object1 = complex0.readResolve();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(4.125337057189083E-84, (-4214.7));
      Complex complex3 = complex0.add(complex2);
      Object object0 = complex2.ONE.readResolve();
      Complex complex4 = complex2.ZERO.sqrt();
      Complex complex5 = complex2.ONE.divide((-1193.62822075));
      Complex complex6 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1908.87918));
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = Complex.valueOf((-1908.87918));
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.ONE.log();
      Object object0 = complex4.INF.readResolve();
      Complex complex6 = complex3.ZERO.pow(1787.640526771);
      double double0 = complex0.abs();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex2.atan();
      int int0 = complex2.hashCode();
      Object object1 = complex1.readResolve();
      boolean boolean0 = complex7.isInfinite();
      double double1 = complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.subtract(1.5707963267948966);
      int int0 = complex4.I.hashCode();
      Object object0 = complex3.readResolve();
      String string0 = complex0.toString();
      Complex complex5 = Complex.valueOf(1838.0);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1065.6952288589));
      Complex complex1 = complex0.I.pow((-1065.6952288589));
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.ONE.asin();
      Complex complex5 = complex4.add(1613.87);
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex0.cosh();
      double double0 = complex6.getArgument();
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex7.NaN.sinh();
      try { 
        complex6.nthRoot((-1645));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,645
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex((-1.0), 1040.3156104845596);
      Complex complex4 = complex2.pow(complex3);
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(7.016736290557636E20);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.add((-2970.43));
      Complex complex3 = new Complex(7.016736290557636E20);
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.pow(7.016736290557636E20);
      Complex complex7 = complex4.INF.cosh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex8 = complex5.ONE.cosh();
      Complex complex9 = complex4.divide(complex3);
      boolean boolean1 = complex5.isNaN();
      Complex complex10 = complex5.cos();
      Complex complex11 = complex10.subtract(7.016736290557636E20);
      Complex complex12 = Complex.valueOf(0.0);
      boolean boolean2 = complex3.isNaN();
      Complex complex13 = complex4.cosh();
      Complex complex14 = complex1.pow(complex4);
      Complex complex15 = complex5.createComplex(7.016736290557636E20, (-2970.43));
      Complex complex16 = complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sinh();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.add(1.5707963267948966);
      Object object0 = complex1.readResolve();
      double double1 = complex0.getImaginary();
      Complex complex5 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.ZERO.pow(complex2);
      double double0 = complex2.ONE.abs();
      Complex complex4 = complex2.NaN.log();
      double double1 = complex2.I.abs();
      boolean boolean0 = complex0.isNaN();
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1802.0841);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.ONE.subtract(1802.0841);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.ONE.divide(complex0);
      Complex complex7 = complex1.NaN.multiply(complex0);
      boolean boolean0 = complex0.equals("jS;1Nl7|+Q");
      double double0 = complex1.getReal();
      Complex complex8 = complex4.sqrt();
      double double1 = complex4.abs();
      double double2 = complex2.getReal();
      int int0 = complex5.hashCode();
      double double3 = complex1.getReal();
      Object object0 = complex1.NaN.readResolve();
      Complex complex9 = complex3.conjugate();
      Complex complex10 = complex9.INF.asin();
      String string0 = complex0.toString();
      Complex complex11 = complex1.divide(complex3);
      Complex complex12 = complex11.acos();
      boolean boolean1 = complex2.isInfinite();
      Complex complex13 = complex10.atan();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1402.1);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex0.abs();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.divide((-872.967951));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex1.acos();
      Complex complex6 = Complex.valueOf(632.439);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-862.03765));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex4.multiply(238);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex4.add((-1183.73878));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.INF.divide(0.0);
      Complex complex4 = complex3.I.subtract(0.0);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ONE.divide(complex3);
      Complex complex8 = complex7.ZERO.conjugate();
      Complex complex9 = complex6.I.tanh();
      boolean boolean0 = complex6.isInfinite();
      boolean boolean1 = complex6.equals(complex3);
      Complex complex10 = complex3.cos();
      Object object0 = complex4.readResolve();
      Complex complex11 = complex10.pow(2006.5720360250225);
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = Complex.valueOf((-2.0764122246389383E-9), 0.0);
      double double0 = complex1.abs();
      Complex complex14 = complex13.asin();
      Complex complex15 = complex8.subtract(complex1);
      Complex complex16 = complex2.multiply(complex11);
      Complex complex17 = complex2.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-5255.0550114), (-5255.0550114));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, (-5835.900982777317));
      Complex complex2 = complex1.I.add((-5835.900982777317));
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex3.subtract(complex7);
      Complex complex10 = complex3.cos();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-517.508), (-2714.665329));
      double double0 = complex0.getReal();
      Complex complex1 = complex0.pow((-517.508));
      double double1 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply(0);
      double double0 = complex0.getImaginary();
      Complex complex2 = new Complex(1.3535549640655518, Double.NaN);
      Complex complex3 = complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(87.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex0.multiply(87.0);
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-731.3713087124), (-731.3713087124));
      Complex complex1 = complex0.INF.pow((-731.3713087124));
      Complex complex2 = complex0.tan();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex2.add(complex0);
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(3378.7641);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex2.INF.multiply(complex0);
      Complex complex5 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1806.0932358394);
      Complex complex1 = new Complex(0.0, 1806.0932358394);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.NaN.acos();
      Complex complex4 = complex1.ZERO.sqrt1z();
      Complex complex5 = complex2.INF.negate();
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex6 = new Complex((-3410.1562));
      Complex complex7 = complex0.I.pow(complex6);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex8.createComplex((-3410.1562), (-219.077));
      Complex complex10 = complex2.sqrt();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      double double0 = Double.NaN;
      double double1 = (-2598.572388);
      Complex complex2 = complex0.createComplex(Double.NaN, (-2598.572388));
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.INF.multiply((-2540.3872838));
      Complex complex7 = complex5.negate();
      Complex complex8 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2164.896434504968);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2142.2913, 2142.2913);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.NaN.multiply(0.0);
      try { 
        complex3.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      double double0 = complex0.NaN.abs();
      double double1 = complex0.NaN.getArgument();
      Object object0 = complex0.NaN.readResolve();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-339.05349), (-339.05349));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex2.getImaginary();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.divide(complex0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex5 = complex4.divide(1216.3);
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      int int0 = complex1.hashCode();
      Complex complex2 = complex1.subtract(complex0);
      ComplexField complexField0 = complex0.ONE.getField();
      Object object0 = complex1.ONE.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex1.multiply(complex2);
      int int1 = complex0.I.hashCode();
      Complex complex5 = complex1.reciprocal();
      try { 
        complex1.nthRoot((-2587));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,587
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.createComplex(0.0, (-1848.5590301));
      Complex complex4 = complex3.sqrt();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex1.INF.getField();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.sin();
      double double0 = complex3.NaN.getArgument();
      List<Complex> list0 = complex2.NaN.nthRoot(1385);
      Object object1 = complex1.readResolve();
      ComplexField complexField1 = complex0.getField();
      Complex complex4 = Complex.ONE;
      boolean boolean1 = complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.divide(complex0);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.INF.pow(complex1);
      Complex complex5 = complex1.I.subtract(complex0);
      Complex complex6 = complex0.pow(386.32198602);
      Complex complex7 = complex0.INF.tan();
      Complex complex8 = Complex.valueOf((-4182.89593357938));
      Complex complex9 = complex6.pow(complex3);
      boolean boolean0 = complex4.equals(complex0);
      boolean boolean1 = complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.multiply(0);
      Complex complex3 = complex0.atan();
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex0.ZERO.sin();
      double double0 = complex3.INF.getArgument();
      Complex complex5 = complex3.add((-2202.1));
      double double1 = complex3.getArgument();
      ComplexField complexField1 = complex2.getField();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.multiply(2661.84706);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5243.502));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.multiply(complex5);
      Object object0 = complex7.I.readResolve();
      Object object1 = complex0.readResolve();
      Object object2 = complex0.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.I.conjugate();
      boolean boolean0 = complex0.isInfinite();
      Complex complex10 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1041.092654380432);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.NaN.multiply(complex4);
      List<Complex> list0 = complex3.ONE.nthRoot(1);
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.ZERO.subtract(complex6);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.ONE.add(1632.132753656);
      try { 
        complex0.nthRoot((-480));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -480
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-2861.6481));
      double double0 = complex1.INF.abs();
      int int0 = complex0.I.hashCode();
      double double1 = complex0.ONE.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.cos();
      ComplexField complexField0 = complex2.I.getField();
      int int1 = complex3.hashCode();
      Complex complex5 = complex0.INF.divide(2180.0);
      Complex complex6 = complex5.INF.sinh();
      String string0 = complex1.toString();
      double double2 = complex2.getReal();
      Complex complex7 = complex0.tanh();
      Complex complex8 = Complex.valueOf((-756.27650234936));
      Complex complex9 = complex1.multiply(0);
      Complex complex10 = complex4.pow(1.0);
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex3.multiply(complex0);
      Complex complex14 = complex12.createComplex(Double.NaN, 0);
      Complex complex15 = complex11.divide(Double.NaN);
      Complex complex16 = complex9.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2000.6191019), 0.0);
      Complex complex1 = complex0.negate();
      List<Complex> list0 = complex1.I.nthRoot(2427);
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = complex7.NaN.divide(complex2);
      Complex complex9 = complex8.NaN.sqrt();
      String string0 = complex2.ZERO.toString();
      double double1 = complex0.ONE.abs();
      int int0 = complex0.hashCode();
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex11.I.multiply(0.0);
      Complex complex13 = complex4.ZERO.cosh();
      Complex complex14 = complex1.ONE.cos();
      Complex complex15 = complex12.NaN.subtract(complex3);
      Complex complex16 = complex4.reciprocal();
      Complex complex17 = complex2.multiply(complex10);
      Complex complex18 = complex2.cosh();
      String string1 = complex1.toString();
      Complex complex19 = complex4.divide((-2000.6191019));
      Complex complex20 = complex11.multiply(2427);
      Complex complex21 = complex20.multiply(1.0);
      Complex complex22 = complex4.pow((-1985.872506390328));
      Complex complex23 = Complex.valueOf((-1544.594), (-1544.594));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex2.ZERO.reciprocal();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex2.subtract(1.0);
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex8.INF.sqrt1z();
      Complex complex11 = complex10.ONE.sqrt1z();
      Complex complex12 = complex1.sin();
      Complex complex13 = complex8.asin();
      Complex complex14 = Complex.valueOf((-635.9085099826333), 0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(8.468222063292654E102);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.ONE.multiply(1102);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.NaN.add(5.903396499766243E-300);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex6.INF.add(complex0);
      int int0 = complex3.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex8.NaN.multiply(complex5);
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex10.INF.add(1.0);
      Complex complex12 = complex8.negate();
      Complex complex13 = Complex.valueOf(2.210442148596269E80, 0.4764525294303894);
      List<Complex> list0 = complex8.ONE.nthRoot(1846);
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.equals(complex11);
      Complex complex14 = complex13.tan();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(658.26645293871, 658.26645293871);
      Complex complex2 = complex1.ONE.sqrt1z();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = Complex.valueOf(0.008333333333333333, 6.283185307179586);
      Complex complex4 = Complex.valueOf((-821.98627), 658.26645293871);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex4.I.reciprocal();
      Complex complex7 = complex1.ONE.reciprocal();
      Complex complex8 = complex0.NaN.negate();
      ComplexField complexField1 = complex0.getField();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex2.multiply(7);
      Complex complex12 = complex11.I.subtract((-821.98627));
      boolean boolean0 = complex4.isNaN();
      Complex complex13 = complex3.sqrt1z();
      Complex complex14 = complex0.reciprocal();
      Complex complex15 = complex14.INF.subtract(complex12);
      Complex complex16 = complex4.acos();
      boolean boolean1 = complex0.isNaN();
      Complex complex17 = complex9.atan();
      Complex complex18 = complex17.ONE.sinh();
      Complex complex19 = complex8.divide(complex1);
      Complex complex20 = complex0.sin();
      Complex complex21 = complex0.divide(943.343);
      Complex complex22 = complex5.createComplex(658.26645293871, 4867.09334249);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(326.975881131);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.add(0.0);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex5.ONE.log();
      Complex complex9 = complex2.log();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex4.divide(0.0);
      Complex complex12 = complex6.add(326.975881131);
      Complex complex13 = complex12.INF.divide(complex3);
      Complex complex14 = complex0.reciprocal();
      String string0 = complex5.toString();
  }
}
