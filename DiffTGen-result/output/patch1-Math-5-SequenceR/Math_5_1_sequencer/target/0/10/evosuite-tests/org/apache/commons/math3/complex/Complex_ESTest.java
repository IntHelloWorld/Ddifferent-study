/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:52:45 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.multiply((-900.1523249795));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = Complex.valueOf((-679.59970827618), 1.0);
      double double1 = complex0.ONE.getArgument();
      int int0 = 1393;
      Complex complex1 = complex0.multiply(1393);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex1.ONE.negate();
      double double2 = (-993.329);
      Complex complex4 = Complex.valueOf(1.0, (-993.329));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.subtract((double) 1393);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(9.252840189663807E-148, (-1086.243205653201));
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(752.734027, Double.NaN);
      Complex complex1 = complex0.createComplex(752.734027, 0.0);
      String string0 = complex1.ONE.toString();
      Complex complex2 = Complex.valueOf(1994.64);
      Complex complex3 = complex2.ZERO.divide((-181.67778295563278));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex4.INF.atan();
      Complex complex7 = complex4.createComplex(1818.35488077843, 1818.35488077843);
      Object object0 = complex5.readResolve();
      Complex complex8 = complex0.createComplex(2054.9840868, 1867.206524);
      Complex complex9 = complex0.divide(2551.88755452799);
      String string1 = complex1.toString();
      List<Complex> list0 = complex7.nthRoot(2461);
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.add((-1351.52864));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-1861.570272108);
      Complex complex1 = Complex.valueOf((-1861.570272108), (-1861.570272108));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-414.3379), (-414.3379));
      boolean boolean0 = complex0.equals("NxHnyKV7");
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.pow(complex0);
      double double0 = complex3.ONE.abs();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.add(1.0);
      Complex complex6 = complex1.asin();
      boolean boolean1 = complex6.isInfinite();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.ZERO.divide(877.0);
      double double1 = complex2.getReal();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex4.divide(complex9);
      int int0 = complex2.hashCode();
      Complex complex11 = complex0.multiply(0);
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = complex4.sin();
      Complex complex14 = complex13.conjugate();
      String string0 = complex5.toString();
      int int1 = complex10.hashCode();
      Complex complex15 = complex10.subtract(complex2);
      Complex complex16 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(387.16204638198);
      double double0 = complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.add(387.16204638198);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.INF.negate();
      String string0 = complex5.NaN.toString();
      Complex complex7 = complex2.INF.acos();
      Complex complex8 = complex2.NaN.multiply(0.0);
      ComplexField complexField0 = complex0.getField();
      int int0 = complex2.hashCode();
      Complex complex9 = complex2.add(387.16204638198);
      Complex complex10 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-642.32653894916), (-642.32653894916));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.I.pow(983.0429);
      Complex complex4 = new Complex(0.0, (-708.97197219));
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex5.ONE.pow(0.0);
      Complex complex7 = complex1.INF.subtract(complex4);
      Object object0 = complex2.ZERO.readResolve();
      List<Complex> list0 = complex2.nthRoot(37);
      Complex complex8 = complex4.INF.sin();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex9.ZERO.divide(complex4);
      boolean boolean0 = complex0.equals(complex2);
      String string0 = complex1.INF.toString();
      double double0 = complex7.getImaginary();
      Complex complex11 = complex7.multiply(0);
      Complex complex12 = complex4.reciprocal();
      Complex complex13 = complex12.I.asin();
      boolean boolean1 = complex4.equals(complex1);
      Complex complex14 = complex2.sinh();
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = complex14.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.equals((Object) null);
      int int0 = 8502;
      // Undeclared exception!
      complex0.nthRoot(8502);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1705.9034807657695), (-1705.9034807657695));
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.negate();
      try { 
        complex1.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.createComplex(1569.0086, 1569.0086);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.I.acos();
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex4.I.pow(1569.0086);
      Complex complex6 = complex0.subtract(2014.64172475301);
      Complex complex7 = Complex.valueOf(2014.64172475301, (-1.0));
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex3.log();
      Complex complex10 = Complex.valueOf(2573.0, (-1.0));
      Complex complex11 = complex4.sqrt();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex12.ONE.tanh();
      Complex complex14 = complex13.I.pow(1569.0086);
      boolean boolean0 = complex3.isInfinite();
      List<Complex> list0 = complex10.nthRoot(1362);
      Complex complex15 = complex13.cos();
      Complex complex16 = complex3.cos();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.multiply(387.01582);
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.multiply(0);
      int int0 = complex2.ONE.hashCode();
      double double0 = complex0.INF.abs();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = complex2.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.I.pow(complex0);
      int int0 = complex2.INF.hashCode();
      Complex complex8 = complex6.ONE.createComplex(425.902910438258, 0.0);
      Complex complex9 = complex1.ZERO.acos();
      Complex complex10 = complex1.divide(Double.NaN);
      Complex complex11 = complex10.INF.pow(complex1);
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex1.multiply(1449);
      int int1 = complex1.ONE.hashCode();
      double double1 = complex8.I.abs();
      Complex complex14 = complex13.NaN.asin();
      String string0 = complex10.ONE.toString();
      Complex complex15 = complex14.ZERO.add(complex3);
      Complex complex16 = complex6.ZERO.multiply(complex12);
      int int2 = complex11.hashCode();
      List<Complex> list0 = complex2.nthRoot(1449);
      int int3 = complex7.hashCode();
      double double2 = complex14.getImaginary();
      Complex complex17 = complex8.cosh();
      Complex complex18 = complex7.add((-1.0));
      Complex complex19 = complex18.INF.multiply(0.0);
      Complex complex20 = complex5.sqrt();
      Complex complex21 = complex6.sinh();
      Complex complex22 = complex21.ZERO.sqrt();
      Complex complex23 = complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(607.1295628925864, 607.1295628925864);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.createComplex(607.1295628925864, 471.7792259);
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-743.494709824), (-743.494709824));
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.valueOf((-743.494709824), 299.069105);
      Complex complex2 = complex1.subtract(412.896189);
      Complex complex3 = complex2.ONE.subtract(complex0);
      double double0 = complex2.ONE.getArgument();
      Complex complex4 = complex0.pow(complex1);
      boolean boolean0 = complex0.isInfinite();
      double double1 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply(1792.12);
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex3.multiply((-1));
      Complex complex6 = complex2.cos();
      Complex complex7 = complex1.subtract(1.260420322418213);
      Complex complex8 = complex6.INF.atan();
      Complex complex9 = complex7.NaN.multiply((-1));
      String string0 = complex6.I.toString();
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex3.createComplex(1792.12, (-2287.488998524));
      double double0 = complex5.getReal();
      int int0 = complex2.hashCode();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      double double1 = complex3.getReal();
      Complex complex12 = Complex.valueOf((-1843.63794));
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex0.I.add(complex1);
      String string0 = complex6.toString();
      double double0 = complex0.getArgument();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-619.652), (-619.652));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex0.nthRoot(8483);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.createComplex(8483, 1742.19029958309);
      Complex complex6 = complex2.NaN.cosh();
      Complex complex7 = complex4.ZERO.exp();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex8.ZERO.multiply(8483);
      Complex complex10 = complex2.cosh();
      String string0 = complex1.toString();
      Complex complex11 = complex1.divide(complex4);
      Complex complex12 = Complex.valueOf(1610.0);
      Complex complex13 = Complex.valueOf((-50.18069008175), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = complex2.ONE.cosh();
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex2.isNaN();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-141.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex2.multiply(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex0.INF.sin();
      Complex complex8 = complex6.ZERO.acos();
      Complex complex9 = complex0.tan();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex3.cos();
      Complex complex12 = complex2.sqrt1z();
      double double0 = complex2.getReal();
      Complex complex13 = complex1.sqrt();
      Complex complex14 = complex6.createComplex((-92.068399045), 0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-885.21958032));
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex3.INF.subtract(868.0883549245366);
      Complex complex5 = complex0.ZERO.pow(complex1);
      Complex complex6 = complex3.ZERO.divide((-885.21958032));
      int int0 = complex2.hashCode();
      Complex complex7 = complex5.ZERO.createComplex((-4083.4005179694627), (-885.21958032));
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex5.isNaN();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex3.multiply(complex8);
      Object object0 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals("");
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply(1);
      Complex complex3 = complex2.ZERO.add((double) 1);
      Complex complex4 = complex2.NaN.multiply((-56));
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex2.NaN.subtract(2210.8);
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex0.I.pow(complex2);
      ComplexField complexField0 = complex1.getField();
      Complex complex10 = complex1.createComplex(3583.1, 3583.1);
      Complex complex11 = complex10.NaN.subtract(complex0);
      List<Complex> list0 = complex10.nthRoot(4836);
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex9.divide((-1.0));
      Complex complex14 = complex8.log();
      Complex complex15 = complex12.tanh();
      Complex complex16 = complex6.acos();
      Complex complex17 = complex10.exp();
      Complex complex18 = complex17.createComplex(0.16524958610534668, (-56));
      ComplexField complexField1 = complex2.getField();
      Complex complex19 = complex6.cosh();
      Complex complex20 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(696.981472092);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.ZERO.multiply(578.29);
      Complex complex5 = complex3.I.subtract(complex1);
      Complex complex6 = complex2.I.cosh();
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex7.divide(complex2);
      Complex complex9 = complex8.ONE.subtract(696.981472092);
      Complex complex10 = Complex.valueOf(696.981472092);
      Complex complex11 = complex6.NaN.conjugate();
      String string0 = complex2.ZERO.toString();
      String string1 = complex5.toString();
      Complex complex12 = complex6.multiply(2895);
      Complex complex13 = complex9.ONE.cos();
      double double0 = complex11.I.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex14 = complex12.tan();
      String string2 = complex0.toString();
      double double1 = complex7.getArgument();
      Complex complex15 = complex11.reciprocal();
      Complex complex16 = complex9.multiply(complex12);
      boolean boolean0 = complex6.equals(complex9);
      Complex complex17 = complex5.multiply(complex8);
      Complex complex18 = complex9.atan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-614.03831), (-614.03831));
      Complex complex1 = complex0.divide((-1688.1284712));
      Complex complex2 = complex0.cos();
      boolean boolean0 = complex1.isNaN();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = new Complex(1313.0489124179035, (-20.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(3233.6748450393466);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.pow(complex5);
      double double0 = complex4.getReal();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex10 = complex3.sqrt();
      boolean boolean0 = complex10.equals("");
      Complex complex11 = complex5.createComplex(Double.NaN, 1.0);
      Complex complex12 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-1999.11));
      Complex complex1 = complex0.createComplex((-1999.11), (-1999.11));
      Complex complex2 = complex1.ZERO.createComplex((-1999.11), 0.0);
      Complex complex3 = complex0.ZERO.add((-735.7513));
      Complex complex4 = complex1.I.sqrt();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.ZERO.multiply(complex1);
      Complex complex7 = complex0.atan();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex8 = Complex.valueOf((-1999.11));
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex8.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 20.0);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.INF.cosh();
      List<Complex> list0 = complex0.nthRoot(274);
      boolean boolean0 = complex1.isNaN();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.createComplex(274, 20.0);
      Complex complex5 = complex2.I.multiply(0);
      Complex complex6 = complex4.ZERO.createComplex((-261.5358872387876), 3.9205810725333715E-8);
      Complex complex7 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-2751.28));
      Complex complex1 = new Complex((-2751.28));
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex complex4 = complex3.INF.cos();
      double double0 = complex0.abs();
      boolean boolean0 = complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.INF.sqrt1z();
      int int0 = complex3.I.hashCode();
      Complex complex5 = complex1.ONE.pow(complex3);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.ONE.multiply(0.5139456987380981);
      Complex complex8 = complex3.INF.negate();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.INF.add(0.5139456987380981);
      Complex complex12 = complex9.tan();
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex12.sqrt();
      Complex complex15 = complex2.pow(0.0);
      Complex complex16 = Complex.valueOf(20.0);
      Complex complex17 = new Complex(0.5139456987380981);
      List<Complex> list0 = complex16.NaN.nthRoot(1);
      Complex complex18 = complex3.ONE.multiply((-433));
      Complex complex19 = complex16.NaN.cosh();
      boolean boolean0 = complex12.isInfinite();
      Complex complex20 = complex1.exp();
      Complex complex21 = complex2.add(305.2923);
      Complex complex22 = complex16.log();
      ComplexField complexField0 = complex12.getField();
      Complex complex23 = complex0.multiply(305.2923);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-525.12), (-525.12));
      Complex complex1 = new Complex((-525.12));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.NaN.multiply((-525.12));
      Object object0 = complex1.NaN.readResolve();
      Complex complex5 = complex3.NaN.cosh();
      Complex complex6 = complex5.ZERO.multiply(complex1);
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.log();
      Complex complex9 = complex0.sqrt();
      int int0 = complex3.I.hashCode();
      Complex complex10 = complex0.multiply(16);
      Complex complex11 = complex2.pow(complex10);
      Complex complex12 = complex11.ONE.tan();
      Complex complex13 = complex3.divide(complex11);
      Complex complex14 = complex13.ZERO.multiply(complex9);
      Complex complex15 = complex1.I.log();
      Complex complex16 = complex15.I.createComplex((-525.12), 16);
      Complex complex17 = complex4.cos();
      List<Complex> list0 = complex17.nthRoot(16);
      ComplexField complexField0 = complex4.I.getField();
      Complex complex18 = complex9.multiply((-525.12));
      boolean boolean0 = complex2.isNaN();
      Complex complex19 = complex2.pow((double) 16);
      Complex complex20 = complex4.asin();
      Complex complex21 = complex4.sin();
      Complex complex22 = complex19.tanh();
      Object object1 = complex22.NaN.readResolve();
      int int1 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1463.184663621788), 0.0);
      Complex complex1 = complex0.pow(247.44823558889);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.atan();
      double double0 = complex3.abs();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex1.pow(1.8487854656676722E-177);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.INF.sqrt();
      Object object1 = complex2.readResolve();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex5.add(2238.536438);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(336.96791281727, 336.96791281727);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex0.ZERO.pow(336.96791281727);
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex3.ONE.log();
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex6.NaN.subtract(336.96791281727);
      Complex complex11 = complex4.NaN.multiply((-1104.5));
      Complex complex12 = complex10.INF.add((-1104.5));
      Complex complex13 = complex12.NaN.divide(complex3);
      int int0 = (-3666);
      try { 
        complex4.nthRoot((-3666));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,666
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.sin();
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.multiply(1032);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.multiply(1032);
      Complex complex7 = complex6.pow((-2695.362927));
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.NaN.sin();
      Complex complex10 = complex8.exp();
      Complex complex11 = complex3.multiply(1032);
      Complex complex12 = complex5.I.sqrt();
      Complex complex13 = complex12.ONE.conjugate();
      Complex complex14 = complex10.ONE.multiply(1);
      Complex complex15 = complex10.ONE.negate();
      Complex complex16 = complex10.ZERO.multiply(1);
      Complex complex17 = complex14.I.exp();
      ComplexField complexField0 = complex14.ONE.getField();
      Complex complex18 = complex10.divide(complex5);
      Complex complex19 = complex18.NaN.pow((double) 1);
      double double1 = complex3.getImaginary();
      double double2 = complex8.abs();
      Complex complex20 = complex14.tan();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(1.839075686473352E-197);
      try { 
        complex0.INF.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4470.45488262582, 4470.45488262582);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = complex2.ZERO.divide(complex0);
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = complex3.I.divide(complex2);
      Complex complex6 = complex5.I.sqrt();
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex4.divide(complex5);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.INF.pow(complex3);
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex4.asin();
      Complex complex8 = complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-2110.899969031744));
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex2.multiply((-46.9088555956));
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-3008.3651009229893));
      double double0 = complex0.abs();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex1.INF.exp();
      Complex complex6 = complex3.ONE.cosh();
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(4804.3742757299);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.divide(4804.3742757299);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.cosh();
      double double0 = complex3.abs();
      double double1 = complex2.getImaginary();
      double double2 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ZERO.add((-2587.9313));
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex2.I.tan();
      double double0 = complex0.getArgument();
      Complex complex6 = complex4.sinh();
      double double1 = complex2.abs();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.multiply(0);
      String string0 = complex4.toString();
      Complex complex10 = complex3.tanh();
      Complex complex11 = Complex.valueOf((-2587.9313));
      Complex complex12 = complex2.multiply((-1305.019002863171));
      double double2 = complex6.getImaginary();
      Complex complex13 = complex0.add((-1305.019002863171));
      Complex complex14 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.divide((-3988.8));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.multiply(1);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.multiply(1);
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex8.pow(0.0);
      List<Complex> list0 = complex9.NaN.nthRoot(1);
      double double0 = complex2.getArgument();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.negate();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex0.divide(complex2);
      String string0 = complex6.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1715.342), 124.39);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1066.4), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.INF.sqrt();
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.I.add(complex0);
      List<Complex> list0 = complex1.nthRoot(2791);
      double double0 = complex0.I.abs();
      List<Complex> list1 = complex0.INF.nthRoot(2791);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      double double0 = complex1.getReal();
      Complex complex2 = Complex.valueOf(4216.378732647);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.INF.createComplex(0.0, 0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex1.multiply(1);
      int int0 = complex8.hashCode();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1631.1884439));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = new Complex(5.421372463189529E-151, (-1690.62313266323));
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex0.pow((-1631.1884439));
      Complex complex5 = complex2.NaN.sqrt1z();
      double double0 = complex3.getReal();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex3.divide((-1690.62313266323));
      Complex complex7 = complex6.conjugate();
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-1262.34769992));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.pow((-1.0));
      Complex complex5 = complex4.INF.createComplex((-1262.34769992), 113.634039);
      boolean boolean0 = complex0.isInfinite();
      List<Complex> list0 = complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.exp();
      try { 
        complex1.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex((-6.4883200760473), 2261.0);
      Complex complex2 = complex1.INF.divide(2261.0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.ONE.add(complex0);
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex7.INF.sqrt();
      Complex complex9 = complex8.ZERO.divide(0.0);
      Complex complex10 = complex9.NaN.add(0.0);
      Complex complex11 = complex1.sin();
      Complex complex12 = complex11.ZERO.conjugate();
      Complex complex13 = complex11.NaN.add(complex3);
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex5.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2370.46338886, 2370.46338886);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.NaN.cos();
      int int0 = complex0.hashCode();
      Complex complex4 = complex1.ZERO.subtract(complex2);
      Complex complex5 = complex0.multiply(2370.46338886);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex4.ZERO.tanh();
      Complex complex8 = complex2.I.conjugate();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.asin();
      Complex complex11 = complex0.ZERO.sqrt1z();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex4.createComplex(0.6527930498123169, 2903.519);
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sin();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.I.pow(complex1);
      Object object0 = complex0.readResolve();
      String string0 = complex2.toString();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.I.pow(5.593494835247651E-9);
      int int0 = complex2.hashCode();
      Complex complex7 = complex4.multiply(0.0);
      Complex complex8 = complex2.createComplex(0.0, 0.0);
      Complex complex9 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1.2616519927978516);
      Complex complex1 = new Complex(1.2616519927978516, 1.2616519927978516);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.multiply(complex1);
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex2.createComplex(1210.4225188047187, 1210.4225188047187);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex3.I.multiply(20.0);
      String string0 = complex4.ONE.toString();
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.exp();
      int int0 = complex0.hashCode();
      double double0 = complex2.getReal();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex6.pow(complex1);
      Complex complex9 = Complex.valueOf((-1.7292527438195104E-7), 392.8960162);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5017542839050293);
      Complex complex1 = complex0.ZERO.multiply((-461.20014));
      Complex complex2 = complex0.createComplex(2.5017542839050293, 1.4047281742095947);
      Object object0 = complex2.readResolve();
      Complex complex3 = Complex.valueOf((-1544.5), (-19.982));
      Complex complex4 = complex2.I.asin();
      Complex complex5 = complex2.NaN.add(1.4047281742095947);
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.NaN.subtract(complex1);
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex2.subtract(complex3);
      Complex complex7 = complex6.ZERO.tan();
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex5.isInfinite();
      Complex complex8 = complex3.multiply((-1251));
      Object object1 = complex8.NaN.readResolve();
      Complex complex9 = complex8.ZERO.multiply(complex5);
      Complex complex10 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.659380316734314);
      Complex complex1 = complex0.multiply((-1148));
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex2.ONE.multiply((double) (-1148));
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = Complex.valueOf(0.659380316734314, (double) (-1148));
      Complex complex8 = complex6.INF.divide(complex7);
      Complex complex9 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(883.799235290723);
      double double0 = 4544.857239000266;
      Complex complex3 = Complex.valueOf(883.799235290723, 4544.857239000266);
      Complex complex4 = Complex.valueOf(4544.857239000266);
      Object object0 = complex3.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.I.add(complex3);
      int int0 = complex6.hashCode();
      List<Complex> list0 = complex2.NaN.nthRoot(1972);
      try { 
        complex6.ONE.nthRoot((-926));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -926
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double double0 = (-700.974881988941);
      Complex complex0 = new Complex((-700.974881988941));
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(1);
      try { 
        complex1.ONE.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1);
      List<Complex> list0 = complex1.NaN.nthRoot(318);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex1.conjugate();
      double double0 = complex4.NaN.abs();
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex1.ZERO.divide(complex0);
      Complex complex8 = complex3.ONE.divide(Double.NaN);
      Complex complex9 = complex8.I.tanh();
      boolean boolean0 = complex4.equals(list0);
      Complex complex10 = complex5.subtract((-20.0));
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex12.I.add(0.0);
      Complex complex14 = complex4.sin();
      double double1 = complex1.ZERO.abs();
      Complex complex15 = complex14.NaN.log();
      Complex complex16 = complex15.ZERO.atan();
      Complex complex17 = complex2.multiply((-20.0));
      Complex complex18 = complex17.ZERO.conjugate();
      Complex complex19 = complex6.negate();
      Complex complex20 = complex18.pow(complex0);
      boolean boolean1 = complex18.isInfinite();
      double double2 = complex20.getImaginary();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-416.59));
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1653.2, 1653.2);
      Complex complex2 = complex1.I.tanh();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.INF.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.pow(20.0);
      Complex complex8 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.add((-760.628960631191));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex3.multiply(512);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.add(complex1);
      double double0 = complex0.I.getArgument();
      List<Complex> list0 = complex0.nthRoot(2953);
      Complex complex3 = complex0.sqrt1z();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1118.070801);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex1.NaN.divide(1096.541396017526);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2360.4995034);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ZERO.sin();
      double double0 = complex1.NaN.abs();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-572.31697), (-2730.00849115));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.NaN.multiply(0.0);
      Complex complex4 = complex0.ZERO.multiply((-1));
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.I.subtract(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.INF.add(complex1);
      Complex complex11 = complex10.ZERO.negate();
      Complex complex12 = complex5.divide((-572.31697));
      List<Complex> list0 = complex9.INF.nthRoot(1);
      Complex complex13 = complex6.INF.negate();
      Complex complex14 = complex7.tan();
      Complex complex15 = complex7.sqrt1z();
      Complex complex16 = complex5.cosh();
      Complex complex17 = complex5.reciprocal();
      Complex complex18 = complex12.acos();
      Complex complex19 = complex12.pow(complex11);
      Complex complex20 = complex12.conjugate();
      Complex complex21 = complex15.cosh();
      String string1 = complex7.toString();
      Complex complex22 = Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.INF.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.sqrt1z();
      String string0 = complex1.ZERO.toString();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex6.ZERO.atan();
      Complex complex8 = complex5.INF.add(complex3);
      Complex complex9 = Complex.valueOf((-1633.222549));
      Complex complex10 = complex9.sinh();
      double double0 = complex3.getImaginary();
      Complex complex11 = complex3.atan();
      Complex complex12 = complex11.ONE.subtract(complex10);
      double double1 = complex2.abs();
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex6.log();
      Complex complex15 = complex14.INF.log();
      Complex complex16 = complex14.INF.exp();
      Complex complex17 = complex1.tan();
      boolean boolean1 = complex7.equals(complex14);
      double double2 = complex4.getArgument();
      double double3 = complex4.getArgument();
      Complex complex18 = complex12.createComplex((-1633.222549), 0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.divide((-1728.0));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf((-1728.0));
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.INF.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex1.ONE.pow(3102.4894608483);
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.asin();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex4.equals(complex2);
      ComplexField complexField1 = complex10.getField();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex11.NaN.subtract(1.0);
      Complex complex13 = complex1.pow(complex11);
      Complex complex14 = complex13.ONE.pow(complex11);
      double double1 = complex0.getImaginary();
      Complex complex15 = complex9.I.multiply(0.0);
      Complex complex16 = complex3.multiply(632);
      int int0 = complex3.NaN.hashCode();
      Complex complex17 = complex16.divide(0.0);
      Complex complex18 = complex4.exp();
      Complex complex19 = complex18.NaN.tan();
      Complex complex20 = complex17.pow(1.0);
      Complex complex21 = complex10.multiply((-444));
      Complex complex22 = complex12.pow(3102.4894608483);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.32341301441192627, 0.32341301441192627);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = Complex.valueOf(0.32341301441192627, 0.32341301441192627);
      Complex complex4 = complex0.divide(1.2204489707946777);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex5.INF.multiply(complex3);
      Complex complex7 = complex4.I.divide(0.32341301441192627);
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex7.NaN.subtract(complex1);
      Complex complex10 = complex7.ZERO.multiply((-331));
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex3.ONE.createComplex((-0.010714690733195933), (-562.0));
      double double2 = complex4.abs();
      Complex complex12 = complex0.exp();
      List<Complex> list0 = complex12.ZERO.nthRoot(1892);
      Complex complex13 = complex3.atan();
      Complex complex14 = complex13.NaN.multiply((-15));
      Complex complex15 = Complex.valueOf(0.0, 2.0);
      Complex complex16 = complex4.tanh();
      boolean boolean0 = complex16.equals(complex12);
      boolean boolean1 = complex4.isInfinite();
      Complex complex17 = complex15.divide(0.0);
      Complex complex18 = complex12.negate();
      Complex complex19 = complex18.ONE.tanh();
      Complex complex20 = complex6.multiply(complex9);
      Complex complex21 = complex11.negate();
      Complex complex22 = complex7.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = complex0.INF.multiply((-2064.483854349071));
      double double0 = complex0.abs();
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.INF.exp();
      boolean boolean0 = complex5.isInfinite();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.NaN.tan();
      Complex complex10 = complex8.cos();
      Object object0 = complex5.readResolve();
      Complex complex11 = complex0.multiply(complex2);
      Complex complex12 = complex1.multiply(complex11);
      ComplexField complexField0 = complex4.getField();
      Complex complex13 = new Complex(0.0, (-1327.647127031382));
      Complex complex14 = complex1.multiply(complex13);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract((-1692.0));
      Complex complex2 = complex0.I.createComplex(7.494218049456063E304, 7.494218049456063E304);
      Complex complex3 = complex0.NaN.tanh();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex2.ZERO.negate();
      Complex complex7 = complex0.NaN.pow(0.0);
      Complex complex8 = complex4.I.add(0.0);
      Complex complex9 = complex4.I.pow(complex0);
      Complex complex10 = complex4.pow(0.0);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex11.ZERO.asin();
      Complex complex13 = complex12.divide(complex4);
      Complex complex14 = complex11.NaN.cos();
      Complex complex15 = complex11.ZERO.log();
      Complex complex16 = Complex.valueOf(0.0);
      boolean boolean0 = complex3.isInfinite();
      Complex complex17 = complex9.atan();
      double double1 = complex17.ONE.abs();
      Complex complex18 = complex2.atan();
      Complex complex19 = complex9.subtract(705.332163);
      Complex complex20 = complex2.pow(5.058693461947143E-9);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.acos();
      String string0 = complex0.I.toString();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = new Complex(2.81312841469177E128, 2.81312841469177E128);
      Complex complex5 = complex3.ZERO.subtract(complex4);
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex1.I.pow(complex3);
      Complex complex8 = complex3.ZERO.divide(complex1);
      Complex complex9 = complex1.subtract(1732.4005014686);
      double double0 = complex9.I.abs();
      Complex complex10 = complex4.INF.multiply(complex2);
      Complex complex11 = complex6.divide(complex1);
      double double1 = complex5.getImaginary();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex12 = complex6.NaN.tanh();
      Complex complex13 = complex9.cos();
      Complex complex14 = Complex.valueOf((-2.81312841469177E128), 1732.4005014686);
      Complex complex15 = complex14.ZERO.conjugate();
      double double2 = complex6.getReal();
      Complex complex16 = complex3.reciprocal();
      Complex complex17 = complex2.acos();
      double double3 = complex7.getArgument();
      Complex complex18 = complex4.cosh();
      boolean boolean0 = complex12.isInfinite();
      double double4 = complex9.getImaginary();
      Complex complex19 = complex8.add(complex7);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      Complex complex1 = new Complex(0.0, (-20.0));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.INF.sin();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex1.INF.multiply(7);
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex4.subtract(complex1);
      Complex complex10 = complex9.I.multiply(complex6);
      Complex complex11 = complex9.INF.multiply(complex0);
      Complex complex12 = complex1.ZERO.conjugate();
      String string0 = complex12.toString();
      Complex complex13 = complex2.tanh();
      double double0 = complex4.getImaginary();
      Complex complex14 = complex0.multiply(complex10);
      boolean boolean0 = complex11.isNaN();
      Complex complex15 = complex0.exp();
      Complex complex16 = complex3.tanh();
  }
}
