/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:52:38 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1741.36126101, 1741.36126101);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex2.log();
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex2.divide(complex6);
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex7.createComplex(1741.36126101, 1741.36126101);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.ZERO.add(complex6);
      Complex complex13 = complex10.multiply((-1));
      Complex complex14 = complex6.add(complex0);
      Complex complex15 = complex2.NaN.divide((double) (-1));
      Complex complex16 = complex10.createComplex(180.6603, 180.6603);
      Complex complex17 = complex0.subtract(180.6603);
      Complex complex18 = complex16.conjugate();
      Complex complex19 = complex8.pow(complex10);
      Complex complex20 = complex3.pow(1.0);
      Complex complex21 = complex14.sqrt1z();
      boolean boolean0 = complex18.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1178.803763, 1178.803763);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex3.I.sin();
      Complex complex6 = complex3.ZERO.add(0.7853981633974483);
      Complex complex7 = complex3.ONE.atan();
      int int0 = complex2.hashCode();
      Complex complex8 = complex6.ZERO.sqrt();
      Complex complex9 = complex4.I.sinh();
      Complex complex10 = complex9.NaN.sqrt();
      Complex complex11 = Complex.I;
      Complex complex12 = complex9.ZERO.multiply(complex11);
      Complex complex13 = complex4.ONE.multiply(complex3);
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = complex0.add(complex2);
      Complex complex16 = complex9.asin();
      Complex complex17 = complex15.tanh();
      Complex complex18 = complex0.negate();
      double double1 = complex0.NaN.abs();
      Complex complex19 = Complex.valueOf((-796.065707588988), 1178.803763);
      Complex complex20 = complex19.ONE.add(Double.NaN);
      Complex complex21 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1620.0522);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.divide(complex0);
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex1.NaN.add(complex0);
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex0.pow(2144.75);
      Complex complex7 = complex1.divide(1620.0522);
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex6.subtract(2144.75);
      Complex complex9 = Complex.valueOf(0.0);
      double double0 = complex6.INF.getArgument();
      Complex complex10 = Complex.valueOf(1702.8981792078066, 0.0);
      Complex complex11 = complex10.I.reciprocal();
      Complex complex12 = complex9.ONE.sinh();
      List<Complex> list0 = complex7.nthRoot(3266);
      int int1 = complex2.NaN.hashCode();
      Complex complex13 = complex6.createComplex(0.0, (-2711.052490256347));
      int int2 = complex13.hashCode();
      Complex complex14 = complex2.negate();
      String string0 = complex13.INF.toString();
      Complex complex15 = complex13.subtract(964.8276945608);
      // Undeclared exception!
      complex9.nthRoot(3266);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.INF.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      double double1 = complex2.INF.abs();
      Complex complex3 = complex0.createComplex(625.52862327, 625.52862327);
      boolean boolean0 = complex0.isInfinite();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2076.7358472627157, 2076.7358472627157);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2432.073678), (-2432.073678));
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(852.0007682324654, 0.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.I.asin();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex0.sqrt1z();
      double double0 = complex0.getReal();
      Complex complex6 = complex2.subtract(0.0);
      Complex complex7 = complex2.I.multiply(0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      double double1 = complex6.getArgument();
      List<Complex> list0 = complex2.nthRoot(890);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.I.subtract(complex6);
      Complex complex11 = complex5.NaN.reciprocal();
      Complex complex12 = complex0.log();
      Complex complex13 = complex9.pow(complex1);
      Complex complex14 = complex2.negate();
      Complex complex15 = complex14.INF.sinh();
      Complex complex16 = complex12.reciprocal();
      String string0 = complex5.toString();
      Complex complex17 = complex16.sqrt();
      Complex complex18 = complex2.subtract(Double.NaN);
      Complex complex19 = complex18.ZERO.tan();
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex0.divide((-455.224));
      Complex complex22 = complex5.sqrt();
      Complex complex23 = complex18.divide((double) 0);
      Complex complex24 = complex16.pow(2757.414444893008);
      Complex complex25 = complex7.subtract(complex22);
      Complex complex26 = complex24.subtract((double) 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2973.5));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.createComplex((-2973.5), 4336.4418);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.subtract(4336.4418);
      Complex complex6 = Complex.valueOf(2551.80342633587, 2.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2366.339371866, Double.NaN);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.ZERO.multiply((-2400));
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.add(complex3);
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1306.4, 1306.4);
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.NaN.subtract((-1425.4283287991789));
      Complex complex2 = Complex.valueOf((-1425.4283287991789), 3690.90528833239);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.I.cos();
      Complex complex5 = complex4.I.pow(3690.90528833239);
      double double1 = complex0.getArgument();
      Complex complex6 = complex1.pow((-26.19968085578));
      Complex complex7 = complex3.I.multiply((-299.77657));
      Complex complex8 = complex6.I.reciprocal();
      Complex complex9 = complex0.INF.tan();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex2.sin();
      double double2 = complex11.INF.getArgument();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex3.asin();
      double double3 = complex5.getArgument();
      Complex complex13 = Complex.valueOf((-1.2116165315442256E-158));
      Complex complex14 = new Complex(1.0428862571716309, (-4.220866994206517E-8));
      Complex complex15 = complex12.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.divide((-1909.28579838951));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.ONE.divide(0.0);
      Complex complex10 = complex0.sqrt1z();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex11 = complex10.INF.divide(complex3);
      Complex complex12 = complex4.multiply(complex10);
      Complex complex13 = complex4.I.cos();
      Complex complex14 = complex10.multiply(1);
      Complex complex15 = complex4.negate();
      String string0 = complex14.toString();
      String string1 = complex10.toString();
      Complex complex16 = complex4.acos();
      double double0 = complex16.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(8.568043768122183E-212, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sqrt1z();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.NaN.createComplex(1569.663, 1569.663);
      Complex complex6 = complex2.INF.pow(1569.663);
      double double0 = complex6.NaN.abs();
      Complex complex7 = complex6.NaN.exp();
      Complex complex8 = Complex.valueOf((-2198.053), (-2198.053));
      double double1 = complex8.I.abs();
      Complex complex9 = Complex.valueOf((-2198.053), (-2198.053));
      Complex complex10 = complex5.INF.divide(270.59686299);
      double double2 = complex0.getReal();
      Complex complex11 = complex10.ZERO.pow(Double.NaN);
      String string0 = complex2.toString();
      boolean boolean0 = complex10.isInfinite();
      Complex complex12 = complex5.asin();
      Complex complex13 = complex12.multiply(257);
      Complex complex14 = complex12.ONE.acos();
      Complex complex15 = complex5.tanh();
      ComplexField complexField0 = complex11.getField();
      Complex complex16 = complex10.subtract(Double.POSITIVE_INFINITY);
      Complex complex17 = complex14.exp();
      boolean boolean1 = complex15.isNaN();
      double double3 = complex16.getArgument();
      Complex complex18 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2423.5673);
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex2.ONE.cosh();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = new Complex(1953.272200412958, (-1984.6045012919));
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex6.INF.divide(complex0);
      Complex complex8 = complex4.createComplex(Double.POSITIVE_INFINITY, (-1984.6045012919));
      List<Complex> list0 = complex8.nthRoot(1043);
      Object object0 = complex8.I.readResolve();
      boolean boolean0 = complex6.isNaN();
      double double0 = complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2724.89067499));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.NaN.tan();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex1.ONE.pow((-2724.89067499));
      Complex complex4 = complex1.sin();
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.createComplex((-2724.89067499), (-2724.89067499));
      boolean boolean1 = complex0.equals(complex5);
      Complex complex7 = complex2.atan();
      double double0 = complex7.getArgument();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.ONE.subtract(complex5);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex12 = complex2.multiply(complex10);
      Complex complex13 = complex6.pow((-2724.89067499));
      Complex complex14 = complex5.sqrt1z();
      Complex complex15 = complex13.exp();
      Complex complex16 = Complex.valueOf(1.0, (-4.0));
      Complex complex17 = complex16.INF.divide(1.3683509995845583E-8);
      double double1 = complex15.abs();
      Complex complex18 = complex6.pow((-3778.930306));
      double double2 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.INF.multiply((-1248));
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.INF.tan();
      int int0 = complex5.I.hashCode();
      Complex complex6 = complex5.I.tanh();
      Object object0 = complex1.INF.readResolve();
      Complex complex7 = complex1.ZERO.cos();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex1.equals(object1);
      ComplexField complexField0 = complex1.getField();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.ONE.divide(complex7);
      Complex complex11 = complex10.I.asin();
      ComplexField complexField1 = complex7.getField();
      Complex complex12 = complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2649.7), (-2649.7));
      Complex complex1 = complex0.subtract(20.0);
      List<Complex> list0 = complex0.INF.nthRoot(3147);
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex1.ZERO.multiply((-199));
      Object object0 = complex3.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(568.1, 568.1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.subtract((double) (-199));
      Complex complex7 = complex4.negate();
      Complex complex8 = Complex.valueOf(6.080174837146273E-8, 6.080174837146273E-8);
      Complex complex9 = complex7.subtract((-9.499490261077881E-8));
      Complex complex10 = complex8.subtract((-2649.7));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.valueOf((-1.9287515190177685E-7));
      Complex complex3 = Complex.valueOf(4.4266130556431266E-266, 0.0);
      Complex complex4 = complex0.I.atan();
      try { 
        complex0.ZERO.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3315.17718941476, 3315.17718941476);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.tan();
      String string0 = complex1.ZERO.toString();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.ONE.createComplex(3315.17718941476, (-3918.251537441751));
      Complex complex6 = complex5.negate();
      Complex complex7 = complex3.ONE.exp();
      Complex complex8 = complex7.ZERO.divide(complex1);
      Complex complex9 = complex0.NaN.pow(191.58605601888);
      Complex complex10 = complex3.add(1.4450790882110596);
      Complex complex11 = complex10.ZERO.multiply(1241);
      Complex complex12 = complex0.subtract(1.4450790882110596);
      Complex complex13 = complex9.sqrt1z();
      Complex complex14 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex1.ONE.nthRoot(1474);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sqrt1z();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex4 = complex0.sinh();
      boolean boolean1 = complex4.isNaN();
      Complex complex5 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-335.3334383224874));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.INF.tan();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.NaN.divide(complex1);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = Complex.valueOf(0.0, 798.0610538419387);
      double double0 = complex8.I.getArgument();
      Complex complex9 = complex1.tan();
      try { 
        complex2.nthRoot((-117));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -117
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.I.createComplex((-2106.141789935365), (-3405.0));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex5.I.pow(complex6);
      double double0 = complex2.abs();
      Complex complex8 = complex5.add(1.1752011936438014);
      Complex complex9 = complex8.atan();
      Complex complex10 = complex8.I.sqrt();
      Complex complex11 = complex3.divide(complex1);
      String string0 = complex3.toString();
      Complex complex12 = complex3.createComplex((-435.414), (-72.238864586073));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(0.0);
      Object object0 = complex2.readResolve();
      Complex complex4 = complex1.ONE.divide(complex2);
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = Complex.valueOf(0.0, (-2129.0));
      Complex complex6 = complex2.createComplex(0.0, 3231.8346);
      ComplexField complexField0 = complex3.getField();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex5.add(complex6);
      Complex complex10 = complex3.NaN.negate();
      Complex complex11 = complex1.createComplex(1.2481715679168701, 3545.78664379877);
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex12 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(2.3848605155944824, 2.3848605155944824);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.conjugate();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.INF.hashCode();
      Complex complex1 = complex0.subtract(1766.5617908817);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex0.I.subtract(complex5);
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex5.NaN.add(0.0);
      Complex complex8 = complex1.multiply(complex0);
      Complex complex9 = complex2.add(complex4);
      Object object0 = complex9.ZERO.readResolve();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = Complex.valueOf(1766.5617908817, 3.913063150326019E-282);
      boolean boolean0 = complex2.isNaN();
      Complex complex12 = complex0.negate();
      int int1 = complex4.hashCode();
      Complex complex13 = complex6.sinh();
      Complex complex14 = complex10.I.cosh();
      Complex complex15 = complex0.sqrt();
      Complex complex16 = complex15.cos();
      Complex complex17 = complex16.add(complex6);
      Complex complex18 = complex10.acos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.pow((-4051.83339686));
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1.5548923015594482);
      Complex complex1 = Complex.ONE;
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4724.4875759);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex1.ONE.subtract(4724.4875759);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4059133529663086, 2.4059133529663086);
      Complex complex1 = complex0.ZERO.add(2.4059133529663086);
      Complex complex2 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex2);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex3.ONE.tanh();
      double double0 = complex5.INF.getArgument();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex0.multiply(2827.97519092901);
      Complex complex10 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1961.103577663788), (-1961.103577663788));
      Complex complex1 = complex0.I.multiply(1114);
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.multiply(1114);
      Complex complex5 = complex0.INF.atan();
      Complex complex6 = complex1.INF.createComplex((-1961.103577663788), 1114);
      Complex complex7 = complex0.ONE.tan();
      Complex complex8 = complex7.INF.pow(complex0);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex0.pow(4637.30536);
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex11.ONE.sin();
      Complex complex13 = complex12.I.reciprocal();
      Complex complex14 = complex5.atan();
      Complex complex15 = complex10.negate();
      Complex complex16 = complex15.negate();
      Complex complex17 = complex16.ONE.pow(complex7);
      Complex complex18 = Complex.valueOf((double) 1114);
      Complex complex19 = complex2.multiply(complex18);
      Complex complex20 = complex5.negate();
      Complex complex21 = Complex.valueOf((-1088.0480963730872));
      Object object0 = new Object();
      boolean boolean0 = complex14.equals(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1975.4876606263));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex3.I.subtract(0.0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.ZERO.cosh();
      boolean boolean0 = complex5.isNaN();
      double double0 = complex2.getArgument();
      Complex complex7 = complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.INF.multiply(1);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf((-3.479042513414447E-9), 20.0);
      Complex complex7 = complex2.multiply((-49.2799156093));
      Complex complex8 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      int int0 = complex0.I.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex1.I.multiply(0);
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex7.INF.cos();
      Complex complex9 = complex1.ZERO.exp();
      String string1 = complex1.toString();
      Object object0 = complex1.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex1.ZERO.asin();
      double double0 = complex6.I.abs();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex12.I.sqrt1z();
      Object object1 = complex12.I.readResolve();
      Complex complex14 = complex1.cosh();
      Complex complex15 = complex11.ZERO.tanh();
      Complex complex16 = complex11.log();
      Complex complex17 = complex9.sinh();
      Complex complex18 = complex11.log();
      Complex complex19 = complex7.subtract(768.8576579);
      Complex complex20 = complex0.reciprocal();
      Complex complex21 = complex18.pow((-779.0));
      Complex complex22 = complex3.atan();
      ComplexField complexField1 = complex2.getField();
      Complex complex23 = complex1.add(complex11);
      Complex complex24 = complex13.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.sqrt();
      String string0 = complex2.toString();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(12.189978322, (-2284.7195059659));
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.sqrt1z();
      Complex complex7 = complex5.NaN.tan();
      Complex complex8 = complex4.conjugate();
      List<Complex> list0 = complex8.I.nthRoot(1429);
      Complex complex9 = complex8.ONE.add(complex3);
      Complex complex10 = complex4.divide(1043.944938);
      ComplexField complexField0 = complex7.getField();
      Complex complex11 = complex5.exp();
      int int0 = complex4.hashCode();
      Complex complex12 = complex9.pow((-4.608112855795952E276));
      Complex complex13 = complex3.createComplex(1904.8555496196861, (-2284.7195059659));
      boolean boolean0 = complex4.isNaN();
      Object object0 = complex7.readResolve();
      double double0 = complex4.getReal();
      Complex complex14 = Complex.valueOf(1904.8555496196861);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(188.39802355924, 188.39802355924);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.NaN.divide(1462.92825969);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf(0.0, 1462.92825969);
      Complex complex5 = Complex.valueOf(188.39802355924);
      double double0 = complex5.getArgument();
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.multiply(1835);
      Complex complex8 = complex6.NaN.add(complex3);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex5.ONE.subtract(1.0);
      Complex complex11 = complex3.negate();
      Complex complex12 = complex11.NaN.conjugate();
      String string0 = complex0.toString();
      Complex complex13 = complex11.NaN.tan();
      Complex complex14 = complex0.subtract(complex5);
      Complex complex15 = Complex.valueOf(1462.92825969);
      double double1 = complex11.abs();
      Complex complex16 = complex4.atan();
      Complex complex17 = complex3.subtract(complex16);
      Complex complex18 = complex15.atan();
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = Complex.valueOf(20.0, 0.0);
      Complex complex5 = complex2.ZERO.add(0.0);
      int int0 = complex5.INF.hashCode();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.I.subtract(3324.9);
      Complex complex8 = complex6.NaN.tan();
      Complex complex9 = complex1.multiply(7);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex2.subtract(complex9);
      Complex complex12 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      String string0 = complex0.ONE.toString();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex2 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.multiply(304.854819);
      double double0 = complex2.getImaginary();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf(304.854819, 1064.98106);
      Complex complex8 = complex4.createComplex((-679.4170841904113), (-3.314051560952014E-254));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.I.subtract(complex1);
      Complex complex4 = complex2.NaN.add(complex1);
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex1.exp();
      boolean boolean0 = complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1293.1533209020097));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.I.acos();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex4.acos();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sin();
      int int0 = complex2.ONE.hashCode();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = Complex.valueOf(310.07);
      double double0 = complex4.ZERO.abs();
      Complex complex6 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1390.3136056354));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide((-1.1214757379328965E-8));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-1503.37231226279);
      Complex complex0 = new Complex((-1503.37231226279));
      Complex complex1 = null;
      Complex complex2 = complex0.sin();
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-5.3086706437795354E-9);
      Complex complex1 = complex0.multiply((-5.3086706437795354E-9));
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.ONE.multiply(complex0);
      Complex complex5 = complex2.exp();
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex6.INF.multiply(complex5);
      Complex complex8 = complex0.ONE.divide(complex4);
      Complex complex9 = complex6.ONE.cos();
      Complex complex10 = complex5.add(complex2);
      double double1 = complex10.ZERO.getArgument();
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex7.pow(5.5375196488302575E305);
      Complex complex13 = complex4.multiply(1786);
      Complex complex14 = complex13.ONE.multiply(0.0);
      Object object0 = complex13.ZERO.readResolve();
      Complex complex15 = complex1.asin();
      Complex complex16 = complex7.asin();
      Complex complex17 = complex3.cos();
      try { 
        complex17.INF.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1207.5576229227897);
      Complex complex2 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(2.1503376960754395, (-1203.117796961));
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(27.0, (-2198.1344414547));
      Complex complex1 = complex0.multiply(1);
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.add(4.8838973948592766E-8);
      Complex complex3 = complex2.ONE.divide((-2198.1344414547));
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex4.NaN.divide(complex2);
      Complex complex6 = complex2.I.atan();
      Complex complex7 = complex3.NaN.cos();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex9 = complex8.sqrt();
      double double0 = complex0.abs();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex3.multiply(1);
      double double1 = complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-779.1595293628479), (-779.1595293628479));
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.NaN.add(0.0);
      Complex complex2 = complex0.divide((-779.1595293628479));
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex2.createComplex((-2610.4), (-2610.4));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1.6889383928999305E13);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.valueOf(1.6889383928999305E13);
      Complex complex3 = complex0.subtract(1.6889383928999305E13);
      Complex complex4 = complex3.add(1.6889383928999305E13);
      double double0 = complex0.getArgument();
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex0.subtract(1.6889383928999305E13);
      int int0 = complex10.ONE.hashCode();
      Complex complex11 = complex4.ONE.atan();
      Complex complex12 = complex6.multiply((-989));
      Complex complex13 = complex7.sqrt1z();
      Complex complex14 = complex5.createComplex(0.0, (-1242.473));
      Complex complex15 = complex1.cos();
      Complex complex16 = complex5.createComplex(0.0, 1.6889383928999305E13);
      Complex complex17 = complex12.add(complex6);
      Complex complex18 = complex6.sqrt();
      Complex complex19 = complex12.subtract(0.0);
      Complex complex20 = complex9.tan();
      double double1 = complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.cos();
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.subtract(1.0);
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-2935.3336494812), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.add((-2935.3336494812));
      Complex complex3 = complex2.multiply(261.29053075);
      Complex complex4 = complex2.I.divide((-2935.3336494812));
      int int0 = complex1.INF.hashCode();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex5.INF.sqrt();
      Object object0 = complex1.INF.readResolve();
      Complex complex7 = complex0.I.pow(complex1);
      Complex complex8 = complex0.sqrt();
      boolean boolean0 = complex8.isNaN();
      Complex complex9 = complex8.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.ONE.conjugate();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex4.I.acos();
      List<Complex> list0 = complex5.NaN.nthRoot(724);
      Complex complex7 = complex2.ONE.exp();
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex9.ZERO.tanh();
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex0.asin();
      double double1 = complex3.getImaginary();
      boolean boolean1 = complex11.isNaN();
      Complex complex12 = complex3.acos();
      int int0 = complex2.hashCode();
      Complex complex13 = Complex.valueOf(2245.0, 2406.7630138);
      Complex complex14 = complex8.multiply(complex11);
      Complex complex15 = complex8.acos();
      Complex complex16 = Complex.valueOf(0.7853981633974483);
      Complex complex17 = complex16.multiply(1116);
      List<Complex> list1 = complex8.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex((-1324.64));
      Complex complex2 = complex0.INF.add(complex1);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0);
      ComplexField complexField0 = complex1.ZERO.getField();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sin();
      double double0 = complex0.abs();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      String string0 = complex0.toString();
      String string1 = complex0.INF.toString();
      Complex complex1 = Complex.valueOf(823.07847779, 823.07847779);
      Complex complex2 = complex0.ZERO.divide(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.conjugate();
      Object object0 = complex3.ZERO.readResolve();
      Object object1 = complex2.ZERO.readResolve();
      Complex complex4 = complex2.add(0.0);
      Object object2 = complex4.readResolve();
      Complex complex5 = complex1.createComplex((-3.0173901411577916E-8), (-2434.4948041814273));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2633.3504403149195, 2633.3504403149195);
      Complex complex2 = complex0.I.add(2633.3504403149195);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.tanh();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex3.subtract(complex0);
      int int0 = complex6.hashCode();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.divide(Double.NaN);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.INF.multiply(1264);
      Complex complex5 = complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-3746.222));
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex1.INF.subtract(complex0);
      Complex complex4 = complex0.ONE.conjugate();
      Complex complex5 = complex4.INF.divide(1042.3);
      Complex complex6 = complex3.NaN.multiply((-1));
      Complex complex7 = Complex.valueOf((-3746.222), 0.0);
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex3.NaN.createComplex((-3746.222), Double.NaN);
      String string0 = complex10.INF.toString();
      double double0 = complex8.getImaginary();
      try { 
        complex0.nthRoot((-3511));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,511
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(795.2);
      Complex complex1 = complex0.ONE.sin();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.INF.sqrt();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex0.multiply(2050);
      String string0 = complex3.ONE.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-683.4534885));
      Complex complex2 = complex0.add((-3527.64538650153));
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.38041436672210693);
      Complex complex1 = new Complex((-1013.411), 0.38041436672210693);
      Complex complex2 = complex0.I.divide((-1013.411));
      Complex complex3 = complex1.multiply((-1013.411));
      Complex complex4 = complex1.NaN.createComplex((-1013.411), 2203.9511152);
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex3.pow(complex0);
      double double0 = complex1.getArgument();
      Complex complex8 = complex3.acos();
      double double1 = complex0.abs();
      ComplexField complexField1 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(662.88, 662.88);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex6.NaN.acos();
      Complex complex8 = complex5.INF.divide(complex4);
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex4.reciprocal();
      String string0 = complex2.ONE.toString();
      Complex complex12 = Complex.valueOf(2723.429516766998, 2723.429516766998);
      boolean boolean0 = complex4.equals("");
      Complex complex13 = complex1.pow(complex10);
      Complex complex14 = complex7.subtract((-1898.191217359));
      Complex complex15 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.divide(9.140964977432485E-8);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.ONE.subtract(complex3);
      Complex complex6 = complex5.pow(9.140964977432485E-8);
      int int0 = complex1.hashCode();
      Complex complex7 = complex4.log();
      Complex complex8 = complex1.multiply(37);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex10.I.sin();
      Complex complex12 = complex0.add(complex7);
      Complex complex13 = complex12.multiply(complex4);
      Complex complex14 = complex0.sinh();
      Complex complex15 = complex6.acos();
      String string0 = complex12.toString();
      Complex complex16 = complex2.acos();
      Complex complex17 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-500.70223), 1675.32106156);
      Complex complex1 = Complex.valueOf(0.0, 1675.32106156);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = Complex.valueOf((-500.70223));
      Complex complex7 = complex4.add(complex5);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex6.subtract((-500.70223));
      Complex complex10 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5244048833847046);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.pow(0.5244048833847046);
      Complex complex3 = Complex.valueOf(765.92);
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.pow(0.5244048833847046);
      Complex complex7 = Complex.valueOf(765.92);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.NaN.divide(0.0);
      Complex complex3 = complex0.INF.log();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      double double0 = (-1021.2);
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex0.add((-1021.2));
      Complex complex4 = complex3.ONE.log();
      try { 
        complex3.nthRoot((-2515));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,515
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-114.255752));
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex0.add((-114.255752));
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.NaN.multiply(422);
      double double0 = complex0.getArgument();
      Complex complex7 = complex4.multiply((-114.255752));
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(3258.650698, (-1518.6208));
      Complex complex2 = complex1.ONE.divide(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.I.divide((-113.40713));
      Complex complex5 = complex0.ZERO.multiply(0.0);
      Complex complex6 = complex3.I.multiply(1);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.INF.add(complex2);
      List<Complex> list0 = complex8.I.nthRoot(2778);
      Complex complex9 = complex0.multiply(3258.650698);
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex10.NaN.reciprocal();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex5.acos();
      Complex complex15 = complex6.cosh();
      Complex complex16 = complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.ONE.add((double) 1);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex2.NaN.cos();
      Complex complex8 = complex0.ZERO.multiply(1);
      Complex complex9 = complex5.ONE.cosh();
      Complex complex10 = complex9.I.acos();
      boolean boolean0 = complex6.equals(complex0);
      Complex complex11 = complex5.reciprocal();
      Complex complex12 = complex6.subtract((double) 1);
      Complex complex13 = complex12.ONE.exp();
      Complex complex14 = complex4.NaN.subtract(complex2);
      Complex complex15 = complex0.asin();
      Complex complex16 = complex15.NaN.pow(complex5);
      Complex complex17 = complex16.INF.sqrt();
      Complex complex18 = complex12.tan();
      int int0 = complex1.hashCode();
      Complex complex19 = complex18.cosh();
      Complex complex20 = complex19.NaN.add(complex11);
      Complex complex21 = complex11.pow(complex4);
      Complex complex22 = Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add((-1.4494150014095534E-8));
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.valueOf((-1.4494150014095534E-8), (-1.4494150014095534E-8));
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex5.NaN.pow((-4411.48614580479));
      Complex complex8 = complex4.ZERO.multiply(0.0);
      Complex complex9 = complex0.createComplex(283.17093, (-1.0));
      Complex complex10 = complex1.acos();
      Complex complex11 = complex9.multiply(2747);
      Complex complex12 = complex11.ZERO.exp();
      ComplexField complexField0 = complex2.getField();
      Complex complex13 = complex11.NaN.subtract(0.0);
      Complex complex14 = complex9.pow(complex10);
      Complex complex15 = complex9.tan();
      Complex complex16 = complex11.sqrt();
      Complex complex17 = complex7.ZERO.pow(4688.407796);
      Complex complex18 = complex4.reciprocal();
      boolean boolean0 = complex9.isNaN();
      Complex complex19 = complex7.tan();
      Complex complex20 = complex5.negate();
      Object object0 = complex16.readResolve();
      Complex complex21 = complex20.negate();
      Complex complex22 = complex20.NaN.log();
      Object object1 = complex11.readResolve();
      Complex complex23 = complex11.asin();
      Complex complex24 = complex23.createComplex((-7.206766550807255E-8), (-223.7684598678487));
      double double0 = complex21.getArgument();
      Complex complex25 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.I.readResolve();
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.I.reciprocal();
      double double0 = complex0.getReal();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.createComplex(0.0, 0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex3.ZERO.atan();
      Complex complex7 = complex2.sinh();
      List<Complex> list0 = complex7.nthRoot(1);
      Object object1 = complex7.ONE.readResolve();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex8.asin();
      double double1 = complex8.getArgument();
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex3.cosh();
      Complex complex12 = complex8.cos();
      Complex complex13 = complex6.exp();
      Complex complex14 = complex13.divide((double) 1);
      double double2 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex1.ZERO.log();
      Complex complex5 = Complex.valueOf(3504.5234);
      Complex complex6 = complex1.ZERO.pow(1693.29571);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex6.pow(complex1);
      Complex complex9 = complex6.tanh();
      boolean boolean0 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex2.INF.exp();
      int int0 = complex4.NaN.hashCode();
      Complex complex5 = complex2.ONE.subtract(0.0);
      Object object0 = complex2.readResolve();
      int int1 = complex0.hashCode();
      Complex complex6 = complex0.divide(2785.867387867937);
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex6.I.sqrt1z();
      Complex complex9 = complex6.add(2785.867387867937);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.ONE.multiply(2785.867387867937);
      Complex complex12 = complex1.pow(complex10);
      Complex complex13 = Complex.valueOf(271.52688048);
      Complex complex14 = complex13.add(complex6);
      Complex complex15 = complex3.ZERO.divide(complex14);
      double double0 = complex7.abs();
      int int2 = complex0.hashCode();
      Complex complex16 = complex10.add(complex0);
      Complex complex17 = complex7.divide(complex3);
      boolean boolean0 = complex5.isInfinite();
      Complex complex18 = complex16.exp();
      Complex complex19 = complex17.exp();
      Complex complex20 = complex3.reciprocal();
      Complex complex21 = Complex.valueOf((-1008.3412992801391), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.ZERO.conjugate();
      ComplexField complexField0 = complex0.getField();
      List<Complex> list0 = complex0.nthRoot(1026);
      double double0 = complex0.INF.getArgument();
      Complex complex2 = complex1.I.divide(20.0);
      Complex complex3 = complex2.ONE.add(complex1);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex5.INF.multiply(complex4);
      Complex complex7 = complex4.ZERO.subtract((-201.454293338691));
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex1.subtract(complex0);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.asin();
      Complex complex12 = complex1.cos();
      Complex complex13 = complex10.sqrt1z();
      Complex complex14 = complex9.multiply(310);
      Object object0 = complex14.readResolve();
      Complex complex15 = complex14.ZERO.multiply(complex1);
      Complex complex16 = complex15.ONE.divide((double) 1026);
      Complex complex17 = complex0.sqrt();
      Complex complex18 = complex11.conjugate();
      Complex complex19 = complex16.createComplex(0.0, 9.517570994930463E-138);
      Complex complex20 = complex1.acos();
  }
}
