/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:56:11 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(0.9999991077810664, 336.58475);
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.negate();
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex3.INF.getField();
      Object object0 = complex0.NaN.readResolve();
      Complex complex4 = Complex.valueOf(0.9999991077810664);
      double double0 = complex4.ZERO.getArgument();
      List<Complex> list0 = complex3.nthRoot(4176);
      double double1 = complex3.I.abs();
      Complex complex5 = complex3.I.asin();
      Complex complex6 = complex5.I.multiply(1.0);
      Complex complex7 = complex5.ONE.divide(1.0);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex3.NaN.asin();
      Complex complex11 = Complex.valueOf(336.58475);
      Complex complex12 = Complex.I;
      Complex complex13 = complex11.I.divide(complex12);
      boolean boolean0 = complex2.equals(list0);
      Complex complex14 = complex9.log();
      Complex complex15 = complex1.subtract(2539.0333539);
      Complex complex16 = complex1.pow(9.563454814394247E171);
      double double2 = complex14.getImaginary();
      Complex complex17 = complex0.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(3125.42018348497, 3125.42018348497);
      double double0 = complex0.getImaginary();
      Complex complex1 = new Complex(3125.42018348497, (-757.2886289046));
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.INF.conjugate();
      Object object0 = complex4.ZERO.readResolve();
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.acos();
      double double1 = complex8.NaN.abs();
      Complex complex9 = complex7.ONE.atan();
      Complex complex10 = complex5.ZERO.sinh();
      int int0 = complex10.ONE.hashCode();
      Complex complex11 = complex0.multiply(complex1);
      double double2 = complex11.INF.abs();
      Complex complex12 = complex0.pow((-757.2886289046));
      double double3 = complex6.ZERO.abs();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex5.sqrt1z();
      Complex complex15 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.pow(11.409790277969124);
      Complex complex3 = new Complex(Double.NaN, (-2434.680353));
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex3.conjugate();
      try { 
        complex2.nthRoot((-1466));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,466
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2290570545894685E191, (-478.6465671988));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-2.35387025694381E-8));
      Complex complex3 = complex1.NaN.divide(complex2);
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.I.divide(complex0);
      boolean boolean0 = complex7.isInfinite();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex9.I.cos();
      Complex complex11 = complex9.ONE.cos();
      Complex complex12 = complex11.INF.divide(complex0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex13 = complex4.multiply(complex0);
      Complex complex14 = complex4.sqrt();
      Complex complex15 = complex1.multiply(1);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex0.multiply((-2828.126361));
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.NaN.divide(complex1);
      Complex complex7 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex8.NaN.asin();
      Complex complex10 = complex2.pow(Double.NaN);
      String string0 = complex8.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1410.47, (-3256.00519330583));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.NaN;
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex2.NaN.divide(complex3);
      double double0 = complex0.INF.abs();
      Complex complex5 = Complex.valueOf(2.0, (-3256.00519330583));
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = Complex.valueOf((-3256.00519330583));
      Complex complex9 = Complex.valueOf((-3256.00519330583), 1410.47);
      ComplexField complexField0 = complex7.getField();
      Complex complex10 = complex0.divide(complex4);
      Complex complex11 = complex8.pow(1410.47);
      Complex complex12 = complex9.tan();
      Complex complex13 = complex7.pow(2.0);
      Complex complex14 = complex11.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-441.54432), (-1362.623262692913));
      Complex complex1 = complex0.I.pow((-1357.0));
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex0.negate();
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex4.subtract(0.0);
      Complex complex7 = complex6.subtract((-441.54432));
      ComplexField complexField1 = complex0.I.getField();
      Complex complex8 = Complex.valueOf(1679.819, (-1173.7342134));
      boolean boolean0 = complex4.equals(complex3);
      boolean boolean1 = complex3.isInfinite();
      double double0 = complex2.abs();
      Complex complex9 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1259.0344, 3.669404761339415E-165);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex3.INF.negate();
      String string0 = complex2.toString();
      String string1 = complex3.NaN.toString();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex5 = complex0.ZERO.multiply(1259.0344);
      List<Complex> list0 = complex5.INF.nthRoot(1);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.ONE.subtract(complex3);
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex3.sin();
      Complex complex12 = complex1.ONE.reciprocal();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex11.ONE.tanh();
      Complex complex15 = complex14.ZERO.tanh();
      double double0 = complex1.getImaginary();
      boolean boolean0 = complex11.isInfinite();
      Complex complex16 = complex10.ONE.multiply((-2975));
      Complex complex17 = complex11.cosh();
      Complex complex18 = complex11.createComplex(Double.NaN, 3.669404761339415E-165);
      boolean boolean1 = complex3.equals(complex10);
      double double1 = complex7.getArgument();
      Complex complex19 = complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3043.2650475252));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.multiply((-3043.2650475252));
      Complex complex5 = complex2.multiply((-1639));
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex1.ZERO.log();
      Complex complex8 = complex6.ONE.multiply(1910);
      Complex complex9 = Complex.valueOf((double) 1910);
      double double0 = complex1.abs();
      Complex complex10 = complex0.add(1069.008255124);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      double double0 = complex0.getReal();
      Complex complex1 = complex0.add(1.7597776278732318E-296);
      double double1 = complex1.NaN.getArgument();
      Complex complex2 = complex1.I.subtract(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.add(complex1);
      boolean boolean1 = complex2.isNaN();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex1.ZERO.acos();
      Complex complex7 = complex1.multiply(complex3);
      double double2 = complex7.ZERO.abs();
      Complex complex8 = complex1.cos();
      double double3 = complex8.getReal();
      Complex complex9 = complex7.INF.cos();
      Complex complex10 = complex0.subtract(complex7);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex0.divide(complex7);
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.subtract(0.31845372915267944);
      try { 
        complex5.ONE.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-479.704585478326));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.log();
      Object object0 = complex4.INF.readResolve();
      double double0 = complex0.getReal();
      Complex complex5 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(212.46790378119186, 212.46790378119186);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex4.createComplex(0.0, 212.46790378119186);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex8.NaN.tan();
      double double0 = complex4.abs();
      Complex complex10 = complex7.divide((-254.2608076515));
      Complex complex11 = complex7.pow(0.0);
      Complex complex12 = complex6.multiply(2407);
      Complex complex13 = complex12.NaN.multiply((-2120.77478182497));
      Complex complex14 = complex13.INF.subtract((double) 2407);
      Complex complex15 = complex1.divide(complex0);
      boolean boolean0 = complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-2715.45683888456));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.multiply((-262));
      ComplexField complexField0 = complex4.I.getField();
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex0.pow((-2715.45683888456));
      Complex complex6 = complex1.I.multiply((double) (-262));
      double double1 = complex1.getArgument();
      Complex complex7 = complex4.ZERO.createComplex(1256.33954130972, 0.0);
      Complex complex8 = complex4.tan();
      Complex complex9 = complex5.ZERO.subtract(7.436813814737735E-8);
      ComplexField complexField1 = complex8.I.getField();
      Complex complex10 = complex5.multiply(complex4);
      Complex complex11 = complex6.exp();
      Complex complex12 = complex11.conjugate();
      ComplexField complexField2 = complex4.getField();
      Complex complex13 = complex1.tan();
      Complex complex14 = complex3.atan();
      Complex complex15 = complex3.sin();
      boolean boolean0 = complex5.isInfinite();
      Complex complex16 = complex12.divide(7.436813814737735E-8);
      Complex complex17 = complex2.divide((-3.141592653589793));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1152.4));
      Complex complex1 = complex0.pow((-1152.4));
      Complex complex2 = complex1.NaN.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.subtract(complex1);
      double double0 = complex1.getArgument();
      Complex complex4 = complex1.subtract(2290.27127);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex1.NaN.createComplex(1.2156908512115479, (-1673.9));
      String string0 = complex1.ZERO.toString();
      double double0 = complex1.getArgument();
      double double1 = complex1.getImaginary();
      Complex complex3 = complex0.createComplex((-5254.4), 0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.add(complex0);
      double double1 = 2.0;
      Complex complex3 = complex1.ONE.conjugate();
      Complex complex4 = Complex.valueOf(2.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.tanh();
      ComplexField complexField0 = complex5.I.getField();
      double double2 = complex1.getImaginary();
      boolean boolean1 = complex5.equals(complex0);
      Complex complex9 = complex2.I.tanh();
      try { 
        complex9.nthRoot((-309));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -309
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.ZERO.multiply(complex2);
      int int0 = complex3.NaN.hashCode();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.NaN.sqrt1z();
      List<Complex> list0 = complex0.nthRoot(1838);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex4.add(complex3);
      Complex complex8 = complex4.add((double) 1838);
      ComplexField complexField1 = complex6.getField();
      Complex complex9 = complex8.sinh();
      Complex complex10 = Complex.NaN;
      boolean boolean0 = complex4.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.conjugate();
      double double0 = complex0.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.multiply((-1198));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4977047507315718E290);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.ONE.hashCode();
      double double0 = complex0.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex1.NaN.pow((-3593.2826874805037));
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex5.add(1.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(3.1962472803616787E178, 3.1962472803616787E178);
      Complex complex1 = Complex.valueOf(3.1962472803616787E178);
      Complex complex2 = complex1.multiply((-1510.17416142));
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex0.I.createComplex((-1510.17416142), 386.0400805039);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex5.ONE.multiply(complex2);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex3.tan();
      String string0 = complex1.toString();
      Complex complex10 = Complex.valueOf(386.0400805039);
      Complex complex11 = Complex.valueOf((-3189.667121));
      String string1 = complex9.toString();
      Complex complex12 = complex7.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1831.6726, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-2768.566556));
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1.11298006674538E-7);
      double double0 = complex0.NaN.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.exp();
      String string0 = complex0.toString();
      Complex complex2 = complex0.tan();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-488.89));
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.sqrt1z();
      double double0 = complex1.abs();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.I.subtract(0.0);
      double double1 = complex2.abs();
      Complex complex5 = Complex.valueOf((-488.89), 20.6659071136);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex2.ONE.sqrt1z();
      Complex complex8 = complex1.add(complex4);
      double double2 = complex8.getReal();
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-3.5574324788328143E-9), 1006.4614695445733);
      Complex complex1 = complex0.I.divide(1006.4614695445733);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.I.multiply(0);
      Complex complex4 = complex0.multiply(1006.4614695445733);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.reciprocal();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = complex0.add(1006.4614695445733);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 2060.251303045;
      Complex complex0 = Complex.valueOf(2060.251303045, 111.55493431530539);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1771.0900847705);
      Complex complex2 = complex1.INF.conjugate();
      int int0 = complex1.ZERO.hashCode();
      double double0 = complex0.getImaginary();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3862.0);
      Complex complex1 = Complex.valueOf((-264.0), 0.32341301441192627);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-167.9216));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex2.I.sqrt();
      Complex complex5 = complex1.ZERO.divide(866.1091821157128);
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex2.multiply(complex7);
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex9.tan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 5.493352163155986E60);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.add((-364.43));
      Complex complex3 = complex0.divide((-358.69452));
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex3.multiply((-358.69452));
      Complex complex6 = complex0.conjugate();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1479.859539332011, 1479.859539332011);
      Complex complex1 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex5.ZERO.add(complex4);
      Complex complex7 = new Complex(1479.859539332011);
      Complex complex8 = complex2.NaN.multiply(1479.859539332011);
      Complex complex9 = complex8.I.pow(Double.NaN);
      Complex complex10 = complex8.INF.tan();
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex6.I.subtract(complex7);
      Complex complex13 = complex3.log();
      Complex complex14 = complex2.divide(1479.859539332011);
      Object object0 = complex4.readResolve();
      Complex complex15 = complex7.add(1479.859539332011);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2846.33354), (-538.2));
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex0.INF.multiply(complex1);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(2187.398597606, 2187.398597606);
      Complex complex2 = complex0.log();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex2.cosh();
      String string0 = complex1.toString();
      Complex complex4 = complex1.ONE.multiply(1153.39501);
      Complex complex5 = complex2.NaN.divide(9.77929222446451E85);
      Complex complex6 = complex1.sinh();
      double double1 = complex3.ZERO.abs();
      Complex complex7 = complex1.exp();
      Complex complex8 = Complex.valueOf(0.0, (-2801.538605));
      boolean boolean0 = complex3.isInfinite();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex1.multiply((-3244));
      Complex complex11 = complex10.ZERO.multiply(0.0);
      Complex complex12 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-681.1203003), (-681.1203003));
      Complex complex1 = Complex.valueOf(0.28597164154052734, 0.28597164154052734);
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.tan();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = Complex.valueOf((-681.1203003), (-1548.0));
      Complex complex6 = complex5.ONE.add(0.28597164154052734);
      double double0 = complex1.getReal();
      String string0 = complex3.toString();
      Complex complex7 = complex0.acos();
      double double1 = complex2.getReal();
      Object object1 = complex7.INF.readResolve();
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex3.sin();
      double double2 = complex2.getArgument();
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = complex4.multiply(1);
      Complex complex12 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1370.84728292178, 1370.84728292178);
      Complex complex1 = new Complex(2539.0333539, (-1.2297127301923986E-8));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.log();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex3.I.pow(0.0);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex1.multiply((-161));
      Complex complex7 = complex6.ONE.exp();
      Complex complex8 = complex6.pow(complex7);
      int int0 = complex6.ONE.hashCode();
      Complex complex9 = complex1.divide(complex6);
      Complex complex10 = complex5.log();
      Complex complex11 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.I.multiply(complex0);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.I.add(complex0);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex2.add(0.0);
      Complex complex11 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf((-1648.04481856), (-1648.04481856));
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.valueOf(741.98409973);
      Complex complex7 = complex4.subtract(741.98409973);
      boolean boolean0 = complex7.isNaN();
      int int0 = complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1165.399021915627, 1165.399021915627);
      double double0 = complex0.ONE.abs();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex5.createComplex(1165.399021915627, 1.0);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = Complex.valueOf(1165.399021915627, 1659.0);
      Complex complex9 = complex5.ONE.multiply(1015);
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex10 = complex1.multiply((-1515));
      Complex complex11 = complex10.ONE.log();
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex0.subtract(1.601222826656464E-7);
      Complex complex14 = complex11.sqrt();
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
      double double1 = complex14.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.getReal();
      Complex complex1 = new Complex((-3501.45670186464), 1.0380723705441457E-168);
      Complex complex2 = complex0.add(complex1);
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add(4573.226766991);
      Complex complex2 = complex1.INF.subtract(6.283185307179586);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.add(4573.226766991);
      double double0 = complex3.abs();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-427.9829098509));
      Complex complex2 = complex1.ONE.subtract((-4634.22141236));
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = (-267.07);
      Complex complex0 = Complex.valueOf((-267.07));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.ONE.createComplex((-28.98), 2736.408383527);
      Object object1 = complex2.readResolve();
      Complex complex4 = complex0.asin();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.INF.pow(complex0);
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex8.NaN.multiply(0.0);
      try { 
        complex9.NaN.nthRoot((-326));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -326
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.INF.tan();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.cos();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex1.multiply(17);
      Complex complex6 = complex3.ZERO.multiply(complex0);
      Complex complex7 = complex2.pow(complex1);
      double double1 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3521.94635);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.INF.asin();
      double double0 = complex0.abs();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-3.5574324788328143E-9), (-3.5574324788328143E-9));
      Complex complex1 = complex0.I.divide((-3.5574324788328143E-9));
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.I.multiply(0);
      Complex complex4 = complex0.multiply((-3.5574324788328143E-9));
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex0.reciprocal();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-1571.50754915));
      Complex complex2 = complex1.NaN.tan();
      double double0 = complex0.INF.getArgument();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.multiply((-905.3));
      Complex complex5 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(717.5457396672, 1.4849631831943512E-269);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add((-2354.39));
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.acos();
      Complex complex4 = new Complex((-2354.39));
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex6.subtract(complex4);
      Complex complex8 = complex7.ONE.negate();
      double double0 = complex6.getImaginary();
      Complex complex9 = complex5.cosh();
      ComplexField complexField0 = complex8.getField();
      Complex complex10 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-2552.974672032256), (-1647.248385));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-679.12800755));
      Complex complex1 = complex0.reciprocal();
      int int0 = complex0.ZERO.hashCode();
      Object object0 = complex0.NaN.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.pow((-679.12800755));
      Complex complex4 = complex3.INF.cosh();
      boolean boolean0 = complex1.isNaN();
      boolean boolean1 = complex1.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex5 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(3.861525553653117E-227);
      Complex complex1 = complex0.pow(5.807052689551411E-8);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.multiply(1143);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.NaN.abs();
      double double1 = 0.0;
      Complex complex1 = Complex.valueOf((-20.0), 0.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.INF.add(Double.NaN);
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.NaN.sqrt1z();
      int int0 = 0;
      try { 
        complex6.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.exp();
      double double0 = complex2.getReal();
      Complex complex3 = complex2.divide((-9.799351869734466E-8));
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex4.INF.pow((-9.799351869734466E-8));
      Complex complex6 = complex3.ONE.exp();
      Complex complex7 = Complex.valueOf(6.249381778908997E141);
      Complex complex8 = Complex.valueOf(Double.NaN);
      Complex complex9 = complex2.cos();
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex10.pow(complex1);
      Complex complex12 = complex7.subtract(2.131521224975586);
      Complex complex13 = complex6.I.subtract((-20.0));
      Complex complex14 = complex10.pow(complex0);
      String string0 = complex7.toString();
      Complex complex15 = complex2.cosh();
      ComplexField complexField0 = complex6.getField();
      Complex complex16 = complex6.sinh();
      Complex complex17 = complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.INF.sinh();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.createComplex((-958.54755974515), (-958.54755974515));
      String string1 = complex0.toString();
      Complex complex3 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.divide(2353.411917879221);
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2886.36, 0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex1.I.divide(complex2);
      double double0 = complex0.getReal();
      Complex complex4 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2914.0), 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(0);
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.cosh();
      boolean boolean0 = complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.add(1.830278273495162E-8);
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex1.I.multiply(complex3);
      double double0 = complex0.getReal();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex0.pow(1.0);
      Complex complex6 = complex3.I.add(1068.635);
      Complex complex7 = complex5.NaN.divide(1.0);
      Complex complex8 = complex7.NaN.acos();
      int int0 = complex0.hashCode();
      Complex complex9 = complex1.pow(complex8);
      double double1 = complex9.ZERO.getArgument();
      double double2 = complex1.getImaginary();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex3.pow(complex9);
      Complex complex12 = complex10.subtract(complex1);
      Complex complex13 = complex9.I.atan();
      Complex complex14 = complex12.NaN.divide(530.14);
      double double3 = complex10.NaN.abs();
      Complex complex15 = complex7.pow(328.4759294);
      List<Complex> list0 = complex15.I.nthRoot(632);
      Complex complex16 = complex15.conjugate();
      Complex complex17 = complex13.ONE.tanh();
      Complex complex18 = complex10.log();
      Complex complex19 = complex9.divide(0.0);
      Complex complex20 = complex4.conjugate();
      Complex complex21 = complex5.multiply(0);
      double double4 = complex21.getArgument();
      Complex complex22 = complex13.exp();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1289.797602996), (-1289.797602996));
      Complex complex1 = Complex.valueOf((-1289.797602996), (-1289.797602996));
      Complex complex2 = new Complex((-1289.797602996));
      Complex complex3 = complex2.conjugate();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex2.exp();
      String string1 = complex2.toString();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex2.ZERO.atan();
      Complex complex8 = complex6.pow((-1289.797602996));
      boolean boolean0 = complex3.isNaN();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex10.sqrt1z();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex0.reciprocal();
      boolean boolean1 = complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(649.3, 649.3);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex1.I.multiply(649.3);
      Object object0 = complex3.NaN.readResolve();
      Complex complex5 = complex3.I.sqrt1z();
      Complex complex6 = complex0.INF.cos();
      Complex complex7 = complex0.NaN.log();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex8 = complex0.tanh();
      double double0 = complex8.getArgument();
      Object object1 = complex2.readResolve();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex1.divide(0.0);
      Complex complex11 = Complex.valueOf(649.3, 649.3);
      Complex complex12 = complex3.pow(649.3);
      Complex complex13 = complex4.log();
      Complex complex14 = Complex.valueOf(1708.129624);
      Complex complex15 = complex2.cosh();
      double double1 = complex8.getImaginary();
      Complex complex16 = complex7.divide((-828.49090777));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = Complex.valueOf(1.3119103908538818, 1.3119103908538818);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.subtract((-1.6661676835672304E143));
      double double0 = complex0.abs();
      Complex complex7 = complex1.ZERO.createComplex(1.0, (-4986.531181450377));
      Complex complex8 = complex6.divide((-1.6661676835672304E143));
      int int0 = complex5.ZERO.hashCode();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex5.conjugate();
      ComplexField complexField0 = complex6.NaN.getField();
      try { 
        complex6.nthRoot((-1619));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,619
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(1401.32234389374);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.ZERO.multiply(1682);
      Complex complex4 = complex0.multiply(163);
      Complex complex5 = complex2.I.log();
      int int0 = complex3.hashCode();
      Complex complex6 = Complex.valueOf(1573.7771892788, 1401.32234389374);
      String string0 = complex3.toString();
      Complex complex7 = complex1.divide(1401.32234389374);
      int int1 = complex4.INF.hashCode();
      Complex complex8 = complex2.ZERO.pow(complex7);
      Complex complex9 = complex4.multiply(complex2);
      Complex complex10 = complex3.I.add((double) 163);
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex9.pow((-2866.003));
      Complex complex13 = complex0.cos();
      Complex complex14 = complex7.atan();
      Complex complex15 = complex3.sin();
      Complex complex16 = complex5.tanh();
      Complex complex17 = Complex.valueOf(0.0, (-2866.003));
      Complex complex18 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1146.77762));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.INF.add((-1146.77762));
      Complex complex3 = complex0.reciprocal();
      Object object0 = complex3.INF.readResolve();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.NaN.createComplex(266.605413247, (-1146.77762));
      Complex complex6 = complex2.negate();
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex1.reciprocal();
      Object object1 = complex6.ZERO.readResolve();
      Complex complex10 = complex0.tan();
      Complex complex11 = complex9.exp();
      int int0 = complex6.hashCode();
      Complex complex12 = complex8.exp();
      Complex complex13 = complex0.add((-1146.77762));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2838.76));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex0.subtract(3019.05551);
      ComplexField complexField0 = complex0.NaN.getField();
      ComplexField complexField1 = complex0.ONE.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(1620.15714, (-1428.74406447));
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = Complex.valueOf(1620.15714);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(4257.926165);
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.subtract(complex1);
      double double1 = complex0.NaN.getArgument();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.cos();
      double double2 = complex5.getImaginary();
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.NaN.multiply(complex4);
      Object object0 = complex8.ZERO.readResolve();
      ComplexField complexField0 = complex5.getField();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex6.tan();
      boolean boolean0 = complex5.isNaN();
      Complex complex11 = complex2.pow(4257.926165);
      Object object1 = complex4.readResolve();
      ComplexField complexField1 = complex9.getField();
      double double3 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(2.0);
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = complex1.INF.multiply(2.0);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex1.NaN.multiply(991);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.NaN.multiply(complex3);
      Complex complex8 = Complex.valueOf((double) 991);
      Complex complex9 = complex5.cosh();
      Object object0 = complex7.I.readResolve();
      Complex complex10 = new Complex(2.0, 2.0);
      Complex complex11 = complex0.INF.subtract(complex10);
      Complex complex12 = complex10.ONE.asin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = complex11.acos();
      Complex complex14 = complex0.I.add(complex4);
      Complex complex15 = complex11.cos();
      Complex complex16 = complex15.INF.cosh();
      Complex complex17 = complex11.log();
      Complex complex18 = complex10.log();
      Complex complex19 = complex18.INF.exp();
      Complex complex20 = complex10.NaN.atan();
      Complex complex21 = complex5.add(complex0);
      Object object1 = complex13.readResolve();
      boolean boolean1 = complex21.equals(object1);
      double double0 = complex16.abs();
      Complex complex22 = complex21.sqrt1z();
      double double1 = complex21.getReal();
      double double2 = complex21.I.abs();
      Complex complex23 = complex20.divide(complex14);
      Complex complex24 = complex4.asin();
      Complex complex25 = complex22.sqrt1z();
      Complex complex26 = complex22.add(complex3);
      Complex complex27 = complex20.subtract((-54.953411));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1273.1, 1273.1);
      Complex complex1 = Complex.ZERO;
      List<Complex> list0 = complex1.INF.nthRoot(674);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex((-1262.7389002796717));
      Complex complex7 = complex5.I.add(complex6);
      Complex complex8 = complex5.NaN.exp();
      double double0 = complex3.getReal();
      Complex complex9 = complex3.pow(0.0);
      int int0 = complex8.ZERO.hashCode();
      Complex complex10 = complex8.divide(2.63957027915428E-66);
      Complex complex11 = complex3.divide(3.3774671482641995E-8);
      Complex complex12 = complex0.cosh();
  }
}
