/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:59:37 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      double double0 = complex0.INF.getArgument();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.asin();
      Complex complex3 = Complex.valueOf(3.5665, 1.3004305362701416);
      Complex complex4 = Complex.valueOf(3907.6);
      Complex complex5 = complex1.subtract((-20.0));
      Complex complex6 = complex1.negate();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex7.negate();
      Complex complex10 = Complex.valueOf(1.3004305362701416);
      Complex complex11 = complex7.sqrt1z();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex0.multiply((-6.370937412495338E-9));
      Complex complex14 = complex13.I.subtract((-2711.48848603443));
      double double1 = complex8.abs();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex15.sin();
      Complex complex17 = complex0.add(complex9);
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      double double0 = (-144.9335279059476);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf((-144.9335279059476), 6.283185307179586);
      double double1 = complex2.INF.getArgument();
      Complex complex3 = complex0.pow(complex2);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ONE.reciprocal();
      List<Complex> list0 = complex5.nthRoot(230);
      String string0 = complex5.toString();
      Complex complex7 = Complex.valueOf((-2410.6075574), (-2410.6075574));
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex4.cosh();
      String string1 = complex8.toString();
      boolean boolean1 = complex0.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.ZERO.abs();
      double double1 = complex0.abs();
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.NaN.divide(1.0);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2282.369, 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex1.NaN.sinh();
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.ONE.subtract(complex0);
      int int0 = complex1.hashCode();
      Complex complex7 = Complex.valueOf((-1771.767179234));
      Complex complex8 = complex7.sin();
      Complex complex9 = complex7.NaN.sqrt1z();
      Complex complex10 = complex6.pow(complex0);
      Complex complex11 = complex6.divide(complex5);
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex12.ZERO.conjugate();
      Complex complex14 = complex12.NaN.cos();
      Complex complex15 = complex12.exp();
      double double1 = 0.0;
      try { 
        complex5.ONE.nthRoot((-125));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -125
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.ZERO.divide(complex4);
      double double0 = complex1.ZERO.getArgument();
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.ZERO.atan();
      double double1 = complex0.getImaginary();
      Object object0 = complex6.readResolve();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.INF.divide(complex5);
      Complex complex11 = complex10.NaN.divide(complex3);
      Complex complex12 = complex10.ZERO.sqrt();
      Complex complex13 = complex9.cosh();
      Complex complex14 = complex3.ZERO.createComplex(1.0, 1.0);
      Complex complex15 = complex13.divide(0.0);
      Complex complex16 = complex7.tanh();
      double double2 = complex1.getReal();
      Complex complex17 = complex3.cos();
      double double3 = complex6.getReal();
      Complex complex18 = complex11.subtract(358.6936282);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-2549.0377076547), (-2549.0377076547));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.ZERO.sqrt();
      Complex complex4 = complex1.NaN.pow((-804.109015401401));
      Complex complex5 = complex4.subtract((-804.109015401401));
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.INF.multiply((-2549.0377076547));
      Complex complex8 = complex1.log();
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = Complex.valueOf(2.573617458343506, (-2549.0377076547));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex2.INF.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.NaN, 2037.43264834149);
      double double0 = complex5.abs();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.ONE.tan();
      String string0 = complex5.NaN.toString();
      Complex complex8 = complex0.subtract(complex5);
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex1.isNaN();
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 97;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.6415454149246216);
      Complex complex1 = null;
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5229.265936402317, 751.653900822776);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(5229.265936402317, 5229.265936402317);
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex5.NaN.conjugate();
      double double0 = complex6.I.abs();
      int int0 = (-1984);
      try { 
        complex0.nthRoot((-1984));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,984
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = Complex.valueOf((-210.867), (-210.867));
      Complex complex4 = complex0.cos();
      boolean boolean0 = complex4.isInfinite();
      double double0 = complex0.INF.abs();
      Complex complex5 = complex2.subtract(complex1);
      Complex complex6 = complex2.multiply((-2816.12119772232));
      Complex complex7 = complex6.NaN.sinh();
      double double1 = complex3.getImaginary();
      Complex complex8 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 1049.986746;
      Complex complex1 = complex0.ONE.multiply(1049.986746);
      Complex complex2 = complex1.ONE.cos();
      List<Complex> list0 = complex1.ONE.nthRoot(3023);
      double double1 = 20.0;
      Complex complex3 = Complex.valueOf((-993.7884925085799), 20.0);
      Complex complex4 = complex3.INF.subtract(0.0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(5.621509038251498E-9, 5.621509038251498E-9);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.I.negate();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex0.subtract(1364.5);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex3.add(2.632077217102051);
      Complex complex9 = complex1.divide(1847.788838809);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.subtract((-678.92592088));
      Complex complex3 = complex2.I.createComplex(0.0, (-678.92592088));
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex0.NaN.reciprocal();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      int int0 = complex7.ZERO.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex7.I.add(complex3);
      ComplexField complexField1 = complex5.getField();
      double double0 = complex7.getArgument();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.ONE.createComplex(20.0, 0.0);
      boolean boolean0 = complex9.isNaN();
      Complex complex12 = complex7.divide(complex2);
      Object object0 = complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-5.7409232));
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.ZERO.divide(complex0);
      Complex complex4 = complex1.INF.divide(complex2);
      Complex complex5 = complex0.ONE.add(complex1);
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex0.negate();
      double double0 = complex0.getReal();
      Complex complex8 = complex0.conjugate();
      Object object0 = complex6.I.readResolve();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex0.divide(Double.NaN);
      double double1 = complex8.getArgument();
      Complex complex11 = complex9.createComplex(Double.NaN, 439.0396);
      Complex complex12 = complex10.add(27.7195498032851);
      double double2 = complex7.getImaginary();
      Object object1 = complex6.readResolve();
      Complex complex13 = complex8.divide((-5.7409232));
      Complex complex14 = complex8.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.negate();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex3.INF.sqrt1z();
      double double0 = complex2.ZERO.abs();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = Complex.valueOf((-20.0));
      Complex complex9 = complex8.ONE.reciprocal();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex8.subtract(0.0);
      double double1 = complex11.ZERO.getArgument();
      Complex complex13 = complex0.conjugate();
      String string0 = complex0.toString();
      Complex complex14 = complex13.ONE.sqrt1z();
      Complex complex15 = complex11.cosh();
      Complex complex16 = complex15.NaN.log();
      double double2 = complex13.getArgument();
      double double3 = complex13.getReal();
      Complex complex17 = complex4.subtract(complex0);
      Complex complex18 = complex13.subtract(complex14);
      Complex complex19 = complex13.atan();
      double double4 = complex19.getImaginary();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-15.0));
      Complex complex1 = Complex.ONE;
      double double0 = complex1.ONE.getArgument();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.ONE.add(complex2);
      Complex complex4 = complex0.acos();
      Complex complex5 = Complex.valueOf((-1559.418074787));
      Complex complex6 = complex0.log();
      Complex complex7 = Complex.valueOf((-1559.418074787));
      Complex complex8 = complex6.INF.multiply(complex3);
      Complex complex9 = complex8.ZERO.multiply(1);
      Complex complex10 = complex2.tanh();
      Complex complex11 = complex1.I.multiply(complex9);
      Complex complex12 = complex6.sqrt();
      Complex complex13 = complex4.subtract(complex1);
      Complex complex14 = complex4.cos();
      double double1 = complex4.abs();
      Complex complex15 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2356.375077);
      int int0 = complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.add(complex1);
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex2.NaN.add(1.0);
      Complex complex4 = complex0.atan();
      double double1 = complex0.abs();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex0.exp();
      Object object0 = complex6.readResolve();
      double double2 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5472630262374878);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.I.createComplex(0.5472630262374878, 1845.318743);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex5.I.multiply(0.5472630262374878);
      Complex complex7 = complex4.I.sqrt1z();
      Complex complex8 = complex5.ONE.conjugate();
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex1.ZERO.cos();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex11.ZERO.multiply(0);
      Complex complex13 = complex4.atan();
      Complex complex14 = complex13.ONE.cos();
      String string0 = complex7.toString();
      Complex complex15 = complex6.subtract(1845.318743);
      Complex complex16 = complex5.multiply(complex13);
      Complex complex17 = complex8.multiply(complex3);
      Complex complex18 = complex13.multiply(0.5472630262374878);
      Complex complex19 = complex12.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      int int0 = complex1.ONE.hashCode();
      double double0 = complex1.NaN.abs();
      Complex complex2 = complex1.NaN.tanh();
      boolean boolean0 = complex0.isNaN();
      boolean boolean1 = complex0.isNaN();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex3.pow(1.4849631831943512E-269);
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex3.NaN.add(Double.NaN);
      double double1 = complex6.NaN.getArgument();
      Complex complex8 = complex4.divide(Double.NaN);
      boolean boolean2 = complex4.isNaN();
      boolean boolean3 = complex3.isNaN();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex2.subtract(1.4849631831943512E-269);
      int int1 = complex0.hashCode();
      double double2 = complex10.getReal();
      Complex complex11 = complex7.multiply(Double.NaN);
      Complex complex12 = complex11.ZERO.log();
      Complex complex13 = complex4.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1166.54, 3.2542391242036633E233);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.INF.divide(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.multiply(3.2542391242036633E233);
      Complex complex4 = complex0.cosh();
      int int0 = complex1.ZERO.hashCode();
      String string0 = complex3.toString();
      Complex complex5 = complex2.createComplex(1166.54, 0.0);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex1.acos();
      Complex complex10 = complex8.log();
      Complex complex11 = complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1599.4874));
      double double0 = complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex2.ONE.cosh();
      Complex complex5 = complex2.subtract(1599.4874);
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.divide(0.041666666666666664);
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.multiply(0.041666666666666664);
      Complex complex7 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(20.0);
      Complex complex3 = complex0.log();
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.ZERO.add(complex2);
      Complex complex6 = complex4.tanh();
      try { 
        complex0.NaN.nthRoot((-873));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -873
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2177.976038));
      Complex complex1 = complex0.INF.multiply(331.86639335);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.valueOf(719.3964, 0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4198.33894);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.NaN.divide(0.0);
      Complex complex3 = complex0.ZERO.createComplex(4198.33894, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.pow(0.42225050926208496);
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex4.NaN.negate();
      Complex complex7 = complex4.NaN.sqrt();
      Complex complex8 = complex4.multiply(4198.33894);
      Complex complex9 = Complex.valueOf(0.42225050926208496, 0.42225050926208496);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      double double0 = complex1.NaN.getArgument();
      String string0 = complex0.toString();
      Complex complex3 = complex0.createComplex(2199.896494538107, (-1699.556));
      Complex complex4 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.pow((double) 1);
      Complex complex3 = complex0.ZERO.multiply(1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex3.divide((double) 1);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex7.ZERO.tanh();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex9 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1099.007121057));
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.INF.hashCode();
      double double0 = complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.multiply(0.0);
      Complex complex3 = complex1.ZERO.conjugate();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.ONE.createComplex(0.0, 1824.7622937);
      Complex complex8 = complex4.sqrt1z();
      String string0 = complex1.toString();
      Object object0 = complex1.readResolve();
      Complex complex9 = complex3.multiply(1);
      Complex complex10 = complex4.sinh();
      Complex complex11 = complex7.tan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      double double0 = complex0.I.getArgument();
      Complex complex2 = complex0.INF.conjugate();
      String string0 = complex2.INF.toString();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.cos();
      double double1 = complex1.abs();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.ONE.multiply((-299));
      double double2 = complex4.getImaginary();
      Complex complex7 = complex3.exp();
      int int0 = complex7.ONE.hashCode();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.divide(complex1);
      List<Complex> list0 = complex1.nthRoot(1188);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex1.NaN.cosh();
      Complex complex8 = complex4.multiply(868);
      Complex complex9 = complex8.INF.conjugate();
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex2.cos();
      Complex complex12 = complex2.multiply(complex0);
      double double0 = complex2.getArgument();
      ComplexField complexField0 = complex7.getField();
      Complex complex13 = complex2.multiply(complex11);
      Complex complex14 = complex2.log();
      Complex complex15 = complex2.log();
      Complex complex16 = complex2.sqrt();
      boolean boolean0 = complex15.isInfinite();
      Complex complex17 = complex1.divide(complex0);
      Complex complex18 = complex3.tanh();
      Complex complex19 = complex7.subtract(0.0);
      Complex complex20 = complex15.atan();
      Complex complex21 = complex19.sqrt();
      double double1 = complex13.getArgument();
      boolean boolean1 = complex20.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ZERO.pow(1117.0398);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex1.INF.sinh();
      Complex complex5 = Complex.valueOf(1117.0398, (-2329.12037658458));
      Complex complex6 = complex0.I.multiply(487);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex2.subtract(complex7);
      double double0 = complex2.ZERO.getArgument();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex0.multiply(complex1);
      Complex complex11 = complex8.createComplex(1117.0398, 1117.0398);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1968.9471, 1968.9471);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.subtract(0.0);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = Complex.valueOf(0.0, 1968.9471);
      Complex complex6 = complex4.add(complex1);
      Complex complex7 = complex1.negate();
      Complex complex8 = complex5.ZERO.atan();
      Complex complex9 = complex5.NaN.subtract(complex3);
      int int0 = complex7.hashCode();
      Object object0 = complex5.readResolve();
      String string0 = complex6.toString();
      Complex complex10 = complex0.divide(complex7);
      Complex complex11 = complex10.NaN.pow(complex9);
      Complex complex12 = complex4.add(complex7);
      Complex complex13 = complex6.log();
      Complex complex14 = complex2.I.multiply(complex7);
      Complex complex15 = complex13.add(complex4);
      Complex complex16 = complex13.add((-37.03991));
      Complex complex17 = complex16.I.cosh();
      Complex complex18 = complex13.multiply((-37.03991));
      Complex complex19 = complex18.NaN.multiply(complex3);
      Complex complex20 = complex13.multiply(1199);
      Complex complex21 = complex12.add(Double.NaN);
      String string1 = complex8.toString();
      Complex complex22 = complex8.divide((double) 1199);
      double double0 = complex7.getReal();
      Complex complex23 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1984.5945914);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.INF.multiply((-743));
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex1.INF.add(0.0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex1.tan();
      ComplexField complexField0 = complex7.I.getField();
      Complex complex9 = complex7.ZERO.tan();
      ComplexField complexField1 = complex7.getField();
      double double0 = complex7.getArgument();
      String string0 = complex0.toString();
      Complex complex10 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(110.1378228932216);
      Complex complex1 = complex0.I.createComplex(0.0, (-629.00164884));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.add(complex5);
      Complex complex7 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-61.3568954753198));
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = Complex.valueOf(621.522439266);
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.atan();
      double double0 = complex4.I.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.ONE.sqrt1z();
      ComplexField complexField1 = complex5.NaN.getField();
      boolean boolean1 = complex5.isInfinite();
      Complex complex7 = complex0.I.subtract(0.0);
      Complex complex8 = complex3.subtract(complex0);
      boolean boolean2 = complex1.isNaN();
      Complex complex9 = complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-741.55188418515), (-741.55188418515));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.subtract(1384.706845);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.NaN.sinh();
      Complex complex6 = complex3.pow(6.283185307179586);
      double double0 = complex4.getReal();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex6.sinh();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-3.369999130712228E-9));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.subtract((-3.369999130712228E-9));
      Complex complex3 = complex2.INF.add(0.0);
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex2.divide((-3.369999130712228E-9));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.5967668766998));
      Complex complex1 = complex0.I.reciprocal();
      String string0 = complex0.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex((-1.5967668766998));
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = complex5.exp();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ZERO.pow(3.804034213613942E-130);
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.sinh();
      double double0 = complex2.abs();
      Complex complex4 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.atan();
      int int0 = 2806;
      Complex complex2 = complex1.I.multiply(2806);
      Complex complex3 = complex1.INF.multiply(1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.INF.pow(complex4);
      Complex complex6 = complex5.I.sin();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.subtract(complex0);
      double double1 = complex1.abs();
      boolean boolean0 = complex3.equals(complex2);
      Object object0 = complex5.readResolve();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf(5.982180242124184E65);
      Complex complex2 = Complex.valueOf(5.982180242124184E65);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.ONE.pow(0.0);
      Complex complex6 = complex5.sqrt1z();
      List<Complex> list0 = complex4.INF.nthRoot(2317);
      String string0 = complex0.toString();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex4.sin();
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ZERO.multiply(0.539322018623352);
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex0.atan();
      Complex complex6 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(769.2442179278147, 769.2442179278147);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf(769.2442179278147);
      Complex complex3 = complex2.NaN.sqrt();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex4 = complex2.negate();
      String string0 = complex4.toString();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(769.2442179278147);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(2783.801202602);
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex1.ZERO.conjugate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.log();
      Complex complex7 = Complex.valueOf(823.55467);
      Complex complex8 = complex4.asin();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex2.ONE.subtract(complex3);
      Complex complex6 = complex1.log();
      Complex complex7 = complex0.INF.add(542.958979457541);
      Complex complex8 = complex1.ONE.sqrt1z();
      Complex complex9 = complex6.atan();
      Complex complex10 = complex9.INF.exp();
      Complex complex11 = complex9.ZERO.cos();
      Complex complex12 = complex11.divide(complex9);
      double double0 = complex0.getArgument();
      double double1 = complex6.getReal();
      Complex complex13 = complex7.sqrt();
      int int0 = complex13.ONE.hashCode();
      String string0 = complex12.toString();
      Complex complex14 = complex0.acos();
      Complex complex15 = complex7.multiply(Double.NaN);
      Complex complex16 = complex11.subtract((-921.68493));
      Complex complex17 = complex8.divide(complex9);
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = Complex.I;
      Complex complex20 = complex5.subtract(complex19);
      Complex complex21 = complex8.acos();
      double double2 = complex1.abs();
      List<Complex> list0 = complex20.nthRoot(1154);
      Complex complex22 = complex0.tan();
      Complex complex23 = complex10.sqrt1z();
      Complex complex24 = complex15.tan();
      Complex complex25 = complex17.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow((-335.367));
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex1.INF.pow(0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ZERO.subtract((-689.152683430202));
      String string0 = complex0.toString();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = Complex.valueOf(5277.559);
      Complex complex7 = complex6.NaN.reciprocal();
      boolean boolean0 = complex0.equals("out of bounds significance level {0}, must be between {1} and {2}");
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.add(1.5707963267948966);
      Complex complex9 = complex3.negate();
      Complex complex10 = complex0.multiply(4528.66245107853);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.NaN.sqrt();
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4.744571892885607E94);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex2.INF.reciprocal();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex0.I.exp();
      Complex complex8 = complex0.sin();
      String string0 = complex7.toString();
      Complex complex9 = complex0.multiply(932);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2785.618336792229);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.valueOf(1187.2181278303674);
      Complex complex3 = Complex.valueOf(2785.618336792229);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.divide((-3928.9581));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4082.822669, 4082.822669);
      Complex complex1 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2998.21228175795, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(80.0248912, 80.0248912);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.7937005259840998);
      Complex complex1 = complex0.add(0.7937005259840998);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(0.7937005259840998);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.ZERO.cosh();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex4.tanh();
      double double0 = complex6.getImaginary();
      Complex complex7 = complex5.pow(complex0);
      double double1 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex2.tanh();
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(3816.4432388);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.divide(complex0);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex2.divide(3748.5747);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      String string0 = complex0.toString();
      List<Complex> list0 = complex1.I.nthRoot(514);
      Complex complex2 = complex0.createComplex((-2955.0), (-2955.0));
      String string1 = complex1.toString();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.reciprocal();
      String string2 = complex2.toString();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.subtract((-75.51807198646));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1690.0, 1690.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.I.negate();
      boolean boolean0 = complex0.isInfinite();
      boolean boolean1 = complex0.isNaN();
      String string0 = complex1.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(1690.0);
      List<Complex> list0 = complex5.ZERO.nthRoot(1748);
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.40238661307607E-8), 350.6475512023);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ONE.createComplex((-7.40238661307607E-8), 350.6475512023);
      Complex complex4 = complex0.INF.divide((-1202.0));
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex4.NaN.multiply(600);
      Complex complex8 = complex0.NaN.multiply((-1511.156086861689));
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.createComplex(5837.0, 5837.0);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = Complex.valueOf(0.0, 5837.0);
      Complex complex6 = complex3.subtract(Double.NaN);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex4.pow(complex0);
      Complex complex9 = complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.2918238639831543);
      Complex complex1 = complex0.INF.asin();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.I.divide((-680.915));
      String string0 = complex2.INF.toString();
      Complex complex5 = complex0.pow(0.2918238639831543);
      Complex complex6 = complex3.ONE.atan();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex7.I.pow(Double.NaN);
      Complex complex9 = complex7.NaN.multiply(Double.NaN);
      Complex complex10 = complex3.INF.subtract(complex7);
      Complex complex11 = complex5.sqrt1z();
      Complex complex12 = complex11.ZERO.sqrt();
      Complex complex13 = complex7.ZERO.sqrt1z();
      Complex complex14 = complex11.INF.asin();
      double double1 = complex14.NaN.abs();
      double double2 = complex2.getReal();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex15.ONE.pow(complex7);
      int int0 = complex15.ZERO.hashCode();
      Object object0 = complex3.readResolve();
      Complex complex17 = complex11.acos();
      double double3 = complex0.abs();
      Complex complex18 = complex11.subtract(0.0);
      Complex complex19 = complex14.asin();
      Complex complex20 = complex2.reciprocal();
      Complex complex21 = complex19.add(Double.NaN);
      try { 
        complex15.nthRoot((-2915));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,915
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.subtract(complex4);
      Complex complex7 = complex6.negate();
      Complex complex8 = complex1.subtract(complex6);
      Complex complex9 = complex6.asin();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.INF.asin();
      String string0 = complex0.toString();
      Complex complex3 = complex1.sqrt1z();
      double double0 = complex2.getImaginary();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex2.INF.multiply((-2196));
      Complex complex7 = complex4.exp();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex2.multiply(116);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-209.86), (-209.86));
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.pow((-209.86));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3394.8280858855);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.abs();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = Complex.NaN;
      double double1 = complex5.NaN.abs();
      boolean boolean1 = complex0.equals(complex5);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex2.exp();
      double double2 = complex2.abs();
      Complex complex8 = complex1.add(complex0);
      boolean boolean2 = complex0.isNaN();
      double double3 = complex1.getReal();
      Complex complex9 = complex5.ZERO.sqrt();
      Complex complex10 = complex4.add(complex3);
      Complex complex11 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(2398.52);
      Complex complex2 = complex1.cosh();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2781.0));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.I.pow(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(6.283185307179586);
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ZERO.subtract(20.0);
      String string0 = complex0.toString();
      Complex complex2 = Complex.valueOf(20.0, 1156.020666);
      String string1 = complex2.ONE.toString();
      Complex complex3 = complex0.tan();
      Object object0 = complex2.I.readResolve();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex2.acos();
      double double0 = complex5.ONE.getArgument();
      double double1 = complex2.getArgument();
      Complex complex7 = complex6.pow((-20.0));
      List<Complex> list0 = complex7.nthRoot(1);
      Complex complex8 = complex5.cos();
      Complex complex9 = complex6.INF.add(2141.0);
      ComplexField complexField0 = complex9.NaN.getField();
      Complex complex10 = complex8.INF.atan();
      Complex complex11 = complex7.divide(1.5534973238344187);
      boolean boolean0 = complex7.isNaN();
      Object object1 = complex0.readResolve();
      Complex complex12 = complex5.sqrt();
      Complex complex13 = complex5.sqrt1z();
      List<Complex> list1 = complex10.nthRoot(1);
      Complex complex14 = Complex.valueOf((-2077.9538));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sqrt1z();
      Object object0 = complex2.I.readResolve();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex0.I.tanh();
      Complex complex7 = complex5.ZERO.multiply(1126);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1434.1351030523408);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.I.multiply(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex5.ZERO.reciprocal();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex6.subtract(complex5);
      Complex complex10 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt();
      double double0 = 0.0;
      Complex complex2 = complex1.ONE.subtract(0.0);
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.ONE.add(complex1);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.ZERO.divide(0.0);
      try { 
        complex5.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.ZERO.pow(complex1);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract(1.0);
      Complex complex2 = Complex.valueOf(665.17346059164, (-3907.6));
      Complex complex3 = complex0.add(complex2);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex2.cosh();
      double double0 = complex4.NaN.abs();
      Complex complex5 = Complex.valueOf((-3907.6));
      Complex complex6 = complex4.ZERO.acos();
      Complex complex7 = complex4.I.multiply(complex2);
      boolean boolean0 = complex3.isNaN();
      double double1 = complex7.getArgument();
      Complex complex8 = complex4.log();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex4.sinh();
      ComplexField complexField1 = complex10.getField();
      double double2 = complex4.ONE.abs();
      Complex complex11 = complex2.multiply(complex8);
      Complex complex12 = complex7.pow(9.310799925566843E55);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.NaN.conjugate();
      boolean boolean0 = complex0.equals("Ozh0S3t");
      Complex complex5 = complex1.acos();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex3.createComplex(1.0, 0.0);
      Complex complex5 = complex3.INF.add(0.0);
      Complex complex6 = complex0.NaN.add(0.0);
      Complex complex7 = complex6.I.cos();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex0.NaN.subtract(complex1);
      Complex complex10 = complex9.INF.divide(complex1);
      Complex complex11 = complex10.INF.divide(complex1);
      Complex complex12 = complex9.ZERO.reciprocal();
      Complex complex13 = complex0.tanh();
      double double0 = complex13.INF.abs();
      Complex complex14 = complex1.ONE.sin();
      String string0 = complex14.ONE.toString();
      Complex complex15 = complex13.NaN.add(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex16 = complex2.negate();
      Complex complex17 = complex13.asin();
      boolean boolean1 = complex15.isInfinite();
      Complex complex18 = complex9.cosh();
      Complex complex19 = complex13.conjugate();
      Complex complex20 = complex9.divide(complex0);
      Complex complex21 = complex0.multiply((-1213.045620511466));
      Complex complex22 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.createComplex(0.016465261578559875, (-2176.518609221898));
      Complex complex3 = complex0.pow((-2176.518609221898));
      Complex complex4 = complex1.sinh();
      int int0 = complex0.hashCode();
      Complex complex5 = complex1.ONE.multiply(0);
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex0.atan();
      Object object0 = complex3.readResolve();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex2.cos();
      Complex complex12 = Complex.valueOf((-217.6615672381836));
      Complex complex13 = complex3.sqrt();
      Complex complex14 = complex4.log();
      Complex complex15 = complex3.subtract(complex0);
      Object object1 = complex10.readResolve();
      Complex complex16 = complex6.reciprocal();
      Complex complex17 = complex0.divide((-217.6615672381836));
      Complex complex18 = complex10.atan();
      double double0 = complex15.getReal();
      Complex complex19 = complex16.createComplex(20.0, (-2223.174305556746));
  }
}
