/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 06:56:23 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.ONE.subtract(1606.0035644195964);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.ZERO.sqrt1z();
      ComplexField complexField0 = complex6.ZERO.getField();
      Complex complex7 = complex0.conjugate();
      List<Complex> list0 = complex6.INF.nthRoot(1);
      Complex complex8 = complex5.add(complex0);
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex8.NaN.createComplex(0.0, 0.0);
      Complex complex11 = complex8.multiply(2129);
      Complex complex12 = complex1.add(complex0);
      Complex complex13 = complex1.createComplex((-1820.55356), 3030.00471888973);
      Complex complex14 = complex1.ZERO.negate();
      double double0 = complex8.getImaginary();
      boolean boolean0 = complex0.isInfinite();
      Complex complex15 = complex5.sin();
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex16 = complex6.sinh();
      boolean boolean1 = complex13.equals(complex8);
      Complex complex17 = complex0.exp();
      Complex complex18 = complex10.sin();
      boolean boolean2 = complex10.isNaN();
      Complex complex19 = complex12.sqrt();
      Complex complex20 = complex8.pow(complex4);
      Complex complex21 = complex0.cosh();
      Object object0 = complex15.readResolve();
      Complex complex22 = complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1785.792385343772));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.add((-1785.792385343772));
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex0.subtract((-1785.792385343772));
      Complex complex5 = complex3.ZERO.log();
      int int1 = complex5.I.hashCode();
      double double0 = 1296.61;
      Complex complex6 = Complex.valueOf(1296.61);
      Complex complex7 = complex6.INF.add(complex4);
      Complex complex8 = complex6.add(complex4);
      List<Complex> list0 = complex7.INF.nthRoot(2146452592);
      Complex complex9 = complex3.I.atan();
      Complex complex10 = complex9.multiply((-1807.1091681));
      List<Complex> list1 = complex10.INF.nthRoot(2146452592);
      Complex complex11 = complex4.ONE.sin();
      Complex complex12 = complex11.ZERO.pow(1296.61);
      Complex complex13 = complex0.negate();
      Complex complex14 = complex3.cos();
      Complex complex15 = complex11.NaN.atan();
      Complex complex16 = complex0.asin();
      // Undeclared exception!
      complex16.I.nthRoot(2146452592);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1106.3);
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.ONE.divide(complex2);
      double double0 = complex3.abs();
      Object object0 = complex2.I.readResolve();
      double double1 = complex0.getImaginary();
      boolean boolean0 = complex2.isNaN();
      double double2 = complex2.I.getArgument();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.I.reciprocal();
      Object object1 = complex0.readResolve();
      Complex complex7 = complex2.createComplex(1106.3, 1106.3);
      Complex complex8 = complex5.log();
      try { 
        complex8.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex5.INF.tan();
      Complex complex8 = complex4.ZERO.conjugate();
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex10.subtract((-4399.826893400312));
      Complex complex12 = complex10.I.conjugate();
      double double0 = complex10.getArgument();
      Complex complex13 = complex3.acos();
      Complex complex14 = complex13.NaN.sinh();
      Complex complex15 = complex2.acos();
      Complex complex16 = complex1.NaN.createComplex(Double.NaN, 1578.06454);
      Complex complex17 = complex13.negate();
      Complex complex18 = complex17.I.conjugate();
      Complex complex19 = complex12.acos();
      Complex complex20 = complex19.ONE.tan();
      int int0 = complex20.hashCode();
      Complex complex21 = complex7.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.I.asin();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex5 = complex0.ONE.add(complex3);
      Complex complex6 = complex5.INF.multiply(1);
      Complex complex7 = complex0.ZERO.cos();
      double double0 = complex0.getReal();
      Complex complex8 = complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2666.0763846886));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.asin();
      String string0 = complex2.INF.toString();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.NaN.createComplex(2.2316346168518066, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.multiply(complex1);
      Complex complex7 = complex6.NaN.asin();
      List<Complex> list0 = complex4.I.nthRoot(1);
      double double0 = complex4.abs();
      Complex complex8 = Complex.valueOf(0.0, (-1.0));
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex4.divide(0.0);
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex6.tanh();
      int int0 = complex9.hashCode();
      Complex complex11 = complex10.acos();
      double double1 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2006.2641);
      Complex complex1 = complex0.ONE.add(2006.2641);
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.I.asin();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ZERO.add(complex1);
      int int0 = complex4.hashCode();
      Complex complex6 = complex2.ONE.negate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex4.asin();
      int int1 = complex8.NaN.hashCode();
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
      Complex complex9 = complex0.tanh();
      double double0 = complex2.abs();
      Complex complex10 = complex4.pow(complex0);
      String string0 = complex10.toString();
      Complex complex11 = complex10.INF.negate();
      Complex complex12 = complex8.sinh();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex0.multiply(complex13);
      Complex complex15 = complex8.multiply(120);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.2204032949639917E39);
      Complex complex1 = complex0.NaN.multiply(1);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.subtract(459.16393898);
      Complex complex8 = complex1.INF.log();
      Complex complex9 = complex1.log();
      Complex complex10 = complex8.ONE.sqrt1z();
      Complex complex11 = complex2.NaN.multiply(1);
      Complex complex12 = complex9.INF.pow(0.0);
      Complex complex13 = complex5.add(complex2);
      Complex complex14 = complex0.acos();
      double double0 = complex2.getImaginary();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex1.atan();
      Complex complex17 = complex3.asin();
      Object object0 = complex8.readResolve();
      ComplexField complexField0 = complex4.getField();
      double double1 = complex17.getImaginary();
      Complex complex18 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.toString();
      Complex complex1 = complex0.pow(1.929433822631836);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.multiply(612.4614905589091);
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex4.ZERO.add(Double.NaN);
      Complex complex6 = complex0.NaN.multiply((-526));
      Complex complex7 = complex5.NaN.add(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      double double0 = complex0.abs();
      Complex complex9 = complex7.atan();
      double double1 = complex0.getArgument();
      Complex complex10 = complex7.ONE.cosh();
      Complex complex11 = complex1.ZERO.tan();
      Complex complex12 = complex3.createComplex(0.0, 232.61);
      Complex complex13 = complex2.NaN.subtract(612.4614905589091);
      Complex complex14 = complex9.ZERO.sqrt();
      double double2 = complex13.ONE.getArgument();
      double double3 = complex9.abs();
      Complex complex15 = complex3.sin();
      Complex complex16 = Complex.valueOf(41.569);
      double double4 = complex1.getImaginary();
      Complex complex17 = complex2.asin();
      Complex complex18 = complex17.NaN.sin();
      ComplexField complexField0 = complex17.getField();
      int int0 = complex16.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-3101.50241), (-3101.50241));
      Complex complex1 = complex0.add((-3101.50241));
      Complex complex2 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(49.5255);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.subtract(49.5255);
      Object object0 = complex0.readResolve();
      double double1 = complex1.getImaginary();
      Complex complex2 = complex1.ONE.divide(7.124574366530717E-218);
      Complex complex3 = complex0.ZERO.divide(1575.648);
      Object object1 = complex3.I.readResolve();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.INF.divide(complex0);
      Complex complex6 = complex4.cos();
      Complex complex7 = Complex.valueOf(49.5255, 49.5255);
      Complex complex8 = complex7.INF.subtract(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex9 = Complex.valueOf((-1455.22376331569));
      double double2 = complex9.getReal();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex4.multiply(7.124574366530717E-218);
      Complex complex12 = complex11.tan();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.4637009373878283E-174);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.divide((-242.52089622239788));
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex2.ONE.multiply((-55));
      String string0 = complex0.I.toString();
      Complex complex4 = complex0.createComplex(2910.4, 3.4637009373878283E-174);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex4.NaN.divide(complex5);
      Complex complex8 = complex5.ONE.log();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex7.INF.multiply(complex9);
      boolean boolean0 = complex4.isInfinite();
      Complex complex11 = complex0.cosh();
      Object object0 = complex7.readResolve();
      Complex complex12 = complex4.exp();
      Complex complex13 = complex8.sinh();
      Complex complex14 = complex6.divide((-242.52089622239788));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex4.ZERO.sinh();
      try { 
        complex6.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2802.198879), (-2802.198879));
      Complex complex1 = Complex.valueOf((-2802.198879), (-2802.198879));
      Complex complex2 = complex0.multiply(complex1);
      double double0 = complex0.getImaginary();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.I.divide(3867.661);
      Complex complex5 = complex4.NaN.divide(complex1);
      Complex complex6 = complex0.I.multiply(complex2);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex0.subtract((-2802.198879));
      Complex complex9 = complex0.add(complex8);
      Complex complex10 = complex9.ONE.divide(complex2);
      Complex complex11 = complex2.I.sinh();
      Complex complex12 = complex2.add(0.0);
      Complex complex13 = complex9.sinh();
      double double1 = complex13.getImaginary();
      String string0 = complex10.INF.toString();
      Complex complex14 = complex10.subtract((-1.1603891006723397E-7));
      Complex complex15 = Complex.valueOf(2669.0, (-2802.198879));
      Complex complex16 = complex1.sinh();
      Complex complex17 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex18 = complex9.ZERO.subtract(complex11);
      Complex complex19 = complex16.pow((-1269.567));
      Complex complex20 = complex10.divide(complex9);
      boolean boolean0 = complex1.equals(complex11);
      double double2 = complex6.getReal();
      Complex complex21 = complex19.atan();
      Complex complex22 = complex21.NaN.add(0.11343331634998322);
      Complex complex23 = complex4.add(complex16);
      Complex complex24 = complex20.pow(0.0);
      Complex complex25 = complex21.sqrt1z();
      Complex complex26 = complex21.sin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1935.61923819712));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex2.I.pow(0.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.I.multiply(complex5);
      Complex complex7 = complex1.NaN.subtract((-1935.61923819712));
      Complex complex8 = complex3.I.createComplex(0.0, 1.7775323307944624E203);
      Complex complex9 = complex2.multiply(1);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex4.sinh();
      Complex complex13 = complex1.subtract(complex9);
      Complex complex14 = complex12.I.conjugate();
      Complex complex15 = complex1.subtract((-1935.61923819712));
      Complex complex16 = complex15.ONE.sqrt1z();
      Complex complex17 = complex16.ONE.multiply(complex3);
      double double0 = complex11.getReal();
      Complex complex18 = complex2.reciprocal();
      Object object0 = complex4.readResolve();
      double double1 = complex15.getImaginary();
      Complex complex19 = complex1.tanh();
      boolean boolean0 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(90.06692650262299);
      int int0 = 2872;
      Complex complex1 = complex0.I.subtract(359.8558457327);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.INF.multiply(2872);
      Complex complex4 = complex3.I.pow(176.0);
      double double0 = complex4.abs();
      Complex complex5 = complex0.pow(90.06692650262299);
      try { 
        complex4.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 791.751644938654);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt1z();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex1.divide(791.751644938654);
      Complex complex4 = complex0.ONE.pow(complex1);
      Complex complex5 = complex1.NaN.subtract(0.0);
      Complex complex6 = complex3.pow(791.751644938654);
      double double0 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(875.39852641794, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.createComplex((-406.0532348972), 0.0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.ZERO.divide((-1940.5810726));
      Complex complex5 = complex1.ONE.reciprocal();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex6.NaN.subtract((-649.5907376336));
      Complex complex9 = complex0.ZERO.cosh();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex4.cos();
      ComplexField complexField0 = complex11.ZERO.getField();
      Complex complex12 = complex6.sin();
      ComplexField complexField1 = complex5.getField();
      ComplexField complexField2 = complex12.getField();
      Complex complex13 = complex8.add(0.0);
      double double0 = complex4.abs();
      Complex complex14 = complex11.divide(complex1);
      Complex complex15 = complex6.asin();
      Complex complex16 = complex13.pow(complex6);
      List<Complex> list0 = complex8.ONE.nthRoot(892);
      double double1 = complex11.getArgument();
      Complex complex17 = Complex.valueOf((-1614.8), (-415.169289932493));
      Complex complex18 = complex16.multiply((-649.5907376336));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1554.848406234278), (-360.206135983031));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.subtract((-1554.848406234278));
      Complex complex4 = complex0.tan();
      double double0 = complex0.getArgument();
      List<Complex> list0 = complex4.ZERO.nthRoot(2670);
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.createComplex((-1554.848406234278), 6.283185307179586);
      Complex complex7 = complex4.log();
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex7.createComplex(6.283185307179586, 0.0);
      Complex complex10 = complex0.INF.cosh();
      Complex complex11 = complex0.pow((-1113.5225386));
      Complex complex12 = complex7.INF.add(complex0);
      ComplexField complexField0 = complex2.getField();
      Complex complex13 = complex7.sqrt();
      Complex complex14 = complex7.INF.cos();
      Complex complex15 = complex6.tan();
      Object object0 = new Object();
      String string0 = complex15.NaN.toString();
      boolean boolean0 = complex7.equals(object0);
      Complex complex16 = complex15.atan();
      Complex complex17 = complex16.I.divide(complex7);
      Complex complex18 = complex4.pow((-360.206135983031));
      Complex complex19 = complex13.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.764200470879736E51, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.asin();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.303786078838E-10), (-5.303786078838E-10));
      Complex complex1 = new Complex((-5.303786078838E-10), (-5.303786078838E-10));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.I.createComplex((-5.303786078838E-10), 1416.7059435471228);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.INF.sin();
      Object object0 = complex5.readResolve();
      Complex complex7 = complex5.multiply((-5.303786078838E-10));
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.I.multiply((-1350));
      Complex complex11 = complex9.NaN.exp();
      Complex complex12 = complex6.reciprocal();
      Complex complex13 = complex6.sqrt1z();
      double double0 = complex12.getImaginary();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex5.multiply(complex14);
      double double1 = complex13.getImaginary();
      Complex complex16 = complex0.reciprocal();
      String string0 = complex5.toString();
      double double2 = complex1.abs();
      Complex complex17 = complex15.add(1416.7059435471228);
      Complex complex18 = complex3.add((-5.303786078838E-10));
      String string1 = complex9.toString();
      double double3 = complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex0.divide(20.0);
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.log();
      boolean boolean0 = complex0.isInfinite();
      Complex complex8 = complex1.add(complex3);
      Complex complex9 = complex8.ONE.exp();
      Complex complex10 = complex8.ZERO.log();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex3.I.divide(complex2);
      Complex complex13 = complex4.ONE.multiply(1);
      Complex complex14 = complex13.ZERO.divide(0.0);
      String string0 = complex11.ZERO.toString();
      boolean boolean1 = complex1.isInfinite();
      Complex complex15 = complex4.atan();
      Complex complex16 = complex3.reciprocal();
      Complex complex17 = complex13.multiply(complex14);
      Complex complex18 = complex12.add(complex1);
      Complex complex19 = complex18.INF.cosh();
      Complex complex20 = complex11.log();
      Complex complex21 = complex2.pow((double) 1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.NaN.acos();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = Complex.valueOf(921.063526);
      Complex complex5 = complex2.I.sin();
      Complex complex6 = complex2.I.conjugate();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.multiply(460.20054913);
      Complex complex9 = complex5.ONE.sqrt1z();
      double double1 = complex5.ONE.abs();
      Complex complex10 = complex1.pow(complex0);
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex6.ZERO.acos();
      int int0 = complex10.hashCode();
      Complex complex13 = complex10.INF.subtract(461.8294935169223);
      Complex complex14 = complex11.multiply(Double.POSITIVE_INFINITY);
      String string0 = complex5.toString();
      String string1 = complex11.toString();
      Complex complex15 = complex6.multiply(1282);
      Complex complex16 = complex12.atan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.createComplex((-1.0), 2023.02313578632);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-731.96579964075), 3899.8850572);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(843.69, 843.69);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.sqrt1z();
      int int0 = complex3.hashCode();
      Complex complex4 = complex3.INF.sqrt();
      List<Complex> list0 = complex4.INF.nthRoot(360);
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      double double0 = complex2.INF.getArgument();
      Object object0 = complex0.INF.readResolve();
      double double1 = complex0.getImaginary();
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex5.INF.negate();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex0.log();
      Complex complex10 = complex7.tan();
      Complex complex11 = complex6.sin();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-375.206020607145), 706.65522);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(706.65522, (-291.5505515339433));
      Complex complex4 = complex3.ZERO.multiply((-1152));
      double double0 = complex3.ZERO.abs();
      Complex complex5 = complex0.conjugate();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex6 = complex1.I.sin();
      double double1 = complex5.abs();
      Complex complex7 = complex0.INF.pow(complex1);
      boolean boolean0 = complex1.isInfinite();
      Complex complex8 = complex2.pow(complex0);
      String string0 = complex2.toString();
      double double2 = complex2.abs();
      Object object1 = complex0.readResolve();
      Complex complex9 = complex5.asin();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.ZERO.subtract((-1.0));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex1.NaN.subtract(0.0);
      Complex complex5 = complex4.ONE.add(complex3);
      double double0 = complex0.getReal();
      Complex complex6 = complex0.divide((-1.0));
      Complex complex7 = complex6.INF.cosh();
      Complex complex8 = complex3.NaN.add(2001.1);
      Complex complex9 = complex7.NaN.add(complex2);
      Complex complex10 = complex3.I.sin();
      Complex complex11 = complex7.I.add(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.I.sqrt1z();
      double double1 = complex1.getReal();
      double double2 = complex0.getImaginary();
      Complex complex13 = complex3.multiply((-1.0));
      Complex complex14 = complex3.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-605.85936094));
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf((-605.85936094));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.pow(complex2);
      double double1 = complex1.I.getArgument();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex4.sqrt1z();
      double double2 = complex1.getArgument();
      Complex complex9 = complex4.divide(0.0);
      Complex complex10 = complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.createComplex(1123.79343, 1123.79343);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.ZERO.tanh();
      Complex complex6 = complex5.ONE.sin();
      List<Complex> list0 = complex4.INF.nthRoot(1331);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex7.I.pow(complex1);
      List<Complex> list1 = complex1.nthRoot(817);
      Complex complex10 = complex1.I.sin();
      Complex complex11 = complex1.createComplex(0.0, 2407.6);
      Complex complex12 = complex3.pow((double) 817);
      Complex complex13 = complex2.atan();
      Complex complex14 = complex5.tan();
      double double0 = complex1.ZERO.getArgument();
      Complex complex15 = complex12.multiply(complex1);
      boolean boolean0 = complex2.isInfinite();
      Complex complex16 = Complex.valueOf((double) 817, 20.0);
      Complex complex17 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.createComplex((-2776.4465728524), (-2776.4465728524));
      Object object0 = complex2.INF.readResolve();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.multiply(0.0);
      double double1 = complex0.abs();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.ONE.multiply(2121);
      String string0 = complex2.NaN.toString();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex9.INF.atan();
      Complex complex12 = Complex.valueOf((-685.8605287523), Double.NaN);
      Complex complex13 = complex12.INF.conjugate();
      int int0 = complex13.NaN.hashCode();
      Complex complex14 = complex12.atan();
      double double2 = complex10.ZERO.abs();
      boolean boolean0 = complex2.isNaN();
      Complex complex15 = complex8.log();
      Complex complex16 = complex10.subtract(complex5);
      int int1 = complex9.hashCode();
      Complex complex17 = complex12.asin();
      Complex complex18 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.I.conjugate();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = complex1.INF.cos();
      Complex complex8 = complex1.pow(1901.881182);
      Complex complex9 = complex0.multiply(complex3);
      Complex complex10 = complex9.NaN.subtract(complex7);
      Complex complex11 = complex4.log();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.tan();
      List<Complex> list0 = complex1.I.nthRoot(3146);
      Complex complex3 = Complex.valueOf(95.60700267);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex4.sqrt();
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = Complex.valueOf((double) 3146);
      Complex complex9 = Complex.valueOf((-2127.0382833));
      Complex complex10 = complex9.pow(complex7);
      Complex complex11 = complex3.atan();
      Complex complex12 = complex5.ONE.multiply(1054.64436);
      Complex complex13 = complex1.NaN.reciprocal();
      boolean boolean1 = complex6.equals(complex5);
      double double0 = complex5.getImaginary();
      Complex complex14 = complex5.tanh();
      ComplexField complexField0 = complex8.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(2292.378590459299);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex2.INF.subtract(0.0);
      Complex complex6 = Complex.valueOf(2292.378590459299);
      boolean boolean0 = complex3.equals(complex2);
      Complex complex7 = complex3.multiply(complex2);
      Complex complex8 = complex0.exp();
      Complex complex9 = complex5.sin();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.ZERO.add(complex6);
      double double0 = complex1.getImaginary();
      double double1 = complex7.getReal();
      Complex complex12 = complex1.add(2292.378590459299);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-418.155448851098));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-418.155448851098));
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex1.ONE.multiply(complex2);
      Complex complex6 = complex3.NaN.subtract((-20.0));
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex2.subtract(complex7);
      boolean boolean0 = complex8.isInfinite();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex9.add(951.7);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, (-1390.0237561365386));
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.add(1.5548923015594482);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex3.I.add(1.5548923015594482);
      Complex complex5 = complex0.ONE.subtract(complex3);
      Complex complex6 = complex3.add(1.0);
      Complex complex7 = complex3.I.cos();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1163.183674122), (-20.0));
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.pow(complex1);
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = Complex.valueOf(2081.8017123, 20.0);
      Complex complex4 = complex3.INF.atan();
      int int0 = complex4.hashCode();
      String string0 = complex3.ONE.toString();
      Complex complex5 = Complex.valueOf(2081.8017123);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex0.ONE.divide((-1163.183674122));
      Complex complex8 = complex6.tan();
      double double1 = complex5.ONE.getArgument();
      try { 
        complex6.ONE.nthRoot((-1054));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,054
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.divide((-1.0));
      double double0 = complex3.NaN.abs();
      Complex complex4 = Complex.valueOf(0.00584227591753006, (-1.0));
      Complex complex5 = complex0.pow(complex1);
      double double1 = complex5.ZERO.getArgument();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.acos();
      int int0 = complex6.hashCode();
      int int1 = complex1.I.hashCode();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex7.I.conjugate();
      String string0 = complex5.toString();
      Complex complex9 = complex2.sin();
      Complex complex10 = complex7.I.sin();
      Complex complex11 = complex8.INF.negate();
      String string1 = complex11.INF.toString();
      String string2 = complex2.toString();
      Complex complex12 = complex0.multiply(946);
      double double2 = complex8.getArgument();
      String string3 = complex4.toString();
      Complex complex13 = Complex.valueOf(Double.NaN);
      Complex complex14 = complex3.add(complex7);
      Complex complex15 = complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2059.719));
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.I.sin();
      List<Complex> list0 = complex0.nthRoot(1304);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.acos();
      Object object0 = complex1.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1940.493496447, 1940.493496447);
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex0.toString();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 1440.2508489651;
      Complex complex0 = Complex.valueOf(1440.2508489651, 1440.2508489651);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.atan();
      double double1 = complex3.NaN.getArgument();
      double double2 = complex3.I.getArgument();
      try { 
        complex1.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(0.0);
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex1.I.cosh();
      double double1 = complex4.getArgument();
      try { 
        complex4.I.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.divide(1177.6);
      Complex complex2 = complex1.ZERO.subtract(1177.6);
      Complex complex3 = complex1.cosh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex0.pow(0.0);
      Complex complex7 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex1.divide((-2503.07214));
      Complex complex5 = complex4.negate();
      double double0 = complex4.getImaginary();
      double double1 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-609.94656), (-609.94656));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(634);
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex2.I.subtract(complex0);
      boolean boolean0 = complex0.isNaN();
      double double1 = complex0.ONE.getArgument();
      Complex complex4 = complex2.asin();
      Complex complex5 = Complex.valueOf(1.5707963267948966);
      Complex complex6 = complex2.add(complex0);
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex7.ZERO.subtract(complex0);
      Complex complex10 = complex7.atan();
      Complex complex11 = complex10.multiply(1.5707963267948966);
      ComplexField complexField0 = complex6.getField();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.INF.pow(1.1353638172149658);
      Complex complex5 = complex3.I.multiply(0.0);
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex6.NaN.subtract(1.1353638172149658);
      int int0 = complex8.NaN.hashCode();
      Complex complex9 = complex1.ZERO.sinh();
      Complex complex10 = complex3.ONE.sqrt1z();
      Complex complex11 = complex3.pow(9.727979174888975E-9);
      Complex complex12 = complex1.ZERO.subtract(complex3);
      Complex complex13 = complex11.subtract(complex1);
      Complex complex14 = complex1.sqrt();
      Complex complex15 = complex13.multiply(9.727979174888975E-9);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.multiply((-2450.1405922263043));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.I.log();
      double double0 = complex4.ONE.getArgument();
      Complex complex5 = complex0.reciprocal();
      double double1 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.hashCode();
      int int1 = (-3483);
      try { 
        complex0.nthRoot((-3483));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,483
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-140.33800497763));
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex2.NaN.add(0.0);
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex5.INF.add(complex0);
      Complex complex8 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1.096019026243815E274);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-458.0158085565));
      Complex complex1 = complex0.INF.tan();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = Complex.valueOf((-458.0158085565));
      List<Complex> list0 = complex0.ZERO.nthRoot(1067);
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex3.NaN.tanh();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex0.divide(complex2);
      Object object0 = complex7.readResolve();
      double double0 = complex1.abs();
      Complex complex8 = complex2.divide(Double.NaN);
      Object object1 = complex8.readResolve();
      Complex complex9 = complex0.divide(complex5);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1803.8936043481115));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.NaN.multiply((-1803.8936043481115));
      Complex complex4 = complex0.pow((-1803.8936043481115));
      Complex complex5 = complex4.sin();
      Complex complex6 = complex1.multiply(0);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      double double0 = complex0.getReal();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.pow(3.856291077979099E-8);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.cosh();
      ComplexField complexField1 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(1892.945346741311);
      Complex complex1 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.INF.divide(2.0);
      int int0 = complex0.hashCode();
      double double0 = complex1.getArgument();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex4.INF.negate();
      List<Complex> list0 = complex0.ONE.nthRoot(1242);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.multiply((-2.356194490192345));
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex8.ZERO.sin();
      Complex complex11 = complex7.cosh();
      Object object0 = complex2.readResolve();
      String string0 = complex7.toString();
      Complex complex12 = complex6.divide(complex1);
      int int1 = complex5.hashCode();
      boolean boolean0 = complex4.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6136772632598877, 1.6136772632598877);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide((-958.843774));
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1184.089438228053);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 1184.089438228053);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex2.ZERO.asin();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex1.subtract(complex3);
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.conjugate();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = Complex.valueOf((-2.8786263916116364E-10));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.cosh();
      double double0 = complex3.getArgument();
      Complex complex5 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex3.INF.add(complex2);
      double double0 = complex1.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex1.atan();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex2.equals(object0);
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(435.5, 435.5);
      Complex complex1 = complex0.INF.multiply(435.5);
      double double0 = complex0.abs();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.cos();
      String string0 = complex2.ZERO.toString();
      Complex complex3 = complex2.NaN.cosh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.multiply(1179.891597344);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.27933338);
      Complex complex1 = Complex.valueOf((-2835.42630380508), (-2835.42630380508));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.valueOf((-6.0896188500539086E-9));
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex5.ZERO.exp();
      Complex complex8 = complex5.createComplex(20.0, (-2431.75367083));
      boolean boolean0 = complex7.isNaN();
      Complex complex9 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 1177.30597075;
      Complex complex0 = new Complex(1177.30597075, 1177.30597075);
      Complex complex1 = complex0.cosh();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex1.INF.log();
      double double2 = complex5.getArgument();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.acos();
      double double3 = (-1648.56334133155);
      Complex complex9 = complex0.NaN.log();
      Complex complex10 = complex0.ZERO.subtract(complex7);
      Complex complex11 = complex1.multiply((-1648.56334133155));
      Complex complex12 = complex1.add(334.14103381038);
      ComplexField complexField0 = complex12.ZERO.getField();
      int int0 = complex12.INF.hashCode();
      Complex complex13 = complex12.createComplex(0.0, 1177.30597075);
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(514.61);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.createComplex(514.61, 514.61);
      Complex complex7 = Complex.valueOf(3761.90723838, 3761.90723838);
      Complex complex8 = complex3.ONE.cosh();
      Complex complex9 = Complex.valueOf(3761.90723838, 0.0);
      Complex complex10 = complex6.divide(514.61);
      boolean boolean0 = complex10.isNaN();
      Complex complex11 = complex6.sinh();
      Complex complex12 = complex11.ZERO.sinh();
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex2.ZERO.multiply(complex5);
      Object object0 = complex0.readResolve();
      Complex complex15 = Complex.valueOf((-7.34071933723896E-8), (-7.34071933723896E-8));
      Complex complex16 = complex15.asin();
      Complex complex17 = complex11.sin();
      boolean boolean1 = complex10.equals(complex17);
      Complex complex18 = complex15.ZERO.divide(0.0);
      Complex complex19 = Complex.valueOf(320.9278);
      Complex complex20 = complex16.pow(complex17);
      ComplexField complexField0 = complex11.getField();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2332.4);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(2332.4, (-625.67535328));
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.subtract(2332.4);
      Complex complex5 = complex3.ONE.sqrt();
      Complex complex6 = complex3.ZERO.acos();
      int int0 = complex2.INF.hashCode();
      Object object0 = complex2.readResolve();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex8.INF.multiply((-3535));
      Complex complex10 = Complex.valueOf((-625.67535328));
      Complex complex11 = complex10.ONE.multiply(complex8);
      Complex complex12 = complex7.log();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex12.ZERO.reciprocal();
      Object object1 = complex12.ZERO.readResolve();
      Complex complex15 = complex2.subtract(complex3);
      Complex complex16 = complex4.cosh();
      ComplexField complexField0 = complex16.ONE.getField();
      Complex complex17 = complex12.sqrt1z();
      Complex complex18 = complex2.sin();
      Complex complex19 = complex12.divide((-2358.620490260831));
      Complex complex20 = complex5.subtract(complex19);
      Complex complex21 = complex4.tanh();
      Complex complex22 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.multiply(2902);
      double double0 = complex2.getArgument();
      Complex complex3 = complex0.exp();
      double double1 = complex1.NaN.getArgument();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = Complex.valueOf((-850.1729221425), 0.0);
      Complex complex6 = complex3.acos();
      int int0 = complex6.INF.hashCode();
      ComplexField complexField0 = complex1.getField();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex7.I.multiply(0.0);
      int int1 = complex3.hashCode();
      Complex complex10 = complex2.add(2.3307929211781914E-8);
      int int2 = complex1.hashCode();
      String string0 = complex10.toString();
      Complex complex11 = complex9.divide(complex10);
      Complex complex12 = complex10.exp();
      Complex complex13 = complex9.ONE.subtract(complex10);
      Complex complex14 = complex11.ONE.conjugate();
      String string1 = complex14.ZERO.toString();
      Complex complex15 = complex11.asin();
      Complex complex16 = complex11.createComplex((-1847.2482093), 0.0);
      List<Complex> list0 = complex15.nthRoot(2902);
      Complex complex17 = complex10.tan();
      Complex complex18 = complex16.sin();
      Complex complex19 = complex4.add(complex6);
      Complex complex20 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf(919.7909);
      Complex complex5 = complex2.ONE.atan();
      Complex complex6 = complex2.multiply(1768.054866582);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex5.I.sin();
      double double0 = complex0.getArgument();
      double double1 = complex5.getImaginary();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex7.I.add(complex9);
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex11.NaN.pow(1793.680123618314);
      Complex complex13 = complex2.createComplex(0.0, 1.5707963267948966);
      Complex complex14 = Complex.valueOf(0.0);
      Complex complex15 = complex11.sinh();
      Complex complex16 = complex15.sqrt1z();
      double double2 = complex5.ZERO.getArgument();
      String string0 = complex5.toString();
      Complex complex17 = complex14.divide(complex7);
      String string1 = complex17.ZERO.toString();
      double double3 = complex14.abs();
      boolean boolean0 = complex13.isNaN();
      boolean boolean1 = complex10.isNaN();
      Complex complex18 = complex17.divide(1.5707963267948966);
      boolean boolean2 = complex17.isNaN();
      Complex complex19 = complex18.add(1.0760175582979094E-7);
      Complex complex20 = complex12.sqrt();
      double double4 = complex14.getArgument();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2044.6));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.INF.subtract((-512.018118829853));
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.subtract(2042.07764525);
      Complex complex6 = complex5.ZERO.add((-512.018118829853));
      Complex complex7 = complex0.conjugate();
      int int0 = complex7.hashCode();
      double double0 = complex7.ZERO.getArgument();
      double double1 = complex7.ONE.getArgument();
      Complex complex8 = complex1.subtract((-2044.6));
      Complex complex9 = complex8.pow(complex7);
      Complex complex10 = complex0.tan();
      Complex complex11 = complex10.divide(complex0);
      Complex complex12 = complex10.divide(complex8);
      double double2 = complex8.getReal();
      Complex complex13 = Complex.valueOf((-2044.6));
      Complex complex14 = complex2.sinh();
      Complex complex15 = complex2.tanh();
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex14.exp();
      List<Complex> list0 = complex15.INF.nthRoot(1);
      Complex complex18 = complex17.ZERO.createComplex(2042.07764525, (-2500.6405983803397));
      double double3 = complex0.getImaginary();
      boolean boolean0 = complex10.isNaN();
      String string0 = complex15.toString();
      Complex complex19 = complex4.atan();
      Complex complex20 = complex12.sin();
      Complex complex21 = complex15.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1551.6539, 1551.6539);
      Object object0 = complex0.I.readResolve();
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex1.ONE.conjugate();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.createComplex((-1.1124565511436785E-7), (-1.1124565511436785E-7));
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex9.INF.asin();
      int int0 = complex5.I.hashCode();
      Complex complex11 = complex3.add((-1.1124565511436785E-7));
      Complex complex12 = complex6.NaN.log();
      Complex complex13 = complex7.I.add((-2969.0));
      double double0 = complex7.abs();
      Complex complex14 = complex7.subtract(complex8);
      Complex complex15 = complex4.tan();
      double double1 = complex15.getReal();
      Complex complex16 = complex6.sinh();
      Complex complex17 = complex15.reciprocal();
      Complex complex18 = complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.ONE.sinh();
      int int1 = complex2.NaN.hashCode();
      Complex complex3 = complex1.sinh();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.getReal();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.I.log();
      List<Complex> list0 = complex4.NaN.nthRoot(1078);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = complex0.acos();
      Complex complex9 = complex3.add(complex1);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex8.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex0.I.abs();
      Complex complex3 = complex1.ZERO.pow(complex2);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.conjugate();
      int int0 = complex0.hashCode();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex7.INF.cosh();
      double double1 = complex3.getReal();
      Complex complex9 = complex4.ZERO.tan();
      Complex complex10 = complex0.negate();
      boolean boolean0 = complex1.isInfinite();
      Object object0 = complex4.readResolve();
      Complex complex11 = complex9.pow(complex6);
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex10.add(complex12);
      Complex complex14 = complex4.multiply((-1.1461755745719884E-7));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.tan();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex3.ONE.tanh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.INF.exp();
      Complex complex9 = Complex.valueOf(0.0, (-1347.0));
      Complex complex10 = complex1.tanh();
      List<Complex> list0 = complex9.nthRoot(146);
      Complex complex11 = complex0.conjugate();
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex11.reciprocal();
  }
}
