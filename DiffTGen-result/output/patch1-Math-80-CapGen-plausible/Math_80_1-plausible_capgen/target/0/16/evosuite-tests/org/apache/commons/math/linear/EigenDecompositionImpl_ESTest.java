/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 14:03:44 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(432.2835);
      doubleArray0[4] = double4;
      double double5 = Double.min(469.76059, (double) doubleArray0[2]);
      Double double6 = new Double(0.0);
      doubleArray0[5] = double6;
      Double double7 = new Double(2.0);
      doubleArray0[6] = double7;
      double double8 = new Double((double) doubleArray0[5]);
      Double double9 = new Double((-1802.73227555));
      doubleArray0[7] = double9;
      Double double10 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double10;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(2977);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2977
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-1055.1785488296168);
      doubleArray0[2] = (-2253.6430480179);
      doubleArray0[3] = 0.0;
      doubleArray0[0] = (-2253.6430480179);
      doubleArray0[5] = 9.0;
      doubleArray0[6] = (-3146.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      double double0 = arrayRealVector0.getDistance(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1055.1785488296168));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, (-1055.1785488296168));
      // Undeclared exception!
      eigenDecompositionImpl1.getV();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4911.9181712451);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1309.9493362661;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (-1002.7325));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NEGATIVE_INFINITY);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.1173733484422221);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(2.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(432.2835);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double(2.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(347.037);
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3818.7;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1109.36640521289;
      doubleArray0[4] = 1839.30756;
      doubleArray0[5] = 1758.8964920047165;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(20);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(2.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(432.2835);
      double double5 = Double.max(2.2250738585072014E-308, (double) doubleArray0[0]);
      doubleArray0[4] = doubleArray0[2];
      double double6 = Double.min(469.76059, (double) doubleArray0[2]);
      Double double7 = new Double(0.0);
      doubleArray0[5] = double7;
      Double double8 = new Double(2.0);
      doubleArray0[6] = double8;
      double double9 = Double.max((double) doubleArray0[0], (double) doubleArray0[0]);
      Double double10 = new Double(347.037);
      doubleArray0[7] = double10;
      Double double11 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double11;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(4.52434123094346);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double(2.0);
      doubleArray0[3] = double2;
      Double double3 = new Double(432.2835);
      doubleArray0[4] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[5] = double4;
      Double double5 = new Double(2.0);
      doubleArray0[6] = double5;
      Double double6 = new Double(347.037);
      doubleArray0[7] = double6;
      Double double7 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double7;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(2.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(432.2835);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double(2.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(347.037);
      doubleArray0[7] = double7;
      double double8 = Double.min(1669176.296310902, Double.NEGATIVE_INFINITY);
      Double double9 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double9;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double double10 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-1055.1785488296168);
      doubleArray0[2] = (-2253.6430480179);
      doubleArray0[3] = 0.0;
      doubleArray0[0] = (-2253.6430480179);
      doubleArray0[5] = 9.0;
      doubleArray0[6] = (-3146.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      double double0 = arrayRealVector0.getDistance(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1055.1785488296168));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, (-1055.1785488296168));
      RealMatrix realMatrix1 = eigenDecompositionImpl1.getV();
      RealMatrix realMatrix2 = eigenDecompositionImpl1.getD();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.333;
      doubleArray0[1] = 387.72009;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 542.9447875186987;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4207.81563594);
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      RealVector realVector0 = realMatrix0.preMultiply((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.333);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3818.7;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1109.36640521289;
      doubleArray0[4] = 1839.30756;
      doubleArray0[5] = 1758.8964920047165;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix2 = array2DRowRealMatrix0.subtract(array2DRowRealMatrix1);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray3 = eigenDecompositionImpl0.getImagEigenvalues();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2787));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2787
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2133.88718605;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAtan();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NEGATIVE_INFINITY);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.copy();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.mapAtan();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      OpenMapRealVector openMapRealVector5 = openMapRealVector1.mapDivide(1.0E-12);
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double double2 = eigenDecompositionImpl0.getDeterminant();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector0.mapLog1pToSelf();
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getV();
      double double3 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix8 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix9 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix10 = eigenDecompositionImpl0.getD();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(708, 708);
      double double0 = (-352.76761551);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-352.76761551));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(2.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(432.2835);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double(2.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(347.037);
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double8;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 241.56;
      doubleArray0[1] = (-495.025);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-601.232534);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (-1084.6095918663138);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1084.6095918663138);
      doubleArray1[2] = 241.56;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-601.232534);
      doubleArray1[5] = (-495.025);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1222.7801640651528));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(29);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.2250738585072014E-308;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1402.188888));
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x2 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2133.88718605;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAtan();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NEGATIVE_INFINITY);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.copy();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.mapAtan();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getV();
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray3 = eigenDecompositionImpl0.getRealEigenvalues();
      OpenMapRealVector openMapRealVector5 = openMapRealVector1.mapDivide(1.0E-12);
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      double double1 = eigenDecompositionImpl0.getDeterminant();
      double double2 = eigenDecompositionImpl0.getDeterminant();
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector0.mapLog1pToSelf();
      RealMatrix realMatrix5 = eigenDecompositionImpl0.getV();
      double double3 = eigenDecompositionImpl0.getRealEigenvalue(0);
      RealMatrix realMatrix6 = eigenDecompositionImpl0.getD();
      double double4 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix7 = eigenDecompositionImpl0.getV();
      RealMatrix realMatrix8 = eigenDecompositionImpl0.getD();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1202.464240296462;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2432.4;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(arrayRealVector0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapCosToSelf();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1202.464240296462);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(2009, 2009);
      try { 
        arrayRealVector0.getL1Distance(arrayRealVector1);
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 3 but expected 2,009
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.333;
      doubleArray0[1] = 387.72009;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 542.9447875186987;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4207.81563594);
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.333);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-954.6879740732);
      doubleArray0[2] = (-1459.6257);
      doubleArray0[3] = (-71.0290229);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 571.915;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2024.293376175);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1382.16259);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(3, 3);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(1282.5019551);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1282.5019551);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 41;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(2203, 41);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 41);
      } catch(RuntimeException e) {
         //
         // a 2,203x41 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.232595164407831E-28);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 3592.32797249);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1009.95959474017));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, Double.NaN);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-170.7592);
      doubleArray0[3] = (-1225.7);
      doubleArray0[4] = 2547.07389;
      doubleArray0[5] = (-484.41001080591406);
      doubleArray0[6] = (-1.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 595.0735031901);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.041029239547829166;
      doubleArray0[1] = 387.72009;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 542.9447875186987;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4207.81563594);
      doubleArray0[7] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.041029239547829166);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      double double0 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(2.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(2.0);
      doubleArray0[3] = double3;
      Double double4 = new Double(432.2835);
      doubleArray0[4] = double4;
      double double5 = Double.min(469.76059, (double) doubleArray0[2]);
      Double double6 = new Double(0.0);
      doubleArray0[5] = double6;
      Double double7 = new Double(2.0);
      doubleArray0[6] = double7;
      double double8 = Double.max((double) doubleArray0[0], (double) doubleArray0[0]);
      Double double9 = new Double(347.037);
      doubleArray0[7] = double9;
      Double double10 = new Double((double) doubleArray0[0]);
      doubleArray0[8] = double10;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, true);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.5;
      doubleArray0[0] = 0.5;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4911.9181712451);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1309.9493362661;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (-1002.7325));
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NEGATIVE_INFINITY);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1714.906431;
      doubleArray0[2] = (-1832.31);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1832.31));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
