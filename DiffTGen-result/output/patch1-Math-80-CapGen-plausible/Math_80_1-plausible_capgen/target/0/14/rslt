* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.linear.EigenDecompositionImpl
* Starting client
* Connecting to master process on port 2178
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-80-CapGen-plausible/Math_80_1-plausible_capgen/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.linear.EigenDecompositionImpl
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 851
  - Branch 428
  - Exception 0
  - MutationFactory 212
  - Output 28
  - Method 17
  - MethodNoException 17
  - CBranchFitnessFactory 428
* Using seed 1585403851806
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:>                                  1%][Progress:===>                          10%] [Cov:====>                              13%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              13%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          13%] [Cov:==>                                6%][Progress:======>                       20%] [Cov:===>                               11%][Progress:======>                       20%] [Cov:========>                          23%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:============>                      36%][Progress:======>                       21%] [Cov:====>                              13%][Progress:======>                       21%] [Cov:====>                              14%][Progress:======>                       23%] [Cov:>                                  1%][Progress:======>                       23%] [Cov:>                                  2%][Progress:======>                       23%] [Cov:====>                              14%][Progress:======>                       23%] [Cov:=====>                             15%][Progress:======>                       23%] [Cov:=====>                             17%][Progress:======>                       23%] [Cov:======>                            18%][Progress:======>                       23%] [Cov:======>                            19%][Progress:=======>                      25%] [Cov:>                                  2%][Progress:=======>                      25%] [Cov:=>                                 4%][Progress:=======>                      25%] [Cov:=====>                             16%][Progress:=======>                      25%] [Cov:=====>                             17%][Progress:=======>                      25%] [Cov:======>                            18%][Progress:=======>                      25%] [Cov:=======>                           20%][Progress:=======>                      25%] [Cov:=======>                           22%][Progress:=======>                      25%] [Cov:========>                          23%][Progress:=======>                      26%] [Cov:>                                  0%][Progress:=======>                      26%] [Cov:>                                  1%][Progress:=======>                      26%] [Cov:====>                              13%][Progress:========>                     28%] [Cov:=>                                 3%][Progress:========>                     28%] [Cov:=>                                 4%][Progress:========>                     28%] [Cov:=====>                             17%][Progress:========>                     28%] [Cov:======>                            18%][Progress:========>                     28%] [Cov:=======>                           20%][Progress:========>                     28%] [Cov:=======>                           22%][Progress:========>                     28%] [Cov:========>                          23%][Progress:=========>                    30%] [Cov:====>                              12%][Progress:=========>                    30%] [Cov:====>                              13%][Progress:=========>                    30%] [Cov:====>                              14%][Progress:=========>                    30%] [Cov:=====>                             15%][Progress:=========>                    30%] [Cov:=====>                             17%][Progress:=========>                    30%] [Cov:======>                            19%][Progress:=========>                    31%] [Cov:====>                              13%][Progress:=========>                    31%] [Cov:====>                              14%][Progress:==========>                   35%] [Cov:>                                  0%][Progress:==========>                   35%] [Cov:>                                  1%][Progress:==========>                   35%] [Cov:====>                              13%][Progress:==========>                   35%] [Cov:====>                              14%][Progress:==========>                   36%] [Cov:>                                  2%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=====>                             16%][Progress:==========>                   36%] [Cov:=====>                             17%][Progress:==========>                   36%] [Cov:======>                            19%][Progress:==========>                   36%] [Cov:=======>                           21%][Progress:===========>                  38%] [Cov:>                                  0%][Progress:===========>                  38%] [Cov:>                                  1%][Progress:===========>                  38%] [Cov:====>                              13%][Progress:===========>                  38%] [Cov:====>                              14%][Progress:===========>                  38%] [Cov:============>                      36%][Progress:============>                 40%] [Cov:=======>                           21%][Progress:============>                 41%] [Cov:======>                            18%][Progress:============>                 41%] [Cov:======>                            19%][Progress:============>                 41%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:=======>                           21%][Progress:============>                 43%] [Cov:=======>                           22%][Progress:============>                 43%] [Cov:========>                          23%][Progress:=============>                45%] [Cov:======>                            19%][Progress:=============>                45%] [Cov:========>                          23%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       33%][Progress:=============>                45%] [Cov:============>                      37%][Progress:=============>                46%] [Cov:==================>                53%][Progress:===============>              51%] [Cov:================>                  48%][Progress:===============>              51%] [Cov:=================>                 49%][Progress:===============>              51%] [Cov:==================>                53%][Progress:===============>              53%] [Cov:==================>                53%][Progress:===============>              53%] [Cov:==================>                53%][Progress:================>             55%] [Cov:==================>                53%][Progress:================>             56%] [Cov:==================>                53%][Progress:================>             56%] [Cov:==================>                54%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               56%][Progress:=================>            58%] [Cov:==================>                53%][Progress:==================>           60%] [Cov:===================>               57%][Progress:==================>           61%] [Cov:===================>               56%][Progress:==================>           61%] [Cov:===================>               57%][Progress:==================>           61%] [Cov:====================>              58%][Progress:==================>           63%] [Cov:===================>               56%][Progress:==================>           63%] [Cov:===================>               57%][Progress:===================>          65%] [Cov:===================>               56%][Progress:===================>          66%] [Cov:====================>              59%][Progress:====================>         68%] [Cov:====================>              58%][Progress:====================>         68%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              58%][Progress:=====================>        71%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:=====================>             60%][Progress:=====================>        73%] [Cov:====================>              58%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:======================>       75%] [Cov:==================>                54%][Progress:======================>       75%] [Cov:====================>              59%][Progress:======================>       76%] [Cov:=====================>             61%][Progress:=======================>      78%] [Cov:=====================>             61%][Progress:========================>     80%] [Cov:=====================>             61%][Progress:========================>     81%] [Cov:=====================>             61%][Progress:========================>     83%] [Cov:=====================>             61%][Progress:=========================>    85%] [Cov:=====================>             61%][Progress:=========================>    86%] [Cov:=====================>             61%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:======================>            63%][Progress:===========================>  91%] [Cov:======================>            63%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:============================> 95%] [Cov:======================>            63%][Progress:============================> 95%] [Cov:======================>            64%][Progress:============================> 96%] [Cov:=====================>             62%][Progress:============================> 96%] [Cov:======================>            63%][Progress:=============================>98%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:=======================>           66%]
* Search finished after 63s and 8 generations, 6924 statements, best individual has fitness: 1075.249168146033
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 851
* Number of covered goals: 685
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 428
* Number of covered goals: 295
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 53%
* Total number of goals: 212
* Number of covered goals: 112
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 32%
* Total number of goals: 28
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 71%
* Total number of goals: 17
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 59%
* Total number of goals: 17
* Number of covered goals: 10
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 428
* Number of covered goals: 295
* Generated 33 tests with total length 258
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'EigenDecompositionImpl_ESTest' to evosuite-tests
* Done!

* Computation finished
