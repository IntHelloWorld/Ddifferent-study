/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 13:57:26 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 12;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(12, 12);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 12);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(7);
      RealVector realVector1 = eigenDecompositionImpl0.getEigenvector(7);
      double double0 = openMapRealMatrix0.getFrobeniusNorm();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(7, 12);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector(12);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-599.260434);
      doubleArray0[2] = (-1498.3);
      doubleArray0[3] = (-4.469822139705);
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 1022.726054077212;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4.469822139705);
      doubleArray1[1] = (-1498.3);
      doubleArray1[2] = 1022.726054077212;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1498.3);
      doubleArray1[5] = (-1498.3);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-4.469822139705));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      int int0 = (-2308);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2308));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2308
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(48, 48);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 5);
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 3311;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3311, 3311, 3311);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(3311);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2998.210167703));
      doubleArray0[0] = double0;
      Double double1 = new Double((-2998.210167703));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (double) doubleArray0[1]);
      try { 
        eigenDecompositionImpl0.getEigenvector((-609));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -609
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-599.260434);
      doubleArray0[2] = (-1498.3);
      doubleArray0[3] = (-4.469822139705);
      doubleArray0[4] = (-2801.580533215927);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 1022.726054077212;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4.469822139705);
      doubleArray1[1] = (-1498.3);
      doubleArray1[2] = 1022.726054077212;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2801.580533215927);
      doubleArray1[5] = (-1498.3);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-4.469822139705));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      int int0 = (-2308);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2308));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2308
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-143.69712);
      doubleArray0[1] = (-1165.6300616);
      doubleArray0[2] = 850.0839;
      doubleArray0[3] = 2942.4468;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = (-128.16223312153429);
      doubleArray0[7] = (-1866.361);
      doubleArray0[8] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(RuntimeException e) {
         //
         // a 9x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.08325;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-899.229);
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.0);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x5 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 100.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 100.0);
      openMapRealVector0.set(100.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2042);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2042
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 3431.28628108597);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      String string0 = array2DRowRealMatrix0.toString();
      double double0 = 0.9999999999999998;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.9999999999999998);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1569.548);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-815.3));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1933.02);
      doubleArray0[2] = 722.525459683004;
      doubleArray0[3] = 27.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 631.40358704;
      doubleArray0[6] = (-1341.513589232);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-831.43481);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1933.02));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 511.8062666385495;
      doubleArray0[1] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      RealMatrix realMatrix1 = arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, 0.0);
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      boolean boolean0 = arrayRealVector1.equals("eYDfk*/fb/E99j");
      double double0 = eigenDecompositionImpl0.getDeterminant();
      double double1 = eigenDecompositionImpl0.getImagEigenvalue(0);
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix3 = eigenDecompositionImpl0.getD();
      int int0 = 732;
      RealMatrix realMatrix4 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector(732);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 732
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1357.0);
      doubleArray0[0] = (-1357.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      int int0 = 244;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(244, 244);
      try { 
        openMapRealVector0.outerproduct(openMapRealVector1);
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 1 but expected 244
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2366.5485600248;
      doubleArray0[1] = (-1370.50238560135);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1370.50238560135);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 3897.8178133273504);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1376.1149555642673);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1376.1149555642673);
      doubleArray1[2] = (-1376.1149555642673);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2277.57685853917);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-5220.89834383);
      doubleArray0[3] = (-191.646268362785);
      doubleArray0[4] = 27.0;
      doubleArray0[5] = 1.05;
      doubleArray0[6] = (-560.1124761890472);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 27.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (-599.260434);
      doubleArray0[2] = (-1498.3);
      doubleArray0[3] = (-4.469822139705);
      doubleArray0[4] = (-2801.580533215927);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 1022.726054077212;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4.469822139705);
      doubleArray1[1] = (-1498.3);
      doubleArray1[2] = 1022.726054077212;
      doubleArray1[3] = 0.0;
      doubleArray1[5] = (-1498.3);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-4.469822139705));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      int int0 = (-2308);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2308));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2308
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = null;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2.2250738585072014E-308;
      int int0 = 1350;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1350;
      doubleArray0[3] = (double) 1350;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1955.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-63.22751);
      doubleArray0[2] = 9.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 3025.396019798;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-63.22751));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}
