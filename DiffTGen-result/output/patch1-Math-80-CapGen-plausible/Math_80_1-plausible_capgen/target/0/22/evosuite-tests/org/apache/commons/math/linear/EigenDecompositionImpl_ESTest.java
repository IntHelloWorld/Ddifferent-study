/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 28 14:03:52 GMT 2020
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DefaultRealMatrixPreservingVisitor;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double4;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 0.08325;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 416.15121;
      doubleArray0[5] = 1439.4360071777346;
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2281.2621384535964);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-1255));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1255
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.7277);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.7228594511980216);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double(5.34908785917963E-5);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.7228594511980216);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      double double9 = Double.max(1574.7277, (double) doubleArray0[6]);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double10 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.7277);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.7228594511980216);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      Double double3 = new Double((-1903.442852));
      double double4 = Double.max(1934.6, (double) doubleArray0[2]);
      doubleArray0[4] = double3;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.7228594511980216);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double9 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1590.2951979995948);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2085.8097852853143);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      double double9 = Double.sum(1.0E-12, 669.13343197016);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double10 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      double double5 = Double.min(364.2153758801946, (double) doubleArray0[1]);
      Double double6 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[6] = double7;
      Double double8 = new Double(0.0);
      doubleArray0[7] = double8;
      Double double9 = new Double((double) doubleArray0[3]);
      doubleArray0[8] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      double double10 = Double.min((-1903.442852), 9.178754423189162E-10);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      double double11 = eigenDecompositionImpl0.getDeterminant();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      double double12 = eigenDecompositionImpl0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      boolean boolean0 = Double.isFinite(2.7352997644669585E-10);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.7277);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.7228594511980216);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.7228594511980216);
      doubleArray0[7] = double7;
      double double8 = Double.min(54.0, (double) doubleArray0[3]);
      Double double9 = new Double(1630.769451);
      doubleArray0[8] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      DefaultRealMatrixPreservingVisitor defaultRealMatrixPreservingVisitor0 = new DefaultRealMatrixPreservingVisitor();
      double double10 = openMapRealMatrix0.walkInColumnOrder((RealMatrixPreservingVisitor) defaultRealMatrixPreservingVisitor0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double11 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[16][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-5449.208);
      doubleArray0[1] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.5);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector((-6));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.7277);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.7228594511980216);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      doubleArray0[6] = double4;
      Double double6 = new Double(0.7228594511980216);
      doubleArray0[7] = double6;
      Double double7 = new Double(1630.76945114373);
      doubleArray0[8] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      double double8 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[1];
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[6] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[7] = double6;
      doubleArray0[8] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      boolean boolean0 = Double.isFinite((double) doubleArray0[5]);
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      double double8 = Double.max((double) doubleArray0[3], 1629.8391889554441);
      Double double9 = new Double(1629.8391889554441);
      double double10 = Double.sum(1009.0538203, (double) doubleArray0[0]);
      doubleArray0[8] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(782);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 782
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      boolean boolean0 = Double.isFinite((double) doubleArray0[5]);
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      double double8 = Double.max((double) doubleArray0[3], 1630.76945114373);
      Double double9 = new Double(1630.76945114373);
      double double10 = Double.sum(1009.0538203, (double) doubleArray0[0]);
      doubleArray0[8] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(782);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 782
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1590.2951979995948);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = doubleArray0[0];
      Double double3 = new Double(2085.8097852853143);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4761.55;
      doubleArray0[1] = (-70.993625032737);
      doubleArray0[2] = 2695.5411250894485;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4068.80806498);
      doubleArray0[7] = 0.25;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-70.993625032737);
      doubleArray1[1] = 0.25;
      doubleArray1[3] = (-4068.80806498);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1815.551985705714;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY);
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.7277);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.7228594511980216);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.7228594511980216);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      double double9 = eigenDecompositionImpl0.getDeterminant();
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      boolean boolean0 = Double.isFinite((double) doubleArray0[5]);
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      double double8 = Double.max((double) doubleArray0[3], 0.0);
      Double double9 = new Double((double) doubleArray0[1]);
      double double10 = Double.sum(1009.0538203, (double) doubleArray0[0]);
      doubleArray0[8] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(782);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 782
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 1439.4360071777346;
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2281.2621384535964);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      doubleArray0[4] = doubleArray0[1];
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[6] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[7] = double6;
      doubleArray0[8] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1590.2951979995948);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2085.8097852853143);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double4;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(980);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 980
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1590.2951979995948);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = doubleArray0[0];
      Double double3 = new Double(2085.8097852853143);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double((-2129.4));
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1630.76945114373);
      doubleArray0[8] = double8;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      doubleArray0[6] = doubleArray0[5];
      Double double6 = new Double(0.0);
      doubleArray0[7] = double6;
      Double double7 = new Double(1630.76945114373);
      doubleArray0[8] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4761.55;
      doubleArray0[1] = (-70.993625032737);
      doubleArray0[0] = 2695.5411250894485;
      doubleArray0[3] = 1815.551985705714;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4068.80806498);
      doubleArray0[7] = 0.25;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-70.993625032737);
      doubleArray1[1] = 0.25;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-4068.80806498);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1815.551985705714;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY);
      int int0 = (-806);
      double double0 = new Double((-4068.80806498));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector((-806));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -806
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1430.0);
      doubleArray0[1] = 2099.8808662;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1231.269013;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1285.16926039044);
      doubleArray0[7] = 2.2250738585072014E-308;
      doubleArray0[8] = (-99.3);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1285.16926039044));
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.08325;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 416.15121;
      doubleArray0[5] = 1439.4360071777346;
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      RealMatrix realMatrix0 = openMapRealVector1.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2281.2621384535964);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1151;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1151, 1151);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, 1151);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1250.717804999;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = (-528.6759863);
      doubleArray1[7] = 4292.8698729605;
      doubleArray1[8] = 2571.2379916683753;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1886.315041);
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x9 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-670.49167));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4761.55;
      doubleArray0[1] = (-70.993625032737);
      doubleArray0[2] = 2695.5411250894485;
      doubleArray0[3] = 1815.551985705714;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4068.80806498);
      doubleArray0[7] = 0.25;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-70.993625032737);
      doubleArray1[1] = 0.25;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-4068.80806498);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1815.551985705714;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY);
      int int0 = (-806);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-806));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -806
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4761.55;
      doubleArray0[1] = (-70.993625032737);
      doubleArray0[2] = 2695.5411250894485;
      doubleArray0[3] = 1815.551985705714;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4068.80806498);
      doubleArray0[7] = 0.25;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-70.993625032737);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-4068.80806498);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1815.551985705714;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY);
      int int0 = (-806);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-806));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -806
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, (-742.83497));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 2249.1084374;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 817.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3339.286170897618);
      doubleArray0[1] = 197.823125773;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-798.0506940528413));
      } catch(RuntimeException e) {
         //
         // a 2x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 0.25);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 61.4178;
      doubleArray0[1] = (-508.26037673);
      doubleArray0[2] = 244.785;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 244.785);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3425.34402773);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.1102230246251565E-14);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2357.0);
      doubleArray0[1] = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2.2250738585072014E-308);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-3215.783));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1574.72770436);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double(2086.57984);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1903.442852));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      double double8 = Double.max((double) doubleArray0[5], (double) doubleArray0[7]);
      Double double9 = new Double(1630.76945114373);
      doubleArray0[8] = double9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix1, (-3550.813154103098));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-70.993625032737);
      doubleArray0[2] = 2695.5411250894485;
      doubleArray0[3] = 1815.551985705714;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2695.5411250894485;
      doubleArray0[6] = (-4068.80806498);
      doubleArray0[7] = 0.25;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-70.993625032737);
      doubleArray1[1] = 0.25;
      doubleArray1[3] = (-4068.80806498);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1815.551985705714;
      doubleArray1[6] = 1815.551985705714;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY);
      int int0 = (-806);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-806));
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -806
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0061301975204346);
      doubleArray0[1] = (-1.0061301975204346);
      doubleArray0[2] = (-1.0061301975204346);
      doubleArray0[3] = (-1.0061301975204346);
      doubleArray0[4] = (-1.0061301975204346);
      doubleArray0[5] = (-1.0061301975204346);
      doubleArray0[6] = (-1.0061301975204346);
      doubleArray0[7] = (-1.0061301975204346);
      double[][] doubleArray1 = new double[6][7];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2082.6293;
      doubleArray3[1] = 3.295313137694918E-21;
      doubleArray3[2] = (-1.0061301975204346);
      doubleArray3[3] = 9.0;
      doubleArray3[4] = (double) 828;
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3331.111684);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 915.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3331.111684);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-3331.111684);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 235.20268;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 915.8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 2.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 2.0;
      doubleArray7[5] = 2.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 235.20268;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 235.20268;
      doubleArray8[3] = 2.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-3331.111684);
      doubleArray9[4] = 0.0;
      doubleArray9[5] = 1.0;
      doubleArray9[6] = 915.8;
      doubleArray9[7] = 0.0;
      doubleArray0[8] = doubleArray9;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 4
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
