* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.lang.text.StrBuilder
* Starting client
* Connecting to master process on port 12427
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/Lang_59_tbar/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang.text.StrBuilder
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 648
  - Branch 517
  - Exception 0
  - MutationFactory 584
  - Output 1029
  - Method 107
  - MethodNoException 107
  - CBranchFitnessFactory 517
* Using seed 1585043083886
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:====>                              12%][Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:====>                              12%][Progress:=>                            5%] [Cov:====>                              13%][Progress:=>                            6%] [Cov:====>                              13%][Progress:==>                           8%] [Cov:====>                              12%][Progress:==>                           8%] [Cov:====>                              13%][Progress:===>                          10%] [Cov:>                                  0%][Progress:===>                          10%] [Cov:====>                              12%][Progress:===>                          10%] [Cov:====>                              13%][Progress:====>                         15%] [Cov:>                                  0%][Progress:====>                         15%] [Cov:>                                  1%][Progress:====>                         16%] [Cov:====>                              13%][Progress:======>                       21%] [Cov:>                                  1%][Progress:======>                       21%] [Cov:====>                              14%][Progress:======>                       23%] [Cov:====>                              13%][Progress:=======>                      25%] [Cov:====>                              13%][Progress:=======>                      25%] [Cov:=====>                             15%][Progress:=======>                      26%] [Cov:>                                  0%][Progress:=======>                      26%] [Cov:====>                              12%][Progress:=======>                      26%] [Cov:====>                              13%][Progress:=======>                      26%] [Cov:=====>                             15%][Progress:========>                     28%] [Cov:>                                  1%][Progress:========>                     28%] [Cov:>                                  2%][Progress:========>                     28%] [Cov:====>                              14%][Progress:========>                     28%] [Cov:=====>                             15%][Progress:=========>                    30%] [Cov:====>                              12%][Progress:=========>                    30%] [Cov:=====>                             15%][Progress:==========>                   35%] [Cov:====>                              12%][Progress:==========>                   35%] [Cov:====>                              13%][Progress:==========>                   35%] [Cov:====>                              14%][Progress:==========>                   35%] [Cov:=====>                             15%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:=========>                         28%][Progress:============>                 40%] [Cov:==========>                        29%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:===========>                       33%][Progress:============>                 41%] [Cov:===========>                       34%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       33%][Progress:============>                 43%] [Cov:===========>                       34%][Progress:============>                 43%] [Cov:============>                      35%][Progress:=============>                45%] [Cov:============>                      36%][Progress:=============>                45%] [Cov:============>                      37%][Progress:=============>                46%] [Cov:============>                      36%][Progress:=============>                46%] [Cov:============>                      37%][Progress:=============>                46%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:============>                      37%][Progress:==============>               48%] [Cov:=============>                     38%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:===============>              50%] [Cov:============>                      37%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              50%] [Cov:==============>                    41%][Progress:===============>              51%] [Cov:==============>                    41%][Progress:===============>              51%] [Cov:==============>                    42%][Progress:===============>              51%] [Cov:===============>                   43%][Progress:===============>              53%] [Cov:==============>                    40%][Progress:===============>              53%] [Cov:==============>                    41%][Progress:===============>              53%] [Cov:==============>                    42%][Progress:===============>              53%] [Cov:===============>                   43%][Progress:===============>              53%] [Cov:===============>                   43%][Progress:===============>              53%] [Cov:===============>                   44%][Progress:===============>              53%] [Cov:===============>                   45%][Progress:================>             55%] [Cov:==============>                    42%][Progress:================>             55%] [Cov:===============>                   44%][Progress:================>             55%] [Cov:===============>                   45%][Progress:================>             55%] [Cov:================>                  46%][Progress:================>             56%] [Cov:===============>                   45%][Progress:================>             56%] [Cov:================>                  46%][Progress:=================>            58%] [Cov:===============>                   45%][Progress:=================>            58%] [Cov:================>                  46%][Progress:==================>           60%] [Cov:===============>                   45%][Progress:==================>           60%] [Cov:================>                  46%][Progress:==================>           60%] [Cov:================>                  47%][Progress:==================>           61%] [Cov:================>                  46%][Progress:==================>           61%] [Cov:================>                  47%][Progress:==================>           61%] [Cov:================>                  46%][Progress:==================>           63%] [Cov:================>                  47%][Progress:===================>          65%] [Cov:================>                  46%][Progress:===================>          65%] [Cov:================>                  47%][Progress:===================>          66%] [Cov:================>                  46%][Progress:===================>          66%] [Cov:================>                  47%][Progress:====================>         68%] [Cov:================>                  47%][Progress:=====================>        70%] [Cov:================>                  46%][Progress:=====================>        70%] [Cov:================>                  47%][Progress:=====================>        71%] [Cov:================>                  47%][Progress:=====================>        73%] [Cov:================>                  47%][Progress:======================>       75%] [Cov:================>                  46%][Progress:======================>       75%] [Cov:================>                  47%][Progress:======================>       75%] [Cov:================>                  48%][Progress:======================>       75%] [Cov:=================>                 49%][Progress:======================>       76%] [Cov:================>                  48%][Progress:======================>       76%] [Cov:=================>                 49%][Progress:=======================>      78%] [Cov:================>                  48%][Progress:=======================>      78%] [Cov:=================>                 49%][Progress:========================>     80%] [Cov:================>                  48%][Progress:========================>     80%] [Cov:=================>                 49%][Progress:========================>     81%] [Cov:================>                  48%][Progress:========================>     81%] [Cov:=================>                 49%][Progress:========================>     81%] [Cov:================>                  48%][Progress:========================>     83%] [Cov:================>                  48%][Progress:========================>     83%] [Cov:=================>                 49%][Progress:=========================>    85%] [Cov:================>                  48%][Progress:=========================>    85%] [Cov:=================>                 49%][Progress:=========================>    86%] [Cov:================>                  48%][Progress:=========================>    86%] [Cov:=================>                 49%][Progress:===========================>  90%] [Cov:================>                  48%][Progress:===========================>  90%] [Cov:=================>                 49%][Progress:===========================>  90%] [Cov:=================>                 50%][Progress:===========================>  91%] [Cov:================>                  48%][Progress:===========================>  91%] [Cov:=================>                 49%][Progress:===========================>  91%] [Cov:=================>                 51%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  93%] [Cov:=================>                 51%][Progress:============================> 95%] [Cov:=================>                 51%][Progress:============================> 95%] [Cov:==================>                52%][Progress:============================> 96%] [Cov:=================>                 51%][Progress:============================> 96%] [Cov:==================>                52%][Progress:=============================>98%] [Cov:=================>                 51%][Progress:==============================100%] [Cov:==================>                52%][Progress:==============================100%] [Cov:=================>                 51%][Progress:==============================100%] [Cov:=================>                 51%][Progress:==============================100%] [Cov:=================>                 51%][Progress:==============================100%] [Cov:===================>               56%]
* Search finished after 67s and 16 generations, 9045 statements, best individual has fitness: 3364.830578669964
[MASTER] 17:46:01.804 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 6 seconds more than allowed.
* Minimizing test suite
[MASTER] 17:47:08.367 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 65%
* Total number of goals: 648
* Number of covered goals: 419
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 58%
* Total number of goals: 517
* Number of covered goals: 302
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 48%
* Total number of goals: 584
* Number of covered goals: 281
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 3%
* Total number of goals: 1029
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 88%
* Total number of goals: 107
* Number of covered goals: 94
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 79%
* Total number of goals: 107
* Number of covered goals: 85
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 53%
* Total number of goals: 517
* Number of covered goals: 275
* Generated 81 tests with total length 937
* Resulting test suite's coverage: 57% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'StrBuilder_ESTest' to evosuite-tests
* Done!

* Computation finished
