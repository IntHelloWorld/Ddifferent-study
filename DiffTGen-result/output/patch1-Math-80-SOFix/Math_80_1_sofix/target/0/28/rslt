* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.linear.EigenDecompositionImpl
* Starting client
* Connecting to master process on port 13775
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-80-SOFix/Math_80_1_sofix/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.linear.EigenDecompositionImpl
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 851
  - Branch 428
  - Exception 0
  - MutationFactory 212
  - Output 28
  - Method 17
  - MethodNoException 17
  - CBranchFitnessFactory 428
* Using seed 1585471065771
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:>                                  0%][Progress:=>                            6%] [Cov:>                                  1%][Progress:===>                          10%] [Cov:====>                              13%][Progress:===>                          11%] [Cov:>                                  0%][Progress:===>                          11%] [Cov:>                                  1%][Progress:===>                          11%] [Cov:====>                              13%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          13%] [Cov:>                                  0%][Progress:===>                          13%] [Cov:>                                  1%][Progress:===>                          13%] [Cov:====>                              13%][Progress:===>                          13%] [Cov:====>                              14%][Progress:====>                         15%] [Cov:>                                  0%][Progress:====>                         15%] [Cov:>                                  1%][Progress:====>                         15%] [Cov:====>                              13%][Progress:======>                       20%] [Cov:>                                  0%][Progress:======>                       20%] [Cov:>                                  1%][Progress:======>                       20%] [Cov:====>                              13%][Progress:======>                       20%] [Cov:====>                              14%][Progress:======>                       21%] [Cov:>                                  0%][Progress:======>                       21%] [Cov:>                                  1%][Progress:======>                       21%] [Cov:====>                              13%][Progress:======>                       21%] [Cov:====>                              14%][Progress:======>                       23%] [Cov:====>                              13%][Progress:======>                       23%] [Cov:====>                              14%][Progress:========>                     28%] [Cov:>                                  0%][Progress:========>                     28%] [Cov:>                                  1%][Progress:========>                     28%] [Cov:====>                              13%][Progress:========>                     28%] [Cov:====>                              14%][Progress:=========>                    33%] [Cov:>                                  0%][Progress:=========>                    33%] [Cov:>                                  1%][Progress:=========>                    33%] [Cov:====>                              13%][Progress:=========>                    33%] [Cov:====>                              14%][Progress:=========>                    33%] [Cov:=====>                             15%][Progress:===========>                  38%] [Cov:=>                                 3%][Progress:===========>                  38%] [Cov:==>                                6%][Progress:===========>                  38%] [Cov:======>                            19%][Progress:===========>                  38%] [Cov:=======>                           22%][Progress:===========>                  38%] [Cov:========>                          23%][Progress:===========>                  38%] [Cov:========>                          25%][Progress:============>                 40%] [Cov:>                                  0%][Progress:============>                 40%] [Cov:>                                  1%][Progress:============>                 40%] [Cov:====>                              13%][Progress:============>                 40%] [Cov:====>                              14%][Progress:============>                 40%] [Cov:=====>                             16%][Progress:============>                 40%] [Cov:=====>                             17%][Progress:============>                 40%] [Cov:======>                            18%][Progress:============>                 40%] [Cov:=======>                           20%][Progress:============>                 40%] [Cov:=======>                           21%][Progress:============>                 40%] [Cov:=======>                           22%][Progress:============>                 40%] [Cov:========>                          23%][Progress:============>                 40%] [Cov:=========>                         28%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:============>                      35%][Progress:============>                 41%] [Cov:>                                  1%][Progress:============>                 41%] [Cov:====>                              13%][Progress:============>                 41%] [Cov:====>                              14%][Progress:============>                 41%] [Cov:=====>                             15%][Progress:============>                 41%] [Cov:============>                      35%][Progress:============>                 43%] [Cov:============>                      35%][Progress:=============>                45%] [Cov:============>                      35%][Progress:=============>                46%] [Cov:==============>                    42%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:==============>                    42%][Progress:==============>               48%] [Cov:===============>                   43%][Progress:===============>              50%] [Cov:=============>                     38%][Progress:===============>              51%] [Cov:===============>                   43%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:==============>                    41%][Progress:===============>              53%] [Cov:===============>                   43%][Progress:================>             55%] [Cov:==============>                    41%][Progress:================>             55%] [Cov:===============>                   43%][Progress:================>             56%] [Cov:=============>                     39%][Progress:================>             56%] [Cov:===============>                   43%][Progress:=================>            58%] [Cov:=============>                     39%][Progress:=================>            58%] [Cov:==============>                    41%][Progress:=================>            58%] [Cov:===============>                   43%][Progress:==================>           60%] [Cov:=============>                     39%][Progress:==================>           60%] [Cov:==============>                    40%][Progress:==================>           60%] [Cov:===============>                   43%][Progress:==================>           61%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   44%][Progress:===================>          65%] [Cov:=============>                     39%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   44%][Progress:====================>         68%] [Cov:===============>                   44%][Progress:====================>         68%] [Cov:===============>                   45%][Progress:====================>         68%] [Cov:================>                  46%][Progress:====================>         68%] [Cov:================>                  47%][Progress:====================>         68%] [Cov:================>                  48%][Progress:====================>         68%] [Cov:=================>                 49%][Progress:=====================>        70%] [Cov:==============>                    42%][Progress:=====================>        70%] [Cov:===============>                   44%][Progress:=====================>        71%] [Cov:=================>                 51%][Progress:=====================>        73%] [Cov:=================>                 50%][Progress:=====================>        73%] [Cov:=================>                 51%][Progress:======================>       75%] [Cov:=================>                 50%][Progress:======================>       75%] [Cov:=================>                 51%][Progress:======================>       76%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:=================>                 51%][Progress:=======================>      78%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     81%] [Cov:=================>                 50%][Progress:========================>     81%] [Cov:=================>                 51%][Progress:========================>     81%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:=================>                 51%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:=========================>    85%] [Cov:=================>                 50%][Progress:=========================>    85%] [Cov:=================>                 51%][Progress:=========================>    85%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                54%][Progress:==========================>   88%] [Cov:==================>                53%][Progress:==========================>   88%] [Cov:==================>                54%][Progress:===========================>  90%] [Cov:==================>                53%][Progress:===========================>  90%] [Cov:==================>                54%][Progress:===========================>  90%] [Cov:===================>               55%][Progress:===========================>  90%] [Cov:===================>               56%][Progress:===========================>  91%] [Cov:==================>                54%][Progress:===========================>  91%] [Cov:===================>               55%][Progress:===========================>  93%] [Cov:===================>               57%][Progress:===========================>  93%] [Cov:====================>              58%][Progress:============================> 95%] [Cov:====================>              58%][Progress:============================> 96%] [Cov:====================>              58%][Progress:=============================>98%] [Cov:====================>              59%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:=====================>             61%][Progress:==============================100%] [Cov:====================>              59%][Progress:==============================100%] [Cov:=====================>             61%][Progress:==============================100%] [Cov:=====================>             62%]
* Search finished after 63s and 13 generations, 8431 statements, best individual has fitness: 1423.5343358261014
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 70%
* Total number of goals: 851
* Number of covered goals: 599
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 56%
* Total number of goals: 428
* Number of covered goals: 240
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 50%
* Total number of goals: 212
* Number of covered goals: 105
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 28
* Number of covered goals: 11
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 71%
* Total number of goals: 17
* Number of covered goals: 12
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 65%
* Total number of goals: 17
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 56%
* Total number of goals: 428
* Number of covered goals: 240
* Generated 30 tests with total length 137
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Compiling and checking tests
* Writing JUnit test case 'EigenDecompositionImpl_ESTest' to evosuite-tests
* Done!

* Computation finished
