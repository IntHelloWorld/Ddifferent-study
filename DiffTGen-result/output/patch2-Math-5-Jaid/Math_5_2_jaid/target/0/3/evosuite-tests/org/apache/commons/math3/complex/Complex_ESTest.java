/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:59:28 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-2019.5));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.acos();
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ZERO.pow(complex1);
      int int1 = complex1.I.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ONE.add((-2019.5));
      Complex complex7 = Complex.valueOf((-1173.069902871382));
      Complex complex8 = complex7.add(complex2);
      Complex complex9 = complex7.ZERO.pow(complex2);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.INF.sqrt1z();
      Complex complex12 = Complex.valueOf((-2019.5));
      Complex complex13 = complex7.reciprocal();
      Complex complex14 = complex13.multiply(7);
      Complex complex15 = complex4.pow(complex0);
      Complex complex16 = complex1.add((-7.258551497833573E-79));
      double double0 = complex14.abs();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.INF.acos();
      double double0 = complex1.NaN.abs();
      Complex complex4 = complex3.INF.multiply((-917.934288218));
      String string0 = complex3.NaN.toString();
      Complex complex5 = complex0.ZERO.multiply(1.0267179012298584);
      Complex complex6 = complex1.NaN.divide(complex0);
      Complex complex7 = complex6.pow((-917.934288218));
      Complex complex8 = complex1.NaN.negate();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.ONE.pow((-917.934288218));
      Complex complex11 = complex0.I.cos();
      Complex complex12 = complex0.I.add(complex5);
      Complex complex13 = complex9.divide(complex0);
      Complex complex14 = new Complex(Double.NaN, (-917.934288218));
      Object object1 = new Object();
      boolean boolean0 = complex2.equals(object1);
      Complex complex15 = complex0.atan();
      Complex complex16 = complex15.I.multiply(0);
      double double1 = complex13.abs();
      Complex complex17 = complex15.tanh();
      Object object2 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex0.ONE.pow(complex1);
      String string0 = complex0.INF.toString();
      Complex complex5 = Complex.valueOf(1.1992295328636466E289, (-2061.999741949));
      Complex complex6 = complex5.INF.acos();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.I.multiply(complex4);
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex7.ONE.multiply((-4833));
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = Complex.valueOf((-2061.999741949));
      Complex complex14 = complex5.asin();
      Complex complex15 = complex13.INF.sqrt1z();
      List<Complex> list0 = complex13.nthRoot(282);
      double double0 = complex1.getReal();
      Complex complex16 = complex5.acos();
      Complex complex17 = complex16.NaN.add(complex0);
      Complex complex18 = complex7.exp();
      Complex complex19 = complex18.I.sqrt1z();
      Complex complex20 = complex1.multiply(6);
      int int0 = complex12.hashCode();
      Complex complex21 = complex17.cosh();
      Complex complex22 = complex15.subtract((double) (-4833));
      Complex complex23 = complex1.multiply(complex11);
      double double1 = complex23.NaN.getArgument();
      boolean boolean0 = complex20.equals("(Infinity, Infinity)");
      Complex complex24 = complex14.negate();
      double double2 = complex7.getArgument();
      Complex complex25 = complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = Complex.valueOf(1802.0);
      Complex complex5 = complex0.pow(complex1);
      boolean boolean0 = complex5.equals(complex1);
      Object object0 = complex1.readResolve();
      Complex complex6 = complex0.asin();
      int int0 = 0;
      Complex complex7 = complex0.ZERO.sinh();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.4794751934479566E-52);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.INF.log();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex2.I.exp();
      Complex complex8 = complex7.ONE.multiply(0.0);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex9.NaN.cosh();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex12.ZERO.tanh();
      int int0 = complex2.hashCode();
      Complex complex14 = complex4.INF.exp();
      double double0 = complex14.ONE.abs();
      Complex complex15 = complex5.pow(complex12);
      Complex complex16 = complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex17 = complex11.conjugate();
      double double1 = complex17.NaN.getArgument();
      Complex complex18 = complex5.ZERO.pow(852.113074867903);
      Complex complex19 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex20 = complex19.NaN.add(0.0);
      Complex complex21 = complex12.cosh();
      String string0 = complex17.toString();
      Complex complex22 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      double double2 = complex21.getReal();
      Complex complex23 = complex7.asin();
      Complex complex24 = complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex2.I.pow(0.0);
      double double0 = complex1.I.getArgument();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex1.ONE.conjugate();
      // Undeclared exception!
      complex0.nthRoot(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 387.8829;
      Complex complex0 = new Complex(387.8829, 387.8829);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      try { 
        complex0.INF.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(2499.6, 2499.6);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex2.I.createComplex(519.18, 191.429912263);
      double double0 = complex0.I.getArgument();
      double double1 = complex0.abs();
      String string0 = complex0.toString();
      Complex complex4 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2208.0070797));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = complex0.ZERO.hashCode();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex2.ZERO.multiply(complex0);
      Complex complex5 = complex2.I.atan();
      Complex complex6 = complex4.NaN.createComplex((-2208.0070797), Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1227.312));
      Complex complex8 = complex6.ZERO.pow(complex7);
      Object object0 = complex1.I.readResolve();
      Complex complex9 = complex0.pow(complex1);
      Object object1 = new Object();
      boolean boolean0 = complex6.equals(object1);
      Complex complex10 = complex0.asin();
      Complex complex11 = complex10.add(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.add(Double.POSITIVE_INFINITY);
      Complex complex13 = complex2.conjugate();
      Complex complex14 = complex13.ONE.sinh();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex6.cos();
      Complex complex17 = complex9.atan();
      Complex complex18 = complex2.add(complex13);
      Complex complex19 = complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      double double0 = complex1.getArgument();
      Complex complex2 = Complex.valueOf(1249.4538892);
      Complex complex3 = complex2.ZERO.subtract((-1.0482571326594316E-8));
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex0.createComplex((-1.0482571326594316E-8), 1249.4538892);
      Complex complex7 = Complex.valueOf(5.415131809829094E-8);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex1.ZERO.subtract(5.415131809829094E-8);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex11 = complex8.I.subtract(complex1);
      Complex complex12 = complex0.negate();
      Complex complex13 = complex1.pow((-1045.30541));
      int int0 = complex2.hashCode();
      Complex complex14 = complex1.log();
      Complex complex15 = Complex.valueOf(Double.NaN);
      Complex complex16 = complex3.sin();
      Complex complex17 = complex16.ZERO.add((-141.4443128689072));
      Complex complex18 = complex17.NaN.reciprocal();
      Complex complex19 = complex0.reciprocal();
      boolean boolean0 = complex7.equals(complex3);
      Complex complex20 = complex2.subtract(complex4);
      Complex complex21 = complex14.multiply(complex0);
      Complex complex22 = complex20.sqrt1z();
      Object object0 = complex21.readResolve();
      Complex complex23 = complex13.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(9.29173407843235E-166);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      int int0 = complex3.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2180.984), 1767.3920263716);
      Complex complex1 = complex0.ZERO.divide((-2180.984));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.multiply((-1270.9043725460103));
      Complex complex3 = complex0.ONE.pow(complex2);
      int int0 = complex1.I.hashCode();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.add((-2418.28302055));
      Complex complex6 = complex4.createComplex(3038.11, Double.NaN);
      String string0 = complex0.ONE.toString();
      Complex complex7 = complex4.I.sinh();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex1.atan();
      String string1 = complex0.NaN.toString();
      Complex complex10 = complex4.INF.pow((-1270.9043725460103));
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex11.ONE.tanh();
      int int1 = complex11.hashCode();
      Object object0 = complex1.readResolve();
      Complex complex13 = complex1.divide(complex6);
      Complex complex14 = complex6.tan();
      Complex complex15 = complex14.add((-20.0));
      Complex complex16 = complex15.NaN.createComplex(332.62066, 332.62066);
      Complex complex17 = complex6.subtract((-222.543236539));
      Complex complex18 = complex17.sinh();
      Complex complex19 = complex18.NaN.add(complex6);
      Complex complex20 = complex2.log();
      Complex complex21 = complex9.multiply((-3342.9253));
      Complex complex22 = complex1.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.ZERO.add(0.0);
      int int0 = complex2.hashCode();
      Complex complex6 = complex3.I.divide(0.0);
      Complex complex7 = complex6.ONE.divide(complex5);
      boolean boolean0 = complex1.isInfinite();
      boolean boolean1 = complex4.isNaN();
      Complex complex8 = complex5.multiply(0.0);
      Complex complex9 = complex4.multiply(complex5);
      double double0 = complex3.getArgument();
      Complex complex10 = complex7.ONE.multiply((-2202));
      Complex complex11 = complex4.multiply(0.0);
      Complex complex12 = complex11.add(complex7);
      Complex complex13 = Complex.valueOf(0.0, (-156.0261183));
      Object object0 = complex3.readResolve();
      Complex complex14 = complex8.exp();
      boolean boolean2 = complex3.isNaN();
      Complex complex15 = complex8.multiply(Double.NaN);
      Complex complex16 = complex12.subtract(0.0);
      Complex complex17 = complex14.cosh();
      Complex complex18 = complex1.sin();
      Complex complex19 = Complex.valueOf(0.0);
      boolean boolean3 = complex0.equals(complex19);
      Complex complex20 = complex1.conjugate();
      Complex complex21 = complex13.add(complex12);
      ComplexField complexField0 = complex15.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1871.604720435, 1389.099979);
      Complex complex1 = new Complex(1871.604720435, (-472.477));
      Complex complex2 = complex1.ZERO.add(1389.099979);
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(395.1816792, (-1409.5834476803));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.INF.multiply(complex0);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = Complex.valueOf((-2001.50306));
      Complex complex5 = complex2.ZERO.multiply(0.0);
      Complex complex6 = complex5.ONE.negate();
      Complex complex7 = complex0.NaN.add(complex1);
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex0.tan();
      double double0 = complex0.getImaginary();
      Complex complex11 = Complex.valueOf(0.0);
      Object object0 = complex5.readResolve();
      Complex complex12 = Complex.valueOf(0.0, (-1409.5834476803));
      Complex complex13 = complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(433.16139812);
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.createComplex(0.10906457901000977, 0.10906457901000977);
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = complex4.divide(Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      int int0 = complex0.hashCode();
      Complex complex6 = complex0.divide(0.10906457901000977);
      Complex complex7 = complex4.exp();
      double double0 = complex5.abs();
      Complex complex8 = Complex.valueOf(0.10906457901000977, Double.NaN);
      Complex complex9 = complex0.divide(1931.0879633679);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.I.multiply((-1.0));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.NaN.pow(complex0);
      Complex complex6 = Complex.valueOf(0.0, (-1.3885660525939072E-8));
      Complex complex7 = complex4.subtract(1630.84668256967);
      double double0 = complex7.INF.abs();
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex7.NaN.add((-285.51466));
      Complex complex9 = complex8.ONE.divide(complex3);
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.valueOf((-1.3885660525939072E-8), (-1.3885660525939072E-8));
      boolean boolean0 = complex4.equals(complex10);
      Complex complex12 = complex2.pow(complex4);
      Complex complex13 = complex9.atan();
      Complex complex14 = complex7.cosh();
      Complex complex15 = complex7.INF.add(complex8);
      Complex complex16 = complex7.cos();
      Complex complex17 = complex16.atan();
      Object object0 = complex3.readResolve();
      Complex complex18 = complex14.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(1778.605, (-250.23296494));
      Complex complex1 = complex0.I.pow(954.6655401);
      Complex complex2 = complex1.NaN.divide(complex0);
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.multiply((-2225));
      Complex complex5 = complex1.I.cosh();
      Complex complex6 = complex5.ONE.tan();
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = complex7.ZERO.conjugate();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1511.9502428089), (-2.6033812325397097E-8));
      Complex complex1 = complex0.cos();
      ComplexField complexField0 = complex1.INF.getField();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-1.1214757379328965E-8);
      Complex complex0 = Complex.valueOf((-1.1214757379328965E-8));
      double double1 = 2782.55015911749;
      try { 
        complex0.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.841244788104406E44), (-1964.0));
      Complex complex1 = complex0.divide(1430.48);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.ZERO.sin();
      ComplexField complexField1 = complex2.I.getField();
      Complex complex4 = complex0.add((-2378.47977));
      Complex complex5 = complex4.add((-1964.0));
      Complex complex6 = Complex.valueOf((-1964.0), 1430.48);
      try { 
        complex5.nthRoot((-1613));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,613
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1538.382083203), 1.3575372396796738E-7);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex3.pow(1.3575372396796738E-7);
      Complex complex6 = complex5.NaN.multiply(0.0);
      String string0 = complex0.toString();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ZERO.tanh();
      ComplexField complexField0 = complex2.getField();
      Complex complex9 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-20.0), (-2.5338279333399964E-272));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.ZERO.conjugate();
      boolean boolean0 = complex0.isNaN();
      Complex complex6 = complex0.divide(complex4);
      Complex complex7 = complex6.INF.pow(0.0);
      Complex complex8 = complex5.ZERO.divide((-70.6119));
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex5.isInfinite();
      Complex complex9 = Complex.valueOf(0.0, 70.74979349615);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7743467191652895E-7), 198.95341);
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(551.0);
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.pow(551.0);
      Complex complex4 = complex0.subtract(198.95341);
      Complex complex5 = Complex.valueOf((-48.81632507), (-1.7743467191652895E-7));
      Complex complex6 = complex0.pow((-3210.777189093));
      Complex complex7 = complex0.log();
      Complex complex8 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.NaN.multiply(954);
      Complex complex4 = complex1.I.subtract(Double.NaN);
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.ZERO.subtract(0.0);
      ComplexField complexField0 = complex7.NaN.getField();
      Complex complex8 = Complex.valueOf(0.0, (-2003.433565));
      Complex complex9 = complex2.divide(6.595784859136531E-8);
      Complex complex10 = complex1.multiply(complex9);
      Complex complex11 = complex10.ONE.createComplex(6.595784859136531E-8, (-226.96));
      double double0 = complex1.getArgument();
      String string0 = complex10.toString();
      Complex complex12 = complex4.sqrt1z();
      Complex complex13 = complex0.acos();
      Complex complex14 = complex13.ONE.multiply((-2003.433565));
      Complex complex15 = complex13.sin();
      Complex complex16 = complex1.sqrt();
      Complex complex17 = complex16.reciprocal();
      boolean boolean0 = complex5.isInfinite();
      Complex complex18 = complex8.multiply(954);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-7.258551497833573E-79), (-7.258551497833573E-79));
      Complex complex1 = Complex.valueOf(1980.3022079333, 0.0);
      Complex complex2 = complex1.ZERO.pow(1980.3022079333);
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.ZERO.pow(complex1);
      Complex complex6 = complex0.ZERO.log();
      Complex complex7 = complex6.I.subtract((-7.258551497833573E-79));
      Complex complex8 = complex6.ONE.divide((-7.258551497833573E-79));
      Complex complex9 = complex0.createComplex((-7.258551497833573E-79), (-7.258551497833573E-79));
      String string0 = complex0.toString();
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex9.tanh();
      int int0 = complex7.hashCode();
      Complex complex13 = complex11.cos();
      Complex complex14 = complex10.createComplex(0.0, 0.0);
      Complex complex15 = complex1.sin();
      Complex complex16 = complex12.asin();
      boolean boolean0 = complex1.isNaN();
      Complex complex17 = complex9.add(complex0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex1.cosh();
      int int0 = complex7.I.hashCode();
      int int1 = (-259);
      try { 
        complex7.nthRoot((-259));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -259
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.I.subtract(86.014423136916);
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex5.ZERO.pow(complex2);
      Complex complex9 = complex8.INF.multiply(1.0);
      Complex complex10 = complex2.multiply(4203);
      Complex complex11 = complex1.createComplex((-1303.59455069779), (-1303.59455069779));
      ComplexField complexField0 = complex10.getField();
      Complex complex12 = complex6.sqrt();
      double double0 = complex12.ZERO.abs();
      Complex complex13 = complex12.sinh();
      ComplexField complexField1 = complex7.getField();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(1214.153389415, 1214.153389415);
      Complex complex1 = Complex.valueOf(1214.153389415);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.I.subtract(complex1);
      double double0 = complex0.getImaginary();
      Complex complex5 = new Complex(1199.0);
      Complex complex6 = complex3.subtract(complex5);
      double double1 = complex0.INF.abs();
      double double2 = complex1.ZERO.abs();
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = Complex.valueOf(1199.0, 0.0);
      boolean boolean0 = complex3.isNaN();
      Complex complex11 = complex5.negate();
      String string0 = complex11.ONE.toString();
      Complex complex12 = complex11.I.pow(complex4);
      Complex complex13 = complex11.multiply(1.0);
      Complex complex14 = complex5.subtract(complex1);
      Object object0 = complex1.readResolve();
      Complex complex15 = complex14.acos();
      Complex complex16 = complex6.cos();
      boolean boolean1 = complex12.equals("(1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(189.75);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex0.pow(189.75);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex2.ONE.negate();
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex5.I.subtract(189.75);
      Complex complex9 = complex7.NaN.cosh();
      double double0 = complex5.getReal();
      Complex complex10 = complex1.ONE.createComplex(1290.92857229576, (-2189.409134124276));
      Complex complex11 = complex0.subtract(1290.92857229576);
      Complex complex12 = complex2.createComplex(189.75, 331.7146768959045);
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex13.sqrt();
      double double1 = complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-456.0), (-834.47));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-456.0));
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.divide((-456.0));
      Complex complex6 = complex4.NaN.createComplex((-2173.7916594), 305.6);
      double double0 = complex0.abs();
      Complex complex7 = complex4.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-3063.649206193085));
      Complex complex2 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.subtract(Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex2.multiply(1796);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.NaN.pow(complex4);
      Complex complex9 = complex7.NaN.tan();
      boolean boolean0 = complex0.isNaN();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex10.INF.tanh();
      Complex complex12 = complex0.tanh();
      boolean boolean1 = complex12.isNaN();
      Complex complex13 = complex1.cosh();
      Complex complex14 = complex1.ONE.sin();
      Complex complex15 = complex2.ONE.subtract(0.0);
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = complex16.I.asin();
      Complex complex18 = complex1.tanh();
      Complex complex19 = complex0.multiply(complex12);
      Complex complex20 = complex0.divide(complex19);
      Complex complex21 = complex18.negate();
      Complex complex22 = complex12.log();
      Complex complex23 = complex22.ONE.add(0.0);
      Complex complex24 = Complex.valueOf((-2.291749683541979E-9));
      Complex complex25 = complex3.multiply(Double.POSITIVE_INFINITY);
      double double1 = complex17.getImaginary();
      Complex complex26 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.INF.createComplex(2618.4, Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex7.NaN.conjugate();
      Complex complex10 = complex1.divide((-1549.483734));
      int int0 = complex10.ONE.hashCode();
      List<Complex> list0 = complex10.nthRoot(1319);
      Complex complex11 = complex7.multiply(0.0);
      try { 
        complex11.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(506.823272356);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex0.getReal();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.I.sqrt1z();
      double double1 = complex0.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.createComplex(0.0, 0.0);
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex4.NaN.subtract(1.0);
      Complex complex8 = complex7.ZERO.divide((-3115.4185));
      Complex complex9 = Complex.valueOf((-146.684063511379), 0.0);
      Complex complex10 = complex7.ZERO.pow(complex2);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex2.equals(object0);
      Complex complex12 = complex6.add((-1.0));
      double double2 = complex3.getReal();
      Complex complex13 = complex5.createComplex((-6.151751570213211E-240), 0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.divide(4.718103502869148E-29);
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = Complex.valueOf(4.718103502869148E-29, (-1113.68809079));
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.pow((-431.0708134297417));
      Complex complex7 = complex6.tanh();
      int int0 = complex6.hashCode();
      Complex complex8 = complex5.divide(4.718103502869148E-29);
      double double0 = complex2.abs();
      List<Complex> list0 = complex3.nthRoot(2859);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-141.14726983471738), (-141.14726983471738));
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = complex0.ZERO.add(complex5);
      double double0 = complex5.ZERO.abs();
      Complex complex7 = Complex.valueOf((-141.14726983471738), Double.NaN);
      int int0 = complex0.hashCode();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex5.pow(complex2);
      Complex complex11 = complex5.log();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1373.92), 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.I.tan();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.add((-1373.92));
      Complex complex7 = complex6.ONE.add(0.0);
      int int0 = 0;
      Complex complex8 = complex6.ZERO.multiply(0);
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex6.ZERO.subtract(0.0);
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1935.721245, 1935.721245);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.sqrt1z();
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(422.72008098, 422.72008098);
      Complex complex1 = complex0.ONE.multiply(757);
      List<Complex> list0 = complex1.ONE.nthRoot(757);
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex2.conjugate();
      ComplexField complexField1 = complex4.ONE.getField();
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex6.NaN.add(complex2);
      Complex complex9 = complex2.subtract(1.7173159016511951E-217);
      Complex complex10 = complex9.exp();
      Complex complex11 = complex10.INF.sqrt();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex4.sin();
      Complex complex15 = complex5.add(complex1);
      Complex complex16 = complex15.exp();
      int int0 = complex1.hashCode();
      Complex complex17 = complex5.createComplex(1.7173159016511951E-217, (-629.55786));
      Complex complex18 = complex10.cosh();
      Complex complex19 = complex3.add((double) 757);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1322.10724), (-1322.10724));
      String string0 = complex0.ONE.toString();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.INF.sin();
      try { 
        complex2.ONE.nthRoot((-1509));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,509
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf(20.0, (-1941.0));
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.INF.multiply(complex2);
      double double0 = complex1.I.abs();
      Complex complex5 = complex1.add(2433.859);
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.I.log();
      double double1 = (-645.86);
      Complex complex2 = complex1.ONE.createComplex((-645.86), (-1219.68));
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ZERO.divide((-20.0));
      Complex complex3 = new Complex((-20.0));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.ONE.multiply((-3123));
      Complex complex6 = complex0.exp();
      double double0 = complex2.getImaginary();
      Object object0 = new Object();
      boolean boolean0 = complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(961.334513);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1731.3));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.NaN.acos();
      List<Complex> list0 = complex0.nthRoot(1678);
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex4.NaN.sqrt1z();
      String string0 = complex0.ONE.toString();
      Complex complex6 = complex0.I.sinh();
      Complex complex7 = complex0.exp();
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = Complex.valueOf((-4638.18884));
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex1.I.cosh();
      int int0 = complex6.hashCode();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.cos();
      Complex complex12 = complex1.divide(2695.595070251);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.divide(1165.736474);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.subtract(0.0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.add((-1912.2041342515));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.NaN.divide(complex3);
      Complex complex5 = complex0.ONE.pow(complex1);
      Complex complex6 = complex1.INF.cosh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex7 = complex3.log();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex1.subtract(complex4);
      int int0 = complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-2532));
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex0.add((double) (-2532));
      Complex complex6 = complex5.pow(1698.35895142883);
      Complex complex7 = complex4.divide(complex1);
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.I.multiply((-1631.9047437));
      Complex complex6 = complex4.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.5168620347976685);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.INF.negate();
      double double0 = complex0.INF.getArgument();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.subtract((-1951.163432979837));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2345.0));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.INF.multiply((-2345.0));
      Complex complex3 = Complex.valueOf(575.595851, (-831.95714454));
      Complex complex4 = complex0.createComplex((-2345.0), 0.0);
      Complex complex5 = complex0.subtract(1030.92809957);
      Complex complex6 = complex0.multiply(complex4);
      String string0 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.add(0.05046287178993225);
      Complex complex3 = complex0.INF.multiply(646);
      Complex complex4 = Complex.valueOf((double) 646, 0.05046287178993225);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = Complex.valueOf((double) 646, (-4597.0));
      double double0 = complex2.getArgument();
      Complex complex7 = complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(complex1);
      double double0 = complex2.getArgument();
      Complex complex3 = complex2.subtract(0.0753768394547098);
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.ZERO.subtract(1323.151625);
      Complex complex7 = complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.pow((-2730.29576));
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex1.INF.add(complex0);
      Complex complex5 = complex0.INF.atan();
      Complex complex6 = Complex.valueOf(397.59493, 397.59493);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex0.subtract(397.59493);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(3658.3, (-20.0));
      Complex complex1 = complex0.ONE.pow((-1859.0));
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex0.add((-20.0));
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex2.subtract(225.1837);
      Complex complex5 = complex2.asin();
      boolean boolean0 = complex3.isNaN();
      Complex complex6 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.0844));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.pow((-919.0844));
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex2.I.cos();
      Complex complex5 = complex4.add(complex1);
      List<Complex> list0 = complex2.ZERO.nthRoot(2333);
      Object object0 = complex2.I.readResolve();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.I.pow(complex0);
      Complex complex9 = complex7.multiply(3107);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1958.6767782329414), (-1125.58809679706));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.negate();
      double double0 = complex0.getArgument();
      boolean boolean0 = complex2.isInfinite();
      int int0 = complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(20.0);
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.multiply((-3362.8));
      Complex complex5 = complex4.I.log();
      Complex complex6 = Complex.valueOf((-3362.8), (-3688.3));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3072.035354024797));
      Complex complex1 = new Complex(2212.239);
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex1.sqrt1z();
      ComplexField complexField0 = complex2.ONE.getField();
      Complex complex4 = complex0.NaN.reciprocal();
      Complex complex5 = complex4.ONE.multiply(complex3);
      Complex complex6 = complex1.I.asin();
      Complex complex7 = complex2.NaN.sqrt1z();
      Complex complex8 = complex7.ONE.pow(0.0);
      boolean boolean0 = complex0.equals(complex1);
      boolean boolean1 = complex1.isNaN();
      Complex complex9 = Complex.valueOf(0.0, 56.7);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.cosh();
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.cos();
      int int1 = complex5.hashCode();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex5.multiply(1);
      Complex complex8 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.multiply((-5.350322253112414E-8));
      double double0 = complex1.getImaginary();
      double double1 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(665.887413928);
      Complex complex1 = new Complex(0.0, 665.887413928);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.I.tanh();
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.ZERO.createComplex((-3.2924463896248744E-9), 1613.797471674);
      Complex complex7 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.pow((-1.0));
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4818.755723084768);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.divide(4794.182716466934);
      Complex complex3 = complex0.cosh();
      String string0 = complex3.toString();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex3.add(851.284);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5301.2729), 20.0);
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = Complex.valueOf(0.0, 260.8848967);
      Complex complex6 = complex2.multiply(2306);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex6.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-151.240200848395), (-151.240200848395));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex0.cos();
      ComplexField complexField0 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1.458843364504023E-8), (-2366.928331675624));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = Complex.valueOf(1166.05813471454, (-1.458843364504023E-8));
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.sqrt1z();
      double double0 = complex2.getArgument();
      double double1 = complex4.getReal();
      Complex complex7 = complex6.divide(297.1303743);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(27.2199134, 27.2199134);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex3.INF.multiply(complex1);
      String string0 = complex3.ZERO.toString();
      double double0 = complex2.I.getArgument();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex6 = complex3.multiply(37);
      Complex complex7 = complex2.atan();
      Object object0 = complex7.INF.readResolve();
      Complex complex8 = Complex.valueOf(1.5707963267948966);
      Complex complex9 = complex7.ONE.sqrt1z();
      String string1 = complex3.NaN.toString();
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex0.ONE.sin();
      String string2 = complex10.ONE.toString();
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex10.acos();
      Complex complex14 = complex13.INF.reciprocal();
      Complex complex15 = complex13.add(1.0);
      Complex complex16 = complex3.tan();
      Complex complex17 = complex3.divide(1.5707963267948966);
      Complex complex18 = complex17.divide(1645.195);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.ONE.pow(complex2);
      Complex complex6 = complex4.ONE.cosh();
      Complex complex7 = complex6.ZERO.multiply((-1.0));
      String string0 = complex0.toString();
      String string1 = complex0.ONE.toString();
      double double0 = complex0.getReal();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.ONE.tanh();
      Complex complex10 = complex9.I.cosh();
      Complex complex11 = complex0.createComplex(2.0, Double.POSITIVE_INFINITY);
      Complex complex12 = complex6.createComplex(3418.03736667359, 0.0);
      double double1 = complex0.getReal();
      Complex complex13 = complex6.add(complex12);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      double double0 = complex2.abs();
      Complex complex3 = complex2.add(complex0);
      double double1 = complex3.NaN.abs();
      ComplexField complexField0 = complex0.getField();
      double double2 = complex3.INF.getArgument();
      String string0 = complex0.I.toString();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.divide(complex7);
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.INF.asin();
      List<Complex> list0 = complex10.I.nthRoot(1276);
      int int0 = complex0.hashCode();
      Complex complex11 = Complex.valueOf(1.0357816219329834);
      List<Complex> list1 = complex11.ZERO.nthRoot(1232);
      Complex complex12 = complex11.conjugate();
      Complex complex13 = complex3.reciprocal();
      Complex complex14 = complex13.pow(complex2);
      String string1 = complex12.ZERO.toString();
      boolean boolean0 = complex11.equals(complex13);
      Complex complex15 = complex12.multiply(97);
      Complex complex16 = complex1.multiply(1232);
      Complex complex17 = complex15.sin();
      Complex complex18 = complex14.subtract(Double.NaN);
      Complex complex19 = complex14.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow((-3903.892606315248));
      Complex complex3 = complex2.NaN.subtract(complex0);
      double double0 = complex2.ONE.abs();
      Complex complex4 = complex1.NaN.subtract(complex0);
      double double1 = complex4.ONE.getArgument();
      Complex complex5 = complex4.ONE.tan();
      ComplexField complexField0 = complex5.ZERO.getField();
      Complex complex6 = complex0.NaN.pow(1343.964);
      ComplexField complexField1 = complex2.INF.getField();
      double double2 = complex1.abs();
      int int0 = complex6.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex7 = Complex.valueOf((-1.309893394818129E-156), 1343.964);
      boolean boolean1 = complex1.equals(complex7);
      double double3 = complex7.getImaginary();
      Complex complex8 = complex2.NaN.atan();
      Complex complex9 = complex1.ONE.exp();
      int int1 = complex9.NaN.hashCode();
      Complex complex10 = complex6.exp();
      Complex complex11 = complex10.ZERO.reciprocal();
      Complex complex12 = complex1.ONE.sin();
      ComplexField complexField2 = complex5.getField();
      Complex complex13 = complex5.add(1343.964);
      Complex complex14 = complex13.asin();
      Complex complex15 = complex14.ONE.sinh();
      Complex complex16 = complex14.NaN.divide((-1.4300075619643524E-298));
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex17.ZERO.sqrt1z();
      double double4 = complex7.getArgument();
      boolean boolean2 = complex2.isInfinite();
      Complex complex19 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-369.922506336), (-369.922506336));
      Complex complex1 = complex0.I.log();
      Complex complex2 = Complex.ZERO;
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex0.ZERO.multiply(complex2);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex0.log();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.subtract((-5.7187703271582225E-244));
      Complex complex9 = complex3.subtract(complex2);
      double double0 = complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-386.134910856), 3.442100456607687E-215);
      double double0 = complex0.ONE.abs();
      double double1 = complex0.INF.abs();
      Complex complex1 = complex0.INF.divide(2.1211390495300293);
      int int0 = complex0.INF.hashCode();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex0.multiply((-184.4092775434025));
      double double2 = complex0.NaN.abs();
      Complex complex4 = complex3.ZERO.multiply((-386.134910856));
      Complex complex5 = complex4.I.negate();
      int int1 = complex4.ONE.hashCode();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex1.divide(complex0);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex4.ZERO.pow(complex9);
      Complex complex11 = complex6.I.subtract((-184.4092775434025));
      Complex complex12 = complex7.I.sqrt1z();
      Object object0 = complex7.ZERO.readResolve();
      Complex complex13 = complex7.subtract((-184.4092775434025));
      Complex complex14 = complex13.NaN.divide(Double.NaN);
      Object object1 = complex13.readResolve();
      boolean boolean0 = complex1.equals(complex13);
      Complex complex15 = complex3.exp();
      Complex complex16 = complex15.asin();
      Complex complex17 = complex8.asin();
      Complex complex18 = complex15.NaN.divide(complex4);
      Complex complex19 = complex1.divide(complex15);
      double double3 = complex1.getArgument();
      Complex complex20 = complex0.sin();
      Complex complex21 = complex20.INF.atan();
      double double4 = complex19.abs();
      Complex complex22 = complex5.cosh();
      Complex complex23 = complex20.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.subtract((-74.02251639634461));
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = Complex.valueOf(6.48979555673987E-8, 685.63190814);
      Complex complex5 = complex3.createComplex(3.3192593301633E-232, (-1.0));
      Complex complex6 = complex5.INF.pow(3.3192593301633E-232);
      int int0 = complex0.hashCode();
      double double0 = complex0.getImaginary();
      Complex complex7 = complex3.multiply(complex1);
      Complex complex8 = complex0.pow(0.0);
      Object object0 = complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ZERO.multiply(450.70251875);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.multiply(complex3);
      String string0 = complex5.ZERO.toString();
      Complex complex6 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-7.956144278281947E-8));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.NaN.divide(complex3);
      ComplexField complexField0 = complex4.NaN.getField();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.NaN.conjugate();
      double double0 = complex0.getImaginary();
      double double1 = complex2.getReal();
      int int0 = complex4.hashCode();
      Complex complex7 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = Complex.valueOf(1.0);
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = complex2.NaN.exp();
      Complex complex7 = complex6.ZERO.divide(complex0);
      Complex complex8 = complex6.ONE.sin();
      ComplexField complexField0 = complex4.ONE.getField();
      Complex complex9 = complex6.I.tan();
      double double0 = 876.8562534918517;
      Complex complex10 = new Complex(876.8562534918517, 876.8562534918517);
      Complex complex11 = complex10.I.subtract(1.0);
      ComplexField complexField1 = complex3.INF.getField();
      Complex complex12 = complex11.INF.subtract(complex4);
      boolean boolean0 = complex0.equals(complex10);
      Complex complex13 = complex10.NaN.exp();
      int int0 = (-973);
      try { 
        complex10.nthRoot((-973));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -973
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
