/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:09:50 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(218.96486);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3307.59277257);
      Complex complex1 = Complex.valueOf(3307.59277257, 3307.59277257);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex1.INF.multiply(3307.59277257);
      Complex complex4 = complex2.ONE.acos();
      Complex complex5 = complex2.NaN.multiply(complex0);
      Complex complex6 = complex0.divide(2141.66860344754);
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.valueOf(2141.66860344754, 2141.66860344754);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = new Complex(2141.66860344754, 2141.66860344754);
      Complex complex11 = complex8.tan();
      Complex complex12 = complex11.ONE.negate();
      Object object0 = complex10.readResolve();
      boolean boolean0 = complex1.isNaN();
      Complex complex13 = complex3.sinh();
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = Complex.valueOf(2141.66860344754, 2141.66860344754);
      double double0 = complex0.abs();
      Complex complex16 = complex12.add(complex10);
      Complex complex17 = complex8.createComplex(3307.59277257, (-5925.451746280354));
      boolean boolean1 = complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.divide((-1428.8528974848487));
      int int0 = complex1.NaN.hashCode();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.exp();
      String string0 = complex0.toString();
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      Complex complex5 = complex4.createComplex(0.0, Double.NaN);
      Complex complex6 = complex4.ONE.subtract(0.0);
      Complex complex7 = complex6.ZERO.log();
      boolean boolean0 = complex2.equals(complex4);
      double double0 = complex2.getReal();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex8.ONE.cosh();
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex10 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex2.ONE.sqrt();
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.I.sinh();
      Complex complex7 = complex5.ONE.atan();
      Complex complex8 = complex5.INF.divide(complex2);
      Complex complex9 = Complex.valueOf(0.0, (double) 1);
      Complex complex10 = complex5.NaN.pow(complex4);
      Complex complex11 = complex5.divide(complex1);
      Complex complex12 = complex11.INF.sin();
      boolean boolean0 = complex5.isInfinite();
      Object object0 = complex3.readResolve();
      double double0 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.INF.divide(2574.65593);
      Complex complex2 = complex0.createComplex((-814.2800592867), (-814.2800592867));
      Complex complex3 = complex2.add((-814.2800592867));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.ONE.atan();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex4.ZERO.divide((double) 1);
      Complex complex6 = Complex.valueOf((double) 1, (-20.0));
      Complex complex7 = complex6.INF.createComplex(0.0, 0.0);
      Complex complex8 = complex6.NaN.exp();
      Complex complex9 = complex6.multiply((-1551.652336));
      Complex complex10 = complex9.ZERO.conjugate();
      double double0 = complex10.I.abs();
      Complex complex11 = complex10.NaN.asin();
      Complex complex12 = complex10.divide(complex6);
      Complex complex13 = complex12.INF.divide(0.0);
      boolean boolean0 = complex6.equals((Object) null);
      double double1 = complex6.abs();
      Complex complex14 = complex0.log();
      Complex complex15 = complex9.asin();
      Complex complex16 = complex3.tan();
      Complex complex17 = complex16.createComplex(20.024984394500787, 1.0);
      Complex complex18 = complex16.subtract((-2808.558743425));
      Complex complex19 = complex10.divide(0.0);
      Complex complex20 = complex12.subtract((-4475.57));
      Complex complex21 = Complex.valueOf((-377.82));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-1682.49019633758));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ZERO.reciprocal();
      String string0 = complex2.INF.toString();
      double double0 = complex2.NaN.abs();
      Complex complex4 = complex1.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex5 = complex3.sin();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex3.cos();
      double double1 = complex6.getArgument();
      Complex complex8 = complex2.NaN.multiply((-4143.5));
      Complex complex9 = complex4.add(complex6);
      Complex complex10 = complex7.createComplex((-1.0), (-5308.15995952191));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = new Complex(562.0196147);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex0.I.multiply(complex3);
      Complex complex7 = complex6.NaN.exp();
      double double0 = complex0.getReal();
      Complex complex8 = complex6.NaN.sinh();
      Complex complex9 = complex0.I.asin();
      Complex complex10 = complex9.I.multiply(77);
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex0.reciprocal();
      int int0 = complex1.hashCode();
      Complex complex13 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(2.122358392979746E47);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.valueOf(2.122358392979746E47, 2.122358392979746E47);
      Complex complex3 = complex1.reciprocal();
      Object object0 = complex1.I.readResolve();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex1.multiply(0.0);
      double double0 = complex6.ONE.getArgument();
      Complex complex7 = complex0.ONE.log();
      boolean boolean1 = complex4.isNaN();
      Complex complex8 = complex3.tanh();
      double double1 = complex8.ZERO.abs();
      double double2 = complex1.ONE.abs();
      Complex complex9 = complex8.ZERO.asin();
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex9.I.tanh();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex12.I.atan();
      String string0 = complex8.toString();
      Complex complex14 = complex1.atan();
      Object object2 = complex4.readResolve();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = Complex.valueOf((-638.0320034624956));
      Complex complex17 = complex10.cos();
      String string1 = complex8.toString();
      Complex complex18 = complex3.subtract(2.122358392979746E47);
      Complex complex19 = complex0.log();
      double double3 = complex8.getReal();
      Complex complex20 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.INF.toString();
      Complex complex1 = complex0.add((-548.592142443283));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.multiply((-1059));
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex2.subtract(complex1);
      Complex complex10 = complex8.divide((-548.592142443283));
      Complex complex11 = complex9.exp();
      List<Complex> list0 = complex4.nthRoot(207);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-466.3743545), (-466.3743545));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-466.3743545), (-808.3490529521124));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-551.1), (-551.1));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = Complex.valueOf((-863.0696536668), (-863.0696536668));
      boolean boolean0 = complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.907346499785443E21);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ONE.add(1.907346499785443E21);
      Complex complex3 = complex1.tanh();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.createComplex(2.0, 0.0);
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex4.ONE.add(2.0);
      Complex complex7 = complex0.ONE.createComplex(2.063924789428711, 2.063924789428711);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex8.ZERO.multiply(3948);
      Complex complex10 = complex4.ZERO.createComplex(1.907346499785443E21, 1.0);
      Complex complex11 = complex0.ZERO.sinh();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.I.pow(2.0);
      Complex complex14 = complex0.multiply(complex12);
      Complex complex15 = complex12.atan();
      Complex complex16 = complex5.reciprocal();
      Complex complex17 = complex5.add((double) 3948);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1801.416474, 1801.416474);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      List<Complex> list0 = complex0.NaN.nthRoot(303);
      Complex complex3 = complex0.pow(1801.416474);
      double double0 = complex3.abs();
      Complex complex4 = complex2.INF.sinh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex2.add((double) 303);
      int int0 = complex1.I.hashCode();
      Complex complex9 = complex2.tanh();
      Complex complex10 = complex1.INF.multiply(0.0);
      Complex complex11 = complex9.I.negate();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      Complex complex12 = complex8.NaN.sqrt();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.add(0.0);
      Complex complex5 = complex0.multiply(3537.0);
      Complex complex6 = complex5.multiply(3537.0);
      Complex complex7 = complex6.INF.subtract(complex1);
      Complex complex8 = complex6.ZERO.divide(3537.0);
      Complex complex9 = complex6.ZERO.add(3537.0);
      Complex complex10 = Complex.valueOf((-484.8410060338759), (-484.8410060338759));
      Object object0 = complex1.readResolve();
      double double0 = complex10.abs();
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex5.pow(685.6687263277229);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(443.77991045416, 2.3278688667580978E-7);
      double double0 = complex0.NaN.getArgument();
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex1.multiply(668);
      List<Complex> list0 = complex3.I.nthRoot(668);
      Complex complex4 = complex0.exp();
      double double1 = complex3.NaN.abs();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex4.ONE.conjugate();
      Complex complex8 = complex7.sin();
      boolean boolean1 = complex5.isNaN();
      Complex complex9 = Complex.valueOf((double) 668);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex3.pow(complex9);
      Complex complex12 = complex3.asin();
      ComplexField complexField0 = complex11.getField();
      double double2 = complex6.getReal();
      Object object0 = complex9.INF.readResolve();
      boolean boolean2 = complex5.isNaN();
      int int0 = complex11.hashCode();
      Complex complex13 = complex4.multiply(complex3);
      Complex complex14 = complex1.sinh();
      int int1 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-148.91), (-148.91));
      Complex complex1 = complex0.ZERO.subtract((-1629.106775278288));
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.reciprocal();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.INF.divide(complex5);
      Complex complex7 = complex4.ONE.cos();
      Complex complex8 = complex1.add(0.0);
      Complex complex9 = complex4.reciprocal();
      Complex complex10 = complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.exp();
      String string0 = complex3.toString();
      String string1 = complex3.toString();
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex5.I.pow((-1279.69435));
      Complex complex7 = complex2.NaN.pow(complex5);
      double double0 = complex6.ZERO.getArgument();
      Complex complex8 = complex2.I.sqrt1z();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.ONE.reciprocal();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex0.ONE.divide(complex9);
      Complex complex13 = complex1.subtract(0.0);
      Complex complex14 = complex9.cosh();
      double double1 = complex2.getImaginary();
      int int0 = complex14.hashCode();
      Complex complex15 = complex14.subtract(0.0);
      Complex complex16 = complex9.I.add(complex14);
      Complex complex17 = complex16.ONE.subtract(complex6);
      Complex complex18 = complex6.multiply(0.0);
      double double2 = complex5.getArgument();
      Complex complex19 = complex13.subtract(Double.NaN);
      Complex complex20 = complex13.negate();
      Complex complex21 = complex9.log();
      Complex complex22 = Complex.valueOf(Double.NaN);
      Complex complex23 = complex22.ONE.atan();
      Complex complex24 = complex7.multiply(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 4.363736368635843E-9);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ONE.multiply(4.363736368635843E-9);
      Complex complex4 = complex1.INF.sinh();
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.sin();
      boolean boolean0 = complex5.equals(complex7);
      Complex complex9 = complex5.sin();
      Complex complex10 = complex2.I.createComplex(6.283185307179586, (-1869.681441193));
      Complex complex11 = complex5.NaN.divide(complex10);
      Complex complex12 = complex3.I.divide(6.283185307179586);
      Complex complex13 = complex9.ONE.divide(0.0);
      Complex complex14 = Complex.valueOf(3.4637009373878283E-174, 3.4637009373878283E-174);
      Complex complex15 = complex3.sinh();
      Complex complex16 = complex3.subtract((-2820.8337895748));
      Complex complex17 = complex2.atan();
      Complex complex18 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Object object0 = complex0.ONE.readResolve();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.I.exp();
      Object object1 = complex3.INF.readResolve();
      Object object2 = complex3.I.readResolve();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex4.subtract((-1082.1863));
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      double double0 = complex8.getArgument();
      Complex complex9 = complex1.tan();
      Complex complex10 = complex2.atan();
      Complex complex11 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.INF.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(307.0, 5955.133583554);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.valueOf((-456.8237469755393), (-456.8237469755393));
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex3.NaN.sqrt();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.cosh();
      String string0 = complex7.toString();
      Complex complex8 = complex6.ONE.add(complex3);
      ComplexField complexField0 = complex7.getField();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex6.add((-321.8227108));
      Complex complex11 = complex6.cos();
      String string1 = complex6.toString();
      boolean boolean0 = complex2.isInfinite();
      Complex complex12 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex1.INF.multiply(258);
      Complex complex4 = null;
      try { 
        complex0.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Object object0 = complex0.readResolve();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      int int1 = complex1.ONE.hashCode();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex2.I.cos();
      String string0 = complex1.toString();
      double double0 = complex0.getReal();
      Complex complex5 = complex2.ONE.asin();
      Complex complex6 = complex4.I.exp();
      double double1 = complex6.INF.abs();
      Complex complex7 = complex1.ONE.reciprocal();
      Complex complex8 = complex4.I.divide((-1254.45));
      Complex complex9 = complex0.INF.atan();
      Complex complex10 = complex0.INF.sin();
      Complex complex11 = complex2.multiply(complex4);
      Complex complex12 = Complex.valueOf(116.80688827);
      Complex complex13 = complex1.multiply(0.0);
      Complex complex14 = complex13.log();
      Complex complex15 = complex9.acos();
      Complex complex16 = complex15.createComplex(Double.POSITIVE_INFINITY, 1.244950238958056E-7);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.I.negate();
      int int0 = complex3.I.hashCode();
      Complex complex4 = complex1.add(0.0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.ZERO.reciprocal();
      boolean boolean0 = complex6.isNaN();
      boolean boolean1 = complex0.isInfinite();
      double double1 = complex5.getImaginary();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex1.add(complex8);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.multiply((-1258));
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.ZERO.tanh();
      double double0 = complex3.getReal();
      Complex complex5 = complex2.tanh();
      try { 
        complex2.nthRoot((-1258));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,258
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-934.0), (-934.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ZERO.cos();
      String string0 = complex0.I.toString();
      Complex complex4 = complex2.ZERO.log();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = Complex.valueOf(1467.770120271);
      int int0 = complex0.hashCode();
      Object object0 = complex4.readResolve();
      Complex complex8 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.0, 213.0);
      Complex complex1 = complex0.I.createComplex(1.7321703934464356E213, 1.7321703934464356E213);
      Complex complex2 = complex0.exp();
      double double0 = complex2.INF.abs();
      Complex complex3 = Complex.valueOf((-1489.493945438939), 0.04168701738764507);
      Complex complex4 = complex0.INF.add((-3456.9102));
      Object object0 = complex1.I.readResolve();
      int int0 = complex4.ONE.hashCode();
      Complex complex5 = complex2.ZERO.divide((-3456.9102));
      Complex complex6 = complex5.INF.atan();
      double double1 = complex0.getImaginary();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.NaN.add(complex1);
      double double2 = complex5.NaN.abs();
      Complex complex9 = complex1.atan();
      Complex complex10 = complex7.tanh();
      Complex complex11 = Complex.valueOf((-3456.9102));
      ComplexField complexField0 = complex9.I.getField();
      Complex complex12 = complex2.cos();
      Object object1 = complex7.readResolve();
      double double3 = complex2.getImaginary();
      Complex complex13 = complex5.pow(complex3);
      Complex complex14 = complex12.cos();
      Complex complex15 = complex7.log();
      Complex complex16 = complex2.asin();
      Complex complex17 = complex14.multiply((-1489.493945438939));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-457.0), (-1110.344));
      Complex complex1 = complex0.add((-4276.3476905602765));
      Complex complex2 = complex1.I.add((-1110.344));
      Complex complex3 = complex2.pow((-457.0));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.I.multiply((-4276.3476905602765));
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex7.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2382.58492696, 2382.58492696);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.pow(2382.58492696);
      double double0 = complex2.getArgument();
      Complex complex3 = Complex.valueOf(2382.58492696, 2382.58492696);
      Complex complex4 = Complex.valueOf(2382.58492696);
      double double1 = complex1.getImaginary();
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex4.multiply(0);
      Complex complex8 = complex7.reciprocal();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add(695.4476779276598);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = Complex.valueOf(394.32103, 2195.80797);
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex3.ZERO.tanh();
      Complex complex7 = complex4.I.sqrt();
      Complex complex8 = complex1.I.divide(695.4476779276598);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex0.pow(0.0);
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.tanh();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex1.NaN.sinh();
      Complex complex6 = complex1.ONE.exp();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex6.ZERO.acos();
      boolean boolean1 = complex2.isNaN();
      String string0 = complex6.ZERO.toString();
      boolean boolean2 = complex1.equals("tN&6\"");
      Complex complex9 = complex0.I.cos();
      Complex complex10 = complex9.ZERO.log();
      int int0 = complex3.hashCode();
      Complex complex11 = complex0.sin();
      double double0 = complex7.abs();
      boolean boolean3 = complex1.equals(complex2);
      Complex complex12 = complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1093.01802022));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.I.tan();
      List<Complex> list0 = complex3.I.nthRoot(1102);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ZERO.getField();
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1.1089952719756529E-7));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex2.INF.sin();
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex0.NaN.divide(complex2);
      Complex complex8 = complex0.add(3.5335436928899096E-123);
      Complex complex9 = Complex.valueOf(2918.056563928675);
      Complex complex10 = complex0.ONE.multiply(911);
      Complex complex11 = complex10.sinh();
      double double0 = complex9.NaN.abs();
      ComplexField complexField0 = complex8.getField();
      ComplexField complexField1 = complex10.getField();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex12.I.exp();
      double double1 = complex10.getImaginary();
      double double2 = complex5.getImaginary();
      Complex complex14 = complex12.multiply(911);
      boolean boolean0 = complex12.isInfinite();
      Complex complex15 = complex13.multiply(complex1);
      Complex complex16 = complex7.log();
      int int0 = complex6.hashCode();
      String string0 = complex15.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(924);
      Complex complex2 = complex1.negate();
      int int0 = complex0.I.hashCode();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.INF.divide(0.0);
      Complex complex8 = complex2.add(complex6);
      double double0 = complex8.ONE.getArgument();
      int int1 = complex8.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(2007.93816714, (-1.3289231465997192E-9));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.NaN.multiply(195);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.tanh();
      ComplexField complexField0 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2006.095012);
      Complex complex1 = new Complex((-451.8560896926));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(2006.095012, 2006.095012);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0143022354947225E63);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.log();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.40481382608413696);
      Complex complex6 = complex4.atan();
      List<Complex> list0 = complex6.NaN.nthRoot(746);
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(4480.704456990343, 0.0);
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      double double1 = (-20.0);
      Complex complex1 = complex0.NaN.add((-20.0));
      Complex complex2 = Complex.valueOf(0.0, (-20.0));
      Complex complex3 = complex0.INF.sqrt();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-8.016793741945299E96));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex3.ONE.atan();
      Complex complex8 = complex3.ONE.pow(complex5);
      Complex complex9 = Complex.valueOf((-8.016793741945299E96), (-8.016793741945299E96));
      Complex complex10 = complex3.INF.add(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      Complex complex12 = complex1.ONE.sqrt1z();
      Complex complex13 = Complex.valueOf(2.0);
      Complex complex14 = complex12.NaN.subtract(2.0);
      Complex complex15 = complex1.sinh();
      Complex complex16 = complex1.INF.log();
      Complex complex17 = complex16.INF.reciprocal();
      String string0 = complex13.toString();
      Complex complex18 = complex12.sin();
      Complex complex19 = complex18.NaN.add(complex0);
      boolean boolean0 = complex14.isNaN();
      Object object0 = complex2.readResolve();
      Complex complex20 = complex19.add(complex13);
      Complex complex21 = complex18.reciprocal();
      Complex complex22 = complex21.ZERO.createComplex((-630.0), Double.POSITIVE_INFINITY);
      Complex complex23 = complex1.log();
      Complex complex24 = complex19.multiply((-455));
      Complex complex25 = complex6.add(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      int int0 = complex0.hashCode();
      Complex complex3 = complex0.multiply((-20.0));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.I.divide((-2679.7247283835));
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex5.I.cos();
      Complex complex8 = complex4.NaN.subtract((-1877.9066577));
      double double0 = complex3.getArgument();
      Complex complex9 = complex7.divide(complex5);
      Object object0 = complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sinh();
      double double0 = complex1.abs();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf(0.0);
      List<Complex> list0 = complex1.INF.nthRoot(37);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2624.1729251), 1478.5338487776107);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.add(1478.5338487776107);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex2.acos();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.tanh();
      try { 
        complex2.ONE.nthRoot((-5198));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,198
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.ONE.sin();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex3.INF.sin();
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex2.ZERO.exp();
      Complex complex8 = complex1.cosh();
      Complex complex9 = Complex.valueOf(0.0, 125.7);
      Complex complex10 = complex9.I.conjugate();
      double double0 = complex1.getReal();
      Complex complex11 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex12 = complex3.add(complex0);
      Complex complex13 = complex4.ZERO.pow(0.0);
      Complex complex14 = complex0.I.tan();
      Complex complex15 = complex6.pow((-443.8828882524));
      String string1 = complex11.toString();
      double double1 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-965.5158064229), (-965.5158064229));
      Complex complex1 = Complex.NaN;
      List<Complex> list0 = complex0.I.nthRoot(1888);
      Complex complex2 = complex1.NaN.multiply((-965.5158064229));
      double double0 = complex2.ONE.abs();
      Complex complex3 = complex0.add(complex1);
      boolean boolean0 = complex1.isInfinite();
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-6.344612631552417E-136));
      Complex complex1 = Complex.valueOf((-839.0));
      Complex complex2 = complex0.add(complex1);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.sinh();
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.conjugate();
      List<Complex> list0 = complex0.ONE.nthRoot(7);
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.add((-3693.57525));
      Complex complex2 = complex1.ONE.sin();
      String string0 = complex1.toString();
      Complex complex3 = Complex.valueOf((-3693.57525), (-3693.57525));
      Complex complex4 = complex2.createComplex((-3693.57525), (-3693.57525));
      Complex complex5 = complex4.NaN.log();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex5.INF.subtract(complex3);
      Complex complex8 = complex3.I.sin();
      Complex complex9 = complex4.ONE.add((-3693.57525));
      Object object0 = complex1.readResolve();
      Object object1 = complex2.readResolve();
      Complex complex10 = complex3.pow(complex2);
      Complex complex11 = complex2.asin();
      Complex complex12 = new Complex((-3693.57525));
      Complex complex13 = complex10.subtract(complex12);
      Complex complex14 = complex10.cos();
      Object object2 = complex14.readResolve();
      Complex complex15 = complex3.multiply((-3693.57525));
      Complex complex16 = complex13.tanh();
      Complex complex17 = Complex.valueOf((-837.0));
      Complex complex18 = new Complex((-239.128921988));
      Complex complex19 = complex13.pow(complex18);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex1.add(complex0);
      boolean boolean0 = complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      int int0 = complex4.hashCode();
      Complex complex5 = complex0.I.subtract(complex3);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex5.multiply(0);
      boolean boolean0 = complex6.isInfinite();
      String string0 = complex9.toString();
      Complex complex11 = complex9.divide((double) 0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(1710.6, 1710.6);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex1.ONE.subtract((-868.07042963923));
      try { 
        complex0.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.sin();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = Complex.valueOf(2571.413835);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.sqrt();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(3082);
      Complex complex2 = new Complex(3082);
      Complex complex3 = complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.subtract((-1567.0));
      Complex complex5 = complex1.ONE.acos();
      Complex complex6 = complex0.multiply(complex1);
      boolean boolean0 = complex0.isInfinite();
      ComplexField complexField0 = complex5.I.getField();
      Complex complex7 = complex6.divide(2.8332008343480686E-9);
      double double0 = complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-947.7707));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.INF.cos();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex5 = complex0.exp();
      try { 
        complex3.nthRoot((-4422));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,422
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.NaN.tanh();
      try { 
        complex0.nthRoot((-546));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -546
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1586.1822915, 1586.1822915);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.cosh();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex0.NaN.sin();
      double double1 = complex1.abs();
      Complex complex6 = complex1.log();
      Complex complex7 = complex5.reciprocal();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(804.56363, 2614.89022324);
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.I.add(complex2);
      Object object0 = complex3.I.readResolve();
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex4 = complex1.INF.multiply(1);
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex1.multiply(Double.NaN);
      double double0 = complex3.getArgument();
      Complex complex7 = complex3.subtract(804.56363);
      Complex complex8 = complex7.ZERO.createComplex(1, (-2674.85));
      boolean boolean0 = complex1.isNaN();
      Complex complex9 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.createComplex(2.0, 0.0);
      Complex complex3 = complex0.ONE.pow(0.0);
      ComplexField complexField0 = complex1.ONE.getField();
      double double0 = complex1.abs();
      double double1 = complex0.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex3.log();
      Complex complex7 = complex0.divide(complex2);
      Object object0 = complex6.readResolve();
      boolean boolean1 = complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(2.1388659707647114E-62);
      try { 
        complex0.nthRoot((-555));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -555
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2742.4365809), (-2742.4365809));
      Complex complex4 = complex0.exp();
      double double0 = complex2.getReal();
      Complex complex5 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex4.cosh();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(81.3335);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex1.INF.sqrt();
      int int0 = complex4.INF.hashCode();
      int int1 = complex1.hashCode();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex1.NaN.acos();
      Complex complex7 = complex1.ZERO.tanh();
      Complex complex8 = complex0.INF.multiply(3719);
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex6.cos();
      Complex complex11 = Complex.valueOf((double) 3719, (double) 3719);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.ZERO.divide(complex2);
      boolean boolean1 = complex0.equals(complex1);
      double double0 = complex2.abs();
      int int0 = complex2.hashCode();
      Complex complex4 = complex1.atan();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex4.pow(Double.NaN);
      Complex complex6 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ONE.multiply(complex0);
      List<Complex> list0 = complex0.nthRoot(37);
      Complex complex3 = complex1.multiply(37);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex1.INF.multiply(complex2);
      Complex complex5 = complex0.tanh();
      double double0 = complex4.getArgument();
      Complex complex6 = complex1.ONE.multiply(complex0);
      Complex complex7 = complex6.divide(0.7853981633974483);
      Complex complex8 = complex6.multiply(0.7853981633974483);
      Complex complex9 = complex6.NaN.log();
      Complex complex10 = complex3.NaN.tan();
      Complex complex11 = complex0.createComplex(1.466170883710363, 2.9418137585842844E-75);
      Complex complex12 = complex11.I.add(complex10);
      Complex complex13 = complex12.NaN.multiply(complex4);
      Complex complex14 = complex11.multiply(368);
      Complex complex15 = complex14.I.add(complex2);
      Complex complex16 = complex6.conjugate();
      Complex complex17 = Complex.valueOf(1.466170883710363);
      Complex complex18 = complex3.sin();
      Complex complex19 = complex18.ONE.tan();
      Complex complex20 = complex17.sqrt();
      Complex complex21 = complex19.subtract(complex17);
      Complex complex22 = complex21.ONE.cos();
      Complex complex23 = complex4.createComplex((-650.668245535), 1.466170883710363);
      try { 
        complex4.nthRoot((-2147483638));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,147,483,638
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-135));
      Complex complex2 = Complex.valueOf((double) (-135));
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex1.INF.subtract(complex2);
      Complex complex5 = complex0.add((-922.1169418105441));
      Complex complex6 = complex5.subtract(complex1);
      Complex complex7 = complex5.add((-922.1169418105441));
      ComplexField complexField0 = complex7.ONE.getField();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex6.INF.negate();
      Object object0 = new Object();
      boolean boolean0 = complex5.equals(object0);
      Complex complex10 = complex1.sin();
      Complex complex11 = complex10.ONE.conjugate();
      Complex complex12 = complex0.I.exp();
      Complex complex13 = complex8.add(203.0);
      Complex complex14 = complex7.ZERO.log();
      double double0 = complex14.INF.getArgument();
      Complex complex15 = complex1.cosh();
      Complex complex16 = complex15.ONE.multiply(complex7);
      ComplexField complexField1 = complex10.getField();
      Complex complex17 = complex1.I.multiply(0.7853981633974483);
      boolean boolean1 = complex10.isNaN();
      Complex complex18 = complex0.log();
      Complex complex19 = complex14.ZERO.tan();
      Complex complex20 = complex18.ONE.tan();
      String string0 = complex20.ONE.toString();
      Complex complex21 = complex6.multiply((-135));
      double double1 = complex8.getArgument();
      Complex complex22 = complex18.subtract((-928.5332258442));
      int int0 = complex14.hashCode();
      int int1 = complex16.hashCode();
      Complex complex23 = complex16.subtract(Double.NaN);
      Complex complex24 = complex19.add((double) (-135));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3936771750450134, 0.3936771750450134);
      Complex complex1 = complex0.I.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.ONE.divide(complex4);
      Complex complex6 = Complex.valueOf(0.3936771750450134, 0.3936771750450134);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex8.ONE.sqrt1z();
      Complex complex10 = complex7.multiply(complex5);
      Complex complex11 = complex8.atan();
      boolean boolean0 = complex7.isInfinite();
      Complex complex12 = complex9.pow(785.36);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.31560879945755005);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      double double0 = complex0.getArgument();
      Complex complex3 = complex0.I.pow(0.0);
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf((-1556.5365535155265), (-1.0));
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.NaN.multiply(0);
      Complex complex8 = complex3.sin();
      Complex complex9 = complex0.ZERO.acos();
      Complex complex10 = complex8.tan();
      Complex complex11 = complex8.NaN.exp();
      List<Complex> list0 = complex10.nthRoot(489);
      String string0 = complex10.toString();
      boolean boolean0 = complex6.isInfinite();
      Complex complex12 = complex5.tan();
      double double1 = complex1.getImaginary();
      ComplexField complexField0 = complex8.getField();
      Complex complex13 = complex0.divide((-20.0));
      Complex complex14 = complex12.atan();
      Complex complex15 = complex14.INF.reciprocal();
      Complex complex16 = complex14.INF.atan();
      Complex complex17 = complex16.cos();
      Complex complex18 = Complex.valueOf((double) 489, (-1.0));
      Complex complex19 = complex10.subtract(complex18);
      Complex complex20 = complex13.NaN.sqrt();
      Complex complex21 = complex4.acos();
      String string1 = complex13.toString();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.ONE.multiply((-917));
      Complex complex5 = complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex6.ONE.pow((-2445.25744));
      Complex complex9 = complex3.INF.exp();
      Complex complex10 = complex6.NaN.sqrt();
      double double0 = complex10.ONE.abs();
      Complex complex11 = complex10.sqrt();
      double double1 = complex1.getReal();
      Complex complex12 = complex6.I.divide(complex0);
      Complex complex13 = complex10.createComplex((-2965.66382509), 0.0);
      Complex complex14 = complex3.divide((-133.3800908));
      Complex complex15 = complex13.sin();
      Complex complex16 = complex10.pow(complex14);
      Complex complex17 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-716.963404683), (-716.963404683));
      Complex complex1 = complex0.NaN.conjugate();
      double double0 = complex1.abs();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.ZERO.add(Double.NaN);
      double double1 = complex2.getArgument();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex2.pow(complex3);
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = complex8.ZERO.sqrt1z();
      Complex complex11 = complex7.INF.log();
      Complex complex12 = complex9.NaN.pow(0.0);
      Complex complex13 = complex3.negate();
      Complex complex14 = complex8.INF.tanh();
      Complex complex15 = complex4.ZERO.divide(493.437553065);
      double double2 = complex15.ONE.getArgument();
      Complex complex16 = complex0.createComplex(0.0, 0.0);
      Complex complex17 = complex9.conjugate();
      Complex complex18 = complex5.sqrt1z();
      boolean boolean0 = complex10.isInfinite();
      boolean boolean1 = complex2.isNaN();
      Complex complex19 = complex2.add(71.094086224);
      Complex complex20 = complex13.divide(0.0);
      boolean boolean2 = complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1142.4336);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add(921.884850945);
      Complex complex4 = complex3.ZERO.multiply(complex2);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.add(921.884850945);
      Complex complex7 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      Complex complex1 = Complex.valueOf(1.0);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(1.0, 1.0);
      boolean boolean0 = complex2.equals(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.INF.multiply(1);
      Complex complex7 = complex0.exp();
      double double1 = complex7.INF.getArgument();
      Complex complex8 = complex7.subtract(complex1);
      double double2 = complex3.getImaginary();
      Complex complex9 = complex1.INF.multiply(complex2);
      Complex complex10 = Complex.valueOf((-1294.231066), 9.118819143623114E-4);
      Complex complex11 = complex10.negate();
      Complex complex12 = complex11.divide((-1312.75532329));
      int int0 = complex11.hashCode();
      Complex complex13 = complex1.createComplex(1.0, 0.0);
      Complex complex14 = complex13.subtract(758.338636563678);
  }
}
