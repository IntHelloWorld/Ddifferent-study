/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:06:20 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-627.5029), (-627.5029));
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.cos();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.I.pow(295.4959408789);
      double double1 = complex0.getArgument();
      Complex complex4 = complex0.multiply((-2.356194490192345));
      Complex complex5 = complex4.pow((-627.5029));
      Complex complex6 = complex5.ZERO.multiply(1201);
      Complex complex7 = complex4.ONE.sqrt();
      Complex complex8 = complex4.subtract(complex1);
      Complex complex9 = complex8.subtract(complex4);
      Complex complex10 = complex8.add((-2339.294933723862));
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex1.subtract((-627.5029));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.multiply((-1468.47959713));
      Complex complex3 = Complex.valueOf((-1468.47959713));
      double double0 = complex0.abs();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.ONE.cos();
      Complex complex6 = complex4.multiply((-1468.47959713));
      double double1 = complex1.getReal();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex0.add(Double.NaN);
      Complex complex10 = complex4.subtract(1.0);
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = new Complex(2799.88);
      Complex complex15 = complex0.subtract(complex14);
      Complex complex16 = Complex.valueOf((-1468.47959713));
      Complex complex17 = complex4.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.divide(complex0);
      double double0 = complex2.INF.abs();
      Complex complex4 = complex1.INF.exp();
      String string0 = complex4.INF.toString();
      double double1 = complex0.getReal();
      Object object0 = complex4.readResolve();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.I.reciprocal();
      List<Complex> list0 = complex5.nthRoot(1276);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex2.cosh();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.I.pow(0.7853981633974483);
      Complex complex4 = complex3.ONE.add(1.2574995962791943E-166);
      Complex complex5 = complex0.createComplex((-2522.953), (-2522.953));
      Complex complex6 = complex1.INF.pow(0.0);
      double double1 = complex5.getArgument();
      Complex complex7 = complex5.NaN.subtract(complex1);
      Complex complex8 = complex6.ZERO.cosh();
      Complex complex9 = complex7.INF.asin();
      Complex complex10 = complex7.INF.sin();
      Complex complex11 = complex5.ZERO.add(complex1);
      Complex complex12 = complex5.sinh();
      boolean boolean0 = complex5.isInfinite();
      Complex complex13 = complex6.add(complex5);
      List<Complex> list0 = complex11.nthRoot(609);
      Complex complex14 = complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2591.521968412, 2591.521968412);
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.I.divide((-3.326791455362767E-8));
      List<Complex> list0 = complex2.nthRoot(891);
      String string0 = complex0.NaN.toString();
      double double0 = complex0.getImaginary();
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf(2591.521968412);
      int int1 = complex0.hashCode();
      Complex complex5 = complex4.multiply(0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2127.816732681531), 20.0);
      ComplexField complexField0 = complex0.I.getField();
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex2.I.multiply(341);
      Complex complex4 = complex0.multiply(20.0);
      Complex complex5 = complex1.INF.subtract((-1551.3112538));
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.I.tan();
      Complex complex11 = complex9.I.divide((double) 341);
      Complex complex12 = complex10.INF.asin();
      Complex complex13 = complex9.I.cos();
      Complex complex14 = complex0.negate();
      boolean boolean0 = complex10.isNaN();
      Complex complex15 = complex1.I.tan();
      Complex complex16 = complex15.ZERO.pow(complex12);
      Complex complex17 = Complex.valueOf(Double.NaN);
      Complex complex18 = complex5.NaN.pow(complex17);
      Complex complex19 = Complex.I;
      boolean boolean1 = complex10.equals(complex19);
      Complex complex20 = complex5.tan();
      Complex complex21 = complex7.divide(0.0);
      Complex complex22 = complex10.pow(complex8);
      Complex complex23 = complex9.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.NaN.pow(296.2);
      Complex complex3 = complex0.ONE.subtract(complex1);
      double double0 = complex0.NaN.getArgument();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex5.atan();
      Object object0 = complex6.ONE.readResolve();
      Complex complex8 = complex7.I.divide(Double.NaN);
      Complex complex9 = complex8.NaN.log();
      Object object1 = complex4.readResolve();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex6.cos();
      Complex complex12 = complex11.NaN.multiply(complex4);
      Complex complex13 = complex6.ZERO.negate();
      boolean boolean0 = complex7.isInfinite();
      Complex complex14 = complex12.NaN.tanh();
      Complex complex15 = complex6.asin();
      Object object2 = complex12.ZERO.readResolve();
      double double1 = complex4.getArgument();
      Complex complex16 = complex12.atan();
      Complex complex17 = Complex.valueOf(20.0, Double.NaN);
      List<Complex> list0 = complex2.nthRoot(375);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.7013046451109475E-9));
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.I.subtract(0.0);
      Complex complex8 = Complex.valueOf(1.7013046451109475E-9);
      Complex complex9 = complex7.ZERO.multiply(complex8);
      Complex complex10 = complex2.exp();
      Object object0 = complex0.INF.readResolve();
      Complex complex11 = Complex.valueOf((-1419.844));
      Complex complex12 = complex3.add(0.0);
      Complex complex13 = complex1.ONE.conjugate();
      Complex complex14 = complex3.multiply(complex2);
      Complex complex15 = complex14.ONE.divide(complex2);
      Complex complex16 = complex14.divide(complex2);
      Complex complex17 = complex5.subtract(complex10);
      int int0 = complex6.hashCode();
      Complex complex18 = complex12.sqrt1z();
      ComplexField complexField1 = complex18.NaN.getField();
      double double1 = complex3.getArgument();
      Complex complex19 = Complex.NaN;
      Complex complex20 = complex1.NaN.add(complex19);
      Complex complex21 = complex0.sin();
      String string0 = complex12.toString();
      Complex complex22 = complex10.asin();
      double double2 = complex2.getArgument();
      Complex complex23 = complex10.acos();
      Complex complex24 = complex18.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(147.61398251);
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.I.pow(147.61398251);
      int int0 = complex1.ZERO.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.valueOf(147.61398251, Double.NaN);
      Complex complex6 = complex0.I.add(complex4);
      Complex complex7 = complex0.I.sqrt1z();
      Complex complex8 = complex4.I.conjugate();
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex4.divide(complex3);
      Complex complex12 = complex11.ONE.atan();
      List<Complex> list0 = complex0.nthRoot(253);
      Complex complex13 = complex1.subtract(1107.483926889);
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex14.INF.sqrt();
      Complex complex16 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = Complex.valueOf(Double.NaN, (-1543.951604891));
      Complex complex6 = complex5.NaN.conjugate();
      Complex complex7 = complex3.NaN.tanh();
      Complex complex8 = Complex.valueOf(331.6, (-2215.0));
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.ONE.sinh();
      Complex complex12 = complex1.tanh();
      ComplexField complexField0 = complex1.getField();
      Complex complex13 = complex12.pow(0.0);
      boolean boolean0 = complex3.equals("?|dS)%K");
      double double0 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Object object1 = complex2.readResolve();
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex1.ZERO.createComplex((-550.8572936), (-550.8572936));
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.ONE.sqrt();
      boolean boolean0 = complex1.equals(object0);
      Complex complex10 = complex2.cosh();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex9.add(complex0);
      Complex complex13 = complex9.divide(1.1603177493080332);
      Complex complex14 = complex7.sinh();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2284.87886754, Double.NaN);
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(1.1882454749452428E-7);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex1.asin();
      Complex complex7 = Complex.valueOf(1.1882454749452428E-7, 0.0);
      int int0 = complex7.INF.hashCode();
      Complex complex8 = Complex.valueOf(1.1882454749452428E-7, 0.0);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex0.I.subtract(Double.NaN);
      Complex complex11 = complex10.INF.multiply(1);
      Complex complex12 = complex9.NaN.conjugate();
      Complex complex13 = complex6.asin();
      Object object0 = complex13.INF.readResolve();
      Complex complex14 = complex0.I.multiply(complex2);
      String string0 = complex14.ONE.toString();
      Complex complex15 = complex5.sinh();
      double double0 = complex3.getImaginary();
      Complex complex16 = complex12.sqrt();
      Complex complex17 = complex9.multiply(Double.NaN);
      Complex complex18 = complex8.add(1885.2724238);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex19 = complex6.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0);
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.pow(2.0);
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.reciprocal();
      double double1 = complex2.abs();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex0.createComplex((-2724.77551325008), 2.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5205.1280713366));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex2.NaN.add(0.0);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex6.INF.createComplex(0.0, 0.0);
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex0.log();
      Complex complex10 = complex9.I.cos();
      Complex complex11 = complex1.multiply(0.0);
      Complex complex12 = complex11.multiply((-5205.1280713366));
      Complex complex13 = complex12.NaN.acos();
      Complex complex14 = complex0.conjugate();
      Complex complex15 = complex0.tanh();
      Complex complex16 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      double double0 = complex1.getArgument();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex2.ZERO.negate();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex0.INF.cosh();
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.INF.createComplex(0.0, Double.NaN);
      String string0 = complex2.toString();
      int int0 = complex8.hashCode();
      boolean boolean0 = complex9.equals(complex0);
      Complex complex13 = complex2.divide(complex8);
      Complex complex14 = complex12.negate();
      String string1 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-2535.2859102595485), (-2535.2859102595485));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.log();
      double double0 = complex0.abs();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.log();
      boolean boolean0 = complex4.isInfinite();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex1.multiply(0);
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex4.reciprocal();
      try { 
        complex8.I.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2420918941497803);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.ZERO.exp();
      Complex complex5 = complex4.ZERO.multiply(1878);
      Complex complex6 = complex3.I.subtract(0.0);
      Complex complex7 = complex2.NaN.conjugate();
      Complex complex8 = complex2.ZERO.multiply(complex6);
      Complex complex9 = complex7.I.subtract(complex4);
      Complex complex10 = complex7.ZERO.multiply(complex6);
      Complex complex11 = complex10.INF.multiply(0.0);
      Complex complex12 = complex10.INF.reciprocal();
      Complex complex13 = complex1.pow(complex0);
      Complex complex14 = complex4.createComplex(0.0, (-440.985303245676));
      double double0 = complex14.getArgument();
      Complex complex15 = complex0.divide(0.0);
      Complex complex16 = complex15.ZERO.exp();
      Complex complex17 = complex16.ONE.sin();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex18 = complex14.tanh();
      Complex complex19 = complex13.pow(complex0);
      Complex complex20 = complex6.cosh();
      Complex complex21 = complex13.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.log();
      Complex complex2 = Complex.valueOf(0.0);
      double double0 = complex2.INF.getArgument();
      Complex complex3 = complex2.INF.createComplex((-347.736451), 3933.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.I.negate();
      Complex complex6 = complex0.I.tan();
      Complex complex7 = complex5.ONE.tan();
      Complex complex8 = complex0.acos();
      ComplexField complexField0 = complex8.NaN.getField();
      Complex complex9 = complex5.subtract(complex0);
      Complex complex10 = complex9.NaN.divide((-2700.6082763316));
      Complex complex11 = complex0.sqrt1z();
      double double1 = complex8.getImaginary();
      Complex complex12 = complex6.multiply(0.7853981633974483);
      Complex complex13 = complex12.atan();
      Complex complex14 = complex9.sinh();
      double double2 = complex0.getArgument();
      Complex complex15 = complex1.pow(1.0);
      double double3 = complex14.getImaginary();
      Complex complex16 = complex8.createComplex((-2700.6082763316), 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.divide(0.0);
      Object object0 = complex0.readResolve();
      Complex complex4 = Complex.valueOf(2.8426856726994483E-8, 2.8426856726994483E-8);
      double double0 = complex0.INF.abs();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex3.NaN.cosh();
      Complex complex8 = complex3.I.multiply((-2883));
      Complex complex9 = complex1.NaN.multiply((-2883));
      boolean boolean0 = complex5.isInfinite();
      try { 
        complex3.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.multiply(1);
      Complex complex6 = complex2.add(6.283185307179586);
      Complex complex7 = complex2.add(complex3);
      boolean boolean0 = complex5.equals(complex6);
      Complex complex8 = complex5.exp();
      Complex complex9 = complex6.createComplex(1033.233, 1);
      Complex complex10 = complex3.add(1033.233);
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex10.ONE.reciprocal();
      Complex complex15 = complex9.I.createComplex(0.0, 1033.233);
      Complex complex16 = complex9.subtract(complex0);
      Complex complex17 = complex7.sqrt1z();
      Complex complex18 = complex10.NaN.add(complex10);
      Complex complex19 = complex13.divide(complex7);
      Object object0 = complex7.readResolve();
      Complex complex20 = complex13.sin();
      Complex complex21 = complex1.tan();
      Complex complex22 = Complex.NaN;
      Complex complex23 = complex2.divide(complex22);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1296.334718106);
      Object object0 = complex1.I.readResolve();
      Complex complex2 = complex1.ONE.createComplex((-706.1632450174), 6.283185307179586);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = Complex.valueOf((-2281.569422902451));
      Complex complex2 = complex1.NaN.log();
      Object object0 = complex0.I.readResolve();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex2.INF.pow(complex1);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(9.25896798127602E-242);
      Complex complex8 = complex6.ONE.createComplex(0.5887627601623535, 0.0);
      Complex complex9 = complex3.add(complex5);
      Complex complex10 = Complex.valueOf(9.25896798127602E-242);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(821.0231, 821.0231);
      Complex complex1 = complex0.pow(1262.354297);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-594.13390406534), (-594.13390406534));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.conjugate();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.I.pow(0.0);
      Complex complex5 = complex0.tanh();
      boolean boolean0 = complex2.isInfinite();
      Complex complex6 = complex3.pow(1368.1084409707541);
      Complex complex7 = complex6.ONE.subtract(complex2);
      Complex complex8 = Complex.valueOf(6.283185307179586);
      Complex complex9 = complex8.add((-338.38));
      Complex complex10 = complex2.cosh();
      Complex complex11 = Complex.valueOf(2235.67508806414, (-583.644));
      String string0 = complex2.toString();
      double double0 = complex3.abs();
      Complex complex12 = Complex.INF;
      boolean boolean1 = complex11.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.036655299348577E-8), 1334.164399397);
      Complex complex1 = Complex.valueOf((-6.036655299348577E-8), 1143.1);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.ZERO.acos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-883.8341));
      Complex complex1 = complex0.asin();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.divide(0.0);
      double double0 = complex0.NaN.getArgument();
      Complex complex2 = new Complex(412.563);
      Complex complex3 = complex2.add(0.0);
      double double1 = complex3.ONE.abs();
      Complex complex4 = complex0.ZERO.multiply(complex2);
      Complex complex5 = complex4.ZERO.divide(412.563);
      int int0 = complex0.NaN.hashCode();
      Complex complex6 = complex0.sinh();
      double double2 = complex6.getReal();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = Complex.valueOf(294.859712);
      Complex complex10 = complex8.multiply(412.563);
      Complex complex11 = complex0.pow(complex8);
      Complex complex12 = complex11.subtract(20.0);
      Complex complex13 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex1.isNaN();
      Complex complex14 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.NaN.sinh();
      ComplexField complexField0 = complex1.ONE.getField();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = Complex.valueOf(297.93381456917, 297.93381456917);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = Complex.valueOf(52.369, (-1021.7622308978998));
      Complex complex7 = Complex.valueOf(52.369);
      Complex complex8 = Complex.valueOf(297.93381456917, 0.0);
      List<Complex> list0 = complex3.nthRoot(415);
      int int0 = complex6.INF.hashCode();
      Complex complex9 = complex7.NaN.multiply(complex3);
      Complex complex10 = complex9.INF.divide(complex5);
      Complex complex11 = complex6.sqrt();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex7.equals(object1);
      ComplexField complexField1 = complex6.getField();
      Complex complex12 = complex5.multiply((-342.12));
      Complex complex13 = complex2.exp();
      Complex complex14 = complex9.createComplex((-342.12), 0.043007105588912964);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1154.644));
      Complex complex1 = complex0.reciprocal();
      String string0 = complex1.NaN.toString();
      Complex complex2 = new Complex((-1154.644), (-1154.644));
      List<Complex> list0 = complex2.I.nthRoot(127);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.add(0.6118015050888062);
      Object object0 = complex0.INF.readResolve();
      Complex complex5 = Complex.valueOf((-1940.5699), 0.0);
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex2.INF.subtract((-2909.889942372742));
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.I.reciprocal();
      double double0 = complex8.getReal();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex5.atan();
      Object object1 = complex11.ZERO.readResolve();
      List<Complex> list1 = complex10.nthRoot(127);
      double double1 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1548.3416752));
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 2.778073442169904E185);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex3.add(2.778073442169904E185);
      Complex complex6 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(20.0);
      Complex complex2 = complex1.INF.sqrt();
      List<Complex> list0 = complex1.nthRoot(1211);
      Complex complex3 = complex0.pow(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(Double.POSITIVE_INFINITY, 20.0);
      Complex complex2 = complex0.add(337.2684343971);
      double double0 = complex0.getArgument();
      Complex complex3 = complex2.cos();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1270.969071736547);
      Complex complex1 = new Complex(1270.969071736547, 1246.836399249575);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.NaN.reciprocal();
      Complex complex4 = complex0.INF.divide((-2016.33283));
      int int0 = complex1.NaN.hashCode();
      Complex complex5 = Complex.valueOf(1270.969071736547, 1.7775323307944624E203);
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex6.asin();
      double double0 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.valueOf((-1028.18233567), (-1028.18233567));
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.INF.subtract((-722.5802));
      Complex complex4 = complex2.INF.divide(complex1);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex7.ONE.divide((-1028.18233567));
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex1.add(complex0);
      Complex complex11 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(949.0);
      Complex complex1 = Complex.valueOf(628.94576, 0.0);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.multiply(949.0);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex3.INF.createComplex(628.94576, 949.0);
      Complex complex6 = complex3.ONE.acos();
      Complex complex7 = complex6.I.subtract(complex3);
      Complex complex8 = complex6.sqrt1z();
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex7.INF.nthRoot(748);
      Complex complex9 = complex4.multiply(0.0);
      Complex complex10 = complex3.multiply(complex4);
      Complex complex11 = complex5.add(complex7);
      boolean boolean0 = complex8.isInfinite();
      Complex complex12 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow(0.0);
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide(complex0);
      List<Complex> list0 = complex2.nthRoot(7);
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex4.INF.reciprocal();
      Complex complex7 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(1364.1609255, (-586.863884378087));
      Complex complex1 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1.4093490364499379E22);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.NaN.getField();
      double double0 = 2338.746;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.NaN.divide(2338.746);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = Complex.valueOf(2338.746, 2338.746);
      Complex complex4 = complex3.I.asin();
      String string0 = complex4.INF.toString();
      Complex complex5 = complex0.ONE.subtract(0.0);
      Complex complex6 = complex3.INF.tan();
      Complex complex7 = Complex.valueOf(0.0);
      double double1 = complex7.ZERO.abs();
      Complex complex8 = complex7.NaN.sqrt();
      Complex complex9 = complex0.INF.multiply(complex3);
      String string1 = complex0.NaN.toString();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1303.527359888461);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.ONE.pow(complex1);
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = new Complex((-552.429), 0.0);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex5.exp();
      Complex complex10 = complex9.I.pow((-552.429));
      String string0 = complex0.toString();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex2.sin();
      boolean boolean0 = complex3.equals("(1303.527359888461, 0.0)");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex1.INF.multiply(complex0);
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.valueOf((-3705.78082267), (-3705.78082267));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.pow(2.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.multiply(complex0);
      Complex complex5 = Complex.valueOf(2160.98);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.ONE.sin();
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.divide(1.0);
      Complex complex5 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1624.1671));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.tan();
      double double0 = complex0.ONE.abs();
      Complex complex2 = complex0.NaN.tanh();
      double double1 = complex0.getReal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(3.77818236, 1607.5460531861465);
      Complex complex5 = complex3.ONE.subtract(complex4);
      Complex complex6 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4342.73447492473), 0.0);
      Complex complex1 = complex0.ZERO.divide(6.610611940107793E-8);
      int int0 = complex1.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(649);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(2533.95, 1779.150261);
      Complex complex4 = complex1.multiply(complex0);
      List<Complex> list0 = complex2.nthRoot(649);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(731.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.INF.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      boolean boolean0 = complex1.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.divide(6.283185307179586);
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.valueOf(0.7853981633974483);
      int int0 = complex5.NaN.hashCode();
      Complex complex7 = complex1.I.pow(complex6);
      double double1 = complex5.ONE.getArgument();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex0.add(complex5);
      try { 
        complex6.nthRoot((-1252));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,252
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.35471993684768677);
      Complex complex2 = complex0.subtract((-2791.1789238581));
      Complex complex3 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add(0.0);
      Complex complex2 = complex0.NaN.multiply(568.224964);
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex0.atan();
      double double0 = complex5.ZERO.getArgument();
      int int0 = complex1.hashCode();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex1.ONE.multiply(complex2);
      Complex complex9 = complex1.divide(0.0);
      Complex complex10 = complex6.cos();
      Complex complex11 = complex0.divide(complex5);
      Complex complex12 = complex0.subtract((-2383.952064772));
      Complex complex13 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(1983.17);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1983.17);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.atan();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex0.pow(660.2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1455.7311));
      double double0 = complex0.INF.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = Complex.valueOf((-1455.7311), 6.283185307179586);
      boolean boolean0 = complex0.isInfinite();
      Complex complex6 = complex0.cos();
      boolean boolean1 = complex3.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3529.1);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.NaN.subtract(3529.1);
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex0.tan();
      String string0 = complex1.toString();
      Complex complex6 = complex1.reciprocal();
      String string1 = complex5.toString();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex1.ONE.reciprocal();
      Complex complex5 = complex3.I.sqrt();
      Object object0 = complex4.ONE.readResolve();
      Complex complex6 = complex0.INF.multiply(0.0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ONE.atan();
      boolean boolean0 = complex3.isNaN();
      Complex complex9 = complex6.divide(6.283185307179586);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex10 = complex0.conjugate();
      double double0 = complex3.abs();
      Complex complex11 = complex4.log();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex1.ZERO.pow((-1.0));
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(6.402020300783889E-254);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.divide(6.402020300783889E-254);
      int int0 = complex1.NaN.hashCode();
      Complex complex3 = complex0.pow((-2653.75558477502));
      Complex complex4 = complex2.ZERO.multiply(complex1);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.divide(6.402020300783889E-254);
      Complex complex7 = complex1.I.sqrt1z();
      Complex complex8 = complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2557.2963625049);
      Complex complex1 = complex0.ONE.add((-1231.07));
      Complex complex2 = complex0.conjugate();
      String string0 = complex2.I.toString();
      Complex complex3 = complex2.add(2557.2963625049);
      Object object0 = complex3.readResolve();
      Complex complex4 = complex2.multiply(2557.2963625049);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.multiply(3146.09166658322);
      Complex complex7 = complex5.NaN.cosh();
      ComplexField complexField0 = complex4.getField();
      Complex complex8 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-284.26), (-284.26));
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ZERO.subtract((-284.26));
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex1.ONE.multiply(1133);
      Complex complex7 = Complex.valueOf((-284.26));
      Complex complex8 = complex7.INF.multiply((double) 1133);
      double double0 = complex0.getArgument();
      Complex complex9 = complex7.multiply(complex0);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-3350.891205519054), (-3350.891205519054));
      String string0 = complex0.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.pow(complex0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.multiply(1.0225689628581036E-86);
      Complex complex5 = Complex.valueOf(1.0225689628581036E-86, 1.0225689628581036E-86);
      int int0 = complex1.hashCode();
      Complex complex6 = complex2.createComplex((-3350.891205519054), 1658.56377742);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(3619.006);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.subtract(0.0);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = complex0.ZERO.asin();
      Complex complex6 = complex0.log();
      int int0 = complex0.ONE.hashCode();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex10.conjugate();
      Complex complex12 = complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1394.4, 1394.4);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.861525553653117E-227);
      Complex complex1 = complex0.divide(2759.4904415020314);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.atan();
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, (-1146.5404));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ZERO.createComplex(2207.0, (-1.0));
      Complex complex4 = complex0.createComplex((-1.0), 0.0);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex6.NaN.sin();
      int int0 = complex6.INF.hashCode();
      Object object0 = complex6.I.readResolve();
      Complex complex8 = complex4.tan();
      int int1 = complex8.ZERO.hashCode();
      Complex complex9 = complex8.I.tanh();
      int int2 = complex4.hashCode();
      Complex complex10 = complex5.negate();
      Complex complex11 = complex10.pow((-1.0));
      Complex complex12 = complex3.multiply(complex0);
      Complex complex13 = complex5.add((-1.0));
      Complex complex14 = complex11.tan();
      Complex complex15 = complex12.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.I.cos();
      Complex complex6 = complex0.ZERO.sin();
      int int0 = 0;
      Complex complex7 = complex1.ZERO.negate();
      Complex complex8 = complex5.I.divide(complex4);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2085883617401123, (-334.0));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.ONE.createComplex((-334.0), (-2.268889128622553E-8));
      boolean boolean0 = complex0.equals(object0);
      Object object1 = complex0.readResolve();
      double double0 = complex0.getArgument();
      boolean boolean1 = complex0.isNaN();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.atan();
      ComplexField complexField0 = complex3.getField();
      double double1 = complex2.getImaginary();
      double double2 = Double.POSITIVE_INFINITY;
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex5.I.atan();
      try { 
        complex3.ZERO.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.INF.atan();
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex5.ONE.multiply(4588.244988084815);
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex6.ZERO.createComplex(Double.POSITIVE_INFINITY, (-2703.3564417));
      Complex complex9 = complex5.NaN.log();
      ComplexField complexField0 = complex5.INF.getField();
      Complex complex10 = complex3.NaN.asin();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex11.sinh();
      Complex complex13 = Complex.valueOf((-3329.744833739));
      Complex complex14 = complex12.NaN.conjugate();
      ComplexField complexField1 = complex12.getField();
      Complex complex15 = Complex.valueOf(1737.144, 1737.144);
      Complex complex16 = complex0.acos();
      Complex complex17 = complex16.ZERO.negate();
      Complex complex18 = complex3.log();
      Complex complex19 = complex1.add((-2619.927));
      Complex complex20 = complex18.cos();
      Complex complex21 = complex4.tan();
      Complex complex22 = Complex.valueOf((-4149.61057), (-1029.86547609805));
      Object object0 = complex21.readResolve();
      boolean boolean0 = complex16.equals((Object) null);
      Complex complex23 = complex12.exp();
      String string0 = complex0.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex6.NaN.pow(3.67972590471072E-8);
      Complex complex8 = complex3.I.cosh();
      double double0 = complex5.NaN.abs();
      boolean boolean0 = complex3.isNaN();
      Complex complex9 = complex0.INF.sin();
      double double1 = complex9.ZERO.abs();
      Complex complex10 = complex0.acos();
      boolean boolean1 = complex5.isInfinite();
      String string0 = complex1.toString();
      Complex complex11 = complex4.conjugate();
      Complex complex12 = complex11.ONE.negate();
      Complex complex13 = complex5.sqrt1z();
      Complex complex14 = complex13.NaN.conjugate();
      Complex complex15 = complex6.multiply(0);
      Complex complex16 = Complex.valueOf(2225.947592);
      Complex complex17 = Complex.valueOf(3.67972590471072E-8, 1593.4);
      Complex complex18 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.490218341008089E-193);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.createComplex((-2050.7845371953), 0.0);
      Complex complex3 = complex2.INF.pow(0.0);
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex3.INF.multiply(0);
      Complex complex5 = complex3.NaN.atan();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.multiply(1541);
      Complex complex8 = complex3.pow((-2050.7845371953));
      Complex complex9 = complex0.divide(complex1);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex6.tanh();
      double double0 = complex2.getReal();
      Object object0 = complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex1.ONE.multiply((-3323));
      Complex complex6 = complex0.acos();
      double double0 = complex1.I.abs();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.tanh();
      List<Complex> list0 = complex8.I.nthRoot(1);
      Complex complex10 = complex3.createComplex((-3323), (-3323));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      double double0 = (-2611.28233);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ONE.divide((-2611.28233));
      String string0 = complex3.INF.toString();
      double double1 = complex3.INF.abs();
      Complex complex4 = complex1.add((double) (-1097));
      try { 
        complex3.I.nthRoot((-1097));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,097
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex1.I.multiply((-697));
      Complex complex9 = complex8.I.multiply(3254);
      try { 
        complex0.nthRoot((-2164));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,164
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
