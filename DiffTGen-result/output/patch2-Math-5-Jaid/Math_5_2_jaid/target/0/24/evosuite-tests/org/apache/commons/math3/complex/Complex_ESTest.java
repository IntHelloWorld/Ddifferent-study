/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:09:55 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = complex1.NaN.subtract(complex3);
      Complex complex6 = complex0.multiply((-3974.906228442));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.divide((-3974.906228442));
      Complex complex9 = complex2.tanh();
      int int0 = complex9.ZERO.hashCode();
      Complex complex10 = complex8.add(0.0);
      Complex complex11 = complex10.NaN.pow(complex2);
      Complex complex12 = complex11.NaN.pow(complex3);
      Complex complex13 = complex8.asin();
      Complex complex14 = complex13.ONE.pow(complex10);
      String string1 = complex4.toString();
      Complex complex15 = complex8.reciprocal();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
      Complex complex17 = complex15.atan();
      Complex complex18 = complex4.exp();
      boolean boolean0 = complex8.isInfinite();
      Complex complex19 = Complex.valueOf(0.0);
      Complex complex20 = complex13.pow((-1862.380248));
      Complex complex21 = complex2.divide((-3974.906228442));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(4.0447634595724164E195);
      Complex complex1 = complex0.I.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.INF.reciprocal();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = new Complex(4.0447634595724164E195, 1.0);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex1.pow(complex3);
      Complex complex7 = complex3.INF.cosh();
      Complex complex8 = complex0.sin();
      double double0 = complex0.I.abs();
      Complex complex9 = complex3.INF.add(complex0);
      Complex complex10 = complex9.I.reciprocal();
      Complex complex11 = complex6.negate();
      Complex complex12 = complex3.I.sinh();
      Complex complex13 = complex11.asin();
      String string0 = complex0.NaN.toString();
      Complex complex14 = complex6.INF.multiply(4.0447634595724164E195);
      Complex complex15 = complex6.reciprocal();
      Complex complex16 = complex3.acos();
      Complex complex17 = Complex.valueOf(1.0);
      Complex complex18 = complex16.INF.multiply(complex17);
      Complex complex19 = complex11.INF.sin();
      boolean boolean1 = complex13.equals((Object) null);
      Complex complex20 = complex8.multiply(complex11);
      Complex complex21 = complex20.pow(1.0);
      Complex complex22 = complex20.asin();
      Complex complex23 = complex5.subtract(complex6);
      Complex complex24 = complex11.asin();
      List<Complex> list0 = complex24.nthRoot(2310);
      boolean boolean2 = complex20.isNaN();
      double double1 = complex16.getReal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.asin();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex1.INF.subtract(0.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex4.pow(0.0);
      Complex complex9 = complex4.I.subtract(complex1);
      Complex complex10 = complex0.pow(complex4);
      Complex complex11 = complex3.pow(complex1);
      Complex complex12 = complex11.subtract(complex1);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.INF.createComplex((-5020.4388795770665), (-1535.0265267));
      String string0 = complex2.I.toString();
      double double0 = complex2.getArgument();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex1.ONE.divide(complex3);
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex1.getField();
      Complex complex6 = complex0.add(0.0);
      Object object1 = complex6.NaN.readResolve();
      Complex complex7 = Complex.valueOf(1968.801344019711, 1953.208436);
      int int0 = complex6.I.hashCode();
      double double1 = complex2.getArgument();
      ComplexField complexField1 = complex6.getField();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(5.1090893668503945E-12, 5.1090893668503945E-12);
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(5.1090893668503945E-12);
      Complex complex3 = complex2.ONE.multiply(0);
      Complex complex4 = Complex.valueOf(553.0);
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ZERO.createComplex((-1.0), 1.0584469687624562E-7);
      double double0 = complex1.getReal();
      Complex complex9 = complex7.divide(complex2);
      Complex complex10 = complex0.NaN.divide(complex3);
      Complex complex11 = complex1.add(0.0);
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex1.subtract((double) 0);
      Complex complex14 = complex12.add(complex8);
      Complex complex15 = complex11.acos();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Object object1 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.add(0.0);
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.createComplex((-2206.46603821606), (-2206.46603821606));
      double double0 = complex2.I.abs();
      // Undeclared exception!
      complex3.ONE.nthRoot(6486);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sinh();
      double double0 = complex1.INF.getArgument();
      try { 
        complex0.ZERO.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sqrt1z();
      String string0 = complex0.toString();
      Complex complex2 = complex0.negate();
      double double0 = complex0.I.getArgument();
      Complex complex3 = complex2.I.acos();
      int int0 = complex2.hashCode();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.log();
      Complex complex6 = complex4.ZERO.log();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex4.I.asin();
      Complex complex9 = complex6.NaN.log();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex4.asin();
      Object object0 = complex1.readResolve();
      int int1 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1.054760847603618E-7);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = Complex.valueOf(1.3629491735708616E151, 1.2858802448614707E-252);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.divide((-66.60299));
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex4.exp();
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex4.acos();
      Complex complex12 = complex10.subtract(complex1);
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-3340.15796607061), (-3340.15796607061));
      Complex complex1 = complex0.ZERO.negate();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(467.11726, Double.NaN);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.createComplex(0.0, 143.012122143433);
      double double0 = complex2.getArgument();
      Complex complex6 = complex0.INF.multiply(202);
      boolean boolean0 = complex2.isNaN();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex5.atan();
      double double1 = complex7.getImaginary();
      Complex complex11 = complex2.subtract((-3340.15796607061));
      Complex complex12 = complex10.cos();
      Complex complex13 = complex2.exp();
      Complex complex14 = complex13.I.conjugate();
      Complex complex15 = complex1.sin();
      Complex complex16 = complex15.subtract(1431.149);
      Complex complex17 = complex16.cos();
      Object object1 = complex10.readResolve();
      double double2 = complex9.abs();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-4686.550280883503));
      Complex complex1 = complex0.INF.sqrt1z();
      String string0 = complex0.I.toString();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.ZERO.reciprocal();
      Complex complex7 = complex1.I.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex8 = complex0.tanh();
      double double1 = complex0.ZERO.abs();
      Complex complex9 = complex1.INF.subtract(complex2);
      Complex complex10 = complex1.divide(complex8);
      Complex complex11 = complex10.NaN.add((-4686.550280883503));
      double double2 = complex1.getArgument();
      Complex complex12 = complex8.cos();
      ComplexField complexField0 = complex8.I.getField();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex13.NaN.conjugate();
      String string1 = complex15.INF.toString();
      Complex complex16 = complex15.ZERO.acos();
      Complex complex17 = complex0.asin();
      Complex complex18 = complex17.ONE.asin();
      Object object0 = complex12.readResolve();
      ComplexField complexField1 = complex17.getField();
      String string2 = complex3.toString();
      Complex complex19 = complex14.divide((-558.892891284756));
      Complex complex20 = complex8.multiply((-548));
      Complex complex21 = complex16.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.valueOf((-382.04623562005));
      Complex complex6 = complex3.ONE.exp();
      Complex complex7 = complex4.I.atan();
      Complex complex8 = complex1.createComplex((-382.04623562005), (-1460.3));
      Complex complex9 = complex4.cos();
      String string0 = complex9.toString();
      Complex complex10 = complex8.reciprocal();
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-2654.109620747069));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.tan();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.log();
      double double0 = complex5.getImaginary();
      Complex complex6 = complex4.multiply(Double.NaN);
      double double1 = complex6.abs();
      Complex complex7 = complex2.sqrt1z();
      Object object1 = complex3.readResolve();
      Complex complex8 = Complex.valueOf(417.217954411);
      Complex complex9 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 40.186);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.I.negate();
      Complex complex6 = complex0.NaN.sinh();
      Complex complex7 = complex3.NaN.multiply(complex1);
      Complex complex8 = complex7.ONE.subtract(complex1);
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex0.pow(complex3);
      Complex complex12 = Complex.valueOf(1.2794996377383974E-8);
      Complex complex13 = complex12.I.asin();
      Complex complex14 = Complex.valueOf(1.2794996377383974E-8);
      Complex complex15 = complex5.multiply(40.186);
      Complex complex16 = complex0.asin();
      boolean boolean0 = complex2.isInfinite();
      Complex complex17 = complex13.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-5.185064518887831E-9), (-2825.96513));
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1064.49309), (-1064.49309));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.ZERO.divide(complex2);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.NaN.divide((-1064.49309));
      Complex complex9 = complex2.multiply(complex7);
      ComplexField complexField0 = complex4.getField();
      Complex complex10 = complex6.ONE.sin();
      Complex complex11 = Complex.ZERO;
      boolean boolean0 = complex9.equals(complex11);
      Complex complex12 = complex0.I.tanh();
      ComplexField complexField1 = complex9.getField();
      boolean boolean1 = complex11.equals(complex6);
      Complex complex13 = complex4.multiply(1);
      Complex complex14 = complex5.cos();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.NaN.createComplex(0.0, (-879.4097081101));
      double double0 = complex0.getReal();
      Complex complex3 = complex2.log();
      double double1 = complex3.INF.getArgument();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex5.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.I.abs();
      double double1 = complex0.getReal();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex0.pow(1.0);
      double double2 = complex2.getArgument();
      double double3 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex0.isNaN();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(3718.9293046);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.ONE.createComplex(3718.9293046, 3718.9293046);
      Complex complex4 = complex3.NaN.exp();
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex5 = complex0.I.exp();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.I.cosh();
      double double0 = complex0.NaN.abs();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.NaN.tanh();
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex4.sinh();
      Complex complex12 = Complex.valueOf(Double.NaN);
      Complex complex13 = complex9.I.atan();
      String string0 = complex9.NaN.toString();
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex14.ONE.atan();
      Complex complex16 = complex9.NaN.subtract(0.0);
      Complex complex17 = complex8.INF.acos();
      boolean boolean0 = complex9.equals("ve O`*|O@&0R?IHFRF");
      Complex complex18 = Complex.valueOf(Double.NaN);
      int int0 = complex18.hashCode();
      Complex complex19 = complex0.I.cosh();
      double double1 = complex2.I.getArgument();
      Complex complex20 = complex4.pow(complex8);
      String string1 = complex14.toString();
      Complex complex21 = complex0.pow(0.0);
      Complex complex22 = complex0.divide(complex5);
      Complex complex23 = complex2.add(Double.NaN);
      Complex complex24 = Complex.INF;
      Complex complex25 = complex22.pow(complex24);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-779.8002219605489));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-779.8002219605489));
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex1.I.subtract((-779.8002219605489));
      Complex complex5 = complex0.I.subtract(complex1);
      ComplexField complexField0 = complex0.I.getField();
      Complex complex6 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(206.23874);
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ONE.add(206.23874);
      Complex complex5 = complex1.ZERO.add(complex3);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = Complex.valueOf((-1158.98715), 206.23874);
      Complex complex10 = complex0.asin();
      double double1 = complex0.abs();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex1.createComplex(206.23874, 206.23874);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7010571956634521, 1.7010571956634521);
      String string0 = complex0.NaN.toString();
      Complex complex1 = complex0.ONE.negate();
      double double0 = complex0.getImaginary();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.sinh();
      String string1 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1616.872, 1616.872);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.I.subtract(1616.872);
      Complex complex4 = Complex.valueOf(1616.872);
      double double0 = complex0.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.multiply(1616.872);
      Complex complex6 = complex4.tan();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.ZERO.multiply(complex4);
      Complex complex9 = complex8.ZERO.reciprocal();
      Complex complex10 = complex7.ONE.multiply(1616.872);
      double double1 = complex10.ONE.getArgument();
      Complex complex11 = complex0.pow(1616.872);
      Complex complex12 = Complex.valueOf(823.546041046317, (-262.362651310294));
      Complex complex13 = complex2.sqrt1z();
      double double2 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1330.5279), (-1330.5279));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      double double0 = complex1.getReal();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex0.exp();
      String string0 = complex6.INF.toString();
      Complex complex7 = complex0.NaN.pow(complex1);
      Complex complex8 = complex5.NaN.divide(1330.5279);
      Complex complex9 = complex5.ZERO.cos();
      Complex complex10 = complex5.ZERO.cos();
      List<Complex> list0 = complex5.NaN.nthRoot(430);
      Complex complex11 = complex2.add(complex0);
      Complex complex12 = complex5.exp();
      Complex complex13 = complex1.createComplex(430, 1142.5204657288);
      String string1 = complex7.toString();
      Complex complex14 = complex6.pow(complex3);
      Complex complex15 = complex13.subtract(0.0);
      Complex complex16 = complex6.divide((double) 430);
      Complex complex17 = complex3.multiply(2582.78);
      double double1 = complex14.getArgument();
      Complex complex18 = complex7.cosh();
      Complex complex19 = Complex.ONE;
      Complex complex20 = complex13.subtract(complex19);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-4741.978377622));
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = Complex.valueOf((-4741.978377622));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex0.INF.multiply(complex1);
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-1.0292817180691822E123));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 312.6611838767805);
      Complex complex1 = complex0.pow((-1566.4));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.I.pow(0.0);
      Complex complex6 = complex2.ONE.pow(complex1);
      Complex complex7 = complex1.divide(312.6611838767805);
      Complex complex8 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-3821.072508732455));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.INF.subtract(complex2);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex5.cosh();
      int int0 = complex9.NaN.hashCode();
      ComplexField complexField1 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = Complex.valueOf((-427.7381669262647), (-427.7381669262647));
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex2.ONE.pow(0.0);
      Complex complex5 = complex0.divide(complex2);
      double double0 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.pow(Double.NaN);
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex0);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-2182.0665131));
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.ZERO.sinh();
      Complex complex5 = complex2.ONE.log();
      Complex complex6 = complex0.add(complex3);
      double double0 = complex0.getReal();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex0.cos();
      Complex complex9 = Complex.valueOf((-20.0), 2948.892);
      boolean boolean0 = complex1.isInfinite();
      List<Complex> list0 = complex0.nthRoot(309);
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex2.I.add(1624.9222);
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = Complex.valueOf((-253.0443289628412), 0.0);
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex4.NaN.subtract(1624.9222);
      Complex complex8 = complex6.ZERO.sqrt();
      Complex complex9 = complex2.ONE.add(1624.9222);
      double double0 = complex4.getArgument();
      Complex complex10 = complex2.sqrt1z();
      double double1 = complex10.NaN.getArgument();
      Complex complex11 = complex0.pow(complex3);
      Complex complex12 = complex11.I.exp();
      Complex complex13 = complex3.cos();
      Complex complex14 = complex13.atan();
      Complex complex15 = Complex.valueOf((-3384.6877));
      Complex complex16 = complex3.multiply(complex4);
      Complex complex17 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3837.15520934375));
      Complex complex1 = complex0.add((-3837.15520934375));
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex0.INF.add(1106.840927);
      double double0 = complex0.getArgument();
      double double1 = complex1.getReal();
      Complex complex5 = complex3.add(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add((-1.0));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.multiply((-1105));
      Complex complex7 = complex1.tan();
      Complex complex8 = complex5.tan();
      Complex complex9 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1441.7259551860611), 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.acos();
      Object object0 = complex2.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.multiply(complex0);
      double double0 = complex1.abs();
      Complex complex3 = complex1.multiply(complex0);
      Object object0 = complex3.ONE.readResolve();
      Object object1 = complex3.ZERO.readResolve();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.subtract(Double.NaN);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex4.negate();
      int int0 = 0;
      try { 
        complex7.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(1986.7193, 1986.7193);
      Complex complex1 = complex0.cosh();
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex5.pow(1986.7193);
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex4.ZERO.pow(complex0);
      Complex complex10 = complex1.negate();
      double double1 = complex10.abs();
      Complex complex11 = complex8.multiply(1986.7193);
      Complex complex12 = complex11.divide(1986.7193);
      Complex complex13 = complex4.createComplex(1510.725438529, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex2.getField();
      Complex complex14 = complex4.multiply((-4080));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.I.multiply((-2021));
      Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex5 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-449.92748), (-449.92748));
      Complex complex1 = complex0.INF.multiply((-449.92748));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.INF.add(complex1);
      String string0 = complex2.NaN.toString();
      double double0 = complex0.abs();
      Complex complex4 = complex2.divide((-1678.0643));
      Complex complex5 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-354.7), (-2846.729174));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ONE.asin();
      boolean boolean0 = complex2.isNaN();
      Complex complex6 = complex2.I.divide(complex4);
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex2.NaN.sqrt1z();
      Complex complex9 = complex2.multiply(4883.45);
      String string0 = complex5.toString();
      Complex complex10 = complex0.sin();
      String string1 = complex2.toString();
      Complex complex11 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.createComplex(2479.1107003, Double.NaN);
      Object object0 = complex1.readResolve();
      Complex complex2 = complex0.NaN.acos();
      double double0 = complex2.ZERO.abs();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex3.INF.divide(2479.1107003);
      Complex complex5 = complex3.I.add(complex2);
      List<Complex> list0 = complex5.INF.nthRoot(17);
      Complex complex6 = complex3.ZERO.pow(complex0);
      Complex complex7 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.I.add(2592.8379589580054);
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex1.pow(2592.8379589580054);
      Complex complex3 = complex1.ONE.negate();
      double double0 = complex2.getArgument();
      double double1 = complex1.abs();
      Complex complex4 = complex0.ZERO.negate();
      Complex complex5 = complex4.NaN.exp();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.INF.multiply(1457);
      Complex complex7 = complex2.exp();
      Object object1 = complex7.readResolve();
      boolean boolean1 = complex5.equals(object1);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex3.pow(2592.838151796891);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      String string0 = complex1.toString();
      Complex complex3 = complex1.I.divide(6.283185307179586);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.createComplex(0.0, 510.6938);
      Complex complex6 = complex2.multiply(2.5641927558519502E-8);
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = Complex.valueOf(1.0);
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      int int0 = 0;
      Object object0 = complex1.I.readResolve();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-339.0));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.ONE.subtract((-8.893078799284047E-8));
      Complex complex4 = complex3.NaN.tan();
      double double0 = complex0.getImaginary();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex6.subtract((-339.0));
      Object object0 = complex7.ZERO.readResolve();
      double double1 = complex5.NaN.getArgument();
      Complex complex8 = complex6.divide((-339.0));
      List<Complex> list0 = complex6.ONE.nthRoot(464);
      Complex complex9 = complex1.subtract(complex4);
      Complex complex10 = complex4.cos();
      Complex complex11 = Complex.valueOf(Double.NaN, Double.NaN);
      double double2 = complex11.abs();
      Complex complex12 = complex1.subtract(complex4);
      Complex complex13 = complex12.I.add(complex9);
      Complex complex14 = complex6.tanh();
      Complex complex15 = Complex.valueOf(3506.4, (-339.0));
      Complex complex16 = complex15.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      ComplexField complexField0 = complex0.INF.getField();
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.multiply(complex0);
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex5.I.reciprocal();
      Complex complex8 = complex5.NaN.add(672.1);
      Complex complex9 = complex8.NaN.subtract(complex3);
      Complex complex10 = complex5.atan();
      Complex complex11 = complex8.acos();
      boolean boolean0 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.I.createComplex(2.0, 2.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex4 = complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.I.asin();
      Complex complex7 = complex1.subtract(7.130134251490065E-128);
      Complex complex8 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-1833.487269929), (-1259.09));
      Complex complex1 = complex0.acos();
      Object object0 = complex0.I.readResolve();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
      boolean boolean0 = complex2.isNaN();
      Object object1 = complex0.readResolve();
      boolean boolean1 = complex3.equals(object1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2674.04, 2674.04);
      Complex complex1 = complex0.reciprocal();
      String string0 = complex0.toString();
      Complex complex2 = complex0.createComplex(2674.04, 2674.04);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.pow(complex0);
      double double0 = complex0.getImaginary();
      boolean boolean0 = complex4.isNaN();
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex3.ONE.exp();
      Complex complex7 = complex0.ONE.multiply(1);
      Complex complex8 = complex7.I.tanh();
      boolean boolean0 = complex0.equals(complex4);
      Complex complex9 = complex4.NaN.conjugate();
      Complex complex10 = complex3.atan();
      boolean boolean1 = complex2.isNaN();
      Complex complex11 = complex4.sin();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-468.0));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.INF.tan();
      Complex complex5 = complex0.subtract((-48.21215832426279));
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex6.INF.tan();
      Object object0 = complex7.ONE.readResolve();
      Complex complex8 = complex1.I.negate();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = complex2.I.sin();
      Complex complex13 = complex12.I.pow(1101.3180249000122);
      Complex complex14 = complex11.NaN.subtract(complex2);
      Complex complex15 = complex11.cosh();
      Complex complex16 = Complex.valueOf(2334.5044);
      Complex complex17 = complex9.tan();
      Complex complex18 = complex16.atan();
      Complex complex19 = Complex.valueOf(2334.5044, Double.POSITIVE_INFINITY);
      Complex complex20 = complex19.reciprocal();
      try { 
        complex14.nthRoot((-580));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -580
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1671.1163827798487, 1671.1163827798487);
      Complex complex2 = complex1.ZERO.pow(1671.1163827798487);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = new Complex(1671.1163827798487, 1671.1163827798487);
      Complex complex6 = complex0.ONE.subtract(1671.1163827798487);
      Complex complex7 = complex0.INF.pow(complex5);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex7.equals(complex5);
      Complex complex8 = Complex.valueOf(0.0, 1671.1163827798487);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1269.91), 1837.1);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.divide(1837.1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex0.I.divide((-1269.91));
      Complex complex6 = complex3.acos();
      Complex complex7 = complex1.subtract((-1269.91));
      Complex complex8 = complex5.pow((-1269.91));
      Complex complex9 = complex7.multiply(338);
      Complex complex10 = complex4.add(complex6);
      List<Complex> list0 = complex9.nthRoot(338);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ZERO.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.add(0.2531573176383972);
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.multiply(complex1);
      String string0 = complex0.toString();
      Complex complex4 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf((-1051.3681647848928), (-1051.3681647848928));
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.ONE.divide(complex4);
      Complex complex6 = complex1.atan();
      Complex complex7 = complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.multiply((-1331));
      Complex complex2 = complex1.ZERO.createComplex(1857.6, 1857.6);
      Complex complex3 = complex2.INF.exp();
      double double0 = complex0.abs();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.subtract(complex7);
      Complex complex9 = Complex.I;
      Complex complex10 = complex4.multiply(complex9);
      Complex complex11 = complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex(0.6773988008499146, 0.6773988008499146);
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex1.I.negate();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = Complex.valueOf((-881.9366396453138), 0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1845.014236902246);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.pow(0.0);
      double double0 = complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(0.12814581394195557);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(848.978858773346);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sqrt();
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1457.1028688);
      Complex complex1 = complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-1759.107536141599));
      double double0 = complex0.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1863.05359367));
      Complex complex1 = Complex.valueOf((-1863.05359367), (-1863.05359367));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.acos();
      Object object0 = complex4.I.readResolve();
      Complex complex5 = complex2.I.add(complex0);
      double double0 = complex0.I.abs();
      Complex complex6 = complex5.createComplex((-1863.05359367), (-828.26));
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex3.ONE.acos();
      Complex complex9 = complex0.INF.tanh();
      String string0 = complex7.ONE.toString();
      Complex complex10 = complex1.pow(complex0);
      Complex complex11 = complex10.INF.multiply(643.463892);
      Complex complex12 = complex7.pow(complex0);
      Object object1 = complex2.readResolve();
      Complex complex13 = complex6.divide(complex12);
      Complex complex14 = complex1.tan();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex4.cos();
      Complex complex17 = complex16.INF.tanh();
      Complex complex18 = complex15.INF.exp();
      double double1 = complex16.getReal();
      Complex complex19 = complex10.conjugate();
      Complex complex20 = complex10.cosh();
      Complex complex21 = complex13.divide(0.0);
      boolean boolean0 = complex15.equals(complex9);
      Complex complex22 = complex1.divide(complex19);
      try { 
        complex3.nthRoot((-315));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -315
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2895.928368026388);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.ONE.subtract(2895.928368026388);
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex2.I.divide(complex1);
      Complex complex7 = complex0.divide(2895.928368026388);
      Complex complex8 = complex7.NaN.sqrt1z();
      Complex complex9 = complex3.ZERO.conjugate();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = complex3.reciprocal();
      boolean boolean0 = complex6.equals(complex0);
      Complex complex12 = complex6.subtract(complex7);
      int int0 = complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1986.7193, 1986.7193);
      Complex complex1 = complex0.cosh();
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.pow(1986.7193);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex3.ZERO.pow(complex0);
      Complex complex8 = complex7.NaN.subtract(1986.7193);
      Complex complex9 = complex1.negate();
      double double1 = complex9.abs();
      Complex complex10 = complex0.multiply(1986.7193);
      Complex complex11 = complex10.divide(1986.7193);
      Complex complex12 = complex1.createComplex(1510.725438529, Double.POSITIVE_INFINITY);
      ComplexField complexField0 = complex2.getField();
      Complex complex13 = complex3.multiply((-4080));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      try { 
        complex0.ONE.nthRoot((-498));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -498
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      Complex complex1 = complex0.add((-3208.827186));
      Complex complex2 = Complex.valueOf((-3208.827186), (-3208.827186));
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex2.tan();
      List<Complex> list0 = complex2.ONE.nthRoot(2456);
      Complex complex5 = complex0.ONE.conjugate();
      Complex complex6 = complex5.ZERO.acos();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex0.createComplex(Double.NaN, 2.0);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex1.subtract(complex7);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex3.sinh();
      String string0 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(528.029285, 528.029285);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.7853981633974483, 528.029285);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = Complex.valueOf(0.7853981633974483);
      boolean boolean0 = complex2.isInfinite();
      Object object0 = complex5.readResolve();
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex6.ZERO.subtract(6.283185307179586);
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex2.multiply((-1));
      boolean boolean1 = complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-65.3858279315));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.add((-65.3858279315));
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-742.552));
      Complex complex1 = complex0.INF.createComplex((-742.552), 1120.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.INF.subtract((-727.5785979747856));
      Complex complex5 = complex2.subtract((-381.594909));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1824.571);
      Complex complex1 = complex0.NaN.multiply(1977.15409305542);
      Complex complex2 = complex1.I.add((-20.0));
      Complex complex3 = complex2.ONE.pow(1977.15409305542);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.ONE.add(1977.15409305542);
      Complex complex6 = complex5.I.sqrt1z();
      String string0 = complex6.toString();
      Complex complex7 = complex0.pow(1.687819480895996);
      Complex complex8 = complex7.negate();
      List<Complex> list0 = complex0.nthRoot(215);
      Complex complex9 = complex5.pow(complex0);
      String string1 = complex9.toString();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.sinh();
      Complex complex12 = complex11.subtract((double) 215);
      Complex complex13 = complex12.INF.subtract((double) 215);
      Complex complex14 = complex12.ONE.multiply((-2104));
      Complex complex15 = complex12.multiply(1824.571);
      Complex complex16 = complex9.sinh();
      Complex complex17 = complex16.I.sin();
      boolean boolean0 = complex10.equals("(Infinity, NaN)");
      Complex complex18 = complex1.cosh();
      Complex complex19 = complex18.createComplex(2535.24292, (-20.0));
      Complex complex20 = complex18.ONE.createComplex(0.0, 3750.9135);
      Complex complex21 = complex19.cosh();
      ComplexField complexField0 = complex5.getField();
      Complex complex22 = complex10.tanh();
      Complex complex23 = complex21.sqrt1z();
      Complex complex24 = complex23.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(574.9638241962);
      double double0 = 2536.903227477362;
      Complex complex1 = complex0.INF.createComplex(0.0, 2536.903227477362);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.negate();
      double double1 = 2.0;
      Complex complex4 = complex3.NaN.multiply(2.0);
      Complex complex5 = complex2.ONE.multiply(2536.903227477362);
      Complex complex6 = complex5.INF.conjugate();
      try { 
        complex4.I.nthRoot((-533));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -533
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex0.tan();
      int int0 = complex0.hashCode();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.ONE.subtract(complex2);
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex0.I.log();
      double double0 = complex2.getArgument();
      Complex complex10 = complex5.add(complex6);
      Complex complex11 = complex6.subtract(0.0);
      Complex complex12 = complex5.add(complex0);
      double double1 = complex12.abs();
      Object object1 = complex6.readResolve();
      Complex complex13 = complex12.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = Complex.valueOf((-103.0));
      Complex complex6 = complex0.I.multiply(1507);
      double double0 = complex6.I.getArgument();
      Complex complex7 = complex2.subtract(0.4752389192581177);
      Object object0 = complex2.readResolve();
      Complex complex8 = complex0.reciprocal();
      int int0 = complex7.hashCode();
      Complex complex9 = complex6.multiply(1507);
      Complex complex10 = complex2.divide((double) 1507);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(0.0, (-727.6378344013544));
      Complex complex2 = complex1.sin();
      ComplexField complexField0 = complex1.getField();
      Complex complex3 = Complex.valueOf((-5.188364552285819E-8), (-2144.386025533066));
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex2.multiply((-5.188364552285819E-8));
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex7.ONE.divide(complex1);
      Complex complex9 = complex7.ZERO.sin();
      List<Complex> list0 = complex0.nthRoot(382);
      int int0 = complex5.hashCode();
      int int1 = complex4.hashCode();
      Complex complex10 = complex2.add(complex9);
      int int2 = complex10.hashCode();
      Complex complex11 = complex7.divide((-5.188364552285819E-8));
      Complex complex12 = complex0.subtract(complex4);
      Complex complex13 = complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-892.200419145762), (-5.2744376732859406E250));
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex0.INF.multiply(255);
      double double0 = complex0.abs();
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex1.add(complex5);
      List<Complex> list0 = complex4.I.nthRoot(7);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex4.multiply(complex7);
      Complex complex9 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1314.37608);
      Complex complex1 = complex0.ZERO.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.sinh();
      Object object1 = complex1.ONE.readResolve();
      double double0 = complex0.getImaginary();
      double double1 = complex0.INF.getArgument();
      Complex complex3 = complex1.divide(0.0);
      ComplexField complexField0 = complex3.ONE.getField();
      Complex complex4 = complex3.ZERO.divide(1314.37608);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.INF.multiply(0.7853981633974483);
      Complex complex8 = complex5.INF.log();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.negate();
      Complex complex11 = complex3.asin();
      double double2 = complex11.getReal();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex12.multiply(complex2);
      Complex complex14 = complex4.tan();
  }
}
