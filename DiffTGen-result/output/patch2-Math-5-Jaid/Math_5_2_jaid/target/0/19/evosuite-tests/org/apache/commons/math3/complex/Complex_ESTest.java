/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:06:26 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.pow(1.408559707497606E293);
      double double0 = complex2.getReal();
      Complex complex4 = Complex.valueOf(0.0, (-280.4333459862));
      Complex complex5 = complex4.ZERO.createComplex(0.0, 736.377334280339);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex5.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-2043.99546679);
      Complex complex0 = Complex.valueOf((-2043.99546679));
      try { 
        complex0.I.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.multiply(1568.381);
      Complex complex3 = complex0.I.divide(complex1);
      Complex complex4 = complex3.INF.createComplex(293.0833, 5.783203879030497E289);
      Complex complex5 = complex4.ZERO.add(Double.NaN);
      double double0 = complex0.I.getArgument();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.I.createComplex(1250.363719, 1250.363719);
      Complex complex10 = complex9.ONE.cosh();
      Complex complex11 = complex7.multiply(268);
      Complex complex12 = complex11.cos();
      Complex complex13 = Complex.valueOf((double) 268, 0.0);
      Complex complex14 = complex10.acos();
      int int0 = complex5.hashCode();
      Complex complex15 = complex14.add(complex6);
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex3.atan();
      ComplexField complexField0 = complex17.getField();
      Complex complex18 = complex5.cos();
      Complex complex19 = complex8.createComplex(941.4585535, 1250.363719);
      Complex complex20 = complex0.multiply(268);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(9.760860120877624E-4, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.divide(0.0);
      Complex complex3 = complex2.sinh();
      double double0 = complex2.INF.getArgument();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.INF.reciprocal();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex4.I.add(complex0);
      Complex complex8 = complex1.subtract(complex0);
      Complex complex9 = complex4.I.reciprocal();
      Complex complex10 = complex7.I.divide(complex1);
      Complex complex11 = complex9.multiply(713.033705);
      Complex complex12 = complex4.acos();
      Object object0 = complex12.readResolve();
      Complex complex13 = complex4.ZERO.createComplex(20.0, 20.0);
      Complex complex14 = complex7.pow(complex12);
      Complex complex15 = complex14.ZERO.subtract(9.760860120877624E-4);
      Complex complex16 = complex9.atan();
      Complex complex17 = complex1.sqrt1z();
      Complex complex18 = complex0.sinh();
      Complex complex19 = complex0.tan();
      Complex complex20 = complex18.sin();
      Complex complex21 = complex20.NaN.asin();
      Complex complex22 = complex21.ONE.exp();
      Complex complex23 = complex21.NaN.negate();
      Complex complex24 = complex3.log();
      Complex complex25 = complex7.INF.pow(complex15);
      boolean boolean0 = complex9.isNaN();
      double double1 = complex14.getImaginary();
      Complex complex26 = complex13.sqrt();
      double double2 = complex16.abs();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(2991.230667402183);
      Complex complex1 = complex0.ONE.divide(2991.230667402183);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.NaN.asin();
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex1.ONE.subtract(complex2);
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = Complex.valueOf((-1.5343120819745468E95));
      Complex complex7 = complex0.ZERO.acos();
      Complex complex8 = complex1.ONE.asin();
      Complex complex9 = complex1.ONE.sinh();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex3.multiply(0);
      int int0 = complex11.NaN.hashCode();
      Complex complex12 = complex0.tanh();
      Complex complex13 = complex7.multiply((-1964));
      Complex complex14 = complex1.acos();
      Complex complex15 = complex8.multiply(complex9);
      Complex complex16 = complex7.sqrt1z();
      String string0 = complex3.toString();
      Complex complex17 = Complex.valueOf(2991.230667402183, 6.47023467943241E-26);
      Complex complex18 = complex3.sin();
      Complex complex19 = complex6.asin();
      Complex complex20 = complex15.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      double double1 = complex1.NaN.abs();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.I.exp();
      Complex complex8 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.I.negate();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex10.ONE.reciprocal();
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = Complex.valueOf(6.283185307179586, Double.NaN);
      Complex complex14 = complex12.pow(complex13);
      Complex complex15 = complex14.ZERO.sqrt();
      Complex complex16 = complex8.asin();
      Complex complex17 = complex16.multiply(3.794385569450774E-9);
      Complex complex18 = complex3.acos();
      String string0 = complex1.toString();
      Complex complex19 = complex3.conjugate();
      Complex complex20 = complex9.pow(0.0);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.equals(object0);
      Complex complex21 = complex0.add(complex4);
      Complex complex22 = complex1.multiply(0);
      double double2 = complex3.getArgument();
      Complex complex23 = complex4.add(1.5144298076629639);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(294.00638);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      double double1 = complex0.I.abs();
      Complex complex1 = Complex.valueOf((-1954.102965208), (-189.0));
      double double2 = complex1.NaN.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex0.I.sinh();
      Complex complex7 = complex3.I.add(0.6043586730957031);
      double double3 = complex2.INF.getArgument();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex8 = complex2.acos();
      Complex complex9 = complex8.INF.asin();
      Complex complex10 = complex7.INF.add(Double.NaN);
      int int0 = complex2.hashCode();
      Complex complex11 = complex0.add(complex2);
      double double4 = complex3.NaN.abs();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex7.reciprocal();
      Complex complex14 = complex10.acos();
      Complex complex15 = complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(324.2, 324.2);
      Complex complex1 = complex0.subtract(324.2);
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(324.2);
      Complex complex4 = complex2.NaN.divide(complex1);
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.ZERO.divide((-2465.55));
      Complex complex7 = complex0.INF.sqrt();
      Complex complex8 = complex2.sin();
      List<Complex> list0 = complex3.I.nthRoot(2196);
      Complex complex9 = complex0.multiply(complex8);
      Complex complex10 = complex0.INF.add(complex2);
      Complex complex11 = complex7.INF.multiply(2196);
      Complex complex12 = complex1.INF.acos();
      Complex complex13 = complex2.ONE.tanh();
      Complex complex14 = complex9.multiply(2490);
      Complex complex15 = complex9.divide(0.0);
      Object object0 = complex3.readResolve();
      Complex complex16 = complex7.negate();
      Complex complex17 = complex10.divide((-735.0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.NaN.divide((-109.5836));
      Complex complex7 = complex4.ZERO.subtract(9.014612241310916E-9);
      Complex complex8 = complex4.INF.multiply(0.0);
      Complex complex9 = complex3.NaN.createComplex(0.0, (-0.1666666567325592));
      Complex complex10 = complex8.I.multiply((-2636));
      Complex complex11 = complex0.ONE.sin();
      boolean boolean0 = complex3.equals(complex0);
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Object object0 = complex12.readResolve();
      Complex complex13 = complex6.NaN.tan();
      Complex complex14 = complex0.cosh();
      Complex complex15 = complex4.atan();
      Complex complex16 = complex14.ZERO.multiply(complex1);
      boolean boolean1 = complex6.isNaN();
      Complex complex17 = complex12.I.log();
      int int0 = complex14.hashCode();
      Complex complex18 = complex3.atan();
      Complex complex19 = complex18.NaN.cosh();
      ComplexField complexField0 = complex5.getField();
      Complex complex20 = complex5.reciprocal();
      Complex complex21 = complex5.cos();
      Complex complex22 = complex12.sqrt();
      Complex complex23 = complex14.tanh();
      boolean boolean2 = complex13.isNaN();
      Complex complex24 = complex19.subtract(complex21);
      Complex complex25 = complex22.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1785.1822);
      double double0 = complex0.NaN.getArgument();
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(6.283185307179586, 1785.1822);
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex3.ONE.sinh();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex7.atan();
      int int0 = (-1315);
      try { 
        complex0.nthRoot((-1315));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,315
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-6.680679913078676E139), (-6.680679913078676E139));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.conjugate();
      double double0 = complex1.abs();
      double double1 = complex3.getArgument();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.I.subtract(0.0);
      Complex complex8 = complex3.INF.multiply((-1));
      Complex complex9 = complex1.pow(2.3400625068490396E-280);
      Complex complex10 = complex8.INF.subtract(0.0);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex0.multiply((-0.5113252103366475));
      boolean boolean0 = complex12.isInfinite();
      Complex complex13 = complex3.createComplex((-6.680679913078676E139), (-334.22));
      Complex complex14 = complex8.acos();
      Complex complex15 = complex6.I.tanh();
      Complex complex16 = complex14.tan();
      String string0 = complex12.I.toString();
      Complex complex17 = complex16.ONE.exp();
      Complex complex18 = complex6.pow(complex12);
      Complex complex19 = complex1.acos();
      Complex complex20 = complex19.NaN.divide(complex0);
      Complex complex21 = Complex.valueOf((-1324.486947), 2.3400625068490396E-280);
      Complex complex22 = complex0.asin();
      Complex complex23 = complex17.log();
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-612.0), (-3297.85370744071));
      Complex complex1 = Complex.valueOf((-1855.6517595187877));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex4.ZERO.sqrt1z();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex4.ZERO.cos();
      Complex complex9 = complex4.I.multiply(0);
      double double0 = complex4.getImaginary();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.NaN.tan();
      Complex complex12 = complex10.ONE.sinh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      boolean boolean1 = complex0.isNaN();
      Complex complex13 = complex10.add(complex6);
      double double1 = complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.I.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = complex0.NaN.hashCode();
      String string0 = complex0.toString();
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.INF.reciprocal();
      Object object0 = complex2.NaN.readResolve();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.atan();
      Complex complex7 = complex2.NaN.pow(complex3);
      Complex complex8 = complex6.NaN.add((double) (-1));
      Complex complex9 = complex0.asin();
      boolean boolean0 = complex2.isNaN();
      Complex complex10 = complex1.INF.sinh();
      Complex complex11 = complex2.subtract((double) (-1));
      Complex complex12 = complex2.cos();
      try { 
        complex0.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.createComplex(0.0, 0.0);
      List<Complex> list0 = complex1.NaN.nthRoot(312);
      Complex complex2 = complex0.INF.subtract((-5.67996159922899E-5));
      Complex complex3 = complex2.ONE.log();
      double double0 = complex0.abs();
      Complex complex4 = complex0.ONE.sqrt();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = Complex.valueOf(0.0, 2897.1);
      Complex complex7 = complex6.multiply((-5.67996159922899E-5));
      List<Complex> list1 = complex0.nthRoot(312);
      Complex complex8 = complex6.divide(complex0);
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.ZERO.conjugate();
      List<Complex> list2 = complex1.nthRoot(379);
      Complex complex11 = complex8.reciprocal();
      double double1 = complex6.getImaginary();
      Complex complex12 = complex5.conjugate();
      Complex complex13 = complex10.cosh();
      Complex complex14 = complex7.sin();
      Complex complex15 = complex9.divide(complex14);
      Complex complex16 = complex4.ZERO.divide(complex10);
      Complex complex17 = complex15.atan();
      Complex complex18 = Complex.I;
      Complex complex19 = complex11.add(complex18);
      Complex complex20 = complex4.subtract(0.0);
      Complex complex21 = complex8.atan();
      Complex complex22 = complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex0.multiply((-2686.8263));
      double double0 = complex2.getReal();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.INF.negate();
      Complex complex8 = complex5.createComplex(0.0, 1.5510089388648915E101);
      Complex complex9 = complex4.asin();
      Complex complex10 = complex9.NaN.multiply(complex3);
      Complex complex11 = complex9.INF.conjugate();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex4.acos();
      Complex complex14 = complex12.I.add(complex9);
      Complex complex15 = complex13.add(complex2);
      Complex complex16 = complex7.exp();
      int int0 = complex16.ONE.hashCode();
      boolean boolean0 = complex8.isNaN();
      Complex complex17 = complex1.ZERO.add(complex12);
      Complex complex18 = complex12.createComplex(1.5510089388648915E101, 1.5510089388648915E101);
      boolean boolean1 = complex8.isNaN();
      Complex complex19 = complex13.sqrt1z();
      Complex complex20 = complex2.ONE.add(complex19);
      Complex complex21 = complex19.INF.divide(complex14);
      Complex complex22 = complex19.ZERO.subtract(1.8214070796966553);
      Complex complex23 = complex19.ONE.exp();
      Complex complex24 = complex7.multiply(136);
      Complex complex25 = complex10.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-2.325147219074669E-10), (-2.325147219074669E-10));
      String string0 = complex0.INF.toString();
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      Object object2 = complex0.ZERO.readResolve();
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.tan();
      String string1 = complex0.toString();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.sqrt1z();
      Object object3 = complex3.ZERO.readResolve();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex2.sinh();
      double double0 = complex4.getImaginary();
      Complex complex6 = complex4.exp();
      try { 
        complex5.nthRoot((-2151));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,151
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.createComplex(1221.7102166, 1221.7102166);
      double double0 = complex2.getImaginary();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.add(complex2);
      int int0 = complex0.hashCode();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex2.multiply(1221.7102166);
      double double1 = complex4.getReal();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.createComplex(0.3374482989311218, 0.0);
      Complex complex9 = complex7.I.exp();
      boolean boolean0 = complex2.equals(complex7);
      boolean boolean1 = complex0.equals(complex5);
      Complex complex10 = complex5.log();
      Complex complex11 = complex6.add(complex10);
      boolean boolean2 = complex11.isNaN();
      Complex complex12 = complex11.INF.divide(Double.NaN);
      Complex complex13 = complex11.cosh();
      Complex complex14 = complex6.NaN.atan();
      Object object0 = complex0.readResolve();
      Complex complex15 = complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 131.564870188321);
      Complex complex1 = complex0.I.exp();
      String string0 = complex0.I.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.ZERO.negate();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex2.NaN.exp();
      String string1 = complex7.ZERO.toString();
      ComplexField complexField1 = complex3.I.getField();
      ComplexField complexField2 = complex3.I.getField();
      Complex complex8 = complex1.createComplex(0.0, 131.564870188321);
      Complex complex9 = complex8.divide(2708.38472506907);
      Complex complex10 = complex2.sinh();
      Complex complex11 = complex10.ZERO.sin();
      Complex complex12 = complex10.sqrt1z();
      Complex complex13 = complex7.ONE.sin();
      Complex complex14 = complex7.createComplex((-1984.0), 0.0);
      Complex complex15 = complex0.sqrt();
      Complex complex16 = complex14.atan();
      Complex complex17 = complex9.exp();
      double double0 = complex0.abs();
      Complex complex18 = complex13.atan();
      Complex complex19 = Complex.I;
      boolean boolean0 = complex1.equals(complex19);
      boolean boolean1 = complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3635.4160221861), (-3635.4160221861));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ZERO.acos();
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      String string0 = complex1.I.toString();
      Complex complex4 = complex0.cosh();
      double double0 = complex1.getArgument();
      Complex complex5 = complex3.NaN.pow(complex4);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex4.ZERO.log();
      Complex complex9 = complex3.INF.sqrt();
      Complex complex10 = complex8.INF.exp();
      Complex complex11 = Complex.valueOf(0.0, (-3635.4160221861));
      Object object0 = complex1.readResolve();
      boolean boolean0 = complex4.equals(complex11);
      double double1 = complex10.ONE.abs();
      Complex complex12 = complex8.NaN.conjugate();
      boolean boolean1 = complex7.equals("(0.0, 1.0)");
      Complex complex13 = complex3.multiply(complex10);
      double double2 = complex10.getArgument();
      Complex complex14 = complex10.createComplex(-0.0, 0.0);
      Complex complex15 = complex14.ONE.sqrt();
      String string1 = complex15.INF.toString();
      Complex complex16 = complex14.tan();
      try { 
        complex11.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-223.0846308122), (-223.0846308122));
      Complex complex1 = Complex.valueOf((-223.0846308122));
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.INF.multiply(945);
      double double0 = complex1.INF.abs();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.pow((-1083.0357));
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.ONE.createComplex(190.30421, 1985.5272);
      Complex complex7 = complex0.ONE.cosh();
      Complex complex8 = Complex.valueOf((-1083.0357));
      Object object0 = complex8.INF.readResolve();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.ONE.nthRoot(850);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.createComplex(850, 0.0);
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.INF.divide((double) 850);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex5.pow(complex1);
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = complex5.divide(complex10);
      Complex complex12 = complex6.subtract((-130.651062));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      String string0 = complex3.NaN.toString();
      Complex complex4 = complex0.log();
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex1.INF.reciprocal();
      Complex complex7 = complex4.I.divide(complex5);
      Complex complex8 = complex1.ONE.reciprocal();
      Complex complex9 = complex1.divide(complex4);
      Complex complex10 = complex8.NaN.multiply(221);
      Complex complex11 = complex1.asin();
      Complex complex12 = complex8.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-798.0));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.valueOf((-2249.52), 0.0842406153678894);
      Complex complex5 = complex1.multiply((-798.0));
      Complex complex6 = complex3.subtract((-798.0));
      Object object0 = complex0.readResolve();
      Complex complex7 = complex6.log();
      Object object1 = complex7.readResolve();
      int int0 = complex6.hashCode();
      Complex complex8 = complex0.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(8.985825281444118E-37, 0.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = Complex.valueOf(8.985825281444118E-37, 8.985825281444118E-37);
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex3.cos();
      boolean boolean0 = complex3.equals("empty polynomials coefficients array");
      Object object0 = complex5.readResolve();
      Complex complex6 = complex1.ZERO.divide(complex3);
      Complex complex7 = complex6.ZERO.conjugate();
      int int0 = complex2.hashCode();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex3.log();
      double double0 = complex9.ZERO.abs();
      Complex complex10 = complex8.subtract(complex5);
      double double1 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2317.7690230932), (-552.3));
      Complex complex2 = complex1.I.createComplex((-552.3), (-2317.7690230932));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.createComplex(483.7723, 0.0);
      Complex complex7 = complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(824.31);
      Complex complex1 = Complex.valueOf(824.31, 824.31);
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.NaN.multiply(134);
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.NaN.cosh();
      double double0 = complex0.abs();
      Complex complex7 = complex5.multiply(824.31);
      double double1 = complex7.INF.abs();
      Complex complex8 = complex7.NaN.acos();
      Complex complex9 = complex6.ONE.multiply(824.31);
      Complex complex10 = complex0.negate();
      double double2 = complex6.getReal();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-689.000462));
      Complex complex1 = complex0.cos();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.cosh();
      double double0 = complex3.ONE.getArgument();
      Complex complex4 = complex0.INF.subtract(complex2);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex3.INF.conjugate();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex7 = complex3.log();
      Complex complex8 = complex3.I.negate();
      boolean boolean1 = complex7.equals(complex3);
      Complex complex9 = complex3.ZERO.multiply((-1451));
      Complex complex10 = complex9.INF.add(3.848544860465368E-8);
      double double1 = complex2.getImaginary();
      Complex complex11 = complex2.multiply(complex3);
      Complex complex12 = complex11.add(complex9);
      Object object0 = complex2.readResolve();
      Complex complex13 = complex1.atan();
      Complex complex14 = complex1.multiply(complex9);
      boolean boolean2 = complex4.isInfinite();
      Object object1 = complex0.readResolve();
      Complex complex15 = complex7.log();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-175.1554363114447), 0.0);
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.ZERO.subtract(3871.928);
      Complex complex4 = Complex.valueOf(8.989677431456647E-8);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6926587820053101, 0.6926587820053101);
      Complex complex1 = complex0.I.sqrt();
      double double0 = complex1.ONE.getArgument();
      double double1 = complex0.INF.abs();
      Complex complex2 = complex0.ZERO.divide(0.6926587820053101);
      Complex complex3 = complex2.INF.pow(complex0);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex2.ONE.tan();
      Complex complex5 = complex0.add(0.6926587820053101);
      double double2 = complex0.getArgument();
      Complex complex6 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex6.I.log();
      Complex complex9 = complex7.ZERO.pow(0.0);
      Complex complex10 = complex7.I.sqrt();
      Complex complex11 = complex5.divide(complex0);
      boolean boolean0 = complex8.equals(complexField0);
      Object object0 = new Object();
      boolean boolean1 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(490.938297, 2233.6743659260746);
      Complex complex1 = complex0.I.cosh();
      int int0 = complex1.ZERO.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.createComplex(490.938297, 959.689151897015);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.INF.divide(complex0);
      Complex complex5 = complex3.NaN.multiply(1027);
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex0.multiply(complex6);
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex6.acos();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 2024.00065996496;
      double double1 = 0.0;
      Complex complex0 = new Complex(2024.00065996496, 0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), Double.NaN);
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.NaN.multiply((-859));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.ONE.createComplex(20.0, 1437.547421);
      Complex complex5 = complex4.I.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.INF.multiply(0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex2.I.divide(complex1);
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf((double) 0, (double) 0);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex5.add(complex7);
      Complex complex9 = complex8.divide(1.0);
      Complex complex10 = complex2.divide(1124.67856);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-623.1508962453323));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.I.multiply(0.0);
      ComplexField complexField0 = complex2.ONE.getField();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-909.18296845), (-909.18296845));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = Complex.valueOf((-909.18296845));
      Complex complex3 = complex0.I.add(complex2);
      boolean boolean0 = complex0.isNaN();
      int int0 = complex2.hashCode();
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex6.NaN.cos();
      Complex complex8 = complex7.ONE.cos();
      double double0 = complex3.abs();
      Complex complex9 = complex1.sin();
      Complex complex10 = complex1.multiply(1170.1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(1.356201171875, 1.356201171875);
      Complex complex1 = complex0.sin();
      double double0 = complex0.getArgument();
      int int0 = complex0.ONE.hashCode();
      Complex complex2 = complex0.createComplex((-1424.405427), 3363.781900049384);
      double double1 = complex1.abs();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.createComplex((-1424.405427), 2444.72789213943);
      Complex complex5 = complex3.ZERO.add(244.26511080859316);
      ComplexField complexField0 = complex2.getField();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      Complex complex3 = complex2.ONE.pow((-2629.8577677097));
      Complex complex4 = complex0.multiply((-3515));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.subtract((double) (-3515));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = complex1.createComplex(1482.5040720881723, 1482.5040720881723);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      boolean boolean0 = complex0.isNaN();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-2767.70285513));
      Complex complex1 = complex0.INF.multiply(1137);
      Complex complex2 = Complex.valueOf(1.0, (-2767.70285513));
      int int0 = complex0.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.divide(2.0582268590356215E-7);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex2.reciprocal();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1424.91), (-1424.91));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(2.0);
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex1.sqrt();
      int int0 = complex1.hashCode();
      Complex complex6 = complex1.subtract((-1424.91));
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.NaN.sqrt1z();
      boolean boolean0 = complex3.equals(complex5);
      Complex complex9 = complex3.negate();
      List<Complex> list0 = complex9.nthRoot(1536);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.I.tan();
      List<Complex> list0 = complex1.ZERO.nthRoot(17);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex complex6 = complex4.ONE.divide(complex1);
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex3.multiply(604);
      Object object0 = complex3.readResolve();
      Complex complex10 = complex9.pow(complex2);
      Complex complex11 = complex9.pow((-263.639348579));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 0.0);
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.ONE.divide((-934.0439));
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.NaN.conjugate();
      Complex complex5 = complex0.NaN.pow(0.0);
      Complex complex6 = complex3.I.add(0.0);
      Complex complex7 = complex0.multiply(17);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex7.I.pow(complex0);
      Complex complex10 = complex0.add(complex7);
      Complex complex11 = complex7.I.multiply(1);
      boolean boolean0 = complex1.isNaN();
      Complex complex12 = complex7.log();
      int int0 = complex4.hashCode();
      Complex complex13 = complex2.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.divide((-1.0));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = Complex.valueOf((-1.0));
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex0.INF.sqrt();
      Complex complex7 = complex0.pow(52.5855475627);
      Object object0 = complex4.readResolve();
      Complex complex8 = complex5.sqrt1z();
      String string0 = complex7.toString();
      Complex complex9 = complex5.multiply(complex0);
      Complex complex10 = Complex.valueOf(750.72291046, 750.72291046);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1516.7), 1366.647775);
      double double0 = complex0.I.getArgument();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.abs();
      Complex complex1 = Complex.valueOf(1.5707963267948966, 0.0);
      double double2 = complex1.ZERO.abs();
      Object object0 = complex0.readResolve();
      String string0 = complex1.I.toString();
      Complex complex2 = complex1.subtract(127.056);
      Complex complex3 = complex0.pow(5.462874707256208E-270);
      double double3 = complex2.INF.abs();
      boolean boolean0 = complex1.isNaN();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.add(1845.38);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = complex3.negate();
      ComplexField complexField0 = complex4.INF.getField();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.ZERO.tanh();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.INF.getArgument();
      Complex complex7 = complex1.createComplex(0.0, 0.0);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.NaN.multiply(complex2);
      Complex complex10 = complex9.ONE.sqrt1z();
      double double1 = complex0.ONE.getArgument();
      Complex complex11 = complex7.ZERO.asin();
      double double2 = complex7.getArgument();
      double double3 = complex7.getReal();
      try { 
        complex0.nthRoot((-285));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -285
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.INF.createComplex(1363.2, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.tan();
      double double0 = complex4.ONE.abs();
      String string0 = complex0.ONE.toString();
      Complex complex5 = complex0.sin();
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex7.I.createComplex((-1599.234804), (-1599.234804));
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex4.atan();
      Complex complex12 = complex11.tan();
      boolean boolean0 = complex7.equals("(1.0, 0.0)");
      Complex complex13 = complex1.divide(201.1358);
      Complex complex14 = complex4.sin();
      int int0 = complex14.I.hashCode();
      Complex complex15 = complex8.divide((-1599.234804));
      ComplexField complexField0 = complex1.getField();
      double double1 = complex11.abs();
      double double2 = complex5.getArgument();
      double double3 = complex15.getReal();
      try { 
        complex8.nthRoot((-1451));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,451
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(299.415506077768);
      Complex complex1 = Complex.valueOf(4.116164446561962E-8, (-20.0));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.add(1414.1113);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-3596.965993984), (-3596.965993984));
      String string0 = complex0.toString();
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = (-1180.64457);
      Complex complex0 = Complex.valueOf((-1180.64457), (-1180.64457));
      Complex complex1 = complex0.I.divide(2957.01369241);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex0.NaN.cosh();
      try { 
        complex2.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.pow(1.408559707497606E293);
      double double0 = complex0.getReal();
      Complex complex4 = Complex.valueOf(0.0, (-280.4333459862));
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      double double0 = complex0.ZERO.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.add(0.0);
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex0.subtract(0.0688626617193222);
      Complex complex6 = complex5.INF.pow(1484.661);
      Complex complex7 = complex6.divide(complex0);
      int int0 = complex6.ZERO.hashCode();
      double double1 = complex0.getImaginary();
      double double2 = complex0.INF.getArgument();
      double double3 = complex5.getReal();
      Complex complex8 = complex6.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex10 = complex0.NaN.subtract(complex8);
      Complex complex11 = complex6.createComplex((-284.28019865), Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.ONE.divide(821.215474);
      boolean boolean0 = complex0.isNaN();
      Complex complex13 = complex9.cos();
      Complex complex14 = complex3.tanh();
      Complex complex15 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex1.INF.add(2986.766209475552);
      Complex complex3 = complex1.NaN.conjugate();
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.NaN.getArgument();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract((-356.50113813163));
      Complex complex2 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2094.328898270969));
      Complex complex2 = complex0.ZERO.atan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.multiply(2904.0);
      Complex complex5 = complex0.log();
      Complex complex6 = complex0.ONE.sin();
      Complex complex7 = complex6.NaN.atan();
      double double0 = complex5.getImaginary();
      Complex complex8 = complex4.multiply(1535);
      Complex complex9 = complex2.multiply(1);
      Complex complex10 = complex8.I.sin();
      Complex complex11 = complex10.INF.divide(0.7853981633974483);
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.subtract(complex10);
      Complex complex14 = complex10.NaN.divide(complex12);
      Complex complex15 = complex5.sqrt();
      Complex complex16 = complex5.cosh();
      Complex complex17 = complex8.atan();
      Complex complex18 = complex6.cosh();
      int int0 = complex18.ZERO.hashCode();
      int int1 = complex5.hashCode();
      Complex complex19 = Complex.ZERO;
      ComplexField complexField0 = complex19.NaN.getField();
      Complex complex20 = complex8.I.sqrt1z();
      Complex complex21 = complex8.multiply(complex19);
      Complex complex22 = complex2.pow(complex5);
      Complex complex23 = complex22.I.cosh();
      Complex complex24 = complex17.sinh();
      Complex complex25 = complex8.log();
      Complex complex26 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-955.02548852));
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.negate();
      double double0 = complex0.getReal();
      try { 
        complex0.nthRoot((-1774));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,774
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply((-3149.31815161));
      Complex complex2 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2482.35), (-2482.35));
      Complex complex1 = complex0.ZERO.multiply((-2482.35));
      double double0 = complex0.getReal();
      double double1 = complex1.abs();
      Complex complex2 = complex1.divide(complex0);
      double double2 = complex1.getArgument();
      Complex complex3 = complex2.conjugate();
      boolean boolean0 = complex3.isNaN();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.pow((-3.141592653589793));
      boolean boolean1 = complex0.isInfinite();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.ONE.add(0.0);
      int int0 = complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(36.50142854);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.add((-20.0));
      Complex complex3 = complex1.divide(6229.5769);
      Complex complex4 = complex1.multiply(6229.5769);
      Complex complex5 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.divide((-1.0));
      Complex complex4 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-3420.591), (-3420.591));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.log();
      String string0 = complex0.toString();
      Complex complex3 = Complex.valueOf((-3420.591));
      Complex complex4 = complex0.ZERO.tanh();
      double double0 = complex4.NaN.abs();
      double double1 = complex1.getImaginary();
      Complex complex5 = complex1.subtract((-2008.9125404882893));
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(4626.7);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.subtract(complex0);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.I.pow(3223.6);
      Complex complex3 = new Complex((-1141.16097918014), (-2700.0830610102958));
      boolean boolean0 = complex0.equals(complex3);
      Complex complex4 = new Complex((-2700.0830610102958), (-2700.0830610102958));
      boolean boolean1 = complex3.equals(complex4);
      boolean boolean2 = complex3.isNaN();
      Complex complex5 = complex3.pow(complex0);
      boolean boolean3 = complex3.isInfinite();
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex4.NaN.pow(complex6);
      Complex complex8 = complex0.INF.tanh();
      ComplexField complexField0 = complex6.getField();
      Complex complex9 = complex6.subtract(complex3);
      int int0 = complex4.hashCode();
      Complex complex10 = complex0.negate();
      double double0 = complex5.abs();
      Complex complex11 = complex9.asin();
      Complex complex12 = complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-874.9));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex0.I.atan();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-724.6245316129));
      Complex complex1 = complex0.pow((-1.0));
      Object object0 = complex0.INF.readResolve();
      String string0 = complex1.ZERO.toString();
      List<Complex> list0 = complex0.nthRoot(2305);
      Complex complex2 = complex0.pow(complex1);
      List<Complex> list1 = complex2.INF.nthRoot(2305);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.tan();
      boolean boolean0 = complex2.isInfinite();
      Complex complex5 = Complex.valueOf((double) 2305, 1115.0245);
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = Complex.valueOf(1.6455042362213135);
      Complex complex5 = complex0.add(complex4);
      double double0 = complex5.INF.abs();
      Complex complex6 = complex3.cosh();
      double double1 = complex6.abs();
      Complex complex7 = complex0.ONE.multiply((-1.0));
      Complex complex8 = complex1.add(6.283185307179586);
      Complex complex9 = complex2.multiply(6.283185307179586);
      Complex complex10 = complex7.tan();
      Complex complex11 = complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.2479464696643861E-47);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add((-2521.0));
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex2.negate();
      boolean boolean0 = complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide((-2272.52));
      Complex complex3 = complex1.acos();
      Complex complex4 = complex1.I.exp();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex5 = complex3.ZERO.divide(0.0);
      Complex complex6 = complex1.NaN.divide(0.0);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = complex3.add(0.0);
      Complex complex11 = complex2.multiply((-1155));
      Complex complex12 = complex6.multiply((-1155));
      Complex complex13 = complex1.cos();
      ComplexField complexField0 = complex13.INF.getField();
      Complex complex14 = complex12.asin();
      Complex complex15 = complex1.sqrt1z();
      Complex complex16 = complex15.ONE.multiply(complex4);
      Complex complex17 = complex12.INF.negate();
      Complex complex18 = complex1.add(0.0);
      Complex complex19 = complex12.cos();
      try { 
        complex18.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(2454.961303534);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add((-2521.0));
      Complex complex3 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.sqrt1z();
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(1452.85135);
      Complex complex2 = complex1.I.asin();
      List<Complex> list0 = complex0.nthRoot(2777);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(2459.963769, 2459.963769);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply((-1963));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2791.8823532203));
      Complex complex1 = complex0.createComplex((-2791.8823532203), (-2791.8823532203));
      Complex complex2 = complex0.multiply(0);
      String string0 = complex1.toString();
      double double0 = complex1.ONE.abs();
      double double1 = complex1.getReal();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex0.add(complex1);
      double double2 = complex3.getArgument();
      double double3 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      Complex complex1 = new Complex(0.0);
      double double1 = complex1.I.abs();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = new Complex(1.0, 0.1229778528213501);
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex0.ONE.createComplex(1.0, (-420.0));
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex6.divide(4091.660512299);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.532172996647129E-8), (-4.532172996647129E-8));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.ZERO.subtract((-4.532172996647129E-8));
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex4 = complex0.exp();
      ComplexField complexField1 = complex4.ONE.getField();
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex0.subtract(6.753452542942992E-9);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.ZERO.multiply((-1204));
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.divide(0.0);
      Complex complex3 = complex2.ONE.tan();
      String string0 = complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(2454.5);
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.NaN);
      ComplexField complexField0 = complex0.getField();
      String string0 = complex0.NaN.toString();
      double double0 = complex0.ZERO.getArgument();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.sqrt();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex2.INF.divide(1.975188970565796);
      Complex complex5 = complex1.acos();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex4.createComplex(1.975188970565796, 1.975188970565796);
      Complex complex7 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.sin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex1.INF.cos();
      Complex complex6 = complex2.pow((-3480.15897123));
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2582.08);
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.atan();
      ComplexField complexField0 = complex0.I.getField();
      try { 
        complex0.INF.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(294.561612922119);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add(1650.9025);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex3 = complex2.subtract(3.4674011002723395);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0, (-1788.8));
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.ONE.pow(complex1);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex5.I.sinh();
      Complex complex9 = complex7.ONE.multiply((-2102.39479));
      ComplexField complexField0 = complex9.ZERO.getField();
      Complex complex10 = complex9.ONE.multiply(complex5);
      Complex complex11 = complex10.I.add(complex2);
      Complex complex12 = complex7.asin();
      boolean boolean0 = complex5.isInfinite();
      Complex complex13 = complex0.tanh();
      Complex complex14 = complex6.subtract(0.0);
      Complex complex15 = complex7.subtract(complex5);
      Object object0 = complex15.INF.readResolve();
      Complex complex16 = complex4.sqrt1z();
      Complex complex17 = complex13.createComplex((-2102.39479), (-1806.8220888));
      Complex complex18 = complex13.divide(complex0);
      Complex complex19 = Complex.NaN;
      Complex complex20 = complex17.multiply(complex19);
      Complex complex21 = complex20.ZERO.createComplex(0.0, (-1806.8220888));
      Complex complex22 = complex6.divide((-2102.39479));
      Complex complex23 = complex17.multiply(complex4);
      Complex complex24 = complex7.cosh();
      Complex complex25 = complex6.multiply(complex3);
      Complex complex26 = complex25.NaN.multiply((-2275));
      Complex complex27 = complex19.sin();
      Complex complex28 = complex5.conjugate();
      Complex complex29 = complex8.asin();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-1400.38862985));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.sin();
      double double0 = complex1.NaN.abs();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.pow(complex1);
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex6.exp();
      double double1 = complex4.INF.getArgument();
      Complex complex9 = complex7.log();
      Complex complex10 = complex9.I.subtract((-1400.38862985));
      double double2 = complex4.getArgument();
      Complex complex11 = complex5.conjugate();
      Complex complex12 = complex5.sqrt();
      boolean boolean0 = complex7.equals("");
      double double3 = complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-1.0114948914089626E-7));
      Complex complex4 = complex0.conjugate();
      List<Complex> list0 = complex0.nthRoot(767);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.sin();
      double double0 = complex1.ZERO.abs();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.add(0.0);
      Complex complex5 = complex3.ZERO.atan();
      List<Complex> list0 = complex3.NaN.nthRoot(7);
      Complex complex6 = complex1.subtract(0.0688626617193222);
      Complex complex7 = complex6.INF.pow(1484.661);
      Complex complex8 = complex7.divide(complex1);
      int int0 = complex7.ZERO.hashCode();
      double double1 = complex1.getImaginary();
      double double2 = complex1.INF.getArgument();
      double double3 = complex6.getReal();
      Complex complex9 = complex7.I.multiply(Double.NaN);
      Complex complex10 = complex0.sqrt1z();
      ComplexField complexField0 = complex0.getField();
      Complex complex11 = complex9.INF.divide((double) 7);
      Complex complex12 = complex1.NaN.subtract(complex9);
      Complex complex13 = complex7.createComplex((-284.28019865), Double.NaN);
      Complex complex14 = complex13.ONE.divide(821.215474);
      boolean boolean0 = complex1.isNaN();
      Complex complex15 = complex10.cos();
      Complex complex16 = complex4.tanh();
      Complex complex17 = complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1866.1, 1866.1);
      Complex complex1 = complex0.multiply((-582.79259));
      Complex complex2 = complex1.multiply(78);
      Complex complex3 = complex1.ONE.pow(0.0);
      double double0 = complex2.abs();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.ZERO.add(complex3);
      Complex complex10 = complex9.I.cosh();
      double double1 = complex7.NaN.getArgument();
      Complex complex11 = complex2.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex12 = complex3.divide(0.0);
      Complex complex13 = complex12.acos();
      Complex complex14 = complex3.multiply(1.1996609837226638E8);
      Complex complex15 = complex14.pow(complex13);
      double double2 = complex12.getArgument();
      Complex complex16 = complex6.ZERO.sinh();
      Complex complex17 = complex15.tan();
      String string0 = complex11.toString();
      int int0 = complex1.hashCode();
      int int1 = complex2.hashCode();
      Complex complex18 = complex15.add(0.0);
      Complex complex19 = complex1.tan();
      boolean boolean0 = complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.INF.multiply((-1984.90651));
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.sqrt();
      List<Complex> list0 = complex3.I.nthRoot(1760);
      Complex complex6 = Complex.valueOf((-4.588749093664028E-9), (double) 1760);
      Complex complex7 = complex0.I.add(complex3);
      Complex complex8 = complex5.I.tan();
      Complex complex9 = complex0.cos();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex0.sqrt1z();
      double double1 = complex3.abs();
      Complex complex12 = complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.ONE.toString();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex1.subtract(3335.1);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.createComplex((-694.29), 0.0);
      Complex complex9 = complex3.multiply(1.071796178817749);
      Complex complex10 = complex6.pow(complex0);
  }
}
