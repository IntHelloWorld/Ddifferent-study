/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:02:54 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.getReal();
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex0.NaN.nthRoot(792);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex3.ONE.cosh();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex0.I.add(Double.POSITIVE_INFINITY);
      double double1 = complex6.getArgument();
      Complex complex9 = complex5.I.multiply(complex4);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex11 = complex0.cosh();
      Complex complex12 = complex3.NaN.exp();
      Complex complex13 = complex5.multiply(792);
      Complex complex14 = complex13.NaN.sinh();
      Complex complex15 = Complex.valueOf(1.2940962314605713, 71.5163791);
      Complex complex16 = complex15.reciprocal();
      Complex complex17 = complex16.ZERO.cosh();
      Complex complex18 = complex6.sqrt();
      Complex complex19 = complex8.divide(0.0);
      List<Complex> list1 = complex0.nthRoot(792);
      Object object0 = complex2.readResolve();
      ComplexField complexField0 = complex1.getField();
      Complex complex20 = complex11.cos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.266381689434054E277, Double.POSITIVE_INFINITY);
      int int0 = complex0.I.hashCode();
      Complex complex1 = Complex.valueOf(5.266381689434054E277, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex4.I.asin();
      Complex complex8 = complex4.ZERO.createComplex(0.0, 0.0);
      Complex complex9 = complex1.negate();
      boolean boolean0 = complex7.isNaN();
      Complex complex10 = complex3.INF.tanh();
      Complex complex11 = Complex.valueOf(0.0, (-360.6952));
      Complex complex12 = complex10.NaN.sqrt1z();
      Complex complex13 = Complex.valueOf(0.10026945173740387);
      Complex complex14 = complex3.conjugate();
      Complex complex15 = complex14.NaN.tanh();
      Complex complex16 = complex9.multiply(complex4);
      double double0 = complex16.getImaginary();
      Complex complex17 = complex8.multiply(Double.NaN);
      Complex complex18 = Complex.valueOf(1695.281);
      Complex complex19 = Complex.valueOf(1695.281, Double.NaN);
      Complex complex20 = complex15.multiply(Double.NaN);
      ComplexField complexField0 = complex1.getField();
      Complex complex21 = complex20.tan();
      double double1 = complex4.getReal();
      Complex complex22 = complex21.tanh();
      ComplexField complexField1 = complex2.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex2.subtract(2.0);
      Complex complex5 = complex2.ZERO.acos();
      String string0 = complex5.NaN.toString();
      Complex complex6 = complex1.createComplex((-1.0269233640424235E-292), 2781.77);
      try { 
        complex2.I.nthRoot((-1726));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,726
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      double double0 = complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.log();
      String string0 = complex0.toString();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex0.INF.subtract(complex1);
      Object object0 = complex0.readResolve();
      Complex complex8 = complex3.INF.subtract((-1.0));
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.ONE.createComplex(0.0, (-1.0));
      Complex complex11 = complex8.NaN.createComplex(1.0, 0.0);
      Complex complex12 = complex1.sin();
      Complex complex13 = complex12.NaN.subtract(complex9);
      Complex complex14 = complex12.ONE.multiply(0);
      Complex complex15 = complex14.NaN.exp();
      Complex complex16 = complex14.I.reciprocal();
      String string1 = complex4.toString();
      Complex complex17 = complex8.log();
      Complex complex18 = complex3.sinh();
      Complex complex19 = complex5.divide(6.283185307179586);
      Complex complex20 = complex19.multiply((-657.7712));
      Complex complex21 = complex20.INF.pow(0.0);
      Complex complex22 = complex1.sqrt1z();
      Complex complex23 = complex17.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(218.2429362625996);
      Complex complex1 = Complex.I;
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex4.ZERO.divide(complex2);
      double double0 = complex4.INF.abs();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = complex4.exp();
      double double1 = complex9.ONE.getArgument();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.ONE.sqrt1z();
      Complex complex12 = complex4.ZERO.sin();
      Complex complex13 = complex9.ONE.tan();
      Complex complex14 = complex4.INF.subtract(complex10);
      Complex complex15 = complex4.acos();
      int int0 = complex15.I.hashCode();
      Complex complex16 = complex15.I.subtract(340.50653);
      Complex complex17 = complex16.ONE.log();
      Complex complex18 = complex16.pow(Double.POSITIVE_INFINITY);
      Complex complex19 = complex9.acos();
      Complex complex20 = complex19.NaN.sqrt1z();
      Complex complex21 = complex10.multiply(218.2429362625996);
      String string0 = complex15.toString();
      Complex complex22 = complex14.add(complex1);
      int int1 = complex12.hashCode();
      Complex complex23 = complex5.sqrt1z();
      Complex complex24 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.ONE.atan();
      Complex complex7 = complex0.ZERO.subtract((-3097.65));
      Complex complex8 = complex7.pow(Double.POSITIVE_INFINITY);
      double double0 = complex5.I.abs();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex2.NaN.createComplex(0.41421356237309515, (-3097.65));
      String string0 = complex5.toString();
      Complex complex11 = complex2.ONE.tanh();
      Complex complex12 = complex3.subtract(complex9);
      Complex complex13 = complex9.cosh();
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex0.subtract(complex13);
      Complex complex16 = complex9.multiply((-1119.10838));
      Complex complex17 = Complex.valueOf((-1668.6043757));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1612.0360868994721));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex2.NaN.pow(complex3);
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex2.NaN.atan();
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex1.ZERO.reciprocal();
      double double0 = complex8.NaN.getArgument();
      String string0 = complex8.ONE.toString();
      Complex complex9 = complex1.NaN.tanh();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex9.I.reciprocal();
      Complex complex12 = complex0.negate();
      Complex complex13 = complex12.INF.divide(complex0);
      Complex complex14 = complex1.multiply(complex0);
      Complex complex15 = complex1.multiply((-1612.0360868994721));
      Complex complex16 = complex15.INF.sinh();
      Complex complex17 = complex1.ZERO.exp();
      Complex complex18 = complex8.ONE.pow(complex4);
      Complex complex19 = complex17.I.cosh();
      Complex complex20 = complex19.I.cos();
      Complex complex21 = complex0.multiply(complex12);
      Complex complex22 = complex1.pow(complex21);
      Complex complex23 = complex22.NaN.asin();
      ComplexField complexField0 = complex3.I.getField();
      Complex complex24 = complex3.ZERO.acos();
      try { 
        complex1.nthRoot((-2061));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,061
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 5.266381689434054E277;
      Complex complex0 = new Complex(5.266381689434054E277);
      Complex complex1 = complex0.asin();
      try { 
        complex0.nthRoot((-3071));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,071
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.INF.multiply((-136.02954211780676));
      Complex complex3 = complex1.INF.atan();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.ONE.createComplex(Double.NaN, 2066.1532020703);
      Complex complex7 = complex4.ZERO.sqrt1z();
      Complex complex8 = complex7.ZERO.divide(1410.08);
      double double0 = complex4.getReal();
      Complex complex9 = complex1.divide(complex7);
      Complex complex10 = Complex.valueOf(Double.NaN);
      Complex complex11 = complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2319.357923077));
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.asin();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex4 = complex3.I.pow(737.68523228);
      Complex complex5 = complex2.NaN.reciprocal();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex0.I.sin();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = complex0.add(complex2);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex9.asin();
      Complex complex12 = complex11.multiply(complex3);
      Complex complex13 = complex0.multiply(complex1);
      Complex complex14 = complex13.ZERO.add(complex0);
      Complex complex15 = complex14.subtract(complex13);
      Complex complex16 = complex10.sinh();
      Complex complex17 = Complex.valueOf((-5.6), (-5.6));
      Complex complex18 = complex13.ZERO.subtract(complex7);
      double double0 = complex4.abs();
      Complex complex19 = complex16.tan();
      boolean boolean0 = complex4.equals(complex5);
      Complex complex20 = complex4.log();
      Complex complex21 = complex14.tanh();
      Complex complex22 = complex2.exp();
      Complex complex23 = complex19.cos();
      double double1 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(213.36912858775);
      Complex complex1 = complex0.I.multiply(654);
      Object object0 = complex1.readResolve();
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.ZERO.multiply(654);
      Complex complex7 = complex2.ZERO.subtract(complex0);
      double double1 = complex7.ONE.getArgument();
      Complex complex8 = complex4.INF.pow((-1191.385144267541));
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex1.sin();
      Complex complex11 = complex9.ONE.reciprocal();
      Complex complex12 = complex11.INF.sin();
      Complex complex13 = complex11.ZERO.divide(1.1844011798406507E244);
      Object object1 = complex1.readResolve();
      Complex complex14 = complex3.sinh();
      Complex complex15 = complex14.INF.tan();
      Complex complex16 = complex6.tan();
      Complex complex17 = complex6.pow(Double.NaN);
      boolean boolean0 = complex1.equals(complex14);
      Complex complex18 = complex4.createComplex(Double.NaN, 13.7);
      Complex complex19 = complex14.negate();
      Complex complex20 = complex8.pow(0.0);
      double double2 = complex20.getArgument();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-724.9803110094156), (-724.9803110094156));
      Complex complex1 = complex0.ONE.sin();
      double double0 = complex0.INF.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.reciprocal();
      int int0 = complex2.hashCode();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.pow((-20.0));
      Complex complex6 = complex4.NaN.cos();
      Complex complex7 = complex5.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = new Complex(20.0);
      boolean boolean0 = complex5.equals(complex9);
      Complex complex10 = complex4.acos();
      Complex complex11 = complex0.ONE.tan();
      Object object0 = complex0.readResolve();
      Complex complex12 = complex10.createComplex((-724.9803110094156), 20.0);
      Complex complex13 = complex1.add((-20.0));
      Complex complex14 = complex1.acos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.37371641397476196, 2052.15);
      Complex complex1 = complex0.INF.add(2052.15);
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.subtract(2052.15);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.NaN.negate();
      Complex complex5 = complex3.ZERO.divide(2525.5);
      Complex complex6 = complex0.atan();
      ComplexField complexField1 = complex6.NaN.getField();
      Complex complex7 = complex6.I.cosh();
      ComplexField complexField2 = complex6.INF.getField();
      Complex complex8 = complex0.I.conjugate();
      Complex complex9 = complex6.I.divide(20.0);
      Complex complex10 = complex8.INF.divide(complex4);
      Complex complex11 = complex0.cos();
      Complex complex12 = complex0.add(0.0);
      double double0 = complex1.getImaginary();
      Complex complex13 = complex6.NaN.sin();
      Complex complex14 = complex4.multiply(complex7);
      Complex complex15 = complex6.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(730.0, (-2712.08796964808));
      Complex complex1 = complex0.I.multiply((-2160.451069));
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.INF.acos();
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex0.createComplex(1484.5451118, 3192.0);
      double double0 = complex0.abs();
      double double1 = complex1.getImaginary();
      Complex complex6 = complex0.pow(730.0);
      Complex complex7 = complex0.multiply(0.0);
      double double2 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2725.92090858989, 2725.92090858989);
      Complex complex1 = complex0.ZERO.divide(2725.92090858989);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = Complex.valueOf(2725.92090858989);
      Complex complex4 = complex2.I.add(complex3);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.INF.multiply((-1661.0020673));
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex8.multiply(2725.92090858989);
      Complex complex10 = complex9.I.negate();
      double double0 = complex0.abs();
      Complex complex11 = complex5.exp();
      Complex complex12 = Complex.valueOf(3855.0343188842126, 3855.0343188842126);
      Complex complex13 = complex12.reciprocal();
      Complex complex14 = complex5.multiply((-67.846732580181));
      Complex complex15 = complex8.cosh();
      Complex complex16 = complex6.reciprocal();
      String string0 = complex16.ZERO.toString();
      Complex complex17 = complex5.log();
      Complex complex18 = complex17.ONE.sqrt();
      boolean boolean0 = complex2.equals(complex8);
      Complex complex19 = complex16.pow(2070.126);
      boolean boolean1 = complex10.equals(complex5);
      Complex complex20 = complex12.subtract(complex19);
      boolean boolean2 = complex10.isNaN();
      boolean boolean3 = complex5.equals("XU");
      Complex complex21 = complex13.sqrt1z();
      Complex complex22 = complex12.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2094.3564915765296);
      Complex complex2 = complex0.divide(2094.3564915765296);
      double double0 = complex1.ONE.abs();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1025.817481441842));
      Complex complex4 = complex3.NaN.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex5.INF.sinh();
      int int0 = complex3.NaN.hashCode();
      Complex complex7 = complex1.ONE.exp();
      Complex complex8 = complex3.I.log();
      Complex complex9 = complex0.add(complex3);
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex3.sqrt1z();
      Complex complex13 = complex12.ONE.cosh();
      ComplexField complexField0 = complex9.getField();
      Complex complex14 = complex3.subtract(complex1);
      Complex complex15 = new Complex(0.0);
      Complex complex16 = Complex.valueOf(1.0, 1708.5006619156122);
      Complex complex17 = complex0.divide(complex15);
      Complex complex18 = complex0.subtract(1.0);
      Object object0 = complex13.readResolve();
      boolean boolean0 = complex2.equals(complex11);
      Complex complex19 = complex11.tan();
      Complex complex20 = complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex2.INF.multiply((-886));
      Complex complex5 = complex4.NaN.multiply((double) (-886));
      boolean boolean0 = complex2.equals(complex0);
      Complex complex6 = Complex.valueOf(3550.0, 3.499747150995707E-8);
      Complex complex7 = complex6.NaN.add(0.0);
      Complex complex8 = complex6.ZERO.atan();
      Complex complex9 = complex1.subtract(complex6);
      Complex complex10 = complex1.negate();
      Complex complex11 = complex7.log();
      Complex complex12 = complex7.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex6.I.multiply(1);
      Complex complex8 = complex7.ONE.exp();
      Complex complex9 = complex6.I.sin();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex0.NaN.sqrt();
      Complex complex12 = complex4.pow(2504.288927488166);
      int int0 = complex12.NaN.hashCode();
      Complex complex13 = complex0.log();
      Complex complex14 = complex12.divide(738.149406);
      Complex complex15 = complex1.sqrt();
      boolean boolean0 = complex4.isNaN();
      Complex complex16 = complex13.pow(1354.24259462);
      double double0 = complex16.getReal();
      double double1 = complex3.abs();
      Complex complex17 = complex10.conjugate();
      int int1 = complex9.hashCode();
      ComplexField complexField0 = complex2.getField();
      Complex complex18 = complex17.log();
      Complex complex19 = complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5075.93, (-1397.264196394723));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex0.createComplex(5075.93, 974.712);
      List<Complex> list0 = complex4.ZERO.nthRoot(649);
      List<Complex> list1 = complex1.nthRoot(81);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex0.cos();
      double double0 = complex2.getReal();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex8.divide(complex7);
      double double1 = complex1.getImaginary();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex7.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.39235877990722656, 927.1061151991548);
      Complex complex1 = complex0.atan();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.subtract(0.0);
      String string0 = complex1.toString();
      Complex complex4 = complex2.pow(complex1);
      Complex complex5 = complex4.ZERO.pow(3.452316818502442E-102);
      Complex complex6 = complex3.pow(1.5703731187607242);
      List<Complex> list0 = complex6.NaN.nthRoot(718);
      Complex complex7 = complex6.subtract(complex2);
      Complex complex8 = complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract((-2758.529503794));
      Complex complex2 = complex0.add(2103.0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.multiply(2743);
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex2.sqrt1z();
      boolean boolean0 = complex2.equals(complex1);
      Complex complex9 = complex2.divide(1784.23773);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.ONE.createComplex((-357.08), 0.0);
      Complex complex5 = complex4.ONE.asin();
      String string0 = complex3.I.toString();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex2.abs();
      Object object0 = complex2.INF.readResolve();
      Complex complex6 = complex3.multiply((-1));
      Complex complex7 = complex2.log();
      String string1 = complex3.toString();
      Complex complex8 = complex6.multiply((-1));
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex5.multiply((-1));
      Complex complex11 = complex4.pow(complex1);
      Complex complex12 = complex3.divide(1967.143554037);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.NaN.pow(0.0);
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      double double1 = complex4.getReal();
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex0.I.atan();
      int int0 = complex6.hashCode();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.ONE.subtract(complex5);
      Complex complex10 = complex3.pow(1911.702);
      Complex complex11 = complex10.ZERO.sinh();
      Complex complex12 = complex5.NaN.add(complex2);
      Complex complex13 = complex11.ZERO.log();
      List<Complex> list0 = complex8.ONE.nthRoot(1);
      boolean boolean0 = complex6.isNaN();
      Complex complex14 = complex0.tan();
      Complex complex15 = complex3.sinh();
      ComplexField complexField0 = complex10.NaN.getField();
      Complex complex16 = complex12.ONE.exp();
      Complex complex17 = complex2.subtract(complex4);
      Complex complex18 = complex3.sqrt1z();
      Complex complex19 = complex5.pow(complex17);
      Complex complex20 = complex19.ONE.subtract(0.0);
      ComplexField complexField1 = complex9.getField();
      boolean boolean1 = complex3.isInfinite();
      Complex complex21 = complex13.conjugate();
      Complex complex22 = complex12.tanh();
      Complex complex23 = complex11.add(Double.NaN);
      Object object0 = complex19.readResolve();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1569.00026819);
      Complex complex1 = complex0.ZERO.cosh();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3586.04437202326));
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-3586.04437202326));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      String string0 = complex0.toString();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.pow(714.4733111453);
      Complex complex4 = complex1.NaN.divide((-2.3951455355985637E-8));
      double double0 = complex1.getReal();
      Object object0 = complex1.readResolve();
      Object object1 = complex0.readResolve();
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex5.I.cos();
      Object object2 = complex5.readResolve();
      double double1 = complex5.getImaginary();
      Object object3 = complex0.readResolve();
      boolean boolean0 = complex4.isInfinite();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-2614.91), (-2614.91));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply((-2614.91));
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.I.divide(complex0);
      Complex complex8 = complex5.ZERO.sqrt1z();
      double double1 = complex2.abs();
      double double2 = complex1.getImaginary();
      Complex complex9 = complex6.ONE.add(complex7);
      Complex complex10 = complex1.exp();
      try { 
        complex1.ONE.nthRoot((-4705));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,705
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(55.82, 20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.INF.acos();
      Complex complex8 = complex4.reciprocal();
      String string0 = complex8.NaN.toString();
      Complex complex9 = complex8.ZERO.multiply(921);
      Complex complex10 = complex8.ONE.reciprocal();
      Complex complex11 = complex10.I.log();
      boolean boolean0 = complex0.equals((Object) null);
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      boolean boolean1 = complex6.equals(complex0);
      Complex complex13 = complex10.pow(complex0);
      Complex complex14 = complex13.I.subtract(complex12);
      Complex complex15 = Complex.valueOf(0.0);
      double double0 = complex11.abs();
      Complex complex16 = complex4.asin();
      Complex complex17 = complex0.add(0.0);
      String string1 = complex7.toString();
      List<Complex> list0 = complex7.nthRoot(312);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-763.3956139769706), 0.0);
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.createComplex(1928.68, 1928.68);
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex0.tan();
      int int0 = complex3.hashCode();
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex1.multiply(complex0);
      Complex complex9 = complex6.pow(1928.68);
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = complex9.sin();
      Complex complex12 = complex9.pow(1928.68);
      List<Complex> list0 = complex0.INF.nthRoot(37);
      int int1 = complex4.hashCode();
      Complex complex13 = Complex.valueOf(3776.055158229105, 1928.68);
      Complex complex14 = Complex.valueOf((-330.4383440707), (-330.4383440707));
      Complex complex15 = complex2.atan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-611.2065875), (-7.886250961456327E130));
      Complex complex1 = Complex.valueOf(1.6073861122131348);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.createComplex((-611.2065875), (-611.2065875));
      Complex complex4 = complex1.ONE.log();
      Complex complex5 = complex0.INF.asin();
      int int0 = complex4.NaN.hashCode();
      Complex complex6 = complex0.subtract((-3272.2));
      Complex complex7 = complex6.I.reciprocal();
      String string0 = complex1.toString();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex1.pow(complex4);
      Complex complex10 = complex5.I.acos();
      double double0 = complex6.abs();
      Complex complex11 = complex3.sin();
      Complex complex12 = complex11.INF.sqrt1z();
      Complex complex13 = complex3.log();
      Complex complex14 = complex9.divide((-2649.7154358));
      Complex complex15 = complex14.ZERO.add(complex2);
      ComplexField complexField0 = complex5.getField();
      Complex complex16 = complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      Complex complex7 = complex6.multiply(1);
      Complex complex8 = complex1.pow(complex4);
      Complex complex9 = complex8.NaN.exp();
      Complex complex10 = complex6.reciprocal();
      ComplexField complexField0 = complex10.INF.getField();
      Complex complex11 = complex6.add(2357.22427031);
      double double0 = complex11.getArgument();
      Complex complex12 = complex1.atan();
      Complex complex13 = complex6.NaN.createComplex(0.0, 2504.889595881325);
      String string0 = complex12.NaN.toString();
      Complex complex14 = complex6.multiply(complex2);
      Complex complex15 = complex12.tan();
      Complex complex16 = complex15.ZERO.divide(complex9);
      Complex complex17 = complex2.multiply(Double.NaN);
      Complex complex18 = complex8.add(840.430188408);
      double double1 = complex8.abs();
      boolean boolean0 = complex3.isInfinite();
      Complex complex19 = complex14.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.8472516879728875E59), (-1.8472516879728875E59));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.divide((-1.8472516879728875E59));
      String string0 = complex1.INF.toString();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1931.982), 557.2617);
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.ZERO.atan();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex4 = complex2.NaN.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(557.2617, 446.93671389487);
      double double1 = complex4.getArgument();
      Complex complex7 = complex1.ZERO.sqrt1z();
      Complex complex8 = complex0.divide(complex1);
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex2.asin();
      String string0 = complex1.toString();
      Complex complex10 = complex8.multiply(20.0);
      double double2 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex0.negate();
      double double0 = complex1.ZERO.getArgument();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex5.subtract(2777.3579);
      Complex complex8 = complex5.I.reciprocal();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex9.tanh();
      Complex complex13 = complex6.add((-3.326791455362767E-8));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2005.7840610427), (-2005.7840610427));
      Complex complex1 = complex0.INF.add((-2134.54275927));
      Complex complex2 = complex0.tan();
      int int0 = complex2.ONE.hashCode();
      double double0 = complex2.getArgument();
      int int1 = complex2.hashCode();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.495672345161438);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex2.pow(0.0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex2.createComplex((-2005.7840610427), 1860.542);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.724899660259369E221), (-3564.68852));
      Complex complex1 = Complex.valueOf(0.0, 1.7407497662694827E-295);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.INF.add(complex2);
      Complex complex4 = complex0.I.divide(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.INF.multiply(0.0);
      String string0 = complex0.toString();
      Complex complex7 = complex6.ZERO.add(0.0);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex6.cos();
      Complex complex10 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.subtract(6.283185307179586);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex3.INF.sqrt1z();
      int int0 = complex4.INF.hashCode();
      Complex complex5 = complex1.NaN.add((-1.0));
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex1.ZERO.tan();
      Complex complex9 = complex1.ONE.cosh();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex0.multiply(complex1);
      Complex complex12 = complex11.ONE.multiply(0.0);
      Complex complex13 = complex2.asin();
      Complex complex14 = complex2.reciprocal();
      int int1 = complex3.hashCode();
      Complex complex15 = complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex16 = complex9.negate();
      Complex complex17 = complex2.pow(6.283185307179586);
      Complex complex18 = complex13.ZERO.multiply(0.0);
      Complex complex19 = complex17.INF.subtract(6.283185307179586);
      Complex complex20 = complex2.exp();
      Complex complex21 = complex20.tanh();
      Complex complex22 = complex21.I.log();
      Complex complex23 = complex9.ONE.atan();
      Complex complex24 = complex16.sin();
      Complex complex25 = complex24.ZERO.pow(6.283185307179586);
      Complex complex26 = Complex.valueOf(0.0, (-1596.5642947838446));
      String string0 = complex6.toString();
      Complex complex27 = complex13.acos();
      Complex complex28 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-1531.8156796859), (-1531.8156796859));
      Complex complex1 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      String string0 = complex1.I.toString();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.add((-648.18));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.NaN.createComplex(0.0, Double.NaN);
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex0.sin();
      int int0 = complex1.hashCode();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex0.atan();
      Complex complex8 = complex6.I.divide(Double.NaN);
      Complex complex9 = complex5.multiply(1);
      Complex complex10 = complex6.subtract(Double.NaN);
      Complex complex11 = complex1.tan();
      Complex complex12 = complex10.add(complex0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(4403.0343300664);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.sin();
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex3.sqrt1z();
      String string0 = complex7.INF.toString();
      Complex complex8 = complex6.acos();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply((-3075));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = Complex.valueOf(1959.70607222, 1959.70607222);
      Complex complex4 = complex0.INF.multiply(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.exp();
      boolean boolean1 = complex5.isInfinite();
      Complex complex6 = Complex.valueOf(1959.70607222);
      Complex complex7 = complex0.INF.tanh();
      double double0 = complex4.getImaginary();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.add(412.11);
      Complex complex10 = complex3.multiply((-3075));
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex9.atan();
      double double1 = complex9.getImaginary();
      Complex complex13 = complex1.multiply((-3075));
      try { 
        complex10.nthRoot((-3075));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,075
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-3629.13488));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex4.ZERO.add(complex1);
      Complex complex7 = complex5.I.divide(complex4);
      Complex complex8 = complex5.multiply(complex0);
      int int0 = complex8.hashCode();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex9 = complex4.atan();
      Complex complex10 = Complex.valueOf((-3629.13488));
      Complex complex11 = complex9.ONE.reciprocal();
      Complex complex12 = complex3.cosh();
      boolean boolean1 = complex9.isNaN();
      double double0 = complex9.abs();
      double double1 = complex10.abs();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.multiply((-220));
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex4.ONE.divide(201.2349674518);
      boolean boolean0 = complex0.equals(complex2);
      Complex complex6 = complex0.divide(complex2);
      String string0 = complex6.I.toString();
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.add((-2477.0));
      Complex complex4 = complex3.exp();
      int int0 = complex2.hashCode();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex2.pow(complex1);
      double double0 = complex3.abs();
      Complex complex8 = complex3.add((-2799.2));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-380.525923));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex0.asin();
      boolean boolean0 = complex0.equals(complex4);
      int int0 = complex4.hashCode();
      Complex complex5 = complex1.divide((-380.525923));
      Object object0 = complex5.INF.readResolve();
      Complex complex6 = complex0.subtract(complex4);
      Complex complex7 = complex3.multiply(614.2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1614.7);
      Complex complex1 = complex0.INF.reciprocal();
      boolean boolean0 = complex0.equals("K%}N");
      double double0 = complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      ComplexField complexField0 = complex1.ZERO.getField();
      Complex complex3 = complex2.I.pow(14.37004863228);
      Complex complex4 = complex1.ONE.cos();
      ComplexField complexField1 = complex0.getField();
      double double0 = complex0.getReal();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex1.createComplex(0.0, 14.37004863228);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.ONE.subtract(3349.409038377529);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.divide(2756.436269200017);
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex2.add(complex5);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2081.437973), (-1652.763));
      double double0 = complex0.getArgument();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.INF.divide(complex4);
      boolean boolean0 = complex0.equals(complex4);
      Complex complex6 = complex1.exp();
      Complex complex7 = complex0.conjugate();
      String string0 = complex2.toString();
      double double1 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.ONE.createComplex((-288.16), 100.28);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = Complex.valueOf(0.0, 796.64509845);
      double double0 = complex4.INF.abs();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex0.asin();
      int int0 = complex6.NaN.hashCode();
      Complex complex7 = complex6.add(complex0);
      double double1 = complex0.getReal();
      Complex complex8 = complex7.sin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.INF.divide(complex0);
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex7.sinh();
      Complex complex10 = Complex.valueOf(0.0);
      String string0 = complex10.toString();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex5.multiply(0.0);
      Complex complex13 = complex3.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.multiply(0);
      double double0 = complex1.getImaginary();
      Complex complex3 = complex2.pow(0.0);
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(606.52159, 606.52159);
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.pow(606.52159);
      Complex complex2 = Complex.valueOf(606.52159);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.ZERO.multiply(complex2);
      Complex complex6 = complex5.I.pow(complex0);
      Complex complex7 = complex5.ONE.cosh();
      Complex complex8 = complex2.negate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3569.052516728));
      Complex complex1 = complex0.NaN.divide(1268.852822001);
      Complex complex2 = complex1.I.atan();
      double double0 = complex2.ONE.getArgument();
      Complex complex3 = complex1.ONE.sqrt();
      Object object0 = complex0.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex1.multiply((-1));
      Complex complex4 = Complex.valueOf((-1544.799));
      Complex complex5 = complex2.NaN.sinh();
      List<Complex> list0 = complex4.NaN.nthRoot(692);
      Complex complex6 = complex3.INF.subtract(complex0);
      String string0 = complex4.toString();
      Complex complex7 = complex3.multiply(complex2);
      Complex complex8 = complex7.divide(0.0);
      int int0 = complex1.hashCode();
      Complex complex9 = complex0.multiply(0.0);
      Complex complex10 = complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1280.4880393239994));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex2.INF.atan();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex5 = Complex.valueOf((-1280.4880393239994));
      Complex complex6 = complex5.ZERO.subtract(complex2);
      double double0 = complex6.INF.getArgument();
      Object object0 = complex6.ZERO.readResolve();
      Complex complex7 = complex5.reciprocal();
      double double1 = complex7.getReal();
      Complex complex8 = complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1326.8));
      Complex complex1 = complex0.NaN.multiply(16);
      Object object0 = complex0.I.readResolve();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.cosh();
      double double0 = complex4.getArgument();
      double double1 = complex1.getArgument();
      String string0 = complex4.toString();
      Complex complex6 = complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-481.247941246));
      Complex complex1 = complex0.add((-481.247941246));
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex0.divide(1032.01);
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex4.ZERO.multiply(complex2);
      Complex complex7 = complex4.atan();
      double double0 = complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ONE.multiply(complex1);
      double double0 = complex0.abs();
      Complex complex3 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex3.subtract(complex1);
      Complex complex6 = complex4.sin();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = Complex.valueOf(1.127629041671753);
      Complex complex5 = complex1.ZERO.subtract(complex0);
      double double0 = complex2.getImaginary();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.ZERO.multiply(complex3);
      Complex complex8 = complex6.ONE.subtract((-20.0));
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.INF.multiply((-117));
      double double1 = complex9.NaN.abs();
      Complex complex11 = complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.I.negate();
      boolean boolean0 = complex0.equals("6lMTD");
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex1.createComplex(0.0, 6.283185307179586);
      Complex complex4 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-537.91), (-4077.0212737355646));
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.multiply(0);
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = Complex.valueOf((-4077.0212737355646), (-4077.0212737355646));
      double double0 = complex0.getImaginary();
      Object object0 = complex0.readResolve();
      List<Complex> list0 = complex0.nthRoot(445);
      Complex complex6 = complex0.acos();
      boolean boolean0 = complex5.isInfinite();
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      double double0 = complex0.ZERO.abs();
      Complex complex3 = complex0.multiply((-2997.9473133899));
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = Complex.valueOf(216.023614960839);
      Complex complex6 = Complex.valueOf(0.0, (-2997.9473133899));
      Complex complex7 = complex5.createComplex(216.023614960839, (-2997.9473133899));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex6.sqrt1z();
      double double0 = complex9.getArgument();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex2.log();
      Complex complex12 = complex9.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2980.75, 868.4007127);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex1.ONE.pow(868.4007127);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.add(868.4007127);
      Complex complex6 = complex2.sinh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 2980.75);
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex5.subtract(547.214648509);
      int int0 = complex8.hashCode();
      Complex complex10 = complex9.add(complex2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1393.9), (-1054.94163390491));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.negate();
      double double0 = complex1.abs();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(799.721, 799.721);
      Complex complex1 = complex0.ZERO.createComplex(2335.705979, 0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex0.abs();
      try { 
        complex1.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ZERO.multiply(1622);
      Complex complex3 = complex2.NaN.divide(complex0);
      String string0 = complex0.NaN.toString();
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ZERO.tan();
      Complex complex7 = complex6.ONE.sqrt1z();
      double double0 = complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-496.87804876604));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.multiply((-496.87804876604));
      Complex complex5 = Complex.valueOf(0.22937411069869995);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.pow(6.283185307179586);
      Complex complex9 = complex0.createComplex((-496.87804876604), Double.NaN);
      Complex complex10 = complex9.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.187780443461367E146, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.add((-3042.1547732857352));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1041.5738333341192), (-1041.5738333341192));
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ZERO.pow(complex0);
      double double0 = complex0.getImaginary();
      Complex complex3 = Complex.valueOf((-1041.5738333341192));
      Complex complex4 = complex2.multiply(853);
      double double1 = complex2.getImaginary();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.ZERO.add(0.0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.sin();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(655.527, 655.527);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.divide(2755.591);
      Complex complex4 = Complex.valueOf(3350.055321749055, 2755.591);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1085.1149142138383, 1085.1149142138383);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.pow(1085.1149142138383);
      Complex complex3 = complex0.multiply((-3906));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(981.62364131, 0.0);
      Complex complex1 = complex0.multiply(4201);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2840254306793213, 636.52976939);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-411.3467451), (-411.3467451));
      Complex complex1 = Complex.valueOf((-903.19597), (-411.3467451));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ONE.negate();
      try { 
        complex2.ONE.nthRoot((-564));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -564
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(532.553, Double.NaN);
      Complex complex1 = complex0.NaN.subtract((-540.7638));
      Complex complex2 = complex0.NaN.add(532.553);
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex0.atan();
      double double0 = complex0.abs();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex0.multiply((-378.1901382076677));
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(2.0923361778259277);
      int int0 = complex2.ONE.hashCode();
      double double0 = complex1.getReal();
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex2.getReal();
      double double2 = complex0.getImaginary();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = Complex.valueOf(2.0923361778259277);
      Complex complex5 = complex4.multiply(2.0923361778259277);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = Complex.valueOf((-3.015709444206057E-226), (-3.015709444206057E-226));
      Complex complex3 = complex0.reciprocal();
      double double0 = complex3.INF.getArgument();
      Complex complex4 = complex0.NaN.tan();
      Complex complex5 = complex3.ONE.sinh();
      try { 
        complex0.nthRoot((-22));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -22
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.ONE.sin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.subtract(20.0);
      List<Complex> list0 = complex4.NaN.nthRoot(4686);
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      boolean boolean0 = complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.multiply((-1781));
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.pow(0.0);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex0.add(382.638597655);
      Complex complex8 = complex6.ZERO.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.NaN.conjugate();
      int int0 = complex1.hashCode();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.sqrt1z();
      double double0 = complex4.getImaginary();
      double double1 = complex0.getImaginary();
      Complex complex8 = complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex3.NaN.sinh();
      double double0 = complex0.getArgument();
      ComplexField complexField0 = complex0.getField();
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.ZERO.createComplex((-131.3538217939656), (-131.3538217939656));
      Complex complex3 = complex1.tanh();
      double double0 = complex0.getArgument();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.pow(0.0);
      double double1 = complex5.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.tan();
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = complex0.toString();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.multiply(145);
      Complex complex3 = complex1.atan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex0.isNaN();
      Object object0 = complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.pow((-2072.0));
      Complex complex4 = Complex.valueOf(3.530656968851287E-8, (-2072.0));
      Complex complex5 = complex1.tanh();
      double double0 = complex0.abs();
      Complex complex6 = complex1.add(complex0);
      Complex complex7 = complex2.divide(complex6);
      Object object0 = complex2.readResolve();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex1.acos();
      Complex complex10 = Complex.valueOf((-1288.17), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.createComplex((-1929.32050513045), 0.0);
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex1.ZERO.acos();
      Complex complex5 = complex1.subtract(1394.709);
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.cos();
      Object object0 = complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex1.I.pow(complex0);
      Complex complex5 = complex1.NaN.pow(4.397691311390564E-8);
      Complex complex6 = complex1.NaN.negate();
      Complex complex7 = complex0.divide(4.397691311390564E-8);
      Complex complex8 = complex6.ONE.sqrt1z();
      Complex complex9 = complex1.pow(0.0);
      Complex complex10 = complex0.I.tanh();
      boolean boolean0 = complex6.equals(complex9);
      Complex complex11 = complex0.ZERO.tanh();
      Complex complex12 = complex1.ONE.multiply(1168.73751673);
      Complex complex13 = Complex.valueOf(2386.532884074, (-1425.0));
      Complex complex14 = complex13.I.reciprocal();
      Complex complex15 = complex13.pow(complex0);
      int int0 = complex9.hashCode();
      Complex complex16 = complex10.sqrt1z();
      boolean boolean1 = complex6.isNaN();
      Complex complex17 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.valueOf((-605.02));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex2.ONE.pow(826.686);
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex5.multiply(826.686);
      Complex complex8 = complex0.INF.createComplex(0.0, (-605.02));
      Complex complex9 = complex7.ZERO.exp();
      List<Complex> list0 = complex3.I.nthRoot(17);
      Complex complex10 = complex2.add(complex0);
      Complex complex11 = new Complex((-605.02));
      Complex complex12 = complex10.subtract(complex11);
      Complex complex13 = complex4.tanh();
      Complex complex14 = complex4.atan();
      Complex complex15 = complex14.sqrt();
      Complex complex16 = complex5.ZERO.divide(complex4);
      double double0 = complex4.getImaginary();
      boolean boolean0 = complex7.isInfinite();
      Complex complex17 = complex3.asin();
      List<Complex> list1 = complex17.I.nthRoot(1526);
      Complex complex18 = complex1.createComplex(826.686, 826.686);
      double double1 = complex14.getReal();
      Complex complex19 = complex4.sin();
      List<Complex> list2 = complex13.nthRoot(1);
      Object object0 = new Object();
      boolean boolean1 = complex5.equals(object0);
      double double2 = complex8.abs();
      Complex complex20 = complex7.cos();
      String string0 = complex18.toString();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.acos();
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = Complex.I;
      double double0 = complex0.ZERO.getArgument();
      Complex complex3 = complex2.INF.pow((-2996.348668256));
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex2.ZERO.subtract(complex0);
      Complex complex6 = complex2.ONE.cosh();
      double double1 = complex2.ONE.getArgument();
      Complex complex7 = complex0.subtract(complex2);
      Complex complex8 = complex1.log();
      Complex complex9 = complex2.INF.cosh();
      int int0 = complex8.hashCode();
      int int1 = complex8.hashCode();
      String string0 = complex5.ONE.toString();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      int int2 = complex7.hashCode();
      double double2 = complex7.getReal();
      boolean boolean1 = complex5.isInfinite();
      Complex complex11 = complex2.pow(4.923458004084836E41);
      Complex complex12 = complex4.reciprocal();
      List<Complex> list0 = complex12.ZERO.nthRoot(885);
      boolean boolean2 = complex7.isNaN();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex7.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.I.multiply(1);
      Complex complex3 = complex0.ZERO.subtract(0.12814581394195557);
      Complex complex4 = complex0.sinh();
      Object object0 = complex4.ONE.readResolve();
      Complex complex5 = complex3.ZERO.multiply(3177);
      Complex complex6 = complex5.ZERO.subtract(complex3);
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex7 = complex3.tan();
      boolean boolean0 = complex7.isNaN();
      Complex complex8 = complex5.ONE.createComplex(1, 1);
      Complex complex9 = complex8.INF.add(24.211865);
      Complex complex10 = complex7.sqrt();
      String string0 = complex5.toString();
      Complex complex11 = complex5.add((double) 1);
      String string1 = complex11.I.toString();
      Complex complex12 = complex7.cosh();
      double double0 = complex8.getReal();
      Complex complex13 = complex6.sinh();
      Complex complex14 = Complex.valueOf(6.283185307179586);
      Complex complex15 = complex14.acos();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(1417.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.subtract(1417.0);
      Complex complex4 = complex1.ONE.createComplex((-1768.3407537), (-1768.3407537));
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex0.ZERO.conjugate();
      Complex complex7 = complex6.ONE.cos();
      ComplexField complexField0 = complex4.getField();
      int int0 = complex4.hashCode();
      Complex complex8 = complex4.NaN.multiply(1417.0);
      Complex complex9 = complex0.atan();
      double double0 = 920.01229725921;
      Complex complex10 = complex9.I.pow(920.01229725921);
      Complex complex11 = complex9.exp();
      ComplexField complexField1 = complex9.getField();
      Complex complex12 = complex9.asin();
      Complex complex13 = complex0.negate();
      Complex complex14 = complex1.NaN.sqrt();
      Complex complex15 = complex13.INF.divide((-774.5863751));
      Complex complex16 = complex13.ONE.subtract(complex15);
      try { 
        complex0.nthRoot((-4441));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,441
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
  }
}
