/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:06:50 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.176199594915881E-8));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.createComplex((-3.176199594915881E-8), 0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.subtract((-3.176199594915881E-8));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.add(complex3);
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex2.INF.sin();
      Complex complex9 = complex5.subtract(complex3);
      Complex complex10 = complex5.add(complex3);
      Complex complex11 = complex9.subtract((-3.176199594915881E-8));
      Complex complex12 = complex11.exp();
      Complex complex13 = complex5.I.add(0.0);
      String string0 = complex11.ONE.toString();
      Complex complex14 = complex4.reciprocal();
      Complex complex15 = complex6.subtract((-3.176199594915881E-8));
      Complex complex16 = complex0.divide(188.070406);
      Complex complex17 = complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex1.INF.log();
      Complex complex5 = complex1.I.pow(complex0);
      Complex complex6 = complex5.I.sin();
      ComplexField complexField0 = complex1.ONE.getField();
      Complex complex7 = complex0.tanh();
      double double1 = complex7.getArgument();
      Complex complex8 = complex7.createComplex(0.7853981633974483, 20.0);
      Complex complex9 = complex8.I.sqrt1z();
      Complex complex10 = complex8.INF.exp();
      Complex complex11 = complex8.tanh();
      Complex complex12 = complex8.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      int int0 = complex1.hashCode();
      int int1 = complex0.ZERO.hashCode();
      double double0 = complex1.NaN.abs();
      Complex complex2 = Complex.valueOf((-1069.8180542775), 0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.pow(0.0);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex6.cosh();
      Object object0 = complex9.readResolve();
      Complex complex10 = complex6.I.add(6.963429563637273E139);
      Complex complex11 = complex5.divide(complex4);
      Complex complex12 = complex9.subtract(complex3);
      Complex complex13 = complex7.reciprocal();
      double double1 = complex7.getImaginary();
      double double2 = complex7.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.ONE.multiply(1.0);
      Complex complex4 = complex2.I.createComplex(0.0, 1.0);
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.multiply(0.0);
      Complex complex8 = complex0.log();
      Complex complex9 = complex1.acos();
      List<Complex> list0 = complex1.nthRoot(1);
      Complex complex10 = complex6.sin();
      Complex complex11 = complex6.tanh();
      double double1 = complex9.getImaginary();
      Complex complex12 = complex5.tan();
      Complex complex13 = complex11.sin();
      Complex complex14 = complex12.sinh();
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex15.ZERO.tan();
      double double2 = complex1.abs();
      Complex complex17 = complex3.NaN.sin();
      Complex complex18 = complex6.sqrt();
      Complex complex19 = complex5.negate();
      boolean boolean0 = complex0.equals(complex3);
      Complex complex20 = complex17.sinh();
      Complex complex21 = complex17.NaN.subtract(complex16);
      Complex complex22 = complex20.sqrt();
      String string0 = complex22.I.toString();
      Complex complex23 = Complex.valueOf(Double.NaN);
      Complex complex24 = complex23.multiply(complex4);
      double double3 = complex8.abs();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.add(complex0);
      String string0 = complex1.toString();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex5.tan();
      String string1 = complex1.toString();
      String string2 = complex0.toString();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.ZERO.subtract(complex5);
      Complex complex10 = complex0.log();
      Complex complex11 = Complex.valueOf(1825.42993014);
      int int0 = complex2.hashCode();
      Complex complex12 = complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.INF.negate();
      Object object0 = complex3.NaN.readResolve();
      Complex complex6 = complex0.asin();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex0.NaN.add(complex1);
      Complex complex9 = complex7.ZERO.sqrt1z();
      Complex complex10 = complex0.NaN.createComplex((-2425.861127), 236.0);
      Complex complex11 = complex10.createComplex(345.6, (-1669.7585856097655));
      double double0 = complex1.getArgument();
      Complex complex12 = complex6.negate();
      Complex complex13 = complex3.multiply(236.0);
      Complex complex14 = complex13.I.subtract(345.6);
      double double1 = complex7.getImaginary();
      Complex complex15 = complex1.I.conjugate();
      Complex complex16 = complex12.INF.subtract((-446.22778621192));
      Complex complex17 = complex1.exp();
      Object object1 = complex17.INF.readResolve();
      Complex complex18 = complex12.createComplex(5.152523740601808E-17, 0.0);
      Complex complex19 = complex18.NaN.atan();
      Complex complex20 = complex18.ZERO.cosh();
      Complex complex21 = complex0.sqrt();
      Complex complex22 = complex5.negate();
      boolean boolean0 = complex21.isNaN();
      Complex complex23 = complex17.cos();
      Complex complex24 = complex17.asin();
      String string0 = complex16.toString();
      Complex complex25 = complex0.divide(complex22);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tan();
      ComplexField complexField0 = complex0.getField();
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.cos();
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex3 = complex0.INF.asin();
      try { 
        complex0.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-611.272447798251));
      Complex complex1 = complex0.NaN.reciprocal();
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex3.NaN.exp();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex3.pow(complex6);
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.valueOf((-1060.7150075563), (-1060.7150075563));
      Complex complex11 = complex9.ZERO.tanh();
      Complex complex12 = complex11.ONE.tanh();
      Complex complex13 = complex2.subtract(complex4);
      int int0 = complex8.NaN.hashCode();
      Object object0 = complex13.INF.readResolve();
      Complex complex14 = complex4.ZERO.log();
      Complex complex15 = complex13.ONE.sqrt1z();
      Complex complex16 = complex15.NaN.pow(complex5);
      Complex complex17 = complex0.cos();
      Complex complex18 = complex0.cos();
      ComplexField complexField0 = complex18.INF.getField();
      Complex complex19 = complex4.negate();
      Complex complex20 = complex7.INF.divide((-611.272447798251));
      Complex complex21 = complex19.createComplex(0.0, 3.141592653589793);
      boolean boolean0 = complex18.isInfinite();
      Complex complex22 = complex7.sqrt1z();
      Complex complex23 = complex0.INF.negate();
      int int1 = complex4.hashCode();
      Complex complex24 = complex1.ZERO.negate();
      List<Complex> list0 = complex1.nthRoot(2568);
      Complex complex25 = complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-2855.09264));
      Complex complex2 = complex0.divide((-1384.0));
      Complex complex3 = complex2.createComplex((-1384.0), (-2855.09264));
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = Complex.valueOf((-1384.0), 0.0);
      double double0 = complex0.abs();
      Complex complex6 = complex5.NaN.sqrt();
      boolean boolean0 = complex5.isInfinite();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.I.subtract(complex7);
      Complex complex10 = complex8.ZERO.sin();
      Complex complex11 = complex6.createComplex(0.0, 1833.47);
      Complex complex12 = complex8.INF.add(1833.47);
      Complex complex13 = complex12.ZERO.sqrt();
      Complex complex14 = complex12.NaN.add((-2855.09264));
      Complex complex15 = complex7.tan();
      double double1 = complex0.getImaginary();
      boolean boolean1 = complex7.equals(complex0);
      Complex complex16 = complex5.negate();
      Complex complex17 = complex16.ZERO.multiply((-2855.09264));
      Complex complex18 = complex8.log();
      Complex complex19 = complex2.subtract(complex0);
      Complex complex20 = complex5.sinh();
      Complex complex21 = complex18.cosh();
      Complex complex22 = complex7.negate();
      boolean boolean2 = complex21.isNaN();
      Complex complex23 = complex6.divide(complex8);
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1350.65), (-1350.65));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.valueOf((-1350.65));
      Complex complex3 = complex2.I.subtract(3533.5778857);
      Complex complex4 = complex1.INF.divide(complex2);
      int int0 = complex2.ZERO.hashCode();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex1.NaN.tanh();
      List<Complex> list0 = complex0.I.nthRoot(7);
      Complex complex7 = complex2.ONE.multiply(complex3);
      Complex complex8 = complex7.I.add(3533.5778857);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex4.multiply(complex9);
      List<Complex> list1 = complex3.ONE.nthRoot(7);
      Complex complex11 = complex9.pow((-1350.65));
      Complex complex12 = complex1.ONE.divide(complex0);
      Object object0 = complex3.readResolve();
      Object object1 = complex0.readResolve();
      double double0 = complex11.abs();
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = complex11.asin();
      Complex complex15 = complex5.atan();
      Complex complex16 = complex3.sinh();
      Complex complex17 = complex9.subtract(complex10);
      Complex complex18 = complex13.pow(complex12);
      Complex complex19 = complex2.pow(complex14);
      Complex complex20 = complex5.add(1206.66213836);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-622.0436644964), 0.0);
      Complex complex2 = complex1.NaN.subtract(419.6);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.add(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex5 = complex2.NaN.acos();
      double double0 = complex5.ONE.abs();
      Complex complex6 = complex1.tanh();
      double double1 = complex3.getReal();
      Complex complex7 = complex4.I.reciprocal();
      Complex complex8 = complex4.add(complex3);
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex1.conjugate();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex8.cosh();
      Complex complex13 = complex2.sin();
      Complex complex14 = complex5.sqrt1z();
      double double2 = complex14.getArgument();
      boolean boolean0 = complex10.isInfinite();
      Complex complex15 = complex4.multiply(1);
      int int0 = complex6.hashCode();
      Complex complex16 = complex15.multiply(0.5403023058681398);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1255.4349801829, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex4.ZERO.conjugate();
      double double0 = complex7.INF.abs();
      String string0 = complex2.I.toString();
      Complex complex8 = complex4.log();
      Complex complex9 = complex8.INF.sqrt();
      Complex complex10 = complex9.ONE.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex0.multiply(complex1);
      Complex complex13 = complex11.log();
      Complex complex14 = complex3.sqrt1z();
      Complex complex15 = complex3.I.cosh();
      Complex complex16 = complex15.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex17 = Complex.valueOf(1795.0453, 1795.0453);
      double double1 = complex11.getImaginary();
      Complex complex18 = complex3.multiply(complex8);
      Complex complex19 = complex2.atan();
      Complex complex20 = complex8.cosh();
      Complex complex21 = complex19.ONE.add(1255.4349801829);
      Complex complex22 = complex19.negate();
      Complex complex23 = complex8.pow(complex19);
      Complex complex24 = Complex.valueOf((-1883.08839090629), 1759.355);
      double double2 = complex6.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(750.05028604789);
      Complex complex1 = complex0.NaN.exp();
      double double0 = complex0.I.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.subtract(complex0);
      String string0 = complex0.toString();
      Complex complex4 = complex0.ZERO.add(complex2);
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex2.INF.asin();
      String string1 = complex3.I.toString();
      Complex complex8 = Complex.valueOf(750.05028604789);
      Complex complex9 = complex0.INF.divide(6.283185307179586);
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex4.ZERO.multiply(complex3);
      boolean boolean0 = complex0.isInfinite();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.I.multiply((-6987));
      Complex complex14 = complex7.sqrt();
      Complex complex15 = complex4.tan();
      int int0 = complex14.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(134.62807987520623);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(complex0);
      double double0 = complex0.abs();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex1.subtract(complex2);
      ComplexField complexField0 = complex2.getField();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex2.multiply(1228);
      int int0 = complex2.ZERO.hashCode();
      int int1 = complex5.hashCode();
      Complex complex6 = complex5.pow((-1611.96645));
      Complex complex7 = complex3.atan();
      Complex complex8 = complex5.atan();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex0.reciprocal();
      ComplexField complexField1 = complex1.getField();
      Complex complex12 = complex4.pow((-395.2998620287));
      double double1 = complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.sqrt1z();
      double double0 = complex2.I.getArgument();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex3.NaN.pow((-1635.9));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = Complex.valueOf(1.5707963267948966, (-2496.74));
      Complex complex9 = complex8.I.divide(1.5707963267948966);
      double double1 = complex8.abs();
      Complex complex10 = complex8.cos();
      Complex complex11 = complex7.ONE.sqrt1z();
      Complex complex12 = complex11.I.divide(complex1);
      Complex complex13 = complex7.ONE.add(0.0);
      Complex complex14 = complex1.pow(1465.0);
      Complex complex15 = complex14.I.conjugate();
      String string0 = complex1.toString();
      Complex complex16 = complex0.subtract(1465.0);
      Complex complex17 = complex14.divide(complex6);
      Complex complex18 = complex13.sinh();
      Complex complex19 = complex11.exp();
      boolean boolean0 = complex2.isInfinite();
      Object object0 = complex5.readResolve();
      List<Complex> list0 = complex11.nthRoot(2033);
      Complex complex20 = Complex.valueOf(0.0);
      Complex complex21 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1757.89089), (-1757.89089));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.I.subtract(Double.POSITIVE_INFINITY);
      String string0 = complex1.toString();
      Complex complex3 = Complex.valueOf(1536.02147, (double) 1);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = Complex.valueOf(0.0);
      int int0 = complex1.hashCode();
      Complex complex6 = complex3.add(0.0);
      boolean boolean0 = complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.reciprocal();
      int int0 = 2620;
      List<Complex> list0 = complex0.I.nthRoot(2620);
      double double0 = complex0.I.abs();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex0.I.acos();
      Complex complex5 = complex2.pow(1.0);
      Object object0 = complex2.ZERO.readResolve();
      Complex complex6 = complex3.sqrt1z();
      Object object1 = complex0.NaN.readResolve();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex0.add(2.0);
      Complex complex9 = complex7.ONE.subtract(complex0);
      Complex complex10 = complex5.I.cos();
      Complex complex11 = complex3.add(complex1);
      // Undeclared exception!
      complex11.ONE.nthRoot(2620);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1498.8176140131811);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.ONE.divide(complex1);
      String string0 = complex2.toString();
      Complex complex4 = Complex.valueOf(915.4, 915.4);
      double double0 = complex1.abs();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.ZERO.negate();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex8.negate();
      Complex complex12 = complex6.atan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      int int0 = complex0.I.hashCode();
      Complex complex2 = complex1.ZERO.pow(0.0);
      double double0 = complex2.getArgument();
      Complex complex3 = Complex.valueOf(6.283185307179586, 1478.912);
      double double1 = complex0.ZERO.abs();
      Complex complex4 = complex2.INF.divide(complex0);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      Complex complex7 = complex5.INF.add(complex6);
      Complex complex8 = complex1.ONE.sqrt();
      Complex complex9 = complex1.divide(0.0);
      try { 
        complex0.nthRoot((-5980));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,980
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex0.I.negate();
      Complex complex7 = complex5.I.sin();
      double double0 = complex7.getArgument();
      Complex complex8 = complex4.INF.multiply(1034);
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex4.cos();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex10.I.conjugate();
      boolean boolean0 = complex2.isNaN();
      double double1 = complex1.abs();
      Complex complex13 = complex3.subtract(complex2);
      Complex complex14 = complex9.multiply(470);
      Complex complex15 = complex4.add(complex3);
      Complex complex16 = complex8.tanh();
      Complex complex17 = complex0.divide(complex14);
      Complex complex18 = complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-591.452));
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.NaN.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex5.ONE.multiply(0.0);
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex5.exp();
      int int0 = complex1.hashCode();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex12 = complex9.sqrt1z();
      double double0 = complex8.I.getArgument();
      Complex complex13 = complex1.cos();
      Complex complex14 = complex13.INF.negate();
      Complex complex15 = complex8.multiply(complex12);
      Complex complex16 = complex4.acos();
      Complex complex17 = complex1.sin();
      boolean boolean0 = complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(530.5090828494024);
      String string0 = complex0.toString();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.createComplex(530.5090828494024, 0.0);
      double double0 = complex3.getArgument();
      double double1 = complex0.getReal();
      String string1 = complex0.ZERO.toString();
      double double2 = complex1.getArgument();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.NaN.conjugate();
      double double3 = complex2.getReal();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex1.multiply(complex6);
      Complex complex9 = complex1.subtract(0.0);
      Complex complex10 = complex1.pow((-2748.284));
      Complex complex11 = complex7.log();
      Complex complex12 = complex8.negate();
      Complex complex13 = complex7.multiply(complex12);
      Complex complex14 = complex10.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1321.0048219, 1321.0048219);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.NaN.subtract(Double.NaN);
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.ZERO.multiply(complex2);
      Complex complex8 = complex6.exp();
      Complex complex9 = complex6.ONE.exp();
      Complex complex10 = complex2.multiply(1);
      Complex complex11 = complex10.I.multiply(complex1);
      Complex complex12 = complex6.ZERO.sinh();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex6.INF.sqrt();
      Complex complex15 = complex13.ZERO.pow(complex8);
      Complex complex16 = complex2.I.tan();
      Complex complex17 = complex8.subtract(complex13);
      Complex complex18 = complex5.I.reciprocal();
      boolean boolean0 = complex4.equals(complex2);
      Complex complex19 = complex5.add(complex2);
      Complex complex20 = complex17.pow(6.283185307179586);
      Complex complex21 = complex19.divide(complex0);
      Complex complex22 = complex3.log();
      Complex complex23 = complex18.I.tanh();
      Complex complex24 = complex12.tan();
      Complex complex25 = complex18.negate();
      Complex complex26 = complex21.sin();
      Complex complex27 = complex13.subtract(complex19);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1981.8913638144857);
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.add((double) 37);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex2.NaN.tan();
      Complex complex7 = complex4.INF.createComplex(1981.8913638144857, (-9.27398924154364E-153));
      Complex complex8 = complex1.multiply(complex3);
      Complex complex9 = complex1.log();
      Complex complex10 = complex8.pow(complex2);
      Complex complex11 = complex9.NaN.createComplex((-1894.0), (-9.27398924154364E-153));
      Complex complex12 = new Complex(37, 328.700044);
      Complex complex13 = complex9.divide(complex12);
      ComplexField complexField0 = complex13.getField();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.INF.add(3185.553517867322);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex0.add((-2506.20710474527));
      Complex complex7 = complex2.NaN.sqrt();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex8.ONE.acos();
      Complex complex10 = complex8.ONE.reciprocal();
      boolean boolean0 = complex0.isNaN();
      Complex complex11 = complex0.add(complex6);
      double double0 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.divide(4057.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.multiply(1);
      Complex complex4 = complex1.I.log();
      Complex complex5 = complex1.NaN.multiply(complex4);
      Complex complex6 = complex1.pow((-151.91135));
      int int0 = complex1.hashCode();
      String string0 = complex2.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(2636.6956, 2636.6956);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.divide(0.0);
      ComplexField complexField0 = complex2.getField();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex complex3 = complex0.subtract(6.283185307179586);
      Complex complex4 = complex2.ONE.negate();
      Complex complex5 = complex3.NaN.multiply(673);
      Complex complex6 = complex3.multiply(906.463366494353);
      Complex complex7 = complex6.acos();
      Complex complex8 = complex3.I.multiply(0.0);
      int int0 = complex7.I.hashCode();
      Complex complex9 = complex5.subtract(8.989677431456647E-8);
      List<Complex> list0 = complex2.nthRoot(673);
      Complex complex10 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-423.7711876315));
      Complex complex1 = complex0.divide(9.320900373401115E275);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.6228630542755127, 0.6228630542755127);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.NaN.subtract(complex0);
      Complex complex4 = complex3.INF.add(0.6228630542755127);
      Complex complex5 = complex2.I.createComplex(0.0, 0.6228630542755127);
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex6.I.pow(complex7);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex6.ONE.cosh();
      Complex complex12 = complex3.sinh();
      Complex complex13 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex14 = complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex3.tanh();
      double double0 = complex0.getReal();
      Complex complex6 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.INF.exp();
      double double0 = complex0.NaN.abs();
      Complex complex3 = complex0.sinh();
      int int0 = complex2.ONE.hashCode();
      Complex complex4 = complex3.INF.add(Double.NaN);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex4.ZERO.sinh();
      Complex complex7 = complex6.NaN.reciprocal();
      Complex complex8 = complex2.I.tanh();
      Complex complex9 = complex8.ONE.divide(complex1);
      double double1 = complex1.getArgument();
      Complex complex10 = complex3.add(Double.NaN);
      Complex complex11 = complex10.I.negate();
      Complex complex12 = complex2.INF.negate();
      Complex complex13 = complex2.acos();
      Complex complex14 = complex10.NaN.sqrt1z();
      Complex complex15 = complex13.INF.pow(Double.NaN);
      Complex complex16 = Complex.valueOf((-137.77915324702), Double.NaN);
      Complex complex17 = Complex.valueOf(Double.NaN, 0.0);
      boolean boolean0 = complex2.equals(complex1);
      Complex complex18 = complex10.conjugate();
      Complex complex19 = complex16.tan();
      double double2 = complex1.abs();
      Complex complex20 = complex8.divide(Double.NaN);
      Complex complex21 = complex11.sqrt();
      Complex complex22 = complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = complex3.acos();
      Object object0 = complex0.INF.readResolve();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex0.subtract(9.352382323649647E257);
      Complex complex6 = complex5.I.asin();
      int int0 = complex0.hashCode();
      double double0 = complex2.getImaginary();
      int int1 = complex6.hashCode();
      int int2 = complex6.hashCode();
      Complex complex7 = complex6.negate();
      double double1 = complex7.I.abs();
      Complex complex8 = complex6.NaN.atan();
      Complex complex9 = complex7.ONE.multiply((-218));
      int int3 = complex2.hashCode();
      boolean boolean1 = complex3.isNaN();
      int int4 = complex8.hashCode();
      Complex complex10 = complex1.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1738.67032);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ZERO.pow(3927.746709);
      Complex complex3 = complex1.ZERO.log();
      double double0 = complex0.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.negate();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.log();
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex2.ZERO.add(complex1);
      double double1 = complex0.INF.abs();
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex4.INF.cos();
      double double2 = complex0.abs();
      Complex complex6 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.INF.atan();
      double double0 = complex3.I.abs();
      Complex complex4 = complex1.INF.multiply(Double.NaN);
      Complex complex5 = complex0.exp();
      boolean boolean0 = complex0.equals(complex2);
      Complex complex6 = complex1.acos();
      int int0 = complex1.hashCode();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.pow(complex7);
      Complex complex9 = complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2946.2180775486872);
      Complex complex1 = Complex.valueOf(2946.2180775486872);
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.NaN.add(1276.2);
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex2.ZERO.tan();
      Complex complex6 = complex1.multiply(complex0);
      int int0 = complex6.hashCode();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.divide(complex7);
      Complex complex10 = complex9.NaN.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex3.createComplex(3504.39283, 858.5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(2280.973482583743, 2280.973482583743);
      Complex complex1 = Complex.valueOf(4723.588336296576);
      Complex complex2 = new Complex(2280.973482583743, 2280.973482583743);
      Complex complex3 = complex0.subtract(complex2);
      String string0 = complex3.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-660.140111172934));
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.ZERO.nthRoot(1184);
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex2.ZERO.multiply(5011);
      Complex complex4 = complex1.INF.log();
      double double0 = complex2.getImaginary();
      double double1 = complex0.getImaginary();
      int int0 = complex0.hashCode();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex4.INF.subtract(0.0);
      boolean boolean0 = complex5.equals(complex1);
      Complex complex7 = complex4.subtract(complex2);
      double double2 = 0.0;
      Complex complex8 = complex3.ZERO.multiply(0.0);
      try { 
        complex5.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.INF.divide(complex0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.multiply((-1861.4));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3482.6481653067));
      double double0 = complex0.getArgument();
      Complex complex1 = Complex.valueOf((-3482.6481653067), 118.48);
      Complex complex2 = Complex.valueOf(3.141592653589793);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.ONE.add(complex5);
      ComplexField complexField0 = complex1.getField();
      Complex complex9 = complex3.cosh();
      double double1 = complex9.ZERO.getArgument();
      Complex complex10 = complex4.pow(complex7);
      Complex complex11 = complex1.pow((-1647.2406292839));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-743.5624), 0.0);
      Complex complex1 = complex0.pow((-743.5624));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getImaginary();
      List<Complex> list0 = complex0.nthRoot(1052);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex1.I.createComplex(Double.NaN, 0.0);
      Complex complex4 = complex0.add(0.0);
      double double1 = complex1.getReal();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex0.add(0.0);
      double double2 = complex2.getReal();
      Complex complex7 = complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(833.723987);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.multiply((-1861.4));
      List<Complex> list0 = complex1.nthRoot(4521);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      double double0 = complex1.NaN.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex5 = complex2.INF.sinh();
      Complex complex6 = complex3.ZERO.tanh();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex1.add((-1.0));
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex9.divide(complex0);
      Complex complex12 = complex11.ONE.asin();
      Complex complex13 = complex12.INF.multiply(complex7);
      Complex complex14 = Complex.valueOf(1635.513279583);
      int int0 = complex12.ZERO.hashCode();
      Complex complex15 = complex1.divide(complex9);
      String string0 = complex0.toString();
      Complex complex16 = complex9.cosh();
      Complex complex17 = complex1.asin();
      boolean boolean0 = complex6.equals(complex17);
      Complex complex18 = complex3.multiply((-2431.76));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 1.0800340064859439E241);
      Complex complex1 = Complex.valueOf(1.0800340064859439E241);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex2.divide((-2429.25155));
      Complex complex6 = complex3.cosh();
      Object object0 = complex2.readResolve();
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2585.512087110443, (-674.63));
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.add(2585.512087110443);
      Complex complex6 = complex2.createComplex(2906.7348176, (-674.63));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex1.tanh();
      List<Complex> list0 = complex1.INF.nthRoot(1041);
      Complex complex4 = Complex.valueOf((-3203.7183968554), (double) 1041);
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex5.ZERO.asin();
      int int0 = complex0.hashCode();
      int int1 = complex3.hashCode();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex7.tanh();
      double double0 = complex9.getReal();
      Complex complex10 = complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.createComplex(0.0, 0.0);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.createComplex((-2054.9492544531), (-2054.9492544531));
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.multiply(2375);
      Complex complex7 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.divide((-4139.5));
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex1.pow(1.0);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      try { 
        complex0.nthRoot((-2507));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,507
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.subtract(535.60609);
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.add(complex4);
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.INF.sqrt();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.negate();
      Complex complex11 = complex1.createComplex(651.7103075, Double.NaN);
      Complex complex12 = complex11.ONE.pow(3414.6056519890303);
      Complex complex13 = complex2.subtract(Double.NaN);
      Complex complex14 = complex13.add(535.60609);
      Complex complex15 = complex14.INF.divide(651.7103075);
      Complex complex16 = complex14.multiply(0.0);
      Complex complex17 = complex0.log();
      Complex complex18 = complex9.add(Double.NaN);
      ComplexField complexField0 = complex17.getField();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(60.5845020487, 60.5845020487);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.NaN.tan();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf(60.5845020487);
      Complex complex6 = complex0.multiply((-1634));
      Complex complex7 = Complex.valueOf((double) (-1634));
      Complex complex8 = complex6.subtract(0.0);
      Complex complex9 = complex6.exp();
      Complex complex10 = complex4.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.538670539855957, 2.538670539855957);
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex0.NaN.multiply(complex1);
      double double1 = complex0.ONE.abs();
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex2.ONE.cosh();
      String string0 = complex0.toString();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex1.add(2.538670539855957);
      Complex complex7 = Complex.valueOf((-2325.5849));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex1.INF.asin();
      ComplexField complexField0 = complex1.ONE.getField();
      double double0 = complex0.getReal();
      ComplexField complexField1 = complex1.getField();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.sinh();
      double double1 = complex0.getReal();
      Object object0 = complex3.readResolve();
      Complex complex5 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.ZERO.pow((-1266.945310666339));
      Complex complex4 = complex0.INF.conjugate();
      Complex complex5 = complex0.add((-50.047500340888));
      Complex complex6 = complex0.divide((-50.047500340888));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-207.00505));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.ONE.pow(0.0);
      Complex complex5 = complex0.subtract((-207.00505));
      Complex complex6 = Complex.valueOf((-789.161));
      Complex complex7 = complex6.subtract((-207.00505));
      double double0 = complex3.getArgument();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex0.pow(complex8);
      Complex complex11 = complex4.acos();
      Complex complex12 = complex4.sin();
      Complex complex13 = complex12.ONE.cos();
      Complex complex14 = complex12.INF.tanh();
      Object object0 = complex14.INF.readResolve();
      Complex complex15 = complex10.NaN.multiply(1);
      Complex complex16 = complex6.subtract((double) 1);
      Complex complex17 = complex16.ZERO.conjugate();
      Complex complex18 = complex16.ZERO.acos();
      int int0 = complex11.hashCode();
      int int1 = complex10.hashCode();
      Complex complex19 = complex16.pow(complex5);
      Complex complex20 = complex13.multiply((-1673.89405));
      boolean boolean0 = complex7.isInfinite();
      Complex complex21 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex((-1.005004229646318E-7));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.I.negate();
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.subtract(complex1);
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = Complex.valueOf((-1.005004229646318E-7));
      Complex complex8 = complex7.INF.createComplex((-1.005004229646318E-7), (-1.005004229646318E-7));
      Complex complex9 = complex7.I.tanh();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex7.add(complex0);
      Complex complex13 = complex7.add(complex10);
      Complex complex14 = complex13.divide(complex7);
      Complex complex15 = complex9.cos();
      double double0 = complex14.getImaginary();
      Complex complex16 = complex8.cosh();
      Complex complex17 = complex12.add(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = 2.218596935272217;
      Complex complex0 = Complex.valueOf(2.218596935272217, 2.218596935272217);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex5.multiply(complex1);
      List<Complex> list0 = complex3.NaN.nthRoot(760);
      try { 
        complex5.ONE.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(3951.27069);
      Complex complex1 = complex0.I.conjugate();
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.ZERO.getArgument();
      Complex complex2 = complex0.sqrt1z();
      double double2 = complex0.getArgument();
      Complex complex3 = complex0.NaN.pow(3951.27069);
      Complex complex4 = complex1.multiply(397);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply((-399.606137731));
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.pow(6.707201545505014E-8);
      Complex complex5 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3307.63));
      Complex complex1 = Complex.valueOf((-3307.63), (-3103.62848992));
      Complex complex2 = complex0.NaN.pow(0.0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex0.divide((-3307.63));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1102.0439));
      Complex complex1 = complex0.ZERO.log();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = Complex.valueOf(140.5);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.subtract(0.0);
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-1301.6358516022), (-1301.6358516022));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.multiply((-1301.6358516022));
      Complex complex5 = complex1.ZERO.subtract(complex0);
      Complex complex6 = complex4.I.subtract(0.0);
      Complex complex7 = complex4.ZERO.cosh();
      Complex complex8 = complex1.I.multiply(114);
      int int0 = complex0.I.hashCode();
      double double0 = complex0.abs();
      ComplexField complexField0 = complex3.getField();
      double double1 = complex0.getArgument();
      Complex complex9 = Complex.valueOf((-1301.6358516022));
      Object object0 = complex3.readResolve();
      Complex complex10 = complex9.add((-1940.30242));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.176199594915881E-8));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.createComplex(1728.21527, 0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.subtract((-3.176199594915881E-8));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.add(complex3);
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex3.NaN.cosh();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex5.subtract(complex3);
      Complex complex11 = complex5.add(complex3);
      Complex complex12 = complex10.subtract((-3.176199594915881E-8));
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-1643.4391));
      Complex complex1 = complex0.NaN.createComplex((-1643.4391), (-1643.4391));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.multiply(981.6);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.multiply(3678.8215);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      int int0 = complex1.ONE.hashCode();
      Complex complex2 = complex0.I.negate();
      int int1 = complex2.I.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex3 = complex1.pow(0.6739205121994019);
      Complex complex4 = complex1.divide(complex2);
      double double0 = complex4.getImaginary();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex1.pow(2293.292);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 0;
      Complex complex1 = complex0.multiply(0);
      double double0 = complex1.getReal();
      Complex complex2 = complex1.NaN.pow(complex0);
      double double1 = complex1.ONE.getArgument();
      try { 
        complex1.I.nthRoot((-1208));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,208
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 165;
      Complex complex1 = complex0.multiply(165);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      double double0 = 0.0;
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex3.subtract(0.0);
      double double1 = complex5.ZERO.abs();
      Complex complex6 = complex2.NaN.cosh();
      String string0 = complex5.INF.toString();
      try { 
        complex1.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.createComplex(0.0, 0.0);
      Complex complex3 = complex1.multiply((-133));
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex1.log();
      Complex complex7 = complex1.NaN.sqrt();
      Complex complex8 = complex6.NaN.negate();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex8.NaN.exp();
      Complex complex11 = complex3.multiply((-4453.251961));
      Complex complex12 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.valueOf((-750.834504));
      Complex complex3 = complex0.NaN.divide(complex2);
      Complex complex4 = complex3.ONE.multiply(complex0);
      List<Complex> list0 = complex0.nthRoot(3351);
      Complex complex5 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1102.0439));
      Complex complex1 = complex0.ZERO.log();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = Complex.valueOf(140.5);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.pow(1.5609779357910156);
      Complex complex2 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.divide(complex3);
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1849.62504446833));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.INF.sqrt1z();
      List<Complex> list0 = complex2.nthRoot(1323);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex2.INF.multiply(complex1);
      Complex complex6 = complex4.I.pow(complex1);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex2.multiply(complex0);
      Complex complex9 = complex0.divide((-1209.1753480877));
      Complex complex10 = complex8.sqrt();
      boolean boolean1 = complex1.equals(complex2);
      ComplexField complexField0 = complex0.getField();
      boolean boolean2 = complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4312.515404257956);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.exp();
      String string0 = complex1.toString();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.ZERO.divide(complex2);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ZERO.subtract(0.0);
      Complex complex7 = complex0.pow(complex3);
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-67.0), 5397.5);
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex1.ZERO.nthRoot(1281);
      Complex complex2 = complex1.pow(5397.5);
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex2.INF.subtract(5397.5);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex1.ZERO.add(complex4);
      boolean boolean0 = complex0.isNaN();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex1.divide((-502.514421951525));
      Object object0 = complex0.readResolve();
      boolean boolean1 = complex0.equals(list0);
      Complex complex9 = complex3.INF.atan();
      int int0 = complex8.hashCode();
      Complex complex10 = complex8.NaN.pow(complex0);
      Complex complex11 = complex1.divide(complex6);
      Complex complex12 = complex11.INF.divide(complex8);
      Complex complex13 = complex11.ZERO.subtract(complex1);
      double double0 = complex6.getArgument();
      Complex complex14 = complex0.sin();
      Complex complex15 = complex14.I.exp();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
      Complex complex17 = complex13.sinh();
      Complex complex18 = complex17.add(8.979279989292184E-9);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex((-3594.62669592856), (-3594.62669592856));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(2590.7276);
      boolean boolean0 = complex1.equals(complex2);
      Complex complex3 = complex1.subtract(6.283185307179586);
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex4.ONE.acos();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex1.multiply((-420));
      Complex complex10 = complex1.sinh();
      List<Complex> list0 = complex9.ONE.nthRoot(1);
      Complex complex11 = complex9.INF.subtract(20.0);
      Complex complex12 = complex11.ZERO.atan();
      Complex complex13 = complex1.asin();
      double double0 = complex3.getImaginary();
      Complex complex14 = complex7.NaN.reciprocal();
      String string0 = complex14.toString();
      double double1 = complex7.getImaginary();
      Complex complex15 = complex1.divide(complex2);
      int int1 = complex2.hashCode();
      Complex complex16 = complex6.pow(complex8);
      double double2 = complex1.getReal();
      Complex complex17 = complex4.multiply(0);
      Complex complex18 = complex6.tan();
      Complex complex19 = complex18.subtract((-174.0));
      Complex complex20 = complex18.subtract(27.285006222484142);
      Complex complex21 = complex16.exp();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.176199594915881E-8));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.ONE.createComplex(1728.21527, 0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.subtract((-3.176199594915881E-8));
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.ONE.add(complex3);
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex3.NaN.cosh();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = complex5.subtract(complex3);
      Complex complex11 = complex5.add(complex3);
      Complex complex12 = complex10.subtract((-3.176199594915881E-8));
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex6.subtract(1728.21527);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.multiply(0.0);
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.I.sinh();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex3.getArgument();
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = Complex.valueOf(0.0, 2.3400625068490396E-280);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.ONE.log();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex11.ONE.asin();
      Object object0 = complex9.I.readResolve();
      Complex complex13 = complex9.acos();
      Complex complex14 = Complex.valueOf(2.3400625068490396E-280);
      Complex complex15 = complex14.INF.reciprocal();
      Complex complex16 = complex15.ZERO.sinh();
      Complex complex17 = complex14.ZERO.cosh();
      Complex complex18 = complex17.ONE.asin();
      double double1 = complex17.I.getArgument();
      Complex complex19 = complex16.INF.tanh();
      Complex complex20 = complex10.INF.exp();
      Complex complex21 = complex20.INF.cos();
      Complex complex22 = Complex.valueOf(0.0, 1.5707963267948966);
      Complex complex23 = complex5.cos();
      Complex complex24 = complex1.tan();
      Complex complex25 = complex24.subtract(complex5);
      double double2 = complex2.abs();
      ComplexField complexField1 = complex14.getField();
      List<Complex> list0 = complex22.nthRoot(1);
      Complex complex26 = Complex.ONE;
      Complex complex27 = complex10.pow(complex26);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = new Complex(612.0364179, 612.0364179);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex0.multiply(1824.994036);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.ZERO.multiply(1);
      Complex complex7 = complex4.ONE.cosh();
      Complex complex8 = complex4.INF.cos();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex2.atan();
      Object object0 = complex10.ZERO.readResolve();
      Complex complex11 = complex10.cosh();
      Complex complex12 = complex2.conjugate();
      Complex complex13 = complex11.I.createComplex(2830.1, 612.0364179);
      Complex complex14 = complex7.sin();
      Complex complex15 = complex14.I.add(3677.0);
      int int0 = complex1.hashCode();
      Complex complex16 = complex8.I.cos();
      Complex complex17 = complex1.sqrt1z();
      int int1 = complex17.hashCode();
      int int2 = complex10.hashCode();
      Complex complex18 = complex7.add(complex8);
      Complex complex19 = complex18.sqrt();
      Complex complex20 = complex6.sinh();
      Complex complex21 = complex13.conjugate();
      Complex complex22 = complex13.cos();
  }
}
