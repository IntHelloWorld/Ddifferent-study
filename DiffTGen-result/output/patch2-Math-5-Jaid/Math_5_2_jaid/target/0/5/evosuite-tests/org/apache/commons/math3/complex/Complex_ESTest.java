/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:59:19 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7400655988987023E39);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.INF.cosh();
      Object object0 = complex3.readResolve();
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex7.ZERO.exp();
      List<Complex> list0 = complex8.INF.nthRoot(676);
      double double0 = complex1.abs();
      Complex complex9 = complex6.reciprocal();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.INF.createComplex(1.0, (-639.238460146837));
      Complex complex8 = complex6.ZERO.subtract(complex2);
      Complex complex9 = complex0.NaN.sqrt1z();
      Complex complex10 = complex2.ONE.reciprocal();
      Complex complex11 = complex10.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf((-87.8407226005), 0.8414709848078965);
      Complex complex13 = complex12.reciprocal();
      Object object0 = complex11.readResolve();
      Complex complex14 = complex12.ONE.divide(0.8414709848078965);
      Complex complex15 = complex12.ONE.divide(complex3);
      Complex complex16 = complex11.ONE.acos();
      String string0 = complex2.toString();
      Complex complex17 = complex2.log();
      Complex complex18 = complex17.sinh();
      Object object1 = complex11.readResolve();
      Complex complex19 = complex8.tanh();
      double double0 = complex8.abs();
      double double1 = complex1.abs();
      Complex complex20 = complex12.multiply(complex17);
      Complex complex21 = complex2.acos();
      Complex complex22 = complex14.conjugate();
      Complex complex23 = complex1.negate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.ONE.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.valueOf((-1985.99777), (-1985.99777));
      Complex complex6 = complex1.INF.multiply(complex3);
      boolean boolean0 = complex4.isInfinite();
      double double0 = complex1.abs();
      Complex complex7 = complex0.multiply(0);
      Complex complex8 = complex7.INF.add(Double.NaN);
      Complex complex9 = complex4.ZERO.divide(complex5);
      Complex complex10 = complex8.INF.cos();
      Complex complex11 = complex8.INF.add(Double.NaN);
      Complex complex12 = complex11.cosh();
      Object object0 = complex0.ONE.readResolve();
      Complex complex13 = Complex.valueOf(0.0, (-1985.99777));
      String string1 = complex4.toString();
      Complex complex14 = complex7.divide(complex0);
      Object object1 = complex14.ONE.readResolve();
      int int0 = complex1.hashCode();
      Complex complex15 = complex8.atan();
      Complex complex16 = complex0.add((-200.100036016851));
      Complex complex17 = complex16.NaN.asin();
      Complex complex18 = complex16.tanh();
      try { 
        complex10.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex1.NaN.createComplex(3300.83552366944, 3272.4);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.multiply(complex7);
      int int0 = complex2.ZERO.hashCode();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex9.ONE.negate();
      Complex complex11 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = complex7.INF.cos();
      Complex complex13 = complex12.NaN.negate();
      Complex complex14 = complex11.I.sin();
      Complex complex15 = complex8.asin();
      Complex complex16 = complex11.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2965.3, 2965.3);
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex0.acos();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex3 = complex2.NaN.reciprocal();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex0.asin();
      ComplexField complexField1 = complex8.NaN.getField();
      double double0 = complex0.getImaginary();
      Complex complex9 = complex8.ZERO.acos();
      List<Complex> list0 = complex9.NaN.nthRoot(901);
      ComplexField complexField2 = complex7.ZERO.getField();
      String string0 = complex1.toString();
      double double1 = complex7.ZERO.abs();
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex11.sin();
      Complex complex13 = complex7.add(complex8);
      Complex complex14 = complex4.subtract(complex2);
      Complex complex15 = complex14.NaN.pow(complex1);
      Complex complex16 = complex13.reciprocal();
      Object object1 = complex10.readResolve();
      double double2 = complex13.getArgument();
      Complex complex17 = Complex.valueOf(2965.3, 0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.getArgument();
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex2.INF.cos();
      double double1 = complex2.abs();
      Complex complex4 = complex2.INF.pow(complex0);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.I.cos();
      try { 
        complex3.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2252.998341412986);
      Complex complex1 = Complex.valueOf(2252.998341412986, 2252.998341412986);
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex2.subtract(complex2);
      Complex complex6 = complex4.divide(2252.998341412986);
      Complex complex7 = complex4.NaN.subtract(2252.998341412986);
      Object object0 = complex4.readResolve();
      Complex complex8 = complex4.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex9 = complex2.pow(2252.998341412986);
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex1.pow(2252.998341412986);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex2.I.sinh();
      Complex complex6 = complex5.INF.multiply(0.0);
      Complex complex7 = complex2.I.multiply(complex1);
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex8.I.asin();
      Complex complex10 = complex8.multiply(complex2);
      Complex complex11 = Complex.valueOf((-1172.527), 0.0);
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex0.atan();
      Complex complex14 = complex13.multiply(complex12);
      Complex complex15 = complex13.I.log();
      Complex complex16 = complex14.NaN.reciprocal();
      Complex complex17 = complex16.ONE.exp();
      Complex complex18 = complex17.ZERO.acos();
      Complex complex19 = complex0.multiply(complex1);
      double double0 = complex19.abs();
      int int0 = complex12.hashCode();
      boolean boolean0 = complex2.isNaN();
      Complex complex20 = complex13.divide(0.0);
      Complex complex21 = complex20.I.subtract(complex7);
      String string0 = complex0.toString();
      Complex complex22 = complex1.cosh();
      Complex complex23 = complex13.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(1463.903980806);
      Complex complex3 = complex1.ZERO.exp();
      double double0 = complex3.INF.abs();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex7.INF.conjugate();
      Object object0 = complex9.INF.readResolve();
      Complex complex10 = complex4.add(complex1);
      Complex complex11 = complex4.INF.tan();
      Object object1 = complex4.readResolve();
      Complex complex12 = complex5.INF.negate();
      Complex complex13 = complex5.sqrt();
      Complex complex14 = complex13.ZERO.sinh();
      double double1 = complex10.getReal();
      double double2 = complex13.getReal();
      double double3 = complex1.getReal();
      Complex complex15 = Complex.valueOf(1.2523630909973607E29);
      Complex complex16 = complex0.subtract(complex15);
      double double4 = complex16.INF.getArgument();
      Complex complex17 = complex4.cosh();
      Complex complex18 = complex17.ZERO.pow(1.2523630909973607E29);
      Complex complex19 = complex18.I.divide((-4.1022790876160215E-9));
      double double5 = complex10.getImaginary();
      Complex complex20 = complex17.I.pow(complex8);
      Complex complex21 = complex0.sin();
      ComplexField complexField0 = complex19.getField();
      try { 
        complex8.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1341.902789));
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.multiply(complex1);
      Complex complex4 = complex1.subtract(2988.3002037679375);
      Complex complex5 = complex4.tan();
      boolean boolean0 = complex5.isInfinite();
      Complex complex6 = complex5.subtract(2988.3002037679375);
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex5.multiply(769);
      Complex complex9 = complex6.createComplex(4681.436841280458, 769);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      int int0 = complex1.ZERO.hashCode();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex4.negate();
      Complex complex7 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.subtract(1.9502718448638916);
      Object object0 = complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.INF.getArgument();
      double double1 = complex0.INF.abs();
      Complex complex1 = Complex.valueOf(0.0, (-1971.0629964623126));
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.add(complex2);
      double double2 = complex2.getArgument();
      boolean boolean0 = complex6.isInfinite();
      Complex complex7 = complex2.NaN.acos();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.subtract(complex4);
      Complex complex11 = complex3.conjugate();
      Complex complex12 = complex11.divide(complex3);
      Complex complex13 = complex0.subtract(0.0);
      double double3 = complex8.getReal();
      Complex complex14 = complex13.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(490.3, (-1.3907979640327008E88));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex2.ZERO.multiply(complex1);
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex3.NaN.add(complex5);
      Complex complex8 = complex5.NaN.sin();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.ZERO.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.I.createComplex((-17.5173), 0.0);
      Complex complex12 = complex2.asin();
      Complex complex13 = complex0.I.sqrt();
      Complex complex14 = complex12.I.multiply((-1.3907979640327008E88));
      double double0 = complex2.getImaginary();
      Complex complex15 = complex14.tan();
      Complex complex16 = complex6.tanh();
      String string0 = complex12.toString();
      Complex complex17 = complex3.negate();
      boolean boolean0 = complex6.isInfinite();
      List<Complex> list0 = complex9.nthRoot(11);
      Complex complex18 = complex3.negate();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      String string0 = complex0.I.toString();
      Complex complex1 = complex0.pow((-1966.76944432));
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ONE.multiply(0.0);
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex3.pow(2.0310928323153876E-42);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex7.INF.tanh();
      Complex complex9 = complex3.log();
      double double0 = complex2.getReal();
      Complex complex10 = complex0.negate();
      List<Complex> list0 = complex8.nthRoot(979);
      Complex complex11 = complex3.pow(complex5);
      Complex complex12 = complex3.createComplex(Double.POSITIVE_INFINITY, (-932.6437400607701));
      Complex complex13 = complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(3415.104339543404);
      String string0 = complex0.ZERO.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.subtract(3415.104339543404);
      Object object0 = complex0.readResolve();
      Complex complex4 = complex3.ONE.divide(3415.104339543404);
      Complex complex5 = complex4.I.pow(complex2);
      Complex complex6 = complex1.tanh();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.I.pow(complex0);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex9.I.createComplex(3415.104339543404, 435.070201);
      ComplexField complexField1 = complex6.getField();
      Complex complex11 = Complex.valueOf((-20.0));
      Complex complex12 = complex5.atan();
      Complex complex13 = complex12.NaN.subtract(complex10);
      Complex complex14 = complex0.subtract(complex2);
      Complex complex15 = complex3.cos();
      Complex complex16 = complex8.negate();
      Complex complex17 = complex11.tanh();
      try { 
        complex1.nthRoot((-1936));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,936
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2.2034826278686523);
      Complex complex1 = complex0.cos();
      String string0 = complex0.I.toString();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex2.ZERO.add(2.2034826278686523);
      Complex complex7 = complex2.I.cosh();
      Complex complex8 = complex4.ZERO.exp();
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex2.divide(2.2034826278686523);
      Complex complex11 = complex2.I.add(complex3);
      Complex complex12 = complex1.cos();
      Complex complex13 = complex2.cos();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex11.add(complex14);
      Complex complex16 = complex13.asin();
      Complex complex17 = complex13.I.sqrt();
      Complex complex18 = complex12.asin();
      boolean boolean0 = complex11.isNaN();
      Complex complex19 = complex16.tan();
      boolean boolean1 = complex18.equals("o!`e>tc~jvR");
      Complex complex20 = complex13.exp();
      String string1 = complex6.toString();
      boolean boolean2 = complex17.isInfinite();
      Complex complex21 = complex6.pow(2.2034826278686523);
      Object object0 = complex21.readResolve();
      List<Complex> list0 = complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3442378838418366E212, 2.3442378838418366E212);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2654.06, (-3046.8081));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.INF.pow((-3046.8081));
      int int0 = complex1.INF.hashCode();
      String string0 = complex0.NaN.toString();
      Complex complex3 = complex0.pow((-106.2));
      Complex complex4 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(635.04);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.NaN.multiply(complex1);
      double double0 = complex1.ONE.abs();
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.valueOf((-6.284125161007433E-8));
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex4.acos();
      double double1 = complex2.getArgument();
      Complex complex8 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-600.595776));
      double double0 = complex0.NaN.getArgument();
      String string0 = complex0.ZERO.toString();
      double double1 = complex0.getArgument();
      ComplexField complexField0 = complex0.INF.getField();
      String string1 = complex0.NaN.toString();
      boolean boolean0 = complex0.isNaN();
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.createComplex((-20.0), (-3231.051904479115));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex3.subtract(6.3984347447610573E17);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1712.91228489076, 1712.91228489076);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex2.NaN.cosh();
      Object object0 = complex2.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.subtract((-814.0));
      double double0 = complex6.I.abs();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex9.ONE.add(1712.91228489076);
      Complex complex11 = complex10.NaN.atan();
      Complex complex12 = complex2.log();
      Complex complex13 = complex9.atan();
      double double1 = complex13.abs();
      Complex complex14 = complex0.add(197.0085428245811);
      double double2 = complex0.getReal();
      double double3 = complex0.getArgument();
      Complex complex15 = complex13.add(0.7853981633974483);
      double double4 = complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-37.22552386045), 0.0);
      Complex complex1 = Complex.ONE;
      try { 
        complex1.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex0.createComplex(0.0, Double.NaN);
      Complex complex6 = complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2751.65102671));
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = Complex.valueOf((-2751.65102671));
      Complex complex3 = complex2.I.subtract((-2751.65102671));
      boolean boolean0 = complex0.isInfinite();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf(0.0, (-3354.87));
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = complex5.subtract(643.34294553925);
      double double0 = complex5.getReal();
      Complex complex8 = Complex.valueOf(1276.863986);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex8.ONE.createComplex(1276.863986, 790.9392560311028);
      Complex complex11 = complex10.ONE.pow(0.0);
      List<Complex> list0 = complex8.nthRoot(113);
      Complex complex12 = complex9.cos();
      Complex complex13 = complex5.createComplex((-3354.87), 113);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3844.2093928560507);
      int int0 = complex0.ONE.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.pow(complex0);
      int int1 = 0;
      Complex complex3 = complex2.multiply(0);
      Complex complex4 = Complex.valueOf((double) 0, (-2894.078196807074));
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex1.ZERO.divide(complex4);
      Complex complex7 = complex0.ONE.sinh();
      try { 
        complex1.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.pow(complex0);
      double double0 = complex1.INF.abs();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.NaN.pow(complex1);
      Complex complex7 = complex5.NaN.conjugate();
      Complex complex8 = complex2.multiply((-550));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-3985.909088));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(0.0);
      int int0 = complex1.ZERO.hashCode();
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex0.getArgument();
      Complex complex2 = complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1359.0612577), (-1359.0612577));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.multiply(complex1);
      ComplexField complexField0 = complex2.getField();
      boolean boolean0 = complex0.equals(complex3);
      boolean boolean1 = complex4.isNaN();
      Complex complex5 = complex1.pow(complex3);
      boolean boolean2 = complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.ZERO.add((-2045.41238059369));
      double double0 = complex3.getImaginary();
      Complex complex5 = complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      ComplexField complexField1 = complex0.ZERO.getField();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(5648.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sqrt1z();
      int int0 = complex1.INF.hashCode();
      Complex complex3 = Complex.valueOf(5648.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.ONE.acos();
      double double0 = complex0.abs();
      Complex complex5 = complex1.INF.tanh();
      Complex complex6 = complex4.I.sin();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex0.subtract(complex1);
      int int1 = complex7.ONE.hashCode();
      Complex complex8 = complex7.cosh();
      List<Complex> list0 = complex4.nthRoot(1372);
      Complex complex9 = Complex.valueOf((-7.886250961456327E130), (-1450.311212983));
      Complex complex10 = complex2.cos();
      Complex complex11 = complex0.acos();
      Complex complex12 = complex11.sinh();
      Complex complex13 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = Complex.valueOf(3278.0, 3278.0);
      Complex complex4 = complex0.I.subtract(1.998050894021586E35);
      Complex complex5 = complex0.subtract(1.3088328582956644E-7);
      Complex complex6 = complex5.INF.createComplex(0.0, 1.998050894021586E35);
      Complex complex7 = complex0.INF.add(0.0);
      Complex complex8 = Complex.valueOf(0.0, 1.998050894021586E35);
      int int0 = complex8.hashCode();
      Complex complex9 = complex0.I.tan();
      Complex complex10 = complex0.add(complex8);
      Complex complex11 = complex7.divide(1.998050894021586E35);
      Complex complex12 = Complex.valueOf(0.0, 3278.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2215.366818729278));
      Complex complex2 = complex1.multiply(6.283185307179586);
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex2.ZERO.subtract(complex1);
      Complex complex5 = complex0.multiply(0.0);
      ComplexField complexField0 = complex1.NaN.getField();
      double double0 = complex2.getImaginary();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.divide((-13919.56024545298));
      double double1 = complex1.getArgument();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex0.subtract(complex3);
      Complex complex10 = complex8.subtract((-13919.56024545298));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.subtract((-3068.2018));
      List<Complex> list0 = complex0.nthRoot(1139);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = Complex.NaN;
      int int0 = complex4.I.hashCode();
      Complex complex5 = complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.isNaN();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.tanh();
      double double0 = complex0.getReal();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.divide((-4435.659070561));
      Complex complex4 = Complex.valueOf((-4435.659070561));
      Complex complex5 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.I.log();
      Complex complex4 = Complex.valueOf((-1104.941333));
      Complex complex5 = complex2.ZERO.cosh();
      Complex complex6 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.subtract(0.0);
      Complex complex5 = complex4.INF.reciprocal();
      Complex complex6 = complex0.cos();
      int int0 = complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-425.17360456), (-425.17360456));
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.asin();
      String string0 = complex1.toString();
      double double0 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract((-2490.9056334396));
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1712.0, 1712.0);
      Complex complex1 = complex0.INF.createComplex(1712.0, 2209.976675409);
      Complex complex2 = complex0.reciprocal();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.71853394036182E-51);
      Complex complex1 = complex0.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex0.getField();
      Complex complex4 = complex0.pow(881.2651);
      Complex complex5 = complex3.asin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1885.7792213789155), (-3.1085734725176E52));
      Complex complex1 = complex0.NaN.divide((-1885.7792213789155));
      List<Complex> list0 = complex1.I.nthRoot(1107);
      double double0 = complex0.getReal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex2.I.add((-1885.7792213789155));
      Complex complex5 = complex4.NaN.tan();
      double double1 = complex2.getImaginary();
      Complex complex6 = complex3.add(complex1);
      double double2 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1050.2384691), 0.12642613053321838);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      double double0 = complex0.getReal();
      double double1 = complex0.getArgument();
      double double2 = complex0.getReal();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2375.024071471));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = new Complex((-2375.024071471));
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex4.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex6.NaN.tanh();
      double double0 = complex7.getArgument();
      Complex complex8 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex0.acos();
      Complex complex11 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex12 = complex10.NaN.exp();
      Complex complex13 = complex2.sinh();
      Complex complex14 = complex13.ONE.atan();
      int int0 = complex10.hashCode();
      Complex complex15 = complex2.add(complex9);
      Complex complex16 = complex11.divide(complex6);
      Complex complex17 = complex2.add((-1376.6218785038));
      Complex complex18 = complex13.sin();
      ComplexField complexField0 = complex8.getField();
      Complex complex19 = complex10.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1485.608140471028), (-1485.608140471028));
      Complex complex2 = complex0.add(2198.93628555602);
      Complex complex3 = complex2.I.divide(complex1);
      Object object0 = complex2.readResolve();
      Complex complex4 = Complex.valueOf(2198.93628555602, 2198.93628555602);
      Complex complex5 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.multiply(860.878823133);
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-3.862412756175274E-8), 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.exp();
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.tanh();
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(351.0);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = new Complex(351.0, 1965.911245545205);
      double double0 = complex2.ZERO.getArgument();
      Complex complex3 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.pow(3326.52049);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.INF.cosh();
      Complex complex6 = complex0.NaN.divide(complex2);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex7.ONE.add(3326.52049);
      Complex complex9 = complex6.log();
      Complex complex10 = complex3.NaN.multiply(complex9);
      Complex complex11 = complex6.ONE.cos();
      Complex complex12 = complex2.I.sqrt();
      Complex complex13 = complex0.sqrt();
      Complex complex14 = complex4.I.multiply(complex0);
      double double0 = complex0.abs();
      Complex complex15 = complex1.subtract(complex13);
      Complex complex16 = complex4.multiply(complex2);
      Complex complex17 = complex16.INF.pow(complex14);
      int int0 = complex6.hashCode();
      Complex complex18 = complex13.subtract(complex3);
      double double1 = complex4.abs();
      Complex complex19 = complex13.negate();
      Complex complex20 = complex12.sqrt1z();
      Complex complex21 = Complex.valueOf((-2043.289844895));
      Complex complex22 = complex21.reciprocal();
      String string0 = complex14.toString();
      Complex complex23 = complex14.atan();
      Complex complex24 = complex15.cos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.multiply((-1890));
      Complex complex4 = complex3.I.multiply((-3));
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.NaN.multiply(complex0);
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex2.subtract(complex8);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex4.subtract((double) (-1890));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.NaN.subtract((-558.1575213741879));
      Complex complex4 = complex0.sqrt1z();
      Object object0 = complex4.readResolve();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.multiply((-558.1575213741879));
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1631.7463));
      Complex complex1 = complex0.ONE.sqrt1z();
      String string0 = complex1.NaN.toString();
      Complex complex2 = complex0.sqrt();
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2252.998341412986);
      Complex complex1 = Complex.valueOf(2252.998341412986, 2252.998341412986);
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex1.ZERO.add((-2811.643));
      Complex complex4 = complex0.INF.add(complex1);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex7.subtract(complex2);
      Complex complex9 = complex6.divide(2252.998341412986);
      Complex complex10 = complex7.NaN.subtract(2252.998341412986);
      Complex complex11 = complex10.ZERO.log();
      Object object0 = complex7.readResolve();
      Complex complex12 = complex6.exp();
      boolean boolean0 = complex0.isInfinite();
      Complex complex13 = complex2.pow(2252.998341412986);
      Complex complex14 = complex6.sqrt();
      Complex complex15 = complex3.pow(2252.998341412986);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1371.8397), (-1371.8397));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = Complex.valueOf((-1371.8397), 0.0);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4061.8280530116194), 1438.5673552715);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2294564247131348, 1622.929203);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.NaN.multiply(complex0);
      double double0 = complex0.ZERO.abs();
      boolean boolean0 = complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.divide((-8.054981263802322E-8));
      double double0 = complex1.getImaginary();
      Complex complex3 = complex2.ONE.divide(complex0);
      Complex complex4 = complex3.I.divide((-8.054981263802322E-8));
      String string0 = complex1.toString();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.exp();
      int int0 = complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2005.1416592889047);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.sinh();
      List<Complex> list0 = complex1.ONE.nthRoot(17);
      double double0 = complex3.abs();
      Complex complex4 = complex2.multiply(2163);
      Complex complex5 = complex4.ONE.pow(0.0);
      Complex complex6 = complex1.ONE.conjugate();
      Complex complex7 = complex2.multiply(complex1);
      double double1 = complex7.getArgument();
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = Complex.valueOf((double) 17);
      Complex complex10 = complex8.NaN.sin();
      Complex complex11 = complex3.multiply((double) 2163);
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex12.divide((double) 2163);
      Complex complex14 = complex13.NaN.add(0.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex15 = complex1.sin();
      Complex complex16 = complex6.INF.sqrt();
      Complex complex17 = complex2.tan();
      boolean boolean1 = complex6.isNaN();
      Complex complex18 = complex11.divide(complex5);
      Complex complex19 = complex5.multiply(0);
      Complex complex20 = complex11.pow(2728.7284934485165);
      try { 
        complex3.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1579.184247115762, 1579.184247115762);
      Complex complex1 = complex0.ZERO.pow(1579.184247115762);
      Complex complex2 = Complex.valueOf(1579.184247115762);
      Complex complex3 = complex1.NaN.divide(complex2);
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.divide(1579.184247115762);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-2182.27142419433), (-2182.27142419433));
      Complex complex1 = Complex.valueOf((-2182.27142419433), (-2182.27142419433));
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex0.add(45.0);
      Complex complex5 = complex4.cosh();
      double double0 = complex4.abs();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex2.cos();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1957.3386));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex2.NaN.atan();
      double double0 = complex3.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.multiply(complex1);
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex2.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1222.9622557668333);
      String string0 = complex0.NaN.toString();
      Complex complex1 = Complex.INF;
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      ComplexField complexField0 = complex2.INF.getField();
      Complex complex3 = complex1.ONE.divide(complex2);
      Complex complex4 = complex3.I.pow(1222.9622557668333);
      double double0 = complex2.getArgument();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.reciprocal();
      Object object1 = complex6.readResolve();
      boolean boolean0 = complex3.isNaN();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex6.ZERO.divide((-2.356194490192345));
      boolean boolean1 = complex0.isInfinite();
      boolean boolean2 = complex5.equals(complex6);
      Complex complex9 = Complex.valueOf((-2.356194490192345));
      Complex complex10 = complex6.log();
      Complex complex11 = complex9.multiply((-1893));
      try { 
        complex2.nthRoot((-1893));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,893
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-5.555080534042001E-8), (-5.555080534042001E-8));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ZERO.divide((-5.555080534042001E-8));
      Complex complex3 = complex0.pow((-5.555080534042001E-8));
      Complex complex4 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      String string0 = complex0.toString();
      int int0 = complex1.INF.hashCode();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.INF.tanh();
      Complex complex6 = complex1.conjugate();
      boolean boolean0 = complex5.isNaN();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.pow(complex2);
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex9.NaN.cos();
      Complex complex11 = complex9.NaN.sin();
      Object object0 = complex11.readResolve();
      Complex complex12 = complex4.divide(complex3);
      Complex complex13 = complex5.subtract(0.0);
      String string1 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3933.5374863);
      Complex complex1 = Complex.valueOf(3933.5374863, 3933.5374863);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex1.multiply(1608.037459874);
      int int0 = complex3.NaN.hashCode();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex5.subtract(complex0);
      Object object0 = complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex0.pow(Double.NaN);
      Complex complex5 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(1907.6927);
      Complex complex2 = complex0.NaN.createComplex(2143.24176773873, 2917.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1437.827647));
      Complex complex1 = complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-2362.5808), 3352.5070172);
      Complex complex1 = new Complex(2.718281828459045, 7.868666894503849E-163);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf((-2362.5808));
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex4.INF.conjugate();
      Complex complex7 = complex5.ONE.multiply((-1.0));
      Complex complex8 = complex7.sin();
      Complex complex9 = complex7.I.sqrt();
      boolean boolean0 = complex0.equals(complex2);
      Object object0 = complex1.readResolve();
      Object object1 = complex5.readResolve();
      Complex complex10 = complex5.ONE.multiply(complex3);
      boolean boolean1 = complex0.equals(object1);
      Complex complex11 = complex5.pow(3352.5070172);
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex12.I.multiply((-3152));
      Complex complex14 = complex3.cosh();
      Complex complex15 = complex1.divide(complex2);
      Complex complex16 = complex3.cosh();
      Complex complex17 = complex3.cos();
      Complex complex18 = complex3.subtract((double) (-3152));
      Complex complex19 = Complex.valueOf((-654.625), (-2362.5808));
      Complex complex20 = complex3.multiply(206215259);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex0.I.divide((-0.5290855136357461));
      Complex complex5 = complex3.ZERO.acos();
      Complex complex6 = complex2.add(complex1);
      Complex complex7 = Complex.valueOf((-386.05771132677));
      Complex complex8 = complex3.ZERO.sin();
      Complex complex9 = complex8.NaN.add(complex2);
      Complex complex10 = complex0.INF.conjugate();
      int int0 = complex7.NaN.hashCode();
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex7.divide((-386.05771132677));
      Complex complex13 = complex0.conjugate();
      Complex complex14 = complex13.divide(1.9213623525983532);
      String string0 = complex14.INF.toString();
      Complex complex15 = Complex.valueOf(1.7991060813894693E185);
      Complex complex16 = complex2.tanh();
      double double0 = complex12.abs();
      Complex complex17 = complex0.ONE.sqrt();
      Object object0 = complex2.readResolve();
      Complex complex18 = complex0.pow((-386.05771132677));
      Complex complex19 = complex18.INF.negate();
      int int1 = complex18.ZERO.hashCode();
      Complex complex20 = complex2.tanh();
      Complex complex21 = Complex.valueOf(1.0, (-0.010714690733195933));
      String string1 = complex2.toString();
      Complex complex22 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.I.multiply(1162.27);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex1.ONE.pow((-480.155));
      Complex complex5 = complex0.ZERO.subtract(complex1);
      double double0 = complex1.INF.abs();
      double double1 = complex5.abs();
      Complex complex6 = complex0.ONE.subtract((-2782.98));
      Complex complex7 = complex6.ZERO.pow(0.0);
      Complex complex8 = complex7.NaN.multiply(839);
      List<Complex> list0 = complex5.INF.nthRoot(37);
      List<Complex> list1 = complex0.nthRoot(839);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex0.ONE.atan();
      Complex complex11 = complex0.ZERO.sin();
      Complex complex12 = complex5.subtract((-769.2747265837));
      double double2 = complex12.getReal();
      double double3 = complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = 0;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      try { 
        complex0.NaN.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(3921.22413, 0.0);
      Complex complex1 = new Complex(0.0);
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.multiply((-1138.5587831));
      Complex complex3 = complex2.ZERO.sqrt();
      double double0 = complex2.abs();
      Complex complex4 = complex1.asin();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1.3242245776666673E-186);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.ONE.subtract(complex2);
      Complex complex5 = complex4.NaN.add((-20.0));
      Complex complex6 = complex0.subtract(0.0);
      Complex complex7 = complex6.I.cosh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex8.I.reciprocal();
      Complex complex11 = complex6.ZERO.cos();
      Complex complex12 = complex9.subtract(0.0);
      Complex complex13 = complex1.log();
      Complex complex14 = complex13.asin();
      Complex complex15 = complex13.ZERO.createComplex(1.3242245776666673E-186, 0.0);
      double double0 = complex14.INF.getArgument();
      int int0 = complex13.I.hashCode();
      Complex complex16 = complex11.pow(complex7);
      Complex complex17 = complex1.divide(complex0);
      Complex complex18 = Complex.valueOf(0.0, (-1852.534));
      Complex complex19 = complex12.reciprocal();
      double double1 = complex13.getImaginary();
      double double2 = complex3.getArgument();
      Object object0 = complex19.readResolve();
      Complex complex20 = complex1.createComplex(0.0, 0.7853981633974483);
      Complex complex21 = complex11.cosh();
      Complex complex22 = complex14.log();
      Complex complex23 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = Complex.valueOf(2380.3300043957024);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.ZERO.cosh();
      double double0 = complex3.INF.abs();
      Complex complex6 = complex0.NaN.conjugate();
      ComplexField complexField0 = complex0.getField();
      double double1 = complex0.abs();
      Complex complex7 = complex0.multiply(1427);
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.ONE.add(Double.NaN);
      Complex complex11 = complex10.INF.cosh();
      String string0 = complex11.NaN.toString();
      boolean boolean0 = complex6.equals(complex9);
      Complex complex12 = complex8.ZERO.acos();
      String string1 = complex12.I.toString();
      Complex complex13 = complex0.pow(Double.NaN);
      double double2 = complex13.ONE.abs();
      Complex complex14 = complex8.multiply((-2.62524392470767E-310));
      Complex complex15 = complex8.I.reciprocal();
      Complex complex16 = complex0.multiply(1427);
      Complex complex17 = complex16.ZERO.multiply(complex13);
      Complex complex18 = complex16.tan();
      Complex complex19 = complex0.divide(complex14);
      Complex complex20 = complex1.cos();
      Complex complex21 = complex20.INF.tan();
      boolean boolean1 = complex17.isNaN();
      Complex complex22 = complex13.pow(6.283185307179586);
      Complex complex23 = complex19.reciprocal();
      Complex complex24 = complex1.multiply(1427);
      Complex complex25 = complex9.pow(1815.2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.multiply(0.0);
      Complex complex3 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex4.INF.atan();
      double double0 = complex2.I.abs();
      Complex complex6 = complex4.ZERO.divide(0.0);
      Complex complex7 = complex2.I.sin();
      Complex complex8 = complex7.NaN.sin();
      double double1 = complex0.getArgument();
      Complex complex9 = complex0.multiply(1300);
      boolean boolean0 = complex0.equals("");
      double double2 = complex0.getArgument();
      Complex complex10 = complex2.subtract(complex9);
      List<Complex> list0 = complex10.NaN.nthRoot(1300);
      Complex complex11 = complex10.I.tan();
      Complex complex12 = complex7.reciprocal();
      Complex complex13 = complex4.sqrt1z();
      Complex complex14 = complex9.createComplex((-1067.736), 1.1636629220608724E-136);
      Complex complex15 = complex8.add(complex2);
      Complex complex16 = complex15.I.divide(complex4);
      Complex complex17 = complex15.multiply(complex2);
      Complex complex18 = complex7.tanh();
      Complex complex19 = complex4.log();
      Complex complex20 = complex1.add(complex9);
      Complex complex21 = complex5.asin();
      Complex complex22 = complex4.negate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(3579.890105678, 0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex0.NaN.log();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex1.multiply(complex3);
      Object object0 = complex7.I.readResolve();
      Complex complex8 = complex7.multiply((-4246.524));
      Complex complex9 = complex0.acos();
      double double0 = complex0.abs();
      Complex complex10 = complex3.multiply(3579.890105678);
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex11.ONE.pow(1931.0);
      Complex complex13 = complex11.ONE.cosh();
      Complex complex14 = complex1.multiply(0.16607704758644104);
      Complex complex15 = complex14.conjugate();
      Complex complex16 = complex15.ZERO.pow(complex10);
      Complex complex17 = complex14.I.acos();
      Complex complex18 = complex1.multiply(0);
      Complex complex19 = complex18.exp();
      Complex complex20 = complex18.NaN.subtract(complex6);
      Complex complex21 = complex9.negate();
      Complex complex22 = complex21.atan();
      Complex complex23 = complex21.log();
      String string0 = complex2.toString();
      boolean boolean0 = complex9.isNaN();
      boolean boolean1 = complex17.isInfinite();
      Complex complex24 = complex17.sinh();
      int int0 = complex2.hashCode();
      Object object1 = complex12.readResolve();
  }
}
