/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 10:59:33 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 3.969413618002761E-221;
      Complex complex0 = Complex.valueOf((-2799.884305), 3.969413618002761E-221);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = Complex.valueOf(446.06781925, (-2799.884305));
      double double1 = complex0.INF.getArgument();
      Complex complex7 = complex0.add(3.969413618002761E-221);
      Complex complex8 = complex2.subtract(complex7);
      double double2 = 0.8760144414005048;
      Complex complex9 = complex8.I.subtract(0.8760144414005048);
      // Undeclared exception!
      complex8.ZERO.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-781.92962035), (-781.92962035));
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.NaN.multiply(90);
      Complex complex4 = Complex.valueOf((-3107.8));
      Complex complex5 = complex1.ONE.log();
      Complex complex6 = complex5.sin();
      List<Complex> list0 = complex5.ONE.nthRoot(434);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex0.subtract(complex7);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex4.cos();
      Complex complex11 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1.030593104122615E-64, 1.030593104122615E-64);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = Complex.valueOf(210.17729584397344);
      Complex complex5 = complex4.INF.multiply(0);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.negate();
      Complex complex8 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.subtract(complex5);
      Complex complex10 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-3235.21315121));
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.add(963.4742929907956);
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex2.INF.log();
      Object object0 = complex0.I.readResolve();
      Complex complex5 = complex0.ONE.multiply(963.4742929907956);
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = Complex.valueOf(1920.629581678209, 0.0);
      Complex complex8 = complex1.NaN.tanh();
      Complex complex9 = complex8.ONE.cos();
      Complex complex10 = complex9.NaN.sinh();
      Complex complex11 = complex2.subtract((-4332.455178493572));
      Complex complex12 = complex7.reciprocal();
      double double0 = complex0.getImaginary();
      Complex complex13 = complex1.ONE.reciprocal();
      Complex complex14 = complex13.I.subtract(complex6);
      boolean boolean0 = complex1.equals(complex7);
      String string0 = complex1.toString();
      Complex complex15 = complex7.sin();
      Complex complex16 = complex1.reciprocal();
      double double1 = complex15.getArgument();
      Complex complex17 = complex16.tanh();
      Complex complex18 = complex17.ONE.log();
      Complex complex19 = complex17.negate();
      boolean boolean1 = complex3.isNaN();
      Complex complex20 = complex15.cosh();
      Complex complex21 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3775.893649729422));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.INF.pow((-3775.893649729422));
      Complex complex4 = complex0.cos();
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.tan();
      double double0 = complex5.ZERO.getArgument();
      double double1 = complex0.getArgument();
      double double2 = complex2.INF.abs();
      Complex complex6 = complex3.add((-3.862412756175274E-8));
      double double3 = complex4.getArgument();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.INF.tan();
      ComplexField complexField0 = complex1.getField();
      double double4 = complex1.getImaginary();
      Complex complex9 = complex2.ONE.sin();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex2.acos();
      Complex complex12 = Complex.valueOf(-0.0, Double.POSITIVE_INFINITY);
      boolean boolean1 = complex8.equals((Object) null);
      double double5 = complex7.getArgument();
      Complex complex13 = complex10.multiply((-1354));
      boolean boolean2 = complex1.isNaN();
      Complex complex14 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 4138.54506);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(456.781, 0.0);
      Complex complex3 = complex1.add((-584.9126418177204));
      Complex complex4 = Complex.valueOf(1474.4291306668815, 456.781);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 626.37605289171);
      boolean boolean0 = complex0.equals("");
      Complex complex1 = new Complex(626.37605289171, Double.NaN);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.add(Double.NaN);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.I.tanh();
      Object object0 = complex3.readResolve();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex2.multiply(complex6);
      Complex complex9 = complex8.ZERO.cos();
      String string0 = complex8.I.toString();
      boolean boolean1 = complex2.isNaN();
      int int0 = complex8.hashCode();
      Complex complex10 = complex4.cosh();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex5.I.atan();
      Complex complex13 = complex12.NaN.exp();
      double double0 = complex8.abs();
      Complex complex14 = new Complex((-2931.998841));
      Complex complex15 = complex5.subtract(complex14);
      Complex complex16 = complex0.sinh();
      Complex complex17 = Complex.valueOf(626.37605289171);
      Complex complex18 = complex6.cos();
      Complex complex19 = complex6.add(0.0);
      Complex complex20 = complex8.add((-2931.998841));
      Complex complex21 = complex16.subtract(626.37605289171);
      Complex complex22 = complex14.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.1717383041010577E-300);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex2.tanh();
      String string0 = complex1.ZERO.toString();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.subtract(complex1);
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex8.cos();
      double double0 = complex9.getReal();
      Complex complex11 = complex4.multiply(0.0);
      Complex complex12 = complex11.NaN.multiply(0);
      Complex complex13 = complex0.reciprocal();
      boolean boolean0 = complex10.isInfinite();
      Complex complex14 = Complex.valueOf(1308.1918);
      Object object0 = complex10.readResolve();
      Complex complex15 = complex13.divide(complex11);
      Complex complex16 = complex11.atan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ZERO.add(0.0);
      double double0 = complex1.NaN.abs();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.tanh();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex4.tan();
      double double1 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-4288.865980419816), (-4288.865980419816));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex1.pow(0.0);
      Complex complex7 = complex4.atan();
      boolean boolean0 = complex7.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt();
      List<Complex> list0 = complex2.ONE.nthRoot(7);
      List<Complex> list1 = complex0.I.nthRoot(7);
      int int0 = complex2.ONE.hashCode();
      Complex complex3 = complex1.ZERO.subtract(0.0);
      Complex complex4 = complex2.ZERO.sinh();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex3.ZERO.atan();
      Complex complex7 = complex3.ZERO.add(0.0);
      Complex complex8 = complex7.ONE.subtract(0.0);
      double double0 = complex8.NaN.getArgument();
      Complex complex9 = complex8.ZERO.cos();
      double double1 = complex0.abs();
      Complex complex10 = complex2.ONE.add(Double.NaN);
      Complex complex11 = complex0.negate();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex11.sin();
      Complex complex14 = complex13.I.exp();
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex1.equals(object0);
      Complex complex15 = complex3.ONE.sqrt1z();
      Complex complex16 = complex9.sin();
      boolean boolean1 = complex12.isNaN();
      Complex complex17 = complex11.sinh();
      Complex complex18 = complex3.multiply(155);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      boolean boolean0 = complex0.isNaN();
      double double0 = complex1.INF.getArgument();
      Complex complex2 = complex1.asin();
      double double1 = complex1.I.abs();
      Object object0 = complex2.INF.readResolve();
      boolean boolean1 = complex2.equals(complex1);
      double double2 = complex2.abs();
      Complex complex3 = complex1.add(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      double double0 = complex0.abs();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.I.multiply(Double.NaN);
      Complex complex4 = complex1.log();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = Complex.valueOf(1328.6890443726206, 1.0);
      Complex complex7 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.multiply((-3612));
      boolean boolean0 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-2229.24181));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.add((-2229.24181));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.ZERO.divide((-4.357990742470246E217));
      Complex complex5 = Complex.valueOf((-4.357990742470246E217), 931.0);
      Complex complex6 = complex5.NaN.pow(complex0);
      Complex complex7 = complex5.ZERO.subtract(6.319146317890346E-8);
      Complex complex8 = Complex.valueOf(1156.5);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex9.NaN.pow((-51.471489080696));
      Complex complex11 = complex9.ONE.acos();
      Complex complex12 = complex1.add((-1.0));
      double double0 = complex1.getArgument();
      Complex complex13 = complex9.asin();
      Complex complex14 = complex0.add((-1027.67364005));
      String string0 = complex6.toString();
      boolean boolean0 = complex6.isNaN();
      int int0 = complex12.hashCode();
      Complex complex15 = complex6.multiply(1);
      Complex complex16 = complex15.ZERO.sqrt();
      Complex complex17 = complex10.tanh();
      Complex complex18 = complex2.tanh();
      Complex complex19 = complex1.sqrt();
      Complex complex20 = complex1.reciprocal();
      double double1 = complex16.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1420.8502, (-2854.0));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.I.log();
      double double0 = complex0.INF.abs();
      String string0 = complex0.toString();
      Complex complex3 = complex0.tan();
      double double1 = complex3.NaN.getArgument();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.NaN.multiply(1420.8502);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex2.cos();
      Complex complex9 = complex2.sinh();
      Complex complex10 = complex8.ONE.divide(0.0);
      Complex complex11 = complex10.INF.pow(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex3.isInfinite();
      double double2 = complex6.abs();
      Complex complex12 = complex8.multiply(0);
      Complex complex13 = complex0.NaN.tanh();
      Complex complex14 = complex9.add(Double.POSITIVE_INFINITY);
      Complex complex15 = complex7.multiply(complex6);
      Complex complex16 = complex6.add((-2854.0));
      double double3 = complex16.NaN.getArgument();
      Complex complex17 = complex6.NaN.cos();
      Complex complex18 = complex12.sinh();
      Complex complex19 = complex7.divide(complex16);
      boolean boolean1 = complex9.equals(complex12);
      Complex complex20 = complex11.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(535.14846664676, 535.14846664676);
      Complex complex1 = complex0.I.asin();
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      Complex complex2 = complex1.INF.subtract(0.18978065252304077);
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ONE.add(535.14846664676);
      int int0 = complex4.NaN.hashCode();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex4.divide(0.0);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex7.acos();
      Complex complex10 = complex1.ONE.add(complex9);
      double double0 = complex9.I.abs();
      Object object0 = complex0.I.readResolve();
      String string0 = complex7.toString();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex1.createComplex(1, (-296.055162794));
      Complex complex13 = Complex.valueOf((double) 1, 1.0);
      String string1 = complex13.NaN.toString();
      double double1 = complex2.getReal();
      Complex complex14 = complex1.conjugate();
      Complex complex15 = Complex.I;
      boolean boolean0 = complex14.equals(complex15);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-699.550495));
      Complex complex1 = complex0.INF.asin();
      List<Complex> list0 = complex0.ONE.nthRoot(1);
      Complex complex2 = complex0.ZERO.createComplex((-627.01827234), (-69.126076885171));
      Complex complex3 = complex2.ONE.pow(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.pow(971.241650350034);
      Complex complex7 = complex5.divide(complex0);
      boolean boolean0 = complex5.isNaN();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex10.ONE.acos();
      Complex complex12 = complex1.createComplex((-699.550495), 1);
      Complex complex13 = complex7.divide(complex6);
      double double0 = complex13.INF.abs();
      Complex complex14 = complex12.sin();
      Complex complex15 = complex13.multiply(1217.3282401552);
      Complex complex16 = complex2.pow(971.241650350034);
      Complex complex17 = complex1.log();
      Complex complex18 = complex3.pow(complex17);
      Complex complex19 = complex13.multiply(1647.962);
      Complex complex20 = complex6.createComplex(0.0, 1647.962);
      Complex complex21 = complex18.I.pow(complex8);
      double double1 = complex21.INF.abs();
      Complex complex22 = complex12.multiply(Double.POSITIVE_INFINITY);
      Complex complex23 = complex13.subtract(357.45);
      Complex complex24 = complex15.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1.374152583940637E-239, 1059.292732974317);
      boolean boolean0 = complex0.equals("\u0001/V6");
      Complex complex1 = Complex.INF;
      ComplexField complexField0 = complex1.I.getField();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.I.negate();
      String string0 = complex0.toString();
      int int0 = complex3.ONE.hashCode();
      Complex complex4 = complex2.NaN.sqrt();
      double double0 = complex4.I.abs();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex1.I.sqrt1z();
      Complex complex8 = complex7.ONE.createComplex(1.374152583940637E-239, 0.0);
      ComplexField complexField1 = complex6.getField();
      Complex complex9 = complex6.INF.asin();
      Complex complex10 = complex2.exp();
      Complex complex11 = complex5.tanh();
      double double1 = complex11.NaN.abs();
      Complex complex12 = complex4.NaN.reciprocal();
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex9.multiply(1.0);
      boolean boolean1 = complex14.isNaN();
      Complex complex16 = complex10.negate();
      Complex complex17 = complex3.divide(1059.292732974317);
      Complex complex18 = complex0.sin();
      Complex complex19 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = complex0.INF.toString();
      Complex complex1 = new Complex(1208.06313);
      Complex complex2 = complex1.acos();
      int int0 = complex2.I.hashCode();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.createComplex(895.06279, 895.06279);
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex4.getField();
      Complex complex5 = Complex.valueOf(1208.06313, 1208.06313);
      Complex complex6 = complex5.reciprocal();
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = complex3.sin();
      double double1 = complex6.getReal();
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex5.acos();
      Complex complex11 = Complex.I;
      Complex complex12 = complex3.pow(complex11);
      double double2 = complex8.getArgument();
      Complex complex13 = complex3.pow(complex2);
      Complex complex14 = Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1461.0216), 0.0);
      Complex complex1 = complex0.tanh();
      String string0 = complex1.ZERO.toString();
      Complex complex2 = complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.ZERO.readResolve();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.pow(0.0);
      Object object1 = complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.log();
      double double0 = complex4.NaN.getArgument();
      Complex complex5 = Complex.valueOf((-1767.3), Double.NaN);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.ZERO.tanh();
      Complex complex8 = complex2.pow(complex0);
      Complex complex9 = complex8.add(complex6);
      int int0 = complex8.hashCode();
      try { 
        complex7.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex2.ZERO.add(complex1);
      Complex complex6 = complex1.add(complex2);
      Complex complex7 = complex6.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.INF.subtract(complex6);
      Complex complex10 = complex8.ZERO.createComplex(Double.POSITIVE_INFINITY, 648.9983288492);
      Complex complex11 = complex10.ZERO.add(648.9983288492);
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      int int0 = complex2.hashCode();
      Complex complex13 = complex2.exp();
      Object object0 = complex13.ONE.readResolve();
      Complex complex14 = complex13.tan();
      Complex complex15 = complex12.atan();
      Complex complex16 = complex7.tanh();
      Complex complex17 = complex16.sinh();
      Object object1 = complex17.I.readResolve();
      boolean boolean0 = complex7.isInfinite();
      Complex complex18 = complex17.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.018315639346837997);
      Complex complex1 = complex0.NaN.createComplex(0.018315639346837997, 0.018315639346837997);
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.ONE.divide(900.79949);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex1.ZERO.sqrt1z();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.createComplex(900.79949, 0.018315639346837997);
      try { 
        complex4.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 482.4847949);
      List<Complex> list0 = complex0.ZERO.nthRoot(1617);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.createComplex(482.4847949, 0.0);
      Complex complex4 = complex1.pow((double) 1617);
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex5.ONE.negate();
      List<Complex> list1 = complex5.ONE.nthRoot(1617);
      Complex complex8 = complex0.multiply(0.0);
      Complex complex9 = Complex.valueOf(0.0, (-581.85837884683));
      Complex complex10 = complex0.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.983191803254889E-7);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.NaN.exp();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex4.ONE.tan();
      String string0 = complex3.INF.toString();
      Complex complex6 = complex3.INF.negate();
      Complex complex7 = complex4.ZERO.add(4.983191803254889E-7);
      Complex complex8 = complex3.INF.reciprocal();
      Complex complex9 = complex0.multiply((-562.56240454));
      String string1 = complex1.INF.toString();
      Complex complex10 = complex2.log();
      int int0 = complex2.hashCode();
      Complex complex11 = complex0.asin();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex10.divide(complex11);
      ComplexField complexField0 = complex13.NaN.getField();
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex13.exp();
      Complex complex16 = complex10.ONE.asin();
      Complex complex17 = complex10.sqrt1z();
      double double0 = complex17.I.abs();
      double double1 = complex7.getArgument();
      Complex complex18 = complex1.negate();
      Complex complex19 = Complex.valueOf(1169.16, 0.0);
      String string2 = complex15.toString();
      Complex complex20 = complex19.ONE.multiply((-154.37290453));
      Complex complex21 = complex2.sqrt1z();
      Complex complex22 = complex19.sqrt1z();
      Complex complex23 = complex12.multiply(0.0);
      Object object0 = complex21.readResolve();
      Complex complex24 = complex4.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1329.384952136, 2664.924783227);
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = complex0.NaN.hashCode();
      Object object0 = complex0.readResolve();
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.cosh();
      try { 
        complex0.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.ZERO.multiply(complex3);
      Complex complex6 = complex0.INF.add(3.4742610108480497E-91);
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex6.NaN.divide(0.0);
      double double0 = complex0.abs();
      Complex complex9 = complex1.conjugate();
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-440.80938174085), (-1558.003038));
      Complex complex1 = Complex.valueOf((-1558.003038), (-5567.30836));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.NaN.log();
      Object object0 = complex1.ZERO.readResolve();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.11691460013389587, 0.11691460013389587);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = Complex.valueOf((-2622.229253318385));
      Complex complex3 = complex0.tanh();
      int int0 = complex3.NaN.hashCode();
      Complex complex4 = complex3.cosh();
      String string0 = complex2.INF.toString();
      Complex complex5 = complex4.INF.divide(complex3);
      int int1 = complex3.hashCode();
      Complex complex6 = complex2.createComplex(0.11691460013389587, 0.11691460013389587);
      Complex complex7 = complex2.ONE.tan();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex8.I.multiply((-788));
      Complex complex10 = complex8.ONE.exp();
      Complex complex11 = complex2.conjugate();
      Complex complex12 = complex3.conjugate();
      Complex complex13 = complex12.I.negate();
      double double0 = complex4.getArgument();
      double double1 = complex2.getArgument();
      Complex complex14 = complex1.asin();
      Complex complex15 = Complex.valueOf(0.013662443237177985, 3.141592653589793);
      Complex complex16 = complex15.I.divide(complex9);
      Complex complex17 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex1.INF.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex1.ZERO.sin();
      boolean boolean0 = complex0.equals(object0);
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex4 = complex1.multiply((-389.222547516));
      Complex complex5 = complex3.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-0.05417713522911072));
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      List<Complex> list0 = complex0.nthRoot(336);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.pow(1.7838233889223407E279);
      Complex complex5 = complex1.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-896.2));
      double double0 = complex1.ZERO.abs();
      Complex complex2 = complex0.ONE.multiply(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex3.subtract(complex1);
      Complex complex7 = complex4.sin();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex5.cosh();
      Complex complex10 = complex9.INF.pow(7.01199184127881E-8);
      Complex complex11 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1443.2834841991028);
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.ONE.pow(complex1);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex2.ONE.add(0.0);
      Complex complex4 = complex1.I.pow(3787.4101960639223);
      Complex complex5 = complex0.tanh();
      Complex complex6 = Complex.valueOf(3787.4101960639223);
      Complex complex7 = complex6.tanh();
      int int0 = complex7.hashCode();
      boolean boolean0 = complex6.equals(complex1);
      String string0 = complex3.toString();
      Complex complex8 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.createComplex(1323.0, 648.01471850226);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.subtract(917.808007);
      Object object0 = complex0.readResolve();
      Complex complex5 = complex4.tan();
      double double0 = complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ONE.multiply(complex0);
      double double0 = complex0.getReal();
      Complex complex4 = complex1.multiply(13);
      String string0 = complex4.toString();
      Complex complex5 = Complex.valueOf(0.0, (double) 13);
      Complex complex6 = complex5.I.log();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      double double1 = complex5.getArgument();
      Complex complex8 = complex2.subtract(complex3);
      Complex complex9 = complex8.I.multiply(complex5);
      Complex complex10 = complex8.add(1.5707963267948966);
      double double2 = complex6.getArgument();
      Complex complex11 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.pow((-1.530845432304069E240));
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.INF.multiply(763.3716323815183);
      Complex complex6 = complex3.NaN.sqrt();
      Complex complex7 = complex6.I.log();
      Complex complex8 = complex1.subtract((-94.8075));
      Object object0 = complex8.ONE.readResolve();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex10.INF.cos();
      Complex complex12 = complex10.divide((-387.3709436945952));
      int int0 = complex3.hashCode();
      ComplexField complexField0 = complex0.getField();
      Complex complex13 = complex5.reciprocal();
      double double0 = complex2.getReal();
      int int1 = complex3.hashCode();
      Complex complex14 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply(192);
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.ZERO.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.sqrt();
      ComplexField complexField0 = complex1.INF.getField();
      ComplexField complexField1 = complex0.getField();
      boolean boolean0 = complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.subtract(Double.NaN);
      Complex complex3 = complex0.I.multiply(Double.NaN);
      Complex complex4 = complex2.ONE.subtract(complex0);
      Complex complex5 = complex0.multiply(382);
      Complex complex6 = complex2.ZERO.atan();
      Complex complex7 = complex6.INF.multiply(0.0);
      Complex complex8 = complex6.pow(complex5);
      Complex complex9 = complex0.ONE.sqrt1z();
      Complex complex10 = complex2.subtract(complex0);
      Complex complex11 = complex10.ZERO.multiply(0);
      Complex complex12 = complex0.pow(complex2);
      Complex complex13 = complex1.tanh();
      Complex complex14 = complex9.cos();
      ComplexField complexField0 = complex9.getField();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(392.14661);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.ONE.subtract(complex1);
      int int0 = complex0.hashCode();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex4.conjugate();
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-309.737668));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.divide(1125.840227545846);
      double double0 = complex3.abs();
      double double1 = complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-0.9457754946564695), (-0.9457754946564695));
      Complex complex2 = complex0.INF.divide((-0.9457754946564695));
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.NaN;
      try { 
        complex4.I.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-997.0063441664404), (-953.177146813412));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.divide(complex1);
      int int0 = complex0.NaN.hashCode();
      Complex complex3 = complex2.ZERO.sqrt1z();
      double double0 = complex1.ZERO.abs();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = complex4.ZERO.tanh();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.multiply(1062);
      Complex complex9 = Complex.valueOf((-953.177146813412));
      Complex complex10 = complex9.createComplex(0.0, (-415.965685250097));
      ComplexField complexField0 = complex8.getField();
      String string0 = complex5.toString();
      Complex complex11 = complex6.tan();
      Complex complex12 = complex10.atan();
      ComplexField complexField1 = complex5.getField();
      double double1 = complex8.getArgument();
      double double2 = complex0.getReal();
      Complex complex13 = complex10.sin();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.564672913105876E-8), 50.954);
      Complex complex1 = complex0.INF.pow(2496.930823181);
      Complex complex2 = complex0.add((-2163.28));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.ONE.pow(2496.930823181);
      Complex complex6 = complex2.cosh();
      double double0 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.createComplex(0.0, (-825.8947));
      Complex complex2 = complex0.createComplex(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex((-1055.563546));
      Object object0 = complex0.I.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = new Complex((-1055.563546));
      Complex complex2 = complex1.NaN.multiply(1);
      Complex complex3 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.createComplex((-653.11363078748), (-653.11363078748));
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.cos();
      List<Complex> list0 = complex2.ZERO.nthRoot(17);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.NaN.negate();
      Complex complex8 = complex6.log();
      Complex complex9 = complex4.sqrt();
      Complex complex10 = complex5.I.sin();
      Complex complex11 = complex9.NaN.atan();
      Object object0 = complex2.readResolve();
      Complex complex12 = complex5.add((-1.0));
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1901.2744787367992), (-1901.2744787367992));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.acos();
      int int0 = complex2.NaN.hashCode();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.divide((-1377.034797029519));
      Object object0 = complex0.readResolve();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex3.I.subtract((-1901.2744787367992));
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = complex3.ZERO.divide(6.283185307179586);
      Complex complex5 = complex0.createComplex(6.283185307179586, (-1708.4819042004544));
      Complex complex6 = complex4.I.multiply(801);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.pow(complex7);
      Complex complex9 = complex5.ONE.multiply(complex7);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex5.multiply((-1));
      String string0 = complex11.NaN.toString();
      Complex complex12 = complex11.tanh();
      double double0 = complex12.NaN.getArgument();
      Complex complex13 = Complex.valueOf((double) (-1));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.multiply((-2318.0));
      Complex complex5 = complex4.sin();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add(2511.236);
      Complex complex2 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.I.tanh();
      Complex complex6 = complex3.NaN.exp();
      Complex complex7 = complex0.ONE.asin();
      Complex complex8 = complex7.NaN.atan();
      Complex complex9 = complex3.pow((-20.0));
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex9.equals(object0);
      Complex complex10 = complex9.divide(complex5);
      Complex complex11 = complex10.ONE.cosh();
      ComplexField complexField0 = complex9.getField();
      Complex complex12 = complex4.atan();
      Complex complex13 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.divide(0.0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex1.NaN.atan();
      String string0 = complex4.toString();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ONE.divide(0.0);
      double double0 = complex0.abs();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.add((-2100.461664186));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.NaN.subtract(complex2);
      int int0 = complex4.ZERO.hashCode();
      Complex complex6 = complex2.ZERO.atan();
      Complex complex7 = complex3.tan();
      int int1 = complex3.hashCode();
      double double0 = complex7.getArgument();
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.969413618002761E-221);
      Complex complex1 = Complex.valueOf(3.969413618002761E-221);
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.I.multiply((-1176));
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex4.isInfinite();
      Complex complex6 = complex2.createComplex(6.151951078101721E-205, 6.151951078101721E-205);
      Complex complex7 = complex4.pow(complex2);
      Complex complex8 = complex1.log();
      ComplexField complexField0 = complex5.getField();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2500.8970168089672, 2500.8970168089672);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.multiply(0);
      double double0 = complex2.INF.abs();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.ONE.log();
      Complex complex7 = complex2.reciprocal();
      int int0 = complex2.hashCode();
      Complex complex8 = complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2784.67), 1.0);
      Complex complex1 = complex0.multiply(17);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Object object0 = complex0.ONE.readResolve();
      try { 
        complex1.ONE.nthRoot((-2375));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,375
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(356.164097);
      Complex complex1 = Complex.valueOf(202.3904285778527, 356.164097);
      double double0 = complex0.getArgument();
      Complex complex2 = complex0.add(356.164097);
      Complex complex3 = complex2.ZERO.sinh();
      double double1 = complex0.INF.getArgument();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.sin();
      double double2 = complex0.getImaginary();
      double double3 = complex0.getArgument();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 2391.17445);
      Complex complex1 = complex0.ONE.tan();
      String string0 = complex0.ZERO.toString();
      Complex complex2 = complex0.atan();
      Object object0 = complex2.I.readResolve();
      Complex complex3 = complex2.sinh();
      double double0 = complex3.I.abs();
      Complex complex4 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2138.687657, (-222.484));
      Complex complex1 = complex0.ZERO.tanh();
      List<Complex> list0 = complex1.NaN.nthRoot(37);
      Complex complex2 = complex1.ZERO.multiply((-409.89371685));
      Complex complex3 = complex2.multiply((double) 37);
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex1.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex1.sqrt1z();
      double double0 = complex3.abs();
      Complex complex6 = complex4.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(3832.7698051);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = new Complex(372.1075585);
      Complex complex3 = complex0.divide(complex2);
      double double0 = complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(516.5813484234624);
      Complex complex2 = complex1.conjugate();
      String string0 = complex1.toString();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.valueOf(644.150250664, 644.150250664);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.ZERO.divide(complex1);
      ComplexField complexField0 = complex1.getField();
      Complex complex5 = complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.multiply((-1014.1879));
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.valueOf((-1014.1879));
      Complex complex9 = complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex((-1686.9));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-1350.60364754));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-1289.070932131), (-1289.070932131));
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply((-3127));
      Complex complex2 = complex1.INF.createComplex((-1289.070932131), (-3127));
      try { 
        complex2.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex2.I.subtract(0.0);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.NaN.acos();
      Complex complex6 = complex0.ONE.tanh();
      double double0 = complex0.getReal();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      double double0 = complex0.abs();
      Complex complex2 = complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      double double0 = complex2.NaN.abs();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.I.tanh();
      int int0 = complex0.hashCode();
      boolean boolean0 = complex0.isInfinite();
      Complex complex5 = complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(3142.91995806, 560.7561819);
      Complex complex1 = complex0.multiply((-2176.3));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(937.0, 937.0);
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.reciprocal();
      Object object0 = complex1.INF.readResolve();
      Complex complex2 = complex0.add((-1597.422));
      Object object1 = complex1.readResolve();
      Complex complex3 = complex0.asin();
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = complex0.hashCode();
      Complex complex1 = complex0.ONE.pow((-3209.0));
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.ONE.subtract(complex0);
      try { 
        complex0.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2756.6, 2756.6);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.createComplex(2756.6, 2756.6);
      Complex complex3 = complex2.NaN.divide(complex0);
      double double0 = complex1.ONE.abs();
      Complex complex4 = complex0.divide(2756.6);
      Complex complex5 = complex4.NaN.createComplex(2.1066884994506836, 0.0);
      Complex complex6 = complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1134037971496582);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.subtract(1.1134037971496582);
      String string0 = complex0.NaN.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.NaN.subtract(1.1134037971496582);
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex9.INF.sqrt1z();
      String string1 = complex7.toString();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3563.5899444), (-3563.5899444));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      boolean boolean0 = complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.cos();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = Complex.valueOf(0.22548454999923706, 2623.75);
      try { 
        complex0.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2499290483167703E-9), 2487.57);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1806.987));
      List<Complex> list0 = complex0.I.nthRoot(1825);
      Complex complex1 = complex0.add((-1806.987));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      int int0 = complex0.NaN.hashCode();
      int int1 = complex0.NaN.hashCode();
      ComplexField complexField0 = complex0.INF.getField();
      double double0 = complex2.INF.getArgument();
      Complex complex3 = Complex.valueOf((-343.4354751152916));
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex0.cos();
      ComplexField complexField1 = complex2.getField();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.INF.multiply((-2628));
      Complex complex8 = complex2.pow(complex5);
      Complex complex9 = complex0.negate();
      Complex complex10 = complex2.ZERO.atan();
      Complex complex11 = complex9.reciprocal();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex2.multiply(complex8);
      Complex complex14 = complex13.subtract((-343.4354751152916));
      Complex complex15 = complex4.multiply(1.1719142537166848E16);
      Complex complex16 = complex15.ONE.cosh();
      Complex complex17 = Complex.valueOf(1.1719142537166848E16);
      Complex complex18 = complex8.exp();
      Complex complex19 = complex4.subtract(complex13);
      Complex complex20 = complex19.sin();
      double double1 = complex18.abs();
      Complex complex21 = complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1455.7126555836);
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.INF.sin();
      Object object0 = complex3.ZERO.readResolve();
      Object object1 = complex0.INF.readResolve();
      double double0 = complex0.INF.getArgument();
      List<Complex> list0 = complex5.INF.nthRoot(295);
      List<Complex> list1 = complex0.nthRoot(4539);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex8.ZERO.sinh();
      Complex complex10 = complex5.conjugate();
      double double1 = complex10.INF.getArgument();
      Complex complex11 = complex7.add(complex4);
      Complex complex12 = complex1.multiply((double) 4539);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.INF.tanh();
      Object object0 = complex2.NaN.readResolve();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = Complex.valueOf(0.0);
      double double0 = complex5.I.getArgument();
      double double1 = complex1.INF.abs();
      Complex complex6 = complex0.cos();
      ComplexField complexField0 = complex6.ONE.getField();
      Complex complex7 = complex6.pow(complex1);
      Complex complex8 = complex7.NaN.sinh();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex1.tan();
      Complex complex11 = complex4.tan();
      double double2 = complex9.getArgument();
      Complex complex12 = complex6.NaN.tanh();
      Complex complex13 = complex6.createComplex(2.631993083235205E-8, 0.0);
      Complex complex14 = complex3.createComplex(1.0, Double.NaN);
      Complex complex15 = complex14.I.sqrt();
      Complex complex16 = complex13.NaN.acos();
      Complex complex17 = complex15.INF.multiply(complex13);
      Complex complex18 = complex17.I.log();
      double double3 = complex17.ONE.abs();
      double double4 = complex11.getReal();
      Complex complex19 = complex15.tan();
      Complex complex20 = complex2.divide(complex13);
      Complex complex21 = complex2.exp();
      Complex complex22 = complex6.add(complex14);
      boolean boolean0 = complex15.isNaN();
      Complex complex23 = complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      double double0 = complex0.abs();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex1.I.multiply(Double.NaN);
      Complex complex4 = complex1.log();
      Object object0 = complex1.readResolve();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex1.INF.reciprocal();
      Complex complex7 = complex5.sin();
      Complex complex8 = Complex.valueOf(0.0, Double.NaN);
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.multiply((-3612));
      boolean boolean0 = complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.valueOf(6.283185307179586, (-228.1752471));
      Complex complex3 = complex2.ZERO.subtract(6.283185307179586);
      Complex complex4 = complex2.INF.add(complex1);
      Complex complex5 = complex1.INF.asin();
      Complex complex6 = complex1.ZERO.divide(complex0);
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.INF.subtract(0.0);
      Complex complex9 = complex8.INF.tanh();
      Complex complex10 = complex1.ZERO.log();
      Complex complex11 = complex7.INF.atan();
      Complex complex12 = complex11.acos();
      Complex complex13 = complex0.tan();
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex7.sinh();
      boolean boolean0 = complex15.isInfinite();
      Complex complex16 = complex13.multiply((-228.1752471));
      Complex complex17 = complex13.asin();
      Complex complex18 = complex7.exp();
      Complex complex19 = complex9.cosh();
      double double0 = complex8.getReal();
      Complex complex20 = complex15.atan();
      Object object0 = complex9.readResolve();
      Complex complex21 = complex15.divide((-228.1752471));
      Complex complex22 = Complex.valueOf((-1006.495), 0.0);
      Complex complex23 = complex3.atan();
      Complex complex24 = Complex.valueOf(0.0, 0.0);
      Complex complex25 = complex20.sqrt();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3281.36019);
      Complex complex1 = complex0.ONE.pow(3281.36019);
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = Complex.valueOf(3281.36019, (-903.254442567337));
      Complex complex5 = complex0.subtract(342.0);
      String string0 = complex5.INF.toString();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(2.391857624053955);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-59.318553658553));
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.ONE.log();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.valueOf((-59.318553658553), (-59.318553658553));
      Complex complex8 = complex4.ZERO.acos();
      boolean boolean0 = complex6.isNaN();
      Object object1 = complex5.readResolve();
      String string0 = complex4.toString();
      Object object2 = complex5.readResolve();
      Object object3 = complex4.readResolve();
      boolean boolean1 = complex1.equals(object3);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.NaN.cosh();
      int int0 = complex3.ZERO.hashCode();
      Complex complex4 = complex3.divide((-192.89537872454));
      ComplexField complexField0 = complex4.ZERO.getField();
      Complex complex5 = Complex.valueOf(0.0, (-192.89537872454));
      Complex complex6 = complex0.add((-613.69475));
      Complex complex7 = complex0.I.negate();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex0.divide(complex8);
      Complex complex10 = Complex.valueOf(6018.9);
      Complex complex11 = complex0.cos();
      Object object0 = complex8.readResolve();
      Complex complex12 = complex6.multiply(1);
      String string0 = complex12.toString();
      Complex complex13 = complex1.multiply((-192.89537872454));
      Complex complex14 = complex13.acos();
      int int1 = complex13.ZERO.hashCode();
      Complex complex15 = complex13.NaN.multiply(complex9);
      Complex complex16 = complex5.log();
      Complex complex17 = complex10.reciprocal();
      Complex complex18 = complex17.INF.add(complex6);
      int int2 = complex18.ONE.hashCode();
      Complex complex19 = complex2.acos();
      boolean boolean0 = complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide((-1551.115844625873));
      int int0 = complex1.I.hashCode();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex0.createComplex(620.8792082499485, 3561.6969082245737);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex4.asin();
  }
}
