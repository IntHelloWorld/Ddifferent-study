/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:03:09 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.INF.divide(complex2);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex5.INF.subtract(complex3);
      Complex complex7 = Complex.valueOf(2.0, 0.0);
      List<Complex> list0 = complex1.nthRoot(2931);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex8.I.conjugate();
      Complex complex10 = complex9.ONE.sin();
      Complex complex11 = complex9.tan();
      double double0 = complex7.getImaginary();
      Complex complex12 = complex11.INF.log();
      double double1 = complex7.getArgument();
      double double2 = complex7.getArgument();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      List<Complex> list1 = complex1.ZERO.nthRoot(2081);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1646.1976967), (-1646.1976967));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = Complex.valueOf((-1646.1976967));
      Complex complex9 = complex0.ONE.sinh();
      Complex complex10 = complex8.I.sqrt1z();
      Complex complex11 = complex10.I.pow(complex9);
      Complex complex12 = Complex.valueOf((-1646.1976967));
      Complex complex13 = complex3.conjugate();
      Complex complex14 = Complex.valueOf((-1646.1976967));
      Complex complex15 = complex14.I.negate();
      Complex complex16 = complex5.sqrt1z();
      Complex complex17 = complex16.I.sqrt1z();
      ComplexField complexField0 = complex16.NaN.getField();
      Complex complex18 = Complex.valueOf(2.0, (-1646.1976967));
      Complex complex19 = complex13.sin();
      Complex complex20 = complex19.NaN.negate();
      Complex complex21 = complex5.divide(2.0);
      boolean boolean0 = complex13.isInfinite();
      Complex complex22 = complex0.cos();
      Complex complex23 = new Complex((-1646.1976967), 0.0);
      Complex complex24 = complex22.INF.multiply(complex23);
      Complex complex25 = complex0.divide(2.0);
      Complex complex26 = complex3.cos();
      Complex complex27 = complex10.subtract((-371.56787));
      Complex complex28 = complex27.pow(complex25);
      ComplexField complexField1 = complex4.getField();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.572185635487065E147, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(630.8763);
      double double0 = complex1.ONE.getArgument();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.createComplex(4.572185635487065E147, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.INF.asin();
      Complex complex5 = complex2.INF.cosh();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.I.cos();
      String string0 = complex8.toString();
      ComplexField complexField0 = complex8.getField();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex7.ONE.multiply(complex9);
      Complex complex11 = complex8.I.conjugate();
      Complex complex12 = complex7.sqrt();
      String string1 = complex12.ONE.toString();
      Complex complex13 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex14 = complex12.divide(complex0);
      ComplexField complexField1 = complex12.getField();
      Complex complex15 = Complex.valueOf((-513.509212295), 630.8763);
      Complex complex16 = complex1.negate();
      Complex complex17 = complex16.ZERO.asin();
      Complex complex18 = complex7.divide(complex14);
      Complex complex19 = complex18.NaN.subtract((-1092.7));
      Complex complex20 = complex0.multiply(1381);
      Complex complex21 = complex9.subtract(4.572185635487065E147);
      int int1 = complex11.hashCode();
      boolean boolean0 = complex20.isNaN();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      ComplexField complexField0 = complex1.NaN.getField();
      Complex complex2 = complex1.multiply(complex0);
      try { 
        complex0.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.INF.add(complex1);
      try { 
        complex0.NaN.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(8.919141843592823E258);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(8.919141843592823E258, 8.919141843592823E258);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.I.subtract(0.0);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex3.INF.sinh();
      Complex complex8 = Complex.valueOf(8.919141843592823E258);
      Complex complex9 = Complex.valueOf(8.919141843592823E258);
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = complex9.ONE.sqrt1z();
      Complex complex12 = complex8.ONE.cosh();
      Complex complex13 = complex12.NaN.acos();
      Complex complex14 = complex0.multiply(complex1);
      Complex complex15 = complex14.ONE.cosh();
      Complex complex16 = complex15.add(8.919141843592823E258);
      Complex complex17 = complex14.pow(8.919141843592823E258);
      Complex complex18 = complex14.INF.createComplex(8.919141843592823E258, (-4190.2189995407));
      Complex complex19 = Complex.valueOf(8.919141843592823E258);
      String string0 = complex0.toString();
      Complex complex20 = complex1.exp();
      Complex complex21 = complex1.multiply(1750);
      Complex complex22 = complex14.ONE.sinh();
      String string1 = complex17.toString();
      Complex complex23 = complex14.asin();
      Complex complex24 = Complex.valueOf(1627.560000454);
      double double0 = complex24.ZERO.abs();
      Complex complex25 = complex7.createComplex((-4190.2189995407), 20.0);
      Complex complex26 = complex1.cosh();
      Complex complex27 = complex26.subtract(complex2);
      double double1 = complex13.abs();
      Complex complex28 = complex14.exp();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ZERO.asin();
      String string0 = complex0.INF.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex4.NaN.acos();
      Complex complex6 = complex3.ZERO.sqrt1z();
      Complex complex7 = Complex.valueOf((-384.0), (-384.0));
      Complex complex8 = complex6.INF.atan();
      Complex complex9 = complex3.ONE.sinh();
      int int0 = complex0.hashCode();
      Complex complex10 = complex3.subtract(complex2);
      ComplexField complexField0 = complex3.getField();
      double double0 = complex10.getImaginary();
      Complex complex11 = complex8.I.multiply((-188));
      Complex complex12 = complex9.I.sinh();
      Complex complex13 = complex11.NaN.subtract(complex9);
      Complex complex14 = complex2.createComplex(3266.9533106816, (-265.66));
      Complex complex15 = complex10.sqrt1z();
      Complex complex16 = Complex.valueOf(3266.9533106816);
      Complex complex17 = complex1.ONE.add(complex6);
      Complex complex18 = complex8.multiply(0.0);
      List<Complex> list0 = complex16.NaN.nthRoot(1);
      ComplexField complexField1 = complex1.getField();
      boolean boolean0 = complex9.isInfinite();
      boolean boolean1 = complex2.isNaN();
      Complex complex19 = complex16.multiply((-188));
      ComplexField complexField2 = complex0.getField();
      Complex complex20 = complex8.acos();
      Complex complex21 = complex17.pow((double) (-188));
      double double1 = complex10.abs();
      Complex complex22 = complex14.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex4.ONE.sqrt();
      Complex complex7 = complex0.ONE.atan();
      Complex complex8 = complex5.ZERO.exp();
      Complex complex9 = complex8.NaN.cosh();
      Complex complex10 = complex9.ZERO.subtract(complex5);
      Complex complex11 = complex0.subtract(complex2);
      Complex complex12 = complex5.NaN.cos();
      Object object0 = complex5.ZERO.readResolve();
      double double0 = complex2.getImaginary();
      double double1 = complex5.abs();
      Complex complex13 = complex1.divide((-1750.670101528));
      Complex complex14 = complex13.ONE.add(1907.6656702017226);
      Complex complex15 = complex13.sqrt();
      Complex complex16 = complex13.I.multiply(complex15);
      Complex complex17 = complex16.I.pow(1.537490712803659E-166);
      Complex complex18 = complex0.pow(Double.NaN);
      Complex complex19 = complex18.multiply(complex13);
      Complex complex20 = complex2.log();
      double double2 = complex15.getImaginary();
      Complex complex21 = complex15.multiply(complex3);
      boolean boolean0 = complex13.isNaN();
      Complex complex22 = complex14.exp();
      Complex complex23 = complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.asin();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.INF.cosh();
      String string0 = complex0.ONE.toString();
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(485.83141813, 0.0);
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex1.ONE.divide(complex2);
      List<Complex> list0 = complex3.nthRoot(1);
      Complex complex8 = complex0.ONE.tanh();
      Complex complex9 = Complex.valueOf((-1534.870629686736));
      Complex complex10 = complex8.pow(complex6);
      Complex complex11 = complex1.sqrt1z();
      Complex complex12 = complex1.pow(complex7);
      Complex complex13 = complex11.NaN.pow(1.0);
      Complex complex14 = complex3.acos();
      Complex complex15 = complex11.NaN.add(0.0);
      List<Complex> list1 = complex15.I.nthRoot(1);
      Complex complex16 = complex14.ZERO.log();
      Complex complex17 = complex16.INF.divide(Double.POSITIVE_INFINITY);
      double double1 = complex4.getImaginary();
      boolean boolean0 = complex11.equals(complex5);
      boolean boolean1 = complex11.isNaN();
      ComplexField complexField0 = complex1.getField();
      Complex complex18 = complex5.tan();
      Complex complex19 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2988.393043559839), (-4240.0));
      Complex complex1 = new Complex((-4240.0));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ONE.cos();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = Complex.valueOf((-4240.0), 3086.5431883579);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex3.pow((-4240.0));
      Complex complex9 = complex2.acos();
      double double0 = complex2.getArgument();
      Complex complex10 = Complex.valueOf(0.0, 3086.5431883579);
      Complex complex11 = complex10.subtract((-1525.1946));
      boolean boolean0 = complex9.isInfinite();
      double double1 = complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(522.665);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex4.ONE.multiply(0.0);
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.valueOf(3439.49, 0.0);
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex0.INF.log();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex6.INF.cos();
      double double0 = complex2.abs();
      Complex complex12 = complex1.tanh();
      Complex complex13 = complex0.ZERO.multiply(3439.49);
      Complex complex14 = complex13.INF.conjugate();
      boolean boolean0 = complex1.isInfinite();
      double double1 = complex0.getReal();
      Complex complex15 = complex3.add(0.0);
      Object object0 = complex11.readResolve();
      Complex complex16 = complex2.ZERO.log();
      Complex complex17 = complex3.conjugate();
      Complex complex18 = complex6.subtract(complex3);
      Complex complex19 = complex2.sinh();
      Complex complex20 = complex11.tanh();
      Complex complex21 = complex13.negate();
      Object object1 = complex19.readResolve();
      Complex complex22 = Complex.valueOf(3439.49);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2145.0483185634357, 2145.0483185634357);
      Complex complex1 = complex0.pow(2145.0483185634357);
      Complex complex2 = complex0.INF.sqrt();
      List<Complex> list0 = complex0.ZERO.nthRoot(2333);
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex0.I.tan();
      double double0 = complex6.NaN.getArgument();
      Complex complex7 = Complex.valueOf(2145.0483185634357);
      List<Complex> list1 = complex7.I.nthRoot(1679);
      double double1 = complex3.I.getArgument();
      double double2 = complex0.getReal();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex4.INF.sqrt();
      Complex complex10 = complex3.ZERO.cosh();
      Complex complex11 = Complex.valueOf(Double.NaN, (-383.723626497356));
      Complex complex12 = complex4.cos();
      Complex complex13 = complex2.divide(complex1);
      Complex complex14 = Complex.valueOf(2145.0483185634357, (-2171.221));
      Complex complex15 = complex5.divide(complex3);
      Complex complex16 = complex15.I.subtract(Double.NaN);
      Complex complex17 = Complex.valueOf(0.0, 0.0);
      Complex complex18 = complex17.NaN.pow(complex9);
      double double3 = complex2.getArgument();
      int int0 = complex5.hashCode();
      Complex complex19 = complex10.reciprocal();
      Complex complex20 = complex12.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-3.7999795083850525E-8));
      Complex complex1 = complex0.I.tanh();
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.INF.atan();
      double double0 = complex5.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex1.pow((-3.7999795083850525E-8));
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = Complex.valueOf(5064.0503226, (-3.7999795083850525E-8));
      int int0 = complex1.hashCode();
      boolean boolean1 = complex7.equals(object0);
      Complex complex9 = Complex.I;
      boolean boolean2 = complex1.equals(complex9);
      Complex complex10 = complex1.reciprocal();
      Complex complex11 = Complex.valueOf(1.975188970565796);
      Complex complex12 = complex6.sin();
      Object object1 = complex10.readResolve();
      Object object2 = complex9.readResolve();
      Complex complex13 = complex4.ZERO.createComplex(1217.899, 1217.899);
      boolean boolean3 = complex5.equals(object2);
      double double1 = complex9.getReal();
      String string0 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1586.949144582, 1586.949144582);
      Complex complex1 = complex0.ONE.sqrt1z();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.ZERO.createComplex((-20.0), (-20.0));
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex0.pow((-3769.19127546718));
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex6.reciprocal();
      ComplexField complexField0 = complex5.NaN.getField();
      ComplexField complexField1 = complex0.INF.getField();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex8.NaN.add(495.311);
      Complex complex10 = complex6.cosh();
      double double0 = complex10.NaN.abs();
      Complex complex11 = complex5.ZERO.multiply(complex3);
      boolean boolean0 = complex1.isInfinite();
      Complex complex12 = complex10.sqrt();
      Complex complex13 = complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ONE.multiply(Double.NaN);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex7.ONE.cos();
      Complex complex9 = complex6.I.sin();
      Complex complex10 = complex5.NaN.sin();
      Complex complex11 = complex5.INF.multiply(complex4);
      Complex complex12 = complex5.cosh();
      Complex complex13 = complex1.add(complex0);
      int int0 = complex5.hashCode();
      Complex complex14 = complex13.INF.divide(complex6);
      Complex complex15 = complex0.sinh();
      Complex complex16 = complex15.ONE.divide(complex13);
      Complex complex17 = complex13.add(Double.NaN);
      Complex complex18 = complex9.add(Double.NaN);
      Complex complex19 = complex15.add(Double.NaN);
      Complex complex20 = complex4.sqrt();
      int int1 = complex10.hashCode();
      double double0 = complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 6048.638710353714);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.INF.multiply(536);
      Complex complex3 = complex0.INF.divide(20.0);
      Complex complex4 = complex3.createComplex(20.0, (-201.2507056012251));
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex0.I.multiply((-4051));
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex3.ZERO.divide(complex0);
      Complex complex9 = complex0.atan();
      Object object0 = complex6.readResolve();
      double double0 = complex7.getReal();
      Complex complex10 = complex4.add(complex1);
      Complex complex11 = complex1.atan();
      Complex complex12 = complex3.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1.0577249492414076E-176);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.INF.add(complex3);
      double double0 = complex0.getImaginary();
      Complex complex5 = complex3.tanh();
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex6 = complex5.ZERO.multiply((-1153.2142768));
      String string0 = complex6.INF.toString();
      Complex complex7 = complex5.ONE.reciprocal();
      Complex complex8 = complex7.NaN.negate();
      Complex complex9 = complex7.ONE.multiply(0.0);
      int int0 = complex0.hashCode();
      Complex complex10 = complex5.asin();
      Complex complex11 = complex10.ONE.cosh();
      Complex complex12 = Complex.valueOf((-548.40622941), Double.NaN);
      Complex complex13 = complex11.ONE.add(complex8);
      Complex complex14 = complex8.cosh();
      Complex complex15 = complex2.multiply(complex0);
      Complex complex16 = complex6.log();
      Complex complex17 = complex8.subtract(0.0);
      ComplexField complexField1 = complex17.ONE.getField();
      Complex complex18 = complex0.add(complex10);
      Complex complex19 = complex4.sqrt1z();
      Complex complex20 = complex16.pow((-1153.2142768));
      boolean boolean0 = complex8.isInfinite();
      Complex complex21 = complex4.multiply((-579));
      Complex complex22 = complex21.pow(6.283185307179586);
      Complex complex23 = complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5261374711990356);
      Complex complex1 = Complex.valueOf(0.5261374711990356);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.ZERO.createComplex(0.5261374711990356, 2.356194490192345);
      ComplexField complexField0 = complex3.ZERO.getField();
      Complex complex6 = complex4.ONE.negate();
      double double0 = complex4.NaN.getArgument();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex7.INF.tanh();
      List<Complex> list0 = complex6.ZERO.nthRoot(1);
      Complex complex9 = complex3.divide(0.5261374711990356);
      Complex complex10 = complex9.I.negate();
      Complex complex11 = complex10.ONE.sqrt();
      Complex complex12 = complex9.I.multiply(1379);
      Complex complex13 = Complex.valueOf(0.0, 0.5261374711990356);
      Complex complex14 = complex3.NaN.subtract((double) 1379);
      try { 
        complex9.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(912.744951452414, 912.744951452414);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = new Complex(912.744951452414);
      Complex complex4 = complex1.I.log();
      double double0 = complex3.I.getArgument();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex5.ZERO.pow(complex1);
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex1.exp();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex1.NaN.pow(1956.715494536);
      Complex complex7 = complex3.ONE.multiply(0);
      Complex complex8 = complex0.multiply((-1056.0));
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex0.sqrt1z();
      Complex complex11 = complex9.ONE.createComplex(1.6342228966392253E-190, 1297.24);
      double double0 = complex8.getArgument();
      Complex complex12 = complex9.acos();
      Complex complex13 = complex9.INF.multiply(complex4);
      Complex complex14 = complex0.negate();
      Complex complex15 = complex12.subtract(complex2);
      Complex complex16 = complex12.add(1.6342228966392253E-190);
      Complex complex17 = complex3.sinh();
      Complex complex18 = complex7.sqrt1z();
      Complex complex19 = complex18.subtract(complex17);
      Complex complex20 = Complex.valueOf((-493.46208264372));
      Complex complex21 = complex20.divide(1.6342228966392253E-190);
      Complex complex22 = Complex.valueOf(1956.715494536, (-3.141592653589793));
      Complex complex23 = complex22.subtract(3017.705832);
      Complex complex24 = complex2.pow(1956.715494536);
      Complex complex25 = Complex.valueOf((-1056.0), 1.6342228966392253E-190);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 964.0935);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex3.NaN.pow(964.0935);
      Complex complex6 = complex5.I.pow(0.0);
      Complex complex7 = complex5.INF.cos();
      Complex complex8 = complex1.I.add(complex2);
      Complex complex9 = complex2.INF.cos();
      Complex complex10 = complex0.subtract(964.0935);
      Complex complex11 = complex10.INF.subtract(complex3);
      int int0 = complex10.hashCode();
      try { 
        complex0.nthRoot((-702));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -702
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(414.0);
      Complex complex1 = complex0.subtract(414.0);
      List<Complex> list0 = complex1.INF.nthRoot(230);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.ONE.exp();
      List<Complex> list1 = complex0.nthRoot(230);
      Complex complex6 = complex0.multiply(complex1);
      Complex complex7 = complex0.conjugate();
      ComplexField complexField0 = complex2.getField();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1187.978409565462, 1187.978409565462);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.divide((-1116.817773));
      Complex complex5 = complex1.multiply(1187.978409565462);
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex5.subtract(complex7);
      ComplexField complexField0 = complex6.getField();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1.3312692642211914, 793.9166016301);
      Complex complex1 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      boolean boolean0 = complex0.isNaN();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tan();
      double double0 = complex0.ONE.abs();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex1.ZERO.sinh();
      Complex complex7 = complex4.ONE.subtract(complex1);
      Complex complex8 = complex7.ZERO.asin();
      Complex complex9 = complex7.negate();
      Object object0 = complex4.I.readResolve();
      Complex complex10 = complex4.tan();
      Complex complex11 = Complex.valueOf(1.0);
      Complex complex12 = complex11.I.pow(complex10);
      double double1 = complex1.getImaginary();
      Complex complex13 = complex0.NaN.log();
      ComplexField complexField0 = complex0.NaN.getField();
      double double2 = complex4.getImaginary();
      boolean boolean1 = complex2.isNaN();
      Complex complex14 = Complex.valueOf(0.0, Double.NaN);
      Complex complex15 = complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-866.236134692), 1.3134287685114547E204);
      Complex complex1 = complex0.NaN.add(1.3134287685114547E204);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex((-66.3088287867458), (-1706.69764));
      Complex complex2 = complex1.ZERO.subtract((-1706.69764));
      Complex complex3 = complex2.ONE.multiply((-66.3088287867458));
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.I.sin();
      Complex complex7 = complex5.NaN.exp();
      Complex complex8 = complex5.INF.sqrt1z();
      Complex complex9 = complex5.INF.asin();
      Complex complex10 = complex0.divide(complex5);
      Complex complex11 = complex1.ZERO.sinh();
      Complex complex12 = complex10.INF.log();
      Complex complex13 = complex10.ONE.cos();
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex9.ONE.multiply(complex3);
      Object object0 = complex5.readResolve();
      Complex complex16 = complex2.multiply(complex9);
      Complex complex17 = complex8.divide((-66.3088287867458));
      double double0 = complex3.getReal();
      Complex complex18 = complex2.add(complex8);
      Complex complex19 = complex6.add(complex7);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.multiply(1878);
      Complex complex3 = complex2.ZERO.exp();
      boolean boolean0 = complex0.isNaN();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.NaN.multiply(1);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex0.subtract(1132.23963748369);
      boolean boolean1 = complex7.isNaN();
      int int0 = complex7.ONE.hashCode();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex7.subtract(complex8);
      Complex complex10 = complex9.INF.sinh();
      Complex complex11 = complex10.add(complex7);
      Complex complex12 = complex7.ONE.divide(1132.23963748369);
      double double0 = complex1.getArgument();
      Complex complex13 = complex7.exp();
      Complex complex14 = complex9.ONE.asin();
      int int1 = complex1.hashCode();
      Complex complex15 = complex7.INF.multiply(1878);
      Complex complex16 = complex10.add(1132.23963748369);
      Complex complex17 = complex13.atan();
      Complex complex18 = complex15.cosh();
      Complex complex19 = complex1.createComplex(0.0, 0.0);
      ComplexField complexField0 = complex13.getField();
      Complex complex20 = complex13.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.ZERO.multiply(1329.222);
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex8.atan();
      double double0 = complex10.abs();
      Complex complex11 = complex10.INF.conjugate();
      Complex complex12 = complex11.ONE.asin();
      Complex complex13 = complex2.createComplex(1329.222, 0.0);
      try { 
        complex10.NaN.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.578313650939932E261, 343.5976639080454);
      Complex complex1 = complex0.multiply(7.578313650939932E261);
      String string0 = complex0.I.toString();
      Object object0 = complex0.I.readResolve();
      double double0 = complex0.getReal();
      double double1 = complex0.getReal();
      Complex complex2 = complex0.multiply(7.578313650939932E261);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.multiply(1);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex5.divide(complex0);
      Complex complex8 = complex3.multiply(complex2);
      Complex complex9 = complex8.NaN.divide(7.578313650939932E261);
      Complex complex10 = complex8.subtract((-1922.67680055372));
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.I.multiply((-4.6490379071586397E-10));
      double double2 = complex11.abs();
      Complex complex13 = complex11.subtract(complex5);
      double double3 = complex3.getArgument();
      Complex complex14 = complex6.divide(0.0);
      Complex complex15 = complex11.conjugate();
      boolean boolean0 = complex9.isNaN();
      Complex complex16 = complex3.multiply(1);
      Complex complex17 = complex1.cosh();
      Complex complex18 = complex4.tan();
      Complex complex19 = complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      int int0 = complex0.hashCode();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = Complex.valueOf((-3320.262431310338), (-3320.262431310338));
      Complex complex5 = complex2.ZERO.pow(complex4);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.ZERO.cosh();
      Complex complex8 = complex7.ONE.divide((-3320.262431310338));
      Complex complex9 = complex1.add(1.4624861244004054E-31);
      Complex complex10 = complex5.exp();
      Complex complex11 = complex5.add(complex3);
      Complex complex12 = complex5.divide(complex1);
      int int1 = complex5.hashCode();
      Object object0 = complex5.readResolve();
      Complex complex13 = complex1.divide(6.283185307179586);
      ComplexField complexField0 = complex4.getField();
      Complex complex14 = complex3.exp();
      Complex complex15 = complex3.add(complex5);
      boolean boolean0 = complex5.equals(complex3);
      Complex complex16 = complex13.pow(complex6);
      boolean boolean1 = complex14.isNaN();
      Complex complex17 = complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-67.5122328456), (-67.5122328456));
      double double0 = 35.7;
      Complex complex1 = complex0.subtract(35.7);
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.INF.add(complex0);
      try { 
        complex1.NaN.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ZERO.multiply((-1936.3915740199611));
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex2.asin();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex9 = complex1.sin();
      Complex complex10 = complex1.multiply(complex8);
      Complex complex11 = complex9.negate();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex10.sin();
      Complex complex14 = complex5.cos();
      Complex complex15 = complex2.sqrt();
      Complex complex16 = complex13.acos();
      boolean boolean0 = complex13.equals("2i-0F9");
      Complex complex17 = Complex.valueOf(0.0);
      double double0 = complex16.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex0.INF.subtract((-1022.645689));
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex0.divide((-2217.00725840121));
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex7.ONE.divide(complex0);
      double double0 = complex0.getReal();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.ZERO.multiply(1);
      Complex complex11 = complex8.ONE.tanh();
      List<Complex> list0 = complex9.nthRoot(1);
      Complex complex12 = complex1.reciprocal();
      Complex complex13 = complex10.I.negate();
      Complex complex14 = complex2.reciprocal();
      Complex complex15 = new Complex((-2217.00725840121));
      Complex complex16 = complex9.divide(complex15);
      Object object0 = complex11.readResolve();
      boolean boolean0 = complex10.isInfinite();
      Complex complex17 = complex1.multiply(complex10);
      Complex complex18 = complex8.multiply(1265);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3577.1), (-1116.808193958856));
      Complex complex2 = complex0.cosh();
      double double0 = complex0.abs();
      Complex complex3 = complex2.exp();
      int int0 = complex2.hashCode();
      Complex complex4 = complex1.subtract(2.3182239583484444E255);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex4.ZERO.conjugate();
      Complex complex9 = complex1.divide(complex0);
      Complex complex10 = complex7.cos();
      String string0 = complex4.toString();
      Complex complex11 = complex3.cos();
      ComplexField complexField0 = complex1.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-2993.5);
      Complex complex0 = new Complex((-2993.5), (-2993.5));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      try { 
        complex2.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1867.0911274), (-415.98));
      Complex complex1 = Complex.valueOf((-1867.0911274), (-2750.7722503498));
      Complex complex2 = complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.createComplex((-577.4131), 0.0);
      Complex complex4 = complex3.NaN.exp();
      ComplexField complexField0 = complex3.INF.getField();
      Complex complex5 = complex2.sinh();
      double double1 = complex2.abs();
      Complex complex6 = complex5.NaN.subtract(complex1);
      Object object0 = complex1.NaN.readResolve();
      Complex complex7 = complex1.I.multiply((-1691.495153300673));
      Complex complex8 = complex7.NaN.pow(complex0);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex10.ZERO.reciprocal();
      String string0 = complex10.ZERO.toString();
      List<Complex> list0 = complex9.NaN.nthRoot(1);
      Complex complex12 = complex1.log();
      Complex complex13 = Complex.valueOf(1.9803689272433392E-303);
      Complex complex14 = complex5.tan();
      Complex complex15 = Complex.valueOf((double) 1, (-577.4131));
      Complex complex16 = complex15.cosh();
      Complex complex17 = complex9.exp();
      Complex complex18 = complex0.reciprocal();
      Complex complex19 = Complex.valueOf((double) 1, (-1691.495153300673));
      Complex complex20 = complex6.log();
      Complex complex21 = complex17.conjugate();
      Complex complex22 = complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex2.subtract(1249.0);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex4.I.pow(complex1);
      Complex complex7 = complex0.INF.divide(0.0);
      Complex complex8 = Complex.valueOf(0.0, 1249.0);
      Complex complex9 = complex4.createComplex(0.5756692886352539, 1.0);
      Complex complex10 = complex4.subtract((-2324.3875031));
      Complex complex11 = complex0.add(complex4);
      Complex complex12 = complex11.log();
      Complex complex13 = complex0.tanh();
      Complex complex14 = Complex.ZERO;
      boolean boolean0 = complex9.equals(complex14);
      Complex complex15 = complex13.multiply((-517));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex1.I.subtract((-1516.7567673));
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex0.multiply(0.0842406153678894);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.I.asin();
      Complex complex7 = complex5.sqrt1z();
      double double0 = complex3.getReal();
      double double1 = complex3.getImaginary();
      Complex complex8 = complex2.divide(complex6);
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex9.INF.sqrt();
      Complex complex11 = complex4.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(3273.1684646387, 3273.1684646387);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.ONE.pow(3273.1684646387);
      Complex complex4 = Complex.valueOf((-6.552819560439773E-9), (-6.552819560439773E-9));
      Complex complex5 = complex1.I.subtract(complex4);
      Complex complex6 = complex0.ZERO.divide(complex4);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.INF.cos();
      ComplexField complexField0 = complex1.getField();
      double double0 = complex5.abs();
      Object object0 = complex4.readResolve();
      Complex complex9 = complex3.add((-6.552819560439773E-9));
      boolean boolean0 = complex5.equals(complex1);
      Complex complex10 = complex2.multiply(350);
      Complex complex11 = complex0.tan();
      Complex complex12 = complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.multiply(2300.744064172);
      boolean boolean0 = complex0.equals(object0);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.valueOf(2300.744064172);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.I.add(complex1);
      try { 
        complex3.I.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(461.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.createComplex(461.0, 461.0);
      Complex complex4 = complex3.ZERO.add(461.0);
      boolean boolean0 = complex0.isNaN();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.cos();
      ComplexField complexField0 = complex6.NaN.getField();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex4.add((-1.5443717968117592E-8));
      Complex complex9 = Complex.valueOf(461.0);
      Complex complex10 = complex9.I.asin();
      double double0 = complex9.getArgument();
      Complex complex11 = complex4.ONE.add(0.3870677351951599);
      Complex complex12 = complex2.NaN.multiply(complex9);
      Complex complex13 = complex0.INF.reciprocal();
      Complex complex14 = complex4.I.acos();
      Complex complex15 = complex7.ZERO.pow(complex0);
      int int0 = 1;
      List<Complex> list0 = complex4.nthRoot(1);
      Complex complex16 = complex2.divide(461.0);
      Complex complex17 = complex3.asin();
      Complex complex18 = complex16.sin();
      Complex complex19 = complex18.ZERO.reciprocal();
      Object object0 = complex1.readResolve();
      Complex complex20 = complex3.exp();
      double double1 = complex3.INF.abs();
      Complex complex21 = complex8.pow(complex15);
      String string0 = complex17.toString();
      String string1 = complex14.toString();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.multiply(33.4306);
      Complex complex4 = complex2.I.pow((-3457.0898721));
      Complex complex5 = complex1.subtract(33.4306);
      Complex complex6 = complex1.pow(complex2);
      Complex complex7 = complex2.divide(33.4306);
      Complex complex8 = complex0.sin();
      Complex complex9 = complex2.INF.negate();
      Complex complex10 = complex7.exp();
      String string0 = complex0.toString();
      Complex complex11 = complex1.multiply(0);
      Complex complex12 = complex11.ZERO.conjugate();
      Complex complex13 = complex4.tan();
      Complex complex14 = complex13.INF.tanh();
      Complex complex15 = complex3.reciprocal();
      Complex complex16 = complex15.ZERO.divide(896.4841);
      double double0 = complex0.getArgument();
      Complex complex17 = complex8.subtract((-1160.872967697));
      double double1 = complex4.getImaginary();
      double double2 = complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-6.4136715802));
      Complex complex1 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.ONE.tanh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.divide(4683.3480028995);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Object object0 = complex1.ONE.readResolve();
      Complex complex2 = complex0.negate();
      double double0 = complex0.ZERO.abs();
      int int0 = complex2.INF.hashCode();
      boolean boolean0 = complex2.isInfinite();
      Complex complex3 = complex2.negate();
      double double1 = complex1.getArgument();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.createComplex(0.0, Double.NaN);
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex2.exp();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = Complex.valueOf(Double.NaN);
      double double0 = complex1.ZERO.abs();
      double double1 = complex0.INF.abs();
      int int0 = complex1.ONE.hashCode();
      Complex complex4 = complex0.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3351.0, (-4328.07));
      Complex complex1 = complex0.NaN.sin();
      ComplexField complexField0 = complex0.ONE.getField();
      Complex complex2 = complex0.multiply((-2017));
      Complex complex3 = complex0.NaN.negate();
      int int0 = complex3.hashCode();
      Complex complex4 = complex2.INF.divide(complex1);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.add((-571.69223569858));
      Complex complex7 = complex2.negate();
      Complex complex8 = Complex.INF;
      double double0 = complex8.INF.abs();
      Complex complex9 = complex7.ZERO.add(complex8);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex10.multiply(complex1);
      Complex complex12 = complex6.sinh();
      Complex complex13 = complex12.ONE.cos();
      Complex complex14 = complex11.INF.cosh();
      String string0 = complex14.NaN.toString();
      Complex complex15 = complex11.add(776.7);
      Complex complex16 = Complex.valueOf((double) (-2017), (-571.69223569858));
      int int1 = complex15.hashCode();
      double double1 = complex0.getImaginary();
      Complex complex17 = complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-520.00588729), (-710.601));
      Complex complex1 = Complex.valueOf(0.0, 2668.011023784);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ONE.subtract((-1061.9));
      Complex complex3 = complex0.createComplex(0.16524958610534668, 0.16524958610534668);
      Complex complex4 = complex3.INF.cosh();
      Complex complex5 = complex3.INF.add(complex2);
      Complex complex6 = complex3.I.asin();
      Complex complex7 = complex2.INF.multiply(1);
      Complex complex8 = complex5.cosh();
      Complex complex9 = Complex.valueOf((-20.0), 0.16524958610534668);
      Complex complex10 = complex8.I.sqrt1z();
      Complex complex11 = complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-3510.984417472836), (-3510.984417472836));
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.multiply(466);
      Complex complex3 = complex2.subtract(1670.46700405);
      String string0 = complex3.ZERO.toString();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = complex0.ONE.add((-2320.6965915083697));
      String string1 = complex2.toString();
      double double0 = complex0.getArgument();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.add(1.0);
      ComplexField complexField0 = complex3.getField();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.conjugate();
      double double0 = complex6.getArgument();
      double double1 = complex4.getImaginary();
      Complex complex7 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-414.05189));
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex0.ONE.nthRoot(17);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.divide((-1805.93));
      Complex complex6 = complex0.add((-1805.93));
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex1.divide((-1805.93));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(157.4864624105767, 157.4864624105767);
      Complex complex2 = Complex.valueOf(2.2036094805348692E-9, 2.2036094805348692E-9);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.INF.tanh();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex4.createComplex(0.0, 0.0);
      double double0 = complex4.getImaginary();
      Complex complex6 = complex2.createComplex(2.2036094805348692E-9, Double.NaN);
      double double1 = complex4.getReal();
      Complex complex7 = complex5.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(2.116316283183901E-290, (-2552.2));
      Complex complex1 = complex0.exp();
      Object object0 = complex0.readResolve();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.INF.cosh();
      double double0 = complex1.getReal();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getImaginary();
      double double3 = complex0.getArgument();
      Complex complex4 = Complex.valueOf(1606.7185037);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      double double0 = complex1.INF.abs();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex5.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.pow((-2095.6753904));
      Complex complex9 = complex1.I.pow(0.0);
      Complex complex10 = complex1.cosh();
      double double1 = complex5.abs();
      Complex complex11 = complex7.pow((-2877.18969708263));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-752.9818627876753), (-752.9818627876753));
      Complex complex1 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex2.NaN.createComplex(2.5217716516462005E-184, 2.5217716516462005E-184);
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex4.NaN.sin();
      Complex complex6 = complex5.NaN.exp();
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex7 = complex0.createComplex((-2.1083014672301448E-8), (-2.1083014672301448E-8));
      int int0 = complex7.INF.hashCode();
      Complex complex8 = complex1.acos();
      double double0 = complex2.getArgument();
      Complex complex9 = complex0.ZERO.conjugate();
      List<Complex> list0 = complex8.nthRoot(1);
      double double1 = complex7.getArgument();
      Complex complex10 = complex2.asin();
      boolean boolean0 = complex10.isInfinite();
      int int1 = complex9.hashCode();
      String string0 = complex9.toString();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.add(0.0);
      double double0 = complex2.I.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.subtract(complex1);
      ComplexField complexField0 = complex2.ZERO.getField();
      Complex complex4 = complex2.ZERO.createComplex(2165.9063502443464, 1593.87644854739);
      Complex complex5 = complex2.divide((-1282.8200118469));
      Complex complex6 = complex5.I.createComplex((-1978.0), (-1978.0));
      int int0 = complex0.hashCode();
      double double0 = complex4.getReal();
      double double1 = complex4.abs();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2820.343277, 2820.343277);
      Complex complex1 = complex0.divide((-1764.7036));
      Complex complex2 = complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.getArgument();
      double double1 = complex0.INF.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.multiply(4801);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex1.I.sqrt();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.ONE.sqrt();
      double double2 = complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1306.991197));
      boolean boolean0 = complex0.isInfinite();
      Complex complex2 = complex1.INF.sqrt1z();
      double double0 = complex0.getArgument();
      Complex complex3 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.sin();
      int int0 = complex2.INF.hashCode();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.multiply(1465.9212);
      Complex complex6 = complex1.log();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.add(complex0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(913.7656227476496);
      Complex complex1 = complex0.ONE.tan();
      String string0 = complex1.toString();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.ONE.pow(Double.NaN);
      Complex complex4 = complex2.pow(913.7656227476496);
      double double0 = complex4.ZERO.getArgument();
      Complex complex5 = complex1.INF.tan();
      Complex complex6 = complex1.log();
      Complex complex7 = complex1.negate();
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.587108850479126);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex3.INF.add(1.587108850479126);
      Complex complex5 = complex4.I.multiply(1.587108850479126);
      Complex complex6 = complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.add(1425.0243631208);
      Complex complex4 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex3.ZERO.subtract(complex0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex2.subtract(5.856589221771548E-8);
      boolean boolean0 = complex7.isInfinite();
      Complex complex8 = complex7.log();
      double double0 = complex8.getArgument();
      Complex complex9 = complex6.divide(5.856589221771548E-8);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(4227.778869470531, 4227.778869470531);
      Complex complex1 = complex0.INF.createComplex(4227.778869470531, 3.8718282216768776E250);
      double double0 = complex0.abs();
      Complex complex2 = complex0.atan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.cos();
      Object object0 = complex3.I.readResolve();
      Complex complex5 = complex3.divide((-3073.77711443));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      try { 
        complex0.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.sqrt1z();
      ComplexField complexField1 = complex6.ZERO.getField();
      Complex complex7 = complex6.INF.cos();
      try { 
        complex6.ONE.nthRoot((-2412));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,412
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-33.46239));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex1.INF.subtract((-33.46239));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.asin();
      boolean boolean0 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      double double0 = 2.0;
      Complex complex2 = complex1.INF.divide(complex0);
      int int0 = (-3613);
      try { 
        complex2.I.nthRoot((-3613));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,613
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      double double0 = complex0.NaN.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.tanh();
      int int0 = complex3.INF.hashCode();
      Complex complex5 = complex0.ZERO.divide(Double.NaN);
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex7.ONE.log();
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex9 = complex0.subtract((-5895.931930991));
      Complex complex10 = complex0.I.reciprocal();
      Complex complex11 = complex0.createComplex(6.283185307179586, 0.0);
      Complex complex12 = Complex.valueOf(Double.NaN);
      Complex complex13 = complex0.reciprocal();
      ComplexField complexField2 = complex3.getField();
      Complex complex14 = complex1.I.log();
      Complex complex15 = complex4.subtract(complex5);
      boolean boolean0 = complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = (-1.9813568387704588E-7);
      Complex complex0 = new Complex((-1.9813568387704588E-7), (-1.9813568387704588E-7));
      try { 
        complex0.I.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2481.849220869044, 2481.849220869044);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.ONE.cosh();
      ComplexField complexField0 = complex5.NaN.getField();
      Complex complex6 = complex4.divide((-1.0));
      int int0 = complex4.ONE.hashCode();
      Complex complex7 = complex6.divide(complex3);
      Complex complex8 = complex7.I.sinh();
      String string0 = complex1.toString();
      Complex complex9 = complex8.ONE.subtract(2481.849220869044);
      Complex complex10 = complex6.tan();
      Complex complex11 = complex0.conjugate();
      ComplexField complexField1 = complex8.getField();
      Complex complex12 = complex9.sqrt1z();
      Object object0 = new Object();
      boolean boolean0 = complex9.equals(object0);
      Complex complex13 = complex0.subtract(complex6);
      Complex complex14 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-488.48293), (-488.48293));
      Complex complex1 = complex0.ZERO.multiply((-488.48293));
      Complex complex2 = complex1.ONE.sin();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.ZERO.subtract(complex2);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.ONE.asin();
      double double0 = complex0.getArgument();
      double double1 = complex0.I.getArgument();
      Complex complex6 = complex1.ONE.sqrt1z();
      Complex complex7 = complex6.ZERO.divide(complex0);
      boolean boolean0 = complex0.isNaN();
      double double2 = complex2.getReal();
      boolean boolean1 = complex2.isInfinite();
      boolean boolean2 = complex1.isInfinite();
      Complex complex8 = complex1.divide(1.5707963267948966);
      boolean boolean3 = complex8.isInfinite();
      Complex complex9 = complex8.multiply(0);
      Complex complex10 = complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2087.3131541777));
      Complex complex1 = Complex.valueOf((-1346.399800511845));
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = Complex.valueOf((-2087.3131541777), (-2087.3131541777));
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex6.I.pow(1797.29);
      boolean boolean0 = complex0.isNaN();
      Complex complex8 = complex1.multiply((-725.13));
      Complex complex9 = complex2.exp();
      Complex complex10 = complex1.ONE.multiply(complex6);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.ZERO.atan();
      Object object0 = complex11.readResolve();
      boolean boolean1 = complex1.equals(object0);
      Complex complex13 = Complex.valueOf(5.6656680900216754E-52, 0.0);
      Complex complex14 = complex11.tanh();
      Complex complex15 = complex3.log();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.subtract((-6.525851105645959E-9));
      boolean boolean0 = complex1.isInfinite();
      Complex complex4 = complex1.NaN.pow(complex2);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex7.tanh();
      int int0 = complex8.INF.hashCode();
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex7.sinh();
      Complex complex11 = complex1.cosh();
      Complex complex12 = complex3.cos();
      Complex complex13 = complex3.divide(complex6);
      Complex complex14 = complex2.multiply(0.0);
      Complex complex15 = complex13.createComplex(1.5594542026519775, (-6.525851105645959E-9));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2085.0, 2085.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(1024.5712898946);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-312.8));
      Complex complex2 = complex1.ZERO.multiply(2513.73);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.I.negate();
      Complex complex5 = complex4.NaN.atan();
      double double0 = complex5.INF.getArgument();
      int int0 = complex4.INF.hashCode();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex4.ONE.subtract(complex3);
      Complex complex8 = complex0.sin();
      double double1 = complex4.getReal();
      Complex complex9 = complex0.ZERO.tanh();
      String string0 = complex9.I.toString();
      Complex complex10 = complex3.divide(680.393);
      Complex complex11 = complex0.multiply(1);
      Complex complex12 = complex5.I.conjugate();
      Complex complex13 = Complex.valueOf((-1295.8119945393));
      Complex complex14 = complex3.cos();
      Complex complex15 = Complex.valueOf(0.7853981633974483);
      int int1 = complex15.hashCode();
      Complex complex16 = complex4.INF.sqrt1z();
      Complex complex17 = complex11.multiply(complex15);
      double double2 = complex17.ZERO.abs();
      Complex complex18 = complex14.tanh();
      Complex complex19 = complex5.conjugate();
      Complex complex20 = complex8.subtract(2513.73);
      List<Complex> list0 = complex2.nthRoot(1);
      Complex complex21 = complex19.divide(complex5);
      Complex complex22 = complex4.subtract(complex16);
      Complex complex23 = complex14.conjugate();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-865.606));
      Complex complex1 = complex0.tan();
      double double0 = complex1.ZERO.getArgument();
      Complex complex2 = complex1.multiply((-865.606));
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex4.I.divide(complex3);
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = complex5.NaN.subtract(complex1);
      Complex complex9 = complex4.INF.tanh();
      String string0 = complex4.toString();
      Complex complex10 = complex1.I.add(0.0);
      Complex complex11 = Complex.ZERO;
      List<Complex> list0 = complex2.I.nthRoot(1489);
      Complex complex12 = complex2.NaN.sqrt();
      Complex complex13 = complex0.INF.cos();
      Complex complex14 = complex13.NaN.pow(complex12);
      Complex complex15 = complex0.add((-148.671));
      Complex complex16 = complex4.ZERO.tanh();
      int int0 = complex15.hashCode();
      Complex complex17 = complex11.pow(0.0);
      Complex complex18 = complex15.sqrt();
      Complex complex19 = complex17.tan();
      Complex complex20 = complex17.tan();
      Complex complex21 = complex17.pow((-3190.0119275144));
      Complex complex22 = complex15.add((-148.671));
      Complex complex23 = complex22.I.subtract((-3190.0119275144));
      List<Complex> list1 = complex15.nthRoot(1489);
      Complex complex24 = Complex.INF;
      Complex complex25 = Complex.valueOf((-3190.0119275144), (-148.671));
      Complex complex26 = complex5.tan();
      Complex complex27 = complex18.add(complex14);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getImaginary();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.createComplex(Double.NaN, Double.NaN);
      String string0 = complex2.ZERO.toString();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.add(complex1);
      int int0 = complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex0.add(0.36900103092193604);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.divide((-2873.1));
      String string0 = complex2.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex3.I.sin();
      Complex complex7 = complex2.multiply(complex1);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex2.divide(complex7);
      Complex complex10 = complex3.reciprocal();
      Complex complex11 = complex4.cos();
      String string1 = complex4.toString();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      ComplexField complexField0 = complex1.I.getField();
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex2.INF.multiply((-3377));
      Complex complex5 = complex0.ONE.pow(complex1);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.ZERO.negate();
      Complex complex9 = complex2.NaN.exp();
      int int0 = complex1.ONE.hashCode();
      Complex complex10 = complex0.divide(complex7);
      Object object0 = complex1.readResolve();
      Complex complex11 = complex7.subtract(0.0);
      Complex complex12 = complex11.ZERO.tan();
      Complex complex13 = complex12.ZERO.pow(complex10);
      Complex complex14 = complex10.log();
      Complex complex15 = Complex.valueOf(0.0);
      Complex complex16 = complex1.divide(complex15);
      Complex complex17 = complex14.INF.sqrt1z();
      Complex complex18 = Complex.valueOf(0.0);
      Complex complex19 = complex2.pow(complex18);
      Complex complex20 = complex14.reciprocal();
      Complex complex21 = complex0.negate();
      int int1 = complex19.hashCode();
      Complex complex22 = complex2.reciprocal();
      String string0 = complex16.toString();
      double double0 = complex8.getArgument();
      Complex complex23 = complex8.sqrt();
      Complex complex24 = complex16.multiply((-1.6353756659909833E92));
      Complex complex25 = complex18.conjugate();
      Complex complex26 = complex17.cosh();
  }
}
