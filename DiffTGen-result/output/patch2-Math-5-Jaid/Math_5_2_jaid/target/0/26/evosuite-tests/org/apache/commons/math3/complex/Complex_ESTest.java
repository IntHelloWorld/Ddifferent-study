/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 11:09:48 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(709.12730692, 709.12730692);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.subtract(2371.021368);
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex4.INF.multiply((-79));
      Complex complex6 = complex0.ONE.multiply((-1770.1944959252737));
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex9.I.sqrt();
      List<Complex> list0 = complex10.ONE.nthRoot(258);
      Complex complex11 = Complex.valueOf(709.12730692);
      Complex complex12 = complex0.INF.cosh();
      Complex complex13 = Complex.I;
      Complex complex14 = complex6.ONE.pow(complex13);
      Complex complex15 = Complex.valueOf(248.3003, 2.1342966843075777);
      Complex complex16 = complex15.pow(complex0);
      Complex complex17 = complex6.asin();
      Complex complex18 = complex1.cosh();
      Complex complex19 = Complex.valueOf(2.1342966843075777, (double) (-79));
      Complex complex20 = Complex.valueOf(397.738713473);
      Complex complex21 = complex15.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.I.divide((-1262.82516897137));
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.INF.subtract((-1262.82516897137));
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex0.ONE.sqrt();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex7.sin();
      Object object0 = complex0.ZERO.readResolve();
      Complex complex9 = complex8.I.cosh();
      int int0 = complex9.INF.hashCode();
      Complex complex10 = complex7.divide((-1262.82516897137));
      Object object1 = complex7.ZERO.readResolve();
      Complex complex11 = complex10.I.atan();
      double double0 = complex5.abs();
      Complex complex12 = complex8.NaN.createComplex(0.11343331634998322, 0.11343331634998322);
      Complex complex13 = Complex.INF;
      Complex complex14 = complex0.ONE.divide(complex13);
      List<Complex> list0 = complex1.nthRoot(354);
      Complex complex15 = (Complex)complex8.readResolve();
      Complex complex16 = complex11.createComplex(0.0, 0.0);
      Complex complex17 = new Complex(354, Double.POSITIVE_INFINITY);
      Complex complex18 = complex4.sinh();
      double double1 = complex11.getArgument();
      int int1 = complex11.hashCode();
      boolean boolean0 = complex0.isNaN();
      Complex complex19 = Complex.valueOf((double) 354);
      Complex complex20 = complex3.divide(690.5124508);
      Complex complex21 = (Complex)complex4.readResolve();
      Complex complex22 = complex14.tanh();
      Complex complex23 = complex13.add(complex15);
      Complex complex24 = complex11.divide(complex10);
      Complex complex25 = complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.I.getArgument();
      try { 
        complex0.NaN.divide((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1136.5582369266663, (-7.174187609946));
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.I.cosh();
      String string0 = complex0.ZERO.toString();
      try { 
        complex0.ONE.multiply((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.multiply(6.283185307179586);
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.pow(6.283185307179586);
      Complex complex5 = complex2.NaN.sqrt1z();
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex4.ONE.asin();
      try { 
        complex7.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-718.431103), 954.08331293);
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
      Complex complex2 = complex0.createComplex((-718.431103), 4.817491674217065E-144);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.NaN.pow(complex3);
      Complex complex5 = new Complex((-775.0648172754927));
      Object object0 = complex5.ONE.readResolve();
      Complex complex6 = complex4.I.subtract(complex5);
      Complex complex7 = Complex.valueOf(4.817491674217065E-144);
      Complex complex8 = complex1.ZERO.cos();
      Complex complex9 = complex4.INF.log();
      String string0 = complex9.ZERO.toString();
      Complex complex10 = complex1.I.pow(complex0);
      String string1 = complex1.toString();
      Complex complex11 = complex3.subtract(complex1);
      boolean boolean1 = complex2.isInfinite();
      Complex complex12 = complex0.sqrt();
      Complex complex13 = complex12.NaN.atan();
      Complex complex14 = complex0.log();
      Complex complex15 = complex14.ONE.cosh();
      Complex complex16 = complex4.subtract(complex2);
      Complex complex17 = complex0.asin();
      double double0 = complex16.I.getArgument();
      Complex complex18 = complex12.divide(complex10);
      Complex complex19 = complex18.subtract(complex0);
      List<Complex> list0 = complex0.nthRoot(789);
      int int0 = complex4.hashCode();
      double double1 = complex8.getArgument();
      double double2 = complex10.getImaginary();
      Complex complex20 = complex4.sqrt1z();
      Complex complex21 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1488.5685380299983, 1488.5685380299983);
      Complex complex1 = complex0.exp();
      String string0 = complex0.toString();
      ComplexField complexField0 = complex0.NaN.getField();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.ONE.sqrt();
      try { 
        complex0.nthRoot((-7068));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -7,068
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex2.NaN.divide(0.0);
      String string0 = "";
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex5.ZERO.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex8 = complex5.ONE.subtract((-847.418205818039));
      Complex complex9 = complex8.I.tanh();
      ComplexField complexField0 = complex0.ONE.getField();
      try { 
        complex0.ZERO.subtract((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.INF.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex0.add(complex1);
      double double1 = complex2.I.abs();
      List<Complex> list0 = complex3.nthRoot(743);
      Complex complex4 = complex0.log();
      ComplexField complexField1 = complex4.ZERO.getField();
      boolean boolean0 = complex2.equals(complex0);
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex1.subtract((double) 743);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex5.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex0.INF.log();
      Complex complex10 = complex3.multiply((-4389.466057));
      Complex complex11 = complex4.INF.atan();
      String string0 = complex3.ZERO.toString();
      Complex complex12 = complex4.sqrt1z();
      Complex complex13 = complex12.ZERO.log();
      Complex complex14 = complex12.ZERO.multiply(complex1);
      double double2 = complex3.getImaginary();
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex16 = complex15.ZERO.sin();
      Complex complex17 = complex5.sinh();
      try { 
        complex4.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.subtract(complex1);
      Complex complex4 = complex3.INF.add(complex1);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex0.ONE.negate();
      Complex complex7 = complex5.NaN.asin();
      Complex complex8 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.add(complex3);
      Complex complex10 = complex9.NaN.sqrt1z();
      double double0 = complex8.I.abs();
      Complex complex11 = complex2.divide(0.0);
      Object object0 = complex8.readResolve();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex5.subtract(complex12);
      int int0 = complex13.hashCode();
      Complex complex14 = complex5.pow(complex1);
      Object object1 = complex12.readResolve();
      Complex complex15 = complex7.sinh();
      Complex complex16 = complex13.log();
      Complex complex17 = Complex.valueOf(0.0);
      Complex complex18 = complex14.reciprocal();
      Complex complex19 = complex0.cosh();
      Complex complex20 = complex19.ZERO.subtract((-1846.58889575));
      Complex complex21 = complex15.negate();
      Complex complex22 = complex8.sqrt();
      try { 
        complex8.nthRoot((-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(73.0820342, (-9.482896784430338E-8));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.NaN.subtract(complex2);
      Complex complex4 = complex3.ZERO.divide(73.0820342);
      double double0 = complex0.getArgument();
      Complex complex5 = complex0.pow(73.0820342);
      Complex complex6 = complex5.I.tanh();
      Complex complex7 = complex0.INF.sqrt();
      Complex complex8 = complex6.ZERO.add(0.0);
      Complex complex9 = complex6.NaN.conjugate();
      Complex complex10 = complex9.ZERO.pow((-2.3702295314000405E-8));
      Complex complex11 = complex6.ONE.divide(0.43875885009765625);
      Complex complex12 = complex9.ZERO.sinh();
      double double1 = complex12.ONE.getArgument();
      int int0 = complex5.hashCode();
      Complex complex13 = complex5.asin();
      Complex complex14 = complex13.divide(0.0);
      Complex complex15 = complex13.pow(73.0820342);
      ComplexField complexField0 = complex8.getField();
      double double2 = complex0.getArgument();
      Complex complex16 = complex6.conjugate();
      double double3 = complex0.getImaginary();
      Complex complex17 = complex2.exp();
      Complex complex18 = complex13.subtract(3338.5094407);
      Complex complex19 = complex7.add(0.3198731541633606);
      double double4 = complex18.getImaginary();
      Complex complex20 = complex2.acos();
      Complex complex21 = complex17.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(5.2249837964645906E-8);
      Complex complex1 = complex0.ONE.subtract(0.0);
      int int0 = complex0.ONE.hashCode();
      double double0 = complex1.abs();
      Complex complex2 = Complex.valueOf(0.0);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = Complex.NaN;
      ComplexField complexField1 = complex2.getField();
      double double1 = complex1.getReal();
      Complex complex5 = complex1.sinh();
      ComplexField complexField2 = complex1.getField();
      Complex complex6 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex5.add(1.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-379.6523), (-462.376));
      Complex complex1 = Complex.valueOf(606.24393993);
      String string0 = complex1.I.toString();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.divide(606.24393993);
      boolean boolean0 = complex0.equals(complex2);
      ComplexField complexField0 = complex2.getField();
      Complex complex4 = complex1.pow((-462.376));
      Complex complex5 = complex4.ZERO.divide(complex0);
      Complex complex6 = complex4.pow(complex3);
      double double0 = complex2.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2243.322), (-2179.7664945376364));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.sin();
      String string0 = complex2.INF.toString();
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex1.multiply((-2179.7664945376364));
      Complex complex7 = complex2.ONE.atan();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex4.asin();
      Complex complex11 = complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1.6448897917725177E233, 1590.553516701458);
      Complex complex1 = complex0.ZERO.divide(2.5257552661512635E-165);
      Complex complex2 = complex0.ZERO.createComplex((-4435.8452922), 0.0);
      Complex complex3 = complex0.sqrt1z();
      double double0 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      double double1 = complex0.getArgument();
      Complex complex1 = Complex.valueOf(Double.NaN);
      double double2 = complex1.INF.abs();
      ComplexField complexField0 = complex1.getField();
      Complex complex2 = complex1.multiply(complex0);
      String string0 = complex0.toString();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex3.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = complex2.NaN.cos();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex2.subtract(Double.NaN);
      Complex complex10 = complex7.multiply(complex6);
      Complex complex11 = complex5.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-777.8), (-777.8));
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex0.ONE.nthRoot(145);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      ComplexField complexField0 = complex2.NaN.getField();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex1.I.multiply(418);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.log();
      Complex complex8 = complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(1311.415, 3504.27);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex1.createComplex(1311.415, 1311.415);
      Complex complex4 = complex3.ONE.multiply(1311.415);
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.valueOf(3504.27, 3504.27);
      Complex complex7 = complex3.ZERO.tanh();
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex0.subtract(1311.415);
      Complex complex10 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(7.979956357126066E-10, 7.979956357126066E-10);
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      int int0 = complex0.NaN.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.INF.createComplex(7.979956357126066E-10, (-6.0370682395944045E-9));
      Complex complex4 = complex3.NaN.divide(1.99407553679345E-8);
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex5.I.add(0.0);
      boolean boolean0 = complex1.isNaN();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.cos();
      Complex complex9 = complex7.divide(7.979956357126066E-10);
      List<Complex> list1 = complex3.nthRoot(869);
      Complex complex10 = complex9.atan();
      Complex complex11 = complex5.divide(complex8);
      Complex complex12 = complex10.sqrt1z();
      ComplexField complexField0 = complex10.I.getField();
      double double0 = complex9.getReal();
      Complex complex13 = complex10.sqrt1z();
      Complex complex14 = complex3.multiply(complex2);
      Complex complex15 = Complex.valueOf((-6.0370682395944045E-9));
      boolean boolean1 = complex2.isInfinite();
      Complex complex16 = complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 708.12730692);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ZERO.cosh();
      Complex complex6 = complex4.add(0.0);
      Complex complex7 = Complex.valueOf(2.0, 1.0);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex1.pow(708.12730692);
      boolean boolean1 = complex1.equals(complex3);
      boolean boolean2 = complex3.isNaN();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex10.multiply(0);
      Complex complex12 = complex0.sin();
      Complex complex13 = complex0.sinh();
      Complex complex14 = complex1.pow(0.0);
      Complex complex15 = complex13.tanh();
      Complex complex16 = new Complex(0.0, (-826.0));
      Complex complex17 = complex15.divide(complex16);
      boolean boolean3 = complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex3.NaN.multiply(0.0);
      Complex complex6 = complex3.ZERO.subtract(0.0);
      double double0 = complex5.NaN.getArgument();
      Complex complex7 = complex3.NaN.log();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex0.ZERO.divide(complex3);
      Complex complex11 = complex10.NaN.pow(0.0);
      Complex complex12 = complex10.ONE.subtract(Double.NaN);
      ComplexField complexField0 = complex11.ZERO.getField();
      Object object0 = complex10.I.readResolve();
      Complex complex13 = complex0.reciprocal();
      Complex complex14 = complex13.ZERO.cosh();
      boolean boolean0 = complex3.isInfinite();
      String string0 = complex1.toString();
      double double1 = complex12.getArgument();
      Complex complex15 = complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.divide(466.842);
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex1.ZERO.createComplex(Double.NaN, (-907.42023175));
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = complex6.NaN.tan();
      ComplexField complexField0 = complex8.ONE.getField();
      Complex complex9 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex10 = complex3.I.add(complex9);
      Complex complex11 = complex10.ONE.pow(complex5);
      Complex complex12 = complex10.pow(complex0);
      Complex complex13 = complex6.cos();
      double double1 = complex6.getImaginary();
      Complex complex14 = complex5.add(complex3);
      Object object0 = complex3.readResolve();
      try { 
        complex7.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.pow(1815.408);
      String string0 = complex2.toString();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.asin();
      try { 
        complex1.nthRoot((-1558));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,558
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = Complex.valueOf((-1.1959241322537072E-151), 0.0);
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex1.I.cos();
      int int0 = complex0.ONE.hashCode();
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.ZERO.atan();
      Complex complex6 = complex5.ONE.add(0.0);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex0.ONE.multiply(complex7);
      Complex complex9 = complex8.NaN.negate();
      double double0 = complex0.ZERO.getArgument();
      Complex complex10 = complex7.NaN.multiply((-2888.8726143));
      double double1 = complex7.NaN.abs();
      boolean boolean0 = complex0.isInfinite();
      Complex complex11 = Complex.valueOf((-2888.8726143));
      Complex complex12 = complex5.multiply(Double.NaN);
      double double2 = complex5.getImaginary();
      Complex complex13 = complex6.log();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-380.43924239), 1.1681688445204168E-7);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      int int0 = complex0.ZERO.hashCode();
      Complex complex2 = complex0.negate();
      ComplexField complexField0 = complex0.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1895.6984437518443, 5.070274654122399E107);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(9.222671009756424E-306, 5.070274654122399E107);
      Complex complex3 = complex2.NaN.exp();
      double double0 = complex3.NaN.getArgument();
      String string0 = complex0.ZERO.toString();
      double double1 = complex0.getImaginary();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.add(complex1);
      boolean boolean0 = complex0.equals("(0.0, 0.0)");
      Complex complex6 = complex2.add(complex0);
      try { 
        complex3.nthRoot((-202));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -202
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sin();
      String string0 = complex2.NaN.toString();
      Complex complex3 = complex0.I.subtract((-1070.97991867));
      Complex complex4 = complex1.ONE.createComplex((-1070.97991867), 2102.36);
      Object object0 = complex4.INF.readResolve();
      Complex complex5 = complex0.pow(Double.NaN);
      Complex complex6 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.ONE.add(0.0);
      Object object0 = complex2.ZERO.readResolve();
      int int0 = complex1.hashCode();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.INF.exp();
      double double0 = complex1.getReal();
      List<Complex> list0 = complex5.nthRoot(1169);
      double double1 = complex4.abs();
      Complex complex7 = complex1.subtract(1.0);
      Complex complex8 = complex3.tan();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(0.4932899475097656, 5.8759898326913254E166);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.I.cos();
      ComplexField complexField0 = complex2.I.getField();
      Complex complex3 = complex0.NaN.subtract(complex1);
      ComplexField complexField1 = complex0.ZERO.getField();
      Complex complex4 = complex0.ZERO.sinh();
      Complex complex5 = complex4.ZERO.sqrt1z();
      String string0 = complex5.ZERO.toString();
      double double0 = complex0.getReal();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      double double1 = complex6.abs();
      Complex complex7 = complex0.acos();
      ComplexField complexField2 = complex7.getField();
      Complex complex8 = complex2.divide(0.4932899475097656);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex9.multiply(complex2);
      double double2 = complex0.getArgument();
      Complex complex11 = complex2.divide(complex7);
      Complex complex12 = complex1.cos();
      Complex complex13 = complex11.conjugate();
      Complex complex14 = complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(8.433630296371073E297);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply(7);
      double double0 = complex0.getArgument();
      Complex complex4 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2015.3380109277718, (-1802.508));
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.sqrt();
      Complex complex4 = complex0.multiply(2.7024011611938477);
      Complex complex5 = complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = (-903.4156801471);
      Complex complex0 = new Complex((-820.2927472106), (-903.4156801471));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = Complex.valueOf((-883.08304), (-54.6038236530608));
      Object object0 = complex4.NaN.readResolve();
      Complex complex5 = complex0.I.multiply(818);
      ComplexField complexField0 = complex5.getField();
      Complex complex6 = Complex.valueOf((double) 818);
      Complex complex7 = complex6.I.negate();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.NaN.sinh();
      Complex complex10 = complex0.ONE.tanh();
      Object object1 = complex0.ONE.readResolve();
      String string0 = complex0.toString();
      Complex complex11 = Complex.valueOf(0.0);
      Complex complex12 = complex11.NaN.divide(complex9);
      try { 
        complex11.ZERO.add((Complex) null);
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.NaN.nthRoot(944);
      Complex complex1 = complex0.NaN.subtract(412.7151609312809);
      double double0 = complex0.getArgument();
      boolean boolean0 = complex0.isNaN();
      double double1 = complex1.getReal();
      String string0 = complex1.toString();
      Complex complex2 = complex1.subtract(complex0);
      String string1 = complex2.ONE.toString();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3131.1619985), 1944.2288769626116);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.sqrt();
      ComplexField complexField0 = complex3.NaN.getField();
      Complex complex4 = complex0.ZERO.subtract(complex3);
      String string0 = complex3.toString();
      Complex complex5 = Complex.valueOf(1944.2288769626116);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.NaN.tan();
      Complex complex9 = complex8.ZERO.divide(0.0);
      int int0 = complex6.hashCode();
      Complex complex10 = complex0.add(complex2);
      Complex complex11 = complex10.INF.divide((-94.140906));
      Complex complex12 = complex10.ZERO.cosh();
      Complex complex13 = complex10.cosh();
      Complex complex14 = complex5.ZERO.cos();
      Complex complex15 = Complex.valueOf((-1191.8198758454), 0.0);
      Complex complex16 = complex7.multiply(1944.2288769626116);
      Complex complex17 = complex7.sin();
      Complex complex18 = complex10.reciprocal();
      Complex complex19 = Complex.valueOf((-379.28946116498));
      Complex complex20 = complex18.divide(1605.53660153);
      boolean boolean0 = complex2.isNaN();
      boolean boolean1 = complex12.isNaN();
      Complex complex21 = complex13.divide(complex19);
      Complex complex22 = Complex.valueOf(1.1794393062591553, 0.0);
      double double0 = complex18.getImaginary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2728.0, (-286.0));
      Complex complex1 = complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1395.073660184, (-1.0));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex1.pow(complex2);
      Object object0 = complex5.ZERO.readResolve();
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = complex5.ONE.sqrt();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex5.I.log();
      Complex complex10 = complex1.pow(complex5);
      boolean boolean0 = complex5.isInfinite();
      Complex complex11 = complex2.NaN.cosh();
      Complex complex12 = complex1.sin();
      String string0 = complex5.NaN.toString();
      Complex complex13 = complex5.ONE.asin();
      Complex complex14 = complex10.cosh();
      Complex complex15 = complex10.sqrt1z();
      Complex complex16 = complex7.divide(complex2);
      double double0 = complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf((-5.309047216809048E-47), 309.3138064060784);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex2.atan();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-2274.7335791540404), (-2274.7335791540404));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.createComplex((-2274.7335791540404), (-6524.42007));
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex0.ONE.divide(complex1);
      Complex complex5 = complex4.pow((-2274.7335791540404));
      double double0 = complex0.I.abs();
      double double1 = complex0.getImaginary();
      double double2 = complex0.getReal();
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = complex5.sin();
      double double3 = complex2.getImaginary();
      Complex complex8 = complex7.multiply((-6524.42007));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(186.22, 186.22);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.negate();
      ComplexField complexField0 = complex0.ONE.getField();
      String string0 = complex1.ONE.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply((-1971));
      Complex complex2 = complex0.ONE.subtract(complex1);
      boolean boolean0 = complex0.isInfinite();
      double double0 = complex1.getImaginary();
      Complex complex3 = complex1.acos();
      double double1 = complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(679.6713718549777);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex2.INF.reciprocal();
      double double0 = complex1.NaN.abs();
      double double1 = complex0.getArgument();
      Complex complex5 = complex0.ZERO.sinh();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.INF.tan();
      Complex complex8 = complex6.ZERO.subtract((-2737.589425568));
      double double2 = complex0.getReal();
      Complex complex9 = complex1.INF.add(Double.NaN);
      Complex complex10 = complex0.sin();
      Complex complex11 = complex2.sqrt1z();
      String string0 = complex11.ZERO.toString();
      int int0 = complex11.ONE.hashCode();
      Complex complex12 = complex7.ZERO.asin();
      Complex complex13 = complex11.asin();
      Complex complex14 = complex7.conjugate();
      Complex complex15 = complex14.asin();
      Complex complex16 = complex5.multiply(885);
      Complex complex17 = complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(2432.3831191095, (-5039.1932));
      int int0 = complex0.I.hashCode();
      boolean boolean0 = complex0.isNaN();
      List<Complex> list0 = complex0.nthRoot(136);
      double double0 = complex0.abs();
      Complex complex1 = complex0.tan();
      Object object0 = complex1.NaN.readResolve();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex8.INF.sqrt1z();
      boolean boolean1 = complex0.isInfinite();
      double double1 = complex3.abs();
      boolean boolean2 = complex4.isNaN();
      int int1 = complex1.hashCode();
      boolean boolean3 = complex2.isInfinite();
      Complex complex10 = complex4.tanh();
      Complex complex11 = complex10.ZERO.createComplex(322.806679209988, 20.0);
      Complex complex12 = complex10.ZERO.pow(complex7);
      Complex complex13 = complex10.atan();
      Complex complex14 = complex3.add(5595.529978925597);
      Complex complex15 = complex8.divide((-584.41));
      Complex complex16 = complex14.negate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      boolean boolean0 = complex0.isInfinite();
      Complex complex1 = Complex.ZERO;
      ComplexField complexField0 = complex1.INF.getField();
      Complex complex2 = complex0.ONE.pow(20.0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.pow(0.0);
      Complex complex5 = complex4.NaN.divide(complex0);
      Complex complex6 = complex5.multiply(819);
      Complex complex7 = complex4.INF.multiply(0);
      Complex complex8 = complex3.I.subtract(complex0);
      Complex complex9 = complex8.I.divide(complex0);
      int int0 = complex3.hashCode();
      ComplexField complexField1 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.createComplex(236.7, 236.7);
      Complex complex2 = Complex.valueOf(236.7, 1761.59);
      Complex complex3 = Complex.valueOf(1761.59);
      Complex complex4 = complex0.NaN.tanh();
      Complex complex5 = new Complex((-3661.159524), (-3661.159524));
      Complex complex6 = complex0.divide(complex5);
      double double0 = complex6.getImaginary();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex3.acos();
      Complex complex9 = complex8.NaN.atan();
      double double1 = complex5.getReal();
      Complex complex10 = complex1.exp();
      Complex complex11 = complex8.exp();
      double double2 = complex3.abs();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.nthRoot(0);
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = complex0.ZERO.hashCode();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.multiply(17);
      Complex complex3 = complex0.createComplex(210.74031176, 367.74082314);
      double double0 = complex0.getImaginary();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.ZERO.divide(Double.NaN);
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = complex2.divide(210.74031176);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.ZERO.sqrt1z();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.cosh();
      List<Complex> list0 = complex2.INF.nthRoot(2429);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex3.INF.tan();
      int int0 = complex0.NaN.hashCode();
      Complex complex5 = complex0.subtract(3347.5170513);
      int int1 = complex1.hashCode();
      Complex complex6 = complex4.INF.multiply(1);
      Complex complex7 = Complex.valueOf(0.0, 3347.5170513);
      Complex complex8 = complex0.NaN.add(0.0);
      Complex complex9 = complex5.sqrt1z();
      Complex complex10 = complex9.ONE.multiply(complex3);
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex4.pow(complex3);
      Complex complex14 = complex13.cos();
      Complex complex15 = complex9.asin();
      Complex complex16 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.reciprocal();
      boolean boolean0 = complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.cos();
      boolean boolean0 = complex3.isInfinite();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.NaN.multiply(0.0);
      Complex complex7 = complex5.sin();
      double double0 = complex5.getImaginary();
      ComplexField complexField0 = complex0.getField();
      Complex complex8 = complex3.ZERO.createComplex(0.0, 0.0);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex3.pow(270.63096519);
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex11.INF.multiply(0);
      Complex complex13 = complex11.subtract(0.0);
      Complex complex14 = Complex.valueOf((double) 0, (-672.0141812));
      Complex complex15 = complex0.pow(complex1);
      Complex complex16 = complex6.sin();
      Object object0 = complex10.readResolve();
      Complex complex17 = new Complex(0.0, Double.NaN);
      Complex complex18 = complex17.ONE.pow(complex10);
      Complex complex19 = complex2.add(complex17);
      Complex complex20 = complex16.divide(complex12);
      Complex complex21 = complex20.I.add(0.0);
      Complex complex22 = complex11.reciprocal();
      Complex complex23 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex2.NaN.pow((-1.5587043044056635E-7));
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex5.ZERO.tanh();
      int int0 = complex5.ZERO.hashCode();
      Complex complex8 = complex5.multiply(complex4);
      boolean boolean0 = complex4.isNaN();
      Complex complex9 = complex6.multiply(complex2);
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.INF.divide(0.0);
      ComplexField complexField0 = complex11.INF.getField();
      Complex complex12 = complex3.subtract(complex10);
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex4.cos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.subtract((-20.0));
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.NaN.conjugate();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.createComplex(2.0, 2.0);
      Complex complex6 = complex1.add(Double.POSITIVE_INFINITY);
      double double0 = complex6.getImaginary();
      Complex complex7 = complex3.createComplex(2.0, 0.0);
      Complex complex8 = complex4.subtract(Double.NEGATIVE_INFINITY);
      Object object0 = complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2643.2958999884654), 1643.07);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.multiply(4764);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex7.acos();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2780.49232073);
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex0.subtract(2780.49232073);
      Complex complex8 = complex5.multiply((-1.218609462241927E-9));
      Object object0 = complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex0.I.add(0.0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = (-1.0);
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      try { 
        complex0.NaN.nthRoot((-225));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -225
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex0.I.sqrt();
      double double0 = complex2.ONE.getArgument();
      String string0 = complex2.ONE.toString();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex2.multiply(407);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex8.pow(complex2);
      Complex complex11 = complex2.negate();
      double double1 = complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.INF.add(complex1);
      Complex complex6 = complex5.NaN.log();
      Complex complex7 = complex4.ONE.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.INF.log();
      int int0 = complex4.hashCode();
      Complex complex9 = Complex.valueOf((-4525.6855070284));
      double double0 = complex9.getImaginary();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex1.exp();
      Complex complex13 = complex10.createComplex(0.0, 0.0);
      double double1 = complex3.getImaginary();
      Complex complex14 = complex1.add((-1482.2243));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-312.1), (-312.1));
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.add((-312.1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex1.I.negate();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.I.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      double double1 = complex1.getImaginary();
      Complex complex2 = complex0.NaN.sqrt1z();
      double double2 = complex1.abs();
      boolean boolean0 = complex1.isInfinite();
      Complex complex3 = complex2.divide((-1081.79534));
      Complex complex4 = complex2.add((-1081.79534));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex0.pow(859.3);
      Complex complex6 = complex5.ONE.createComplex(694.77019864019, 694.77019864019);
      Complex complex7 = complex6.ONE.divide((-989.4723144001247));
      Complex complex8 = complex1.reciprocal();
      Object object0 = complex0.readResolve();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex9.ZERO.cosh();
      double double0 = complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex1.multiply(1);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.ONE.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex0.exp();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2.0, 1432.876494130937);
      Complex complex2 = complex1.NaN.add(2.0);
      Complex complex3 = complex0.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1.5234465914578058E-153, 815.57131);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.pow(815.57131);
      Complex complex4 = complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.multiply((-532));
      Object object0 = complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.createComplex((-20.0), (-20.0));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.pow((-20.0));
      double double0 = complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-336.39834635));
      Complex complex1 = complex0.NaN.multiply((-2488.0));
      ComplexField complexField0 = complex0.I.getField();
      Complex complex2 = complex0.ONE.log();
      String string0 = complex0.toString();
      Complex complex3 = complex0.acos();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.divide((-5.753754066078771E-8));
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex0.add(793.1616);
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex3.cosh();
      String string0 = complex4.toString();
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex4.cos();
      Complex complex9 = complex5.createComplex(793.1616, 598.0856324593);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(1187.1096324493135);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.pow(1.4977047507315718E290);
      Complex complex6 = complex4.INF.add(complex1);
      Complex complex7 = complex6.INF.subtract(1187.1096324493135);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      double double0 = complex1.I.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.ZERO.add(complex3);
      double double1 = complex3.abs();
      Complex complex5 = complex3.divide(0.5403023058681398);
      Complex complex6 = complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = complex3.ZERO.subtract(61.5212249);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex2.divide((-9.040643863751471E-8));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.NaN.divide(complex6);
      Complex complex10 = complex1.tan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      double double0 = complex1.ONE.abs();
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      List<Complex> list0 = complex2.I.nthRoot(484);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.I.divide(complex0);
      Complex complex8 = complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-1049.04));
      Object object0 = complex0.readResolve();
      double double0 = complex0.getReal();
      List<Complex> list0 = complex0.nthRoot(1);
      Complex complex1 = complex0.exp();
      ComplexField complexField0 = complex0.getField();
      Complex complex2 = complex0.sinh();
      Object object1 = complex1.readResolve();
      String string0 = complex1.toString();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-3239.739425725809), 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex3.multiply((-3.2117127164185917E-77));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(5357.128640223209, 5357.128640223209);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tanh();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.ZERO.sin();
      int int0 = complex3.NaN.hashCode();
      Complex complex5 = complex3.multiply(5357.128640223209);
      Complex complex6 = complex4.subtract(5357.128640223209);
      double double0 = complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex1.equals(complex0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.createComplex(Double.NaN, 0.0);
      boolean boolean1 = complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      int int0 = complex0.NaN.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(959.73069447098, (-1.0));
      boolean boolean0 = complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2230.789620411);
      Complex complex1 = Complex.valueOf(2230.789620411);
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.conjugate();
      Object object0 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object0);
      Complex complex5 = complex0.I.cosh();
      Complex complex6 = complex3.log();
      Object object1 = new Object();
      boolean boolean1 = complex2.equals(object1);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex4.multiply(complex6);
      Complex complex9 = complex2.asin();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-464.29), (-464.29));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ZERO.negate();
      double double0 = complex0.getArgument();
      int int0 = complex1.INF.hashCode();
      Complex complex4 = complex2.multiply((-1894));
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex6.INF.cosh();
      String string0 = complex6.INF.toString();
      double double1 = complex4.abs();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex3.I.divide(complex5);
      Complex complex11 = complex3.multiply(1);
      Complex complex12 = complex11.ONE.exp();
      ComplexField complexField0 = complex12.ZERO.getField();
      Complex complex13 = complex9.add(complex3);
      double double2 = complex11.getReal();
      Complex complex14 = complex8.multiply(complex12);
      Complex complex15 = complex3.sqrt1z();
      double double3 = complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-1.0);
      Complex complex1 = complex0.pow((-1.0));
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = new Complex((-1.0));
      Complex complex4 = complex0.ONE.multiply(complex3);
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.ONE.sinh();
      try { 
        complex6.nthRoot((-3515));
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,515
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.649738073348999, 0.649738073348999);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex0.INF.tanh();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = complex4.INF.asin();
      double double0 = complex1.NaN.abs();
      Complex complex8 = complex2.ZERO.add(0.649738073348999);
      String string0 = complex8.INF.toString();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.ZERO.sinh();
      Complex complex11 = complex9.multiply(0.1353352963924408);
      Complex complex12 = complex0.multiply(complex9);
      Complex complex13 = complex1.divide(complex9);
      double double1 = complex9.abs();
      Complex complex14 = complex9.subtract(complex13);
      Complex complex15 = new Complex(0.0, 0.0);
      Complex complex16 = complex14.NaN.subtract(complex15);
      Complex complex17 = Complex.valueOf(0.649738073348999, 0.649738073348999);
      Complex complex18 = complex16.ONE.divide(complex17);
      Complex complex19 = complex3.log();
      Complex complex20 = complex12.tanh();
      boolean boolean0 = complex18.equals((Object) null);
      ComplexField complexField0 = complex3.getField();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1475));
      Complex complex2 = Complex.valueOf(0.0);
      double double0 = complex1.ZERO.getArgument();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex0.INF.divide(0.0);
      ComplexField complexField0 = complex5.getField();
      Complex complex8 = complex0.multiply((-2352.012383932));
      Complex complex9 = complex8.exp();
      double double1 = complex2.INF.getArgument();
      List<Complex> list0 = complex2.nthRoot(299);
      Complex complex10 = complex7.pow(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1933.3284819), Double.POSITIVE_INFINITY);
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-1933.3284819));
      Complex complex6 = complex4.ONE.divide(complex5);
      Object object0 = complex0.readResolve();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.valueOf((-1933.3284819));
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.sin();
      Complex complex12 = complex7.subtract(complex10);
      Complex complex13 = complex6.I.asin();
      Complex complex14 = complex9.pow(0.0);
      Complex complex15 = complex6.atan();
      Complex complex16 = complex14.sqrt1z();
      Complex complex17 = complex0.sin();
      Complex complex18 = complex0.conjugate();
      Complex complex19 = complex1.reciprocal();
      Complex complex20 = complex17.atan();
      Complex complex21 = complex11.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex2.ZERO.pow(393.0);
      Complex complex4 = complex3.ONE.createComplex(393.0, 8.280292810015406E-190);
      Complex complex5 = complex0.ZERO.pow(0.0);
      Complex complex6 = complex0.INF.log();
      Complex complex7 = complex5.subtract(complex2);
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex1.add(complex0);
      Complex complex10 = complex9.subtract(complex1);
      Complex complex11 = complex9.ONE.conjugate();
      Complex complex12 = complex7.subtract(393.0);
      int int0 = complex1.hashCode();
      Complex complex13 = Complex.valueOf(1.2628846168518066, 1.2628846168518066);
      Complex complex14 = complex13.NaN.divide(1.2628846168518066);
      Complex complex15 = complex14.I.subtract(complex7);
      double double0 = complex13.abs();
      Complex complex16 = complex10.ONE.cos();
      Complex complex17 = complex16.NaN.multiply(1.2628846168518066);
      int int1 = complex9.hashCode();
      double double1 = complex10.getReal();
      Complex complex18 = complex3.negate();
      Complex complex19 = complex1.pow(complex3);
      Complex complex20 = complex19.ONE.add(2916.82213841);
      Object object0 = complex7.readResolve();
      boolean boolean0 = complex5.equals(object0);
      double double2 = complex8.getArgument();
      Complex complex21 = complex8.tan();
      Complex complex22 = complex8.reciprocal();
      Complex complex23 = Complex.INF;
      boolean boolean1 = complex10.equals(complex23);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(1207);
      Complex complex2 = complex0.INF.subtract(Double.POSITIVE_INFINITY);
      double double0 = complex0.INF.abs();
      ComplexField complexField0 = complex0.getField();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.acos();
      boolean boolean0 = complex3.isInfinite();
      Complex complex6 = complex3.sqrt1z();
      Object object0 = complex3.readResolve();
      Complex complex7 = complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.add(1257.0);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.INF.divide(0.0);
      Complex complex5 = complex0.divide(840.85);
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex0.add(840.85);
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex8.I.reciprocal();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex7.atan();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.INF.abs();
      Complex complex1 = complex0.ONE.tan();
      int int0 = complex0.hashCode();
      Complex complex2 = complex0.NaN.add(complex1);
      boolean boolean0 = complex0.isNaN();
      Complex complex3 = complex1.divide(complex0);
      Object object0 = complex3.NaN.readResolve();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex1.divide(complex2);
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.NaN.asin();
      boolean boolean1 = complex0.isNaN();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.pow(complex4);
  }
}
