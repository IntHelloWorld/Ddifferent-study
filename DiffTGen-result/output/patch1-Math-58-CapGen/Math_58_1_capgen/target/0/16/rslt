* EvoSuite 1.0.6
* Going to generate test cases for class: org.apache.commons.math.optimization.fitting.GaussianFitter
* Starting client
* Connecting to master process on port 2542
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/patch1-Math-58-CapGen/Math_58_1_capgen/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.optimization.fitting.GaussianFitter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 92
  - Branch 67
  - Exception 0
  - MutationFactory 402
  - Output 6
  - Method 5
  - MethodNoException 5
  - CBranchFitnessFactory 67
* Using seed 1585456422357
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:====>                         15%] [Cov:==>                                7%][Progress:====>                         15%] [Cov:====>                              13%][Progress:====>                         15%] [Cov:=========>                         26%][Progress:====>                         15%] [Cov:============>                      36%][Progress:====>                         15%] [Cov:==============>                    41%][Progress:====>                         15%] [Cov:===============>                   45%][Progress:====>                         15%] [Cov:=================>                 49%][Progress:====>                         16%] [Cov:==>                                7%][Progress:====>                         16%] [Cov:=====>                             15%][Progress:====>                         16%] [Cov:=========>                         27%][Progress:====>                         16%] [Cov:============>                      37%][Progress:====>                         16%] [Cov:=================>                 49%][Progress:====>                         16%] [Cov:===================>               55%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:=====>                        18%] [Cov:>                                  1%][Progress:=====>                        18%] [Cov:>                                  2%][Progress:=====>                        18%] [Cov:====>                              14%][Progress:=====>                        18%] [Cov:=======>                           20%][Progress:=====>                        18%] [Cov:=======>                           22%][Progress:=====>                        18%] [Cov:========>                          23%][Progress:=====>                        18%] [Cov:========>                          25%][Progress:=====>                        18%] [Cov:===========>                       33%][Progress:=====>                        18%] [Cov:=============>                     39%][Progress:=====>                        18%] [Cov:================>                  46%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:======>                       20%] [Cov:==>                                8%][Progress:======>                       20%] [Cov:=====>                             17%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:====================>              58%][Progress:======>                       20%] [Cov:======================>            64%][Progress:======>                       21%] [Cov:==>                                7%][Progress:======>                       21%] [Cov:====>                              14%][Progress:======>                       21%] [Cov:=========>                         26%][Progress:======>                       21%] [Cov:============>                      35%][Progress:======>                       21%] [Cov:===============>                   44%][Progress:======>                       21%] [Cov:=================>                 51%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:=====================>             60%][Progress:======>                       23%] [Cov:==>                                7%][Progress:======>                       23%] [Cov:====>                              13%][Progress:======>                       23%] [Cov:=========>                         26%][Progress:======>                       23%] [Cov:============>                      35%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:=================>                 50%][Progress:======>                       23%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:>                                  0%][Progress:============>                 41%] [Cov:====>                              12%][Progress:============>                 41%] [Cov:====>                              13%][Progress:============>                 41%] [Cov:=====>                             16%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==============>                    40%][Progress:============>                 41%] [Cov:=================>                 51%][Progress:============>                 41%] [Cov:====================>              58%][Progress:============>                 41%] [Cov:======================>            63%][Progress:============>                 43%] [Cov:==>                                7%][Progress:============>                 43%] [Cov:====>                              14%][Progress:============>                 43%] [Cov:=========>                         27%][Progress:============>                 43%] [Cov:============>                      37%][Progress:============>                 43%] [Cov:==============>                    41%][Progress:============>                 43%] [Cov:================>                  46%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:============>                 43%] [Cov:===================>               56%][Progress:============>                 43%] [Cov:=====================>             60%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=======================>           68%][Progress:=============>                45%] [Cov:==>                                7%][Progress:=============>                45%] [Cov:====>                              13%][Progress:=============>                45%] [Cov:=========>                         26%][Progress:=============>                45%] [Cov:===========>                       34%][Progress:=============>                45%] [Cov:================>                  46%][Progress:=============>                45%] [Cov:==================>                52%][Progress:=============>                45%] [Cov:===================>               57%][Progress:=============>                45%] [Cov:=====================>             61%][Progress:=============>                45%] [Cov:=======================>           66%][Progress:=============>                46%] [Cov:>                                  0%][Progress:=============>                46%] [Cov:>                                  1%][Progress:=============>                46%] [Cov:====>                              13%][Progress:=============>                46%] [Cov:====>                              14%][Progress:=============>                46%] [Cov:=====>                             17%][Progress:=============>                46%] [Cov:======>                            18%][Progress:=============>                46%] [Cov:=======>                           20%][Progress:=============>                46%] [Cov:=======================>           66%][Progress:==============>               48%] [Cov:====================>              58%][Progress:==============>               48%] [Cov:=====================>             61%][Progress:==============>               48%] [Cov:======================>            63%][Progress:==============>               48%] [Cov:======================>            64%][Progress:==============>               48%] [Cov:=======================>           66%][Progress:==============>               48%] [Cov:=======================>           67%][Progress:==============>               48%] [Cov:=======================>           68%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              53%] [Cov:============================>      81%][Progress:===============>              53%] [Cov:============================>      81%][MASTER] 12:34:27.985 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizer canUseFunctionalMocks=false, canBeMocked: true
[Progress:===============>              53%] [Cov:============================>      81%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      81%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      81%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      81%][Progress:=================>            58%] [Cov:============================>      81%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      81%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      81%][Progress:==================>           61%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      81%][Progress:====================>         68%] [Cov:============================>      81%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      81%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     81%] [Cov:=============================>     85%][Progress:========================>     83%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    85%] [Cov:=============================>     85%][Progress:=========================>    86%] [Cov:=============================>     84%][Progress:=========================>    86%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:==========================>   88%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     84%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  91%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:============================> 95%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:=============================>98%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%]
* Search finished after 62s and 27 generations, 22816 statements, best individual has fitness: 57.09999999953152
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 92
* Number of covered goals: 78
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 402
* Number of covered goals: 360
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 80%
* Total number of goals: 5
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 67
* Number of covered goals: 63
* Generated 20 tests with total length 137
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 12:35:16.891 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 12:35:16.893 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = mock(DifferentiableMultivariateVectorialOptimizer.class, new ViolatedAssumptionAnswer());
UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(2146995325);
MultiStartDifferentiableMultivariateVectorialOptimizer multiStartDifferentiableMultivariateVectorialOptimizer0 = new MultiStartDifferentiableMultivariateVectorialOptimizer(differentiableMultivariateVectorialOptimizer0, 2146995325, unitSphereRandomVectorGenerator0);
GaussianFitter gaussianFitter0 = new GaussianFitter(multiStartDifferentiableMultivariateVectorialOptimizer0);
double[] doubleArray0 = new double[4];
double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);

* Writing JUnit test case 'GaussianFitter_ESTest' to evosuite-tests
* Done!

* Computation finished
