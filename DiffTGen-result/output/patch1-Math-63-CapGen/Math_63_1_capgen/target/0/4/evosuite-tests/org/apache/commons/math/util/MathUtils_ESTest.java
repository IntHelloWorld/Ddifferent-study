/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 04:19:56 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-6367210593183599338L);
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-6367210593183599338L);
      doubleArray0[6] = (double) (-3183605296591799669L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1845.3169333;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2141.3919711080503);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,141.392 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 38;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5.443449390774456E92;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[1];
      intArray1[0] = 3687;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 66;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1845.3169333;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1198;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 1.1102230246251565E-16;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = MathUtils.pow((long) 116, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1336.255244683);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1455.6807103466467);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = MathUtils.scalb((-1336.255244683), 2903);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = MathUtils.lcm((-1858), (-2197));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = MathUtils.indicator((short)1837);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.indicator(5040L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = MathUtils.indicator(7);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 744);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(0.0, 0.0, (-3748));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1968384, (-2112));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2160L), 0L);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2657), (-2483));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.sinh(4507L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 63, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = MathUtils.round((-1867.9381F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = MathUtils.round(660.24554F, 2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = MathUtils.round((-1222.27565), 0, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.round(0.06666666666666667, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(850L);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-97);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)9);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 982);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 12);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = MathUtils.pow((long) 0, 1074);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = MathUtils.pow((long) 125, 125);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = MathUtils.pow(4773, (long) 0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.pow((-1), 2432902008176640017L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.pow(0, 720);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.pow((-419), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(3535.3354225, 0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((int) (byte) (-106), 3684);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 3.834E-20);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathUtils.log(1, 149);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.log(1.1102230246251565E-16, 117);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = MathUtils.hash((double) (byte)0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.hash(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      int[] intArray1 = new int[8];
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3686;
      int[] intArray1 = new int[6];
      int int0 = MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-435.4703518);
      double[] doubleArray1 = new double[8];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1993.91517735016;
      double[] doubleArray1 = new double[5];
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 744, (long) 744);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 0, 130);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 147);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(4194304);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(0.0, 0.0, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, intArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[2];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(12, 114);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 12, k = 114
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = 1534.14;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,534.14 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 0, 0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 1051, (long) 1051);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (-1183956139), 2147483647L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-3413L), (-3413L));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-4046), (-2456));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.indicator((float) 38);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.gcd((-2655L), (-2655L));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.gcd(66, 66);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathUtils.factorialLog(149);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-437.4211887710047), 0.0, 2553);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 43);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-89.565), 2892.54, 2892.54);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(3.834E-20, 703.674070708, 703.674070708);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.19999998807907104, 0.19999998807907104);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-97));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-6367210593183599338L);
      doubleArray0[1] = (double) (-6367210593183599338L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 744;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (\u221E > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2791.6037675345;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,791.604 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,228,224^-2,228,224)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) (byte)9);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, (-2281L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,281)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) (byte)1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-3077));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-3,077)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.pow((long) 132, 1493L);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        MathUtils.pow((-931L), (long) (-1409));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-931^-1,409)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.pow((-389L), 0L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow((-973L), (-1506));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-973^-1,506)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        MathUtils.pow((int) (short) (-1), (long) (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = MathUtils.pow(0, 4607182418800017408L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        MathUtils.pow(0, (-51));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-51)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: 1 - -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1836, 27);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2126));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = MathUtils.sign((short)7);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.sign((-1L));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.sign((long) 1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.sign(106);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.sign((-976));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = MathUtils.sign((-978.667F));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = MathUtils.sign((float) (byte)5);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.sign(1632.479);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.sign((-2342.19819));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-12));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)63);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float float0 = MathUtils.round((-1002.8739F), 0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, (-2004), 2684);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 2,684, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = MathUtils.round(3227.3F, (int) (short)0, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, 1074);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3670.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-104.0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, (-1103.0621141326));
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-104.0));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 38);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = MathUtils.scalb(1.304E19, (-4193));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 61);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, 720L);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-4267615245585081135L), (long) 1437);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, (long) (-2004));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(886419781, (-2801));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long long0 = MathUtils.lcm((long) 192, 0L);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long long0 = MathUtils.lcm((long) (byte)0, (long) (byte)1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = MathUtils.lcm(2198, 4113);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = MathUtils.lcm(2056, 0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1629));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long long0 = MathUtils.indicator((long) 0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long long0 = MathUtils.indicator((long) (-1576));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = MathUtils.indicator(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 113);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = MathUtils.indicator((-1.9841269659586505E-4));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = MathUtils.indicator(3.834E-20);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)15);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-101));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long long0 = MathUtils.lcm((long) 66, 3288L);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = MathUtils.gcd((-442L), (long) 2765);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long long0 = MathUtils.lcm((long) (byte)1, (long) (-4193));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long long0 = MathUtils.lcm((-1155L), (-1155L));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long long0 = MathUtils.gcd(9218868437227405312L, 0L);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = MathUtils.gcd((-1576), (-1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = MathUtils.gcd(3687, 0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(66, 1638765260);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-4875));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,875
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(66);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3587));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,587
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(238);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1865));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,865
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[3];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-786.2770166014316), 0.375, 1669);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(50.148673902, (double) 0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1761.10871, 1761.10871, 0.0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = MathUtils.compareTo(640.7536, 63, 1214.660503);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-419), (-1.225622771460043E40), 0.0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = MathUtils.compareTo(0, 3294198.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = MathUtils.compareTo(1.0, (-0.2499999701976776), 1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2908), (-2908));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,908
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 1513);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 1,513
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(519, 248);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-399));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1030, 166);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1509, 0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(154, 154);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1437, 470);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(2145574773, (-688));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(232, 0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble((short)1, (short)1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(3135, (-3143));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1480, 0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, (-1365));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, 0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) (-867), (-2419L));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 0, 0L);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4499201580859392L, 720L);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(66, 66);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = MathUtils.round((-2137.5078202689847), 38);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = MathUtils.cosh(0.06666666666666667);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(546.7, 38.5336787);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = MathUtils.sinh((-93L));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 1665.2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = MathUtils.hash((-989.42239));
  }
}
