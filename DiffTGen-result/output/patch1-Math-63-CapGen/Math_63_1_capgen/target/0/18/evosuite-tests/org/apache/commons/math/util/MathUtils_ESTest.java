/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 04:26:05 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4503599627370495L, 4503599627370495L);
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.sign((short)0);
      float float0 = MathUtils.round((float) 4503599627370495L, (-2159));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-2159);
      doubleArray0[2] = (double) (-2159);
      doubleArray0[3] = (double) (-2159);
      doubleArray0[4] = (double) (short)0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.indicator(Float.NaN);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.sign(2.2250738585072014E-308);
      boolean boolean0 = MathUtils.equals((-810.78), 1755.4, (-172.07591538));
      int int0 = MathUtils.indicator((-2613));
      int int1 = MathUtils.indicator(4423);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) Float.NaN, (double) (-1), (-2159));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = MathUtils.indicator((-9218868437227405313L));
      float float0 = MathUtils.sign((-239.72136F));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-239.72136F);
      doubleArray0[2] = (double) (-1L);
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      long long1 = MathUtils.subAndCheck(7L, 7L);
      float float1 = MathUtils.indicator(6.0F);
      short short0 = MathUtils.sign((short) (-4186));
      long long2 = MathUtils.subAndCheck((-215667L), 0L);
      try { 
        MathUtils.pow(66, (-215667L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (66^-215,667)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.sign((-1005L));
      double double0 = MathUtils.scalb(3.834E-20, 1);
      boolean boolean0 = MathUtils.equals(51.0, 1153.0, 1.0);
      boolean boolean1 = MathUtils.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = (-745);
      int int1 = MathUtils.lcm((-745), (-745));
      long long0 = MathUtils.gcd(24L, (long) 745);
      long long1 = MathUtils.subAndCheck((long) (-745), (long) 745);
      // Undeclared exception!
      try { 
        MathUtils.factorial(745);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(19, 51);
      int int1 = MathUtils.gcd((-32), 19);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 51;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 51;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.addAndCheck(2, 19);
      int int3 = MathUtils.indicator(2129284634);
      int int4 = MathUtils.compareTo(1, 1, 51.0);
      int int5 = MathUtils.pow((-3221), (long) 2129284634);
      long long0 = MathUtils.pow((-2117L), 1);
      float float0 = MathUtils.sign((-918.857F));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-2117L));
      boolean boolean0 = MathUtils.equals((double) 2129284634, (-2770.60885872292), 0.5);
      int int6 = MathUtils.compareTo(21, 3176.3859149561, 3176.3859149561);
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
      long long1 = MathUtils.pow((-1152921504606846109L), 4294967295L);
      int int7 = MathUtils.mulAndCheck(51, 0);
      double double2 = MathUtils.distanceInf(doubleArray1, doubleArray0);
      float float1 = MathUtils.round((-1.0F), 21);
      int int8 = MathUtils.pow((-3221), 1960);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 590.007;
      doubleArray0[1] = 120.0;
      doubleArray0[2] = 5.9604644775390625E-8;
      doubleArray0[3] = (-1956.24416502);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(153.9082F);
      long long0 = MathUtils.binomialCoefficient(29, (-2010));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (-737.96));
      short short0 = MathUtils.sign((short)14);
      int int0 = MathUtils.mulAndCheck((int) (short)1, (int) (short)1);
      double double1 = MathUtils.cosh(1L);
      long long1 = MathUtils.lcm((long) 1, (long) (-2010));
      int[] intArray0 = new int[2];
      intArray0[0] = 29;
      intArray0[1] = (int) (short)14;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte) (-86));
      double double2 = MathUtils.indicator((double) 1);
      // Undeclared exception!
      try { 
        MathUtils.lcm(2145400734, (int) (byte) (-86));
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-1271);
      int int1 = MathUtils.pow((-1271), 2651);
      long long0 = MathUtils.mulAndCheck((long) (-1271), (-127L));
      try { 
        MathUtils.pow((-1L), (-1271));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1,271)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = 0.2;
      double double1 = MathUtils.cosh(0.2);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = 9193070505571053912L;
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9193070505571053912L, 9193070505571053912L);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 9,193,070,505,571,053,912 + 9,193,070,505,571,053,912
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int0 = MathUtils.addAndCheck((int) (byte) (-1), (int) (byte) (-1));
      double double0 = MathUtils.scalb((-2), (byte) (-88));
      boolean boolean0 = MathUtils.equals(0.0, (double) (byte) (-1), 3068.95227498118);
      long long0 = MathUtils.gcd((long) (byte) (-88), (long) (byte) (-88));
      double double1 = MathUtils.log(0.0, (-6.462348535570529E-27));
      int int1 = MathUtils.lcm((int) (byte) (-1), (int) (byte) (-88));
      int int2 = MathUtils.pow(2590, 711L);
      int int3 = MathUtils.sign(961);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(4503599627370495L, 4503599627370495L);
      short short0 = MathUtils.sign((short)0);
      short short1 = MathUtils.sign((short)0);
      float float0 = MathUtils.round((float) 4503599627370495L, (-2159));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-2159);
      doubleArray0[2] = (double) (-2159);
      doubleArray0[3] = (double) (-2159);
      doubleArray0[4] = (double) (short)0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      float float1 = MathUtils.indicator(Float.NaN);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.sign(2.2250738585072014E-308);
      boolean boolean0 = MathUtils.equals((-810.78), 1755.4, (-172.07591538));
      float float2 = MathUtils.sign(Float.NaN);
      double double2 = MathUtils.cosh((-324.567728626));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = new Object();
      boolean boolean0 = bigInteger0.equals(object0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.andNot(bigInteger1);
      boolean boolean1 = bigInteger1.testBit(107);
      int int0 = bigInteger1.intValueExact();
      int int1 = bigInteger1.bitLength();
      BigInteger bigInteger4 = bigInteger0.and(bigInteger1);
      int int2 = bigInteger0.signum();
      BigInteger bigInteger5 = BigInteger.valueOf(2261L);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger6 = bigInteger0.shiftRight((-2653));
      long long0 = 226L;
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, 226L);
      double double0 = 0.19999999999923582;
      double double1 = MathUtils.log(0.19999999999923582, 226L);
      int int3 = 905;
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2147483646), 905);
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: -2,147,483,646 - 905
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int0 = MathUtils.addAndCheck(238, 238);
      boolean boolean0 = MathUtils.equals(0.24866791307726935, (double) (byte) (-1), 3068.95227498118);
      long long0 = MathUtils.gcd((long) 238, (long) (byte) (-88));
      double double0 = MathUtils.log(0.0, 476);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 476;
      doubleArray0[1] = 0.24866791307726935;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.lcm((int) (byte) (-1), 238);
      int int2 = MathUtils.pow(2590, 711L);
      int int3 = MathUtils.sign(961);
      int int4 = MathUtils.mulAndCheck(1548, (int) (byte) (-1));
      int int5 = MathUtils.subAndCheck(13, 367);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-1L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 968.001922;
      doubleArray0[1] = (-5934.0);
      doubleArray0[2] = (-6.032174644509064E-23);
      doubleArray0[3] = (-228.18859685);
      doubleArray0[4] = 7.105427357601002E-15;
      doubleArray0[5] = 42.0;
      doubleArray0[6] = 1239.6991;
      doubleArray0[7] = (-816.278927);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 42.0;
      doubleArray1[1] = (-816.278927);
      doubleArray1[2] = 3.141592653589793;
      doubleArray1[3] = (-5934.0);
      doubleArray1[4] = 7.105427357601002E-15;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-59));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (byte) (-1), (double) (byte) (-59));
      long long0 = MathUtils.addAndCheck(0L, (long) (byte) (-59));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-59L);
      doubleArray0[2] = (double) 0L;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-4813.764), 792.86280987, (-399.6));
      float float0 = MathUtils.round((float) (-59L), 0);
      boolean boolean2 = MathUtils.equalsIncludingNaN((double) (byte) (-59), (double) (byte) (-1), (double) (-59.0F));
      int int1 = MathUtils.gcd((-839), 0);
      short short0 = MathUtils.sign((short)0);
      boolean boolean3 = MathUtils.equalsIncludingNaN(4818.51835, (-1.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      long long1 = bigInteger0.longValue();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-59);
      BigInteger bigInteger1 = bigInteger0.abs();
      byteArray0[5] = (byte) (-59);
      int int2 = bigInteger0.compareTo(bigInteger0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 3612L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(310L, 4639158106688368379L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = MathUtils.round(Float.NaN, 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-492.18), (-1846.8551985865));
      long long0 = MathUtils.lcm(4158L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientDouble(1193, 1193);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1848.4), 450.532219, 1193);
      float float0 = MathUtils.sign((float) 1193);
      long long0 = MathUtils.pow((long) 1193, (long) 1193);
      float float1 = MathUtils.round((float) (-8646456556136599575L), 1432);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1193;
      doubleArray0[3] = (double) 1432;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 1193;
      doubleArray0[7] = (double) Float.NaN;
      doubleArray0[8] = (double) 1.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 519.4147356);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4544.87615907352), 1.304E19);
      long long1 = MathUtils.indicator((-596L));
      int int0 = MathUtils.pow(1432, 9223372036854775020L);
      // Undeclared exception!
      MathUtils.factorialDouble(2143205792);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 537L;
      long long1 = MathUtils.mulAndCheck(537L, 537L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN(414.2495855, 414.2495855);
      int[] intArray0 = new int[7];
      int int0 = (-1726);
      intArray0[0] = (-1726);
      intArray0[1] = 1030;
      intArray0[2] = 1;
      intArray0[3] = 119;
      intArray0[4] = 7;
      intArray0[5] = (-715827883);
      intArray0[6] = 130;
      double double0 = MathUtils.distance(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1522, 191);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.sign((-549L));
      float float0 = MathUtils.sign((float) (-549L));
      double double0 = MathUtils.factorialLog(146);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 146;
      doubleArray0[2] = (double) (-549L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-549L);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-549L);
      doubleArray0[8] = 585.0178793888392;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (146 >= -549)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 3.834E-20, (-1060.0355236888));
      long long0 = MathUtils.binomialCoefficient(1282, 1282);
      long long1 = MathUtils.addAndCheck(1L, (-202L));
      int int0 = MathUtils.gcd(1282, (-237));
      int int1 = MathUtils.mulAndCheck((-237), (-237));
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 1023);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.cosh((-2360.488861911165));
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-1365);
      intArray0[2] = 8;
      intArray0[3] = 2147483597;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(904, 2147483597);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1431655765;
      // Undeclared exception!
      try { 
        MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1431655765);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (-2756.4838575017784), 0.0);
      float float0 = MathUtils.round((-2631.25F), (-977));
      boolean boolean1 = MathUtils.equals(3.834E-20, 0.008336750013465571, 2912);
      int int0 = MathUtils.pow(3225, 1260);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.scalb((-1404.66971802), 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      int int0 = 3104;
      int int1 = MathUtils.subAndCheck(0, 3104);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3104);
      intArray0[1] = 0;
      intArray0[2] = (-3104);
      intArray0[3] = 3104;
      intArray0[4] = (-3104);
      intArray0[5] = 0;
      intArray0[6] = (-3104);
      double double0 = MathUtils.distance(intArray0, intArray0);
      long long1 = (-5034868814120038111L);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-5034868814120038111L), 1318L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(0);
      boolean boolean0 = bigInteger1.equals(bigInteger0);
      int int0 = 927;
      boolean boolean1 = bigInteger0.equals(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.clearBit(927);
      String string0 = bigInteger0.toString();
      try { 
        MathUtils.pow(bigInteger0, (-1282));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,282)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-779.522651992), 0.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int0 = 162;
      float float0 = MathUtils.round((-37.67772F), 162);
      double double1 = MathUtils.log(1.1102230246251565E-16, 0.0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) (-37.67772F));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1.1102230246251565E-16;
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.binomialCoefficientDouble(1193, 1193);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1848.4), 450.532219, 1193);
      float float0 = MathUtils.sign((float) 1193);
      long long0 = MathUtils.pow((long) 1193, 918L);
      float float1 = MathUtils.round((float) 7931082524846904881L, 1432);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1193;
      doubleArray0[3] = (double) 1432;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 1193;
      doubleArray0[6] = (-1848.4);
      doubleArray0[7] = (double) Float.NaN;
      doubleArray0[8] = (double) 1.0F;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 519.4147356);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-4544.87615907352), 1.304E19);
      long long1 = MathUtils.indicator((-596L));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.15, 0.0, 3363);
      double double0 = MathUtils.normalizeAngle(1.304E19, 0.15);
      long long0 = MathUtils.pow((long) 3363, 2935890503282001226L);
      int int0 = MathUtils.indicator(3363);
      int int1 = MathUtils.subAndCheck((-2271), 0);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-1662.051507), (double) 0);
      byte byte0 = MathUtils.sign((byte) (-93));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 5);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.modPow(bigInteger1, bigInteger2);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 2);
      float float0 = MathUtils.sign((-796.2356F));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = MathUtils.sign(3070.6465F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3070.6465F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 3070.6465F;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      int int0 = MathUtils.sign(0);
      double double1 = MathUtils.indicator(2.2250738585072014E-308);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      boolean boolean0 = bigInteger1.isProbablePrime(0);
      long long0 = bigInteger1.longValue();
      String string0 = bigInteger1.toString(0);
      int int1 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.setBit(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2.2250738585072014E-308;
      doubleArray1[3] = (double) 10L;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 2.2250738585072014E-308;
      doubleArray1[6] = (double) 1.0F;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = (double) 3070.6465F;
      double double2 = MathUtils.distance(doubleArray0, doubleArray1);
      double double3 = MathUtils.factorialLog(0);
      boolean boolean1 = MathUtils.equals(doubleArray1, doubleArray1);
      int int2 = MathUtils.indicator(0);
      byte byte0 = MathUtils.indicator((byte) (-74));
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.06666666666666667, (-1180.4));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1180.4);
      doubleArray0[1] = (-1180.4);
      doubleArray0[2] = 1.3245471311735498E-8;
      doubleArray0[3] = 0.06666666666666667;
      doubleArray0[4] = 0.11113807559013367;
      doubleArray0[5] = 0.06666666666666667;
      doubleArray0[6] = 0.06666666666666667;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.030589580535888672);
      float float0 = MathUtils.sign(0.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      String string0 = bigInteger0.toString();
      BigInteger bigInteger3 = BigInteger.valueOf((-1344L));
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 121645100408832000L);
      double double0 = MathUtils.log((-3.141592653589793), 0.0);
      double double1 = MathUtils.log(0.11113807559013367, (-1226.5477511436031));
      boolean boolean1 = MathUtils.equals(0.06666666666666667, (-0.49999999999999994), 45);
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(121645100408832000L, 3138L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (int) (byte)0);
      byte byte1 = MathUtils.sign((byte) (-18));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(0L);
      int int2 = MathUtils.addAndCheck(0, 0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.gcd((-5705L), 0L);
      int int3 = MathUtils.hash((-741.7));
      int int4 = MathUtils.hash(1424.4346063157495);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1L, 1495184387, 1495184387);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.indicator(0L);
      int int0 = MathUtils.addAndCheck(0, 0);
      double double2 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.gcd((-5705L), 0L);
      int int1 = MathUtils.hash((-741.7));
      int int2 = MathUtils.hash(1424.4346063157495);
      int int3 = MathUtils.sign(865);
      short short0 = MathUtils.sign((short)15);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.factorialLog(746);
      short short0 = MathUtils.sign((short)0);
      long long0 = (-2518L);
      long long1 = MathUtils.gcd((-2518L), (long) 746);
      long long2 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((long) 746, (-9223372036854775808L));
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 0L;
      int int0 = 2166;
      long long1 = MathUtils.pow(0L, 2166);
      double double0 = MathUtils.log(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0L, 2166, (-3155));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -3,155, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.log(0.0, 0.0);
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,506,735,414,126,822,144^-1,506,735,414,126,822,144)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = MathUtils.compareTo((-3272.87353150228), (-3272.87353150228), 2963.242989327727);
      int int1 = 1988;
      double double0 = MathUtils.binomialCoefficientDouble(1988, 0);
      int int2 = MathUtils.hash((-3272.87353150228));
      int int3 = MathUtils.pow(137, 0L);
      double double1 = MathUtils.cosh(1140.2818245910366);
      long long0 = MathUtils.subAndCheck(0L, 0L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3223.2556112975;
      doubleArray0[1] = (double) (-13830884);
      doubleArray0[2] = (double) 137;
      doubleArray0[3] = (double) 137;
      doubleArray0[4] = (double) 137;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3,223.256 > -13,830,884)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      int int1 = 20;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 20);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 20
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-619,863,296^-619,863,296)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3639.223971);
      doubleArray0[1] = 2425.11;
      doubleArray0[2] = (-2948.504519854);
      doubleArray0[3] = 640.77332461;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(Float.NaN);
      boolean boolean1 = MathUtils.equals(2425.11, (-962.500078));
      long long0 = MathUtils.pow(589L, 5592);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)74;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 3033);
      short short0 = MathUtils.indicator((short)2452);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round((-1.0F), 0, 0);
      int int1 = MathUtils.addAndCheck(0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = (-4572.744F);
      float float1 = MathUtils.indicator((-4572.744F));
      int int0 = 360;
      double double0 = MathUtils.factorialLog(360);
      double double1 = 0.0;
      boolean boolean0 = MathUtils.equals((double) (-1.0F), (double) (-1.0F), 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-4572.744F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) (-1.0F), 0.0, (-2175.5187787));
      // Undeclared exception!
      try { 
        MathUtils.round((double) 360, 21, 360);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialDouble(0);
      int int1 = (-486);
      int int2 = MathUtils.mulAndCheck((-486), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-486);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.gcd(127, (-2764));
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-58));
      float float0 = MathUtils.round(0.0F, 1219);
      boolean boolean2 = MathUtils.equalsIncludingNaN((-3.940510424527919E-20), (double) 0.0F, 0.0);
      long long0 = MathUtils.gcd(2625L, (-3962L));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-3962L);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      boolean boolean3 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      long long0 = bigInteger1.longValue();
      boolean boolean0 = bigInteger0.isProbablePrime(0);
      BigInteger bigInteger2 = bigInteger1.not();
      float float0 = bigInteger1.floatValue();
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 17);
      int[] intArray0 = new int[8];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 4;
      intArray0[5] = 17;
      intArray0[6] = 159;
      intArray0[7] = 17;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      byte byte0 = MathUtils.sign((byte)8);
      int int1 = MathUtils.compareTo(17, 364.0018188, Double.NaN);
      long long1 = MathUtils.indicator((long) (-1));
      long long2 = MathUtils.sign(259L);
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3183605296591799669L), 259L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.factorialLog(3649);
      short short0 = (short)841;
      short short1 = MathUtils.sign((short)841);
      long long0 = MathUtils.pow((-2167L), 4398046511103L);
      int int0 = MathUtils.pow(3649, 128L);
      double double1 = MathUtils.round((double) 3564266891202506425L, 3649);
      long long1 = MathUtils.sign((-1L));
      double double2 = MathUtils.log((-1L), 5.669184079525E-24);
      double double3 = MathUtils.sinh(26285.878650145365);
      float float0 = MathUtils.indicator(456.26035F);
      byte byte0 = MathUtils.indicator((byte) (-70));
      long long2 = MathUtils.lcm((long) (byte) (-70), (-2167L));
      boolean boolean0 = MathUtils.equals(845.72, (double) (byte) (-70), 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 0.0;
      double double4 = MathUtils.safeNorm(doubleArray0);
      int int1 = (-1529);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1529));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,529
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 9;
      int int1 = 0;
      double double0 = MathUtils.round((-0.0013888888689039883), 9, 0);
      try { 
        MathUtils.pow((long) 9, (-3974));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (9^-3,974)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.cosh(0.2);
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = MathUtils.addAndCheck(9193070505571053912L, 2147483648L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.2, (-71.27842020942292), (double) 9193070505571053912L);
      double double1 = 948.8559199485683;
      boolean boolean1 = MathUtils.equals((double) 9193070505571053912L, 948.8559199485683, 1.020066755619076);
      // Undeclared exception!
      try { 
        MathUtils.equals((-216.958089466), (double) 2147483648L, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      long long0 = MathUtils.gcd((long) 0, (long) 0);
      float float0 = MathUtils.indicator(1446.42F);
      double double0 = MathUtils.factorialDouble(0);
      long long1 = MathUtils.lcm(0L, (long) 0);
      double double1 = MathUtils.sinh(0);
      short short0 = MathUtils.sign((short)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long2 = MathUtils.pow(0L, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 0;
      intArray0[4] = (-2638);
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.distance1(intArray0, intArray0);
      double double2 = MathUtils.indicator(Double.NEGATIVE_INFINITY);
      long long3 = MathUtils.addAndCheck((-707L), (-707L));
      int int3 = MathUtils.pow(0, (long) 0);
      double double3 = MathUtils.sign(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(668L, 668L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, 3619);
      long long1 = MathUtils.sign(668L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3619;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 668L;
      doubleArray0[3] = (-62.81119110966);
      doubleArray0[4] = (double) 668L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 3619;
      doubleArray0[7] = (double) 0L;
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3619;
      intArray0[1] = 3619;
      intArray0[2] = 1524258446;
      intArray0[3] = 1524258446;
      intArray0[4] = 1524258446;
      intArray0[5] = 1524258446;
      intArray0[6] = 1524258446;
      intArray0[7] = 1524258446;
      intArray0[8] = 1524258446;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.sign(1891L);
      int int0 = MathUtils.mulAndCheck(164, 164);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 164;
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      long long0 = MathUtils.pow((long) (byte)1, (int) (byte)1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = MathUtils.gcd((-2446), (-2446));
      long long0 = MathUtils.pow((long) 2446, 60);
      double double0 = MathUtils.round((double) 60, 0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(1092L, 0L);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 20;
      intArray0[1] = 2550;
      intArray0[2] = (-1667);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 11;
      intArray0[0] = 11;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = (-411);
      double double0 = MathUtils.binomialCoefficientDouble(11, (-411));
      float float0 = MathUtils.sign(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 11, (double) 0.0F, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = (short) (-1380);
      short short1 = MathUtils.indicator((short) (-1380));
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck((long) (short) (-1380), 0L);
      long long2 = MathUtils.indicator(0L);
      int int0 = 3886;
      double double0 = MathUtils.factorialLog(3886);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1380);
      doubleArray0[1] = (double) 0L;
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.factorialLog(1437);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((short) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = MathUtils.gcd(14, 6);
      int int1 = MathUtils.gcd(6, 0);
      boolean boolean0 = MathUtils.equals(4137.9233, (-555.221459));
      double double0 = MathUtils.normalizeAngle(0.0, 0.087);
      float float0 = MathUtils.sign((-2790.63F));
      int int2 = MathUtils.gcd(153, 896);
      byte byte0 = MathUtils.indicator((byte)0);
      double double1 = MathUtils.round((double) (byte)0, (int) (byte)0, (int) (byte)1);
      short short0 = MathUtils.indicator((short) (byte)1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (-4155.268);
      doubleArray0[3] = (-2476.101563);
      doubleArray0[4] = 1203.604043598;
      doubleArray0[5] = (double) 14;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = 1702.831655;
      doubleArray0[8] = (double) 6;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-305));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -305
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int0 = MathUtils.compareTo((-4813.764), 792.86280987, (-399.6));
      long long0 = MathUtils.indicator(1120L);
      int int1 = MathUtils.gcd((-839), 0);
      short short0 = MathUtils.sign((short)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      long long1 = bigInteger0.longValue();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int2 = bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 3612L);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-37));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -37
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(0L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double double0 = (-2472.3105804875);
      doubleArray0[2] = (-2472.3105804875);
      doubleArray0[3] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-2,472.311 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 3643.108152611, 0.0);
      float float0 = MathUtils.sign(201.9F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      long long0 = bigInteger1.longValueExact();
      short short0 = bigInteger1.shortValueExact();
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger0, 2);
      boolean boolean1 = MathUtils.equalsIncludingNaN(3340.0, (-0.1666666567325592), 3340.0);
      long long1 = MathUtils.mulAndCheck(486L, (long) 2);
      long long2 = MathUtils.binomialCoefficient(2, 0);
      short short1 = MathUtils.sign((short)971);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3340.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-0.1666666567325592);
      doubleArray0[5] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = (byte) (-45);
      byte byte1 = MathUtils.sign((byte) (-45));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-45);
      doubleArray0[1] = (double) (byte) (-45);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-45);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-45 <= -45)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 0.0;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.pow((-4091L), 0);
      short short0 = MathUtils.indicator((short)0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-4091L);
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (short)0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      long long1 = MathUtils.factorial((short)1);
      int int0 = MathUtils.indicator((-396));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, (double) 1L);
      int int1 = MathUtils.lcm(43, 67);
      long long2 = MathUtils.indicator((long) 0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 43, 0, (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double1 = MathUtils.cosh(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, 479001600L);
      BigInteger bigInteger3 = bigInteger2.multiply(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.sign((float) 6);
      double double2 = MathUtils.safeNorm(doubleArray0);
      try { 
        MathUtils.normalizeArray(doubleArray0, 0.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-362.5852855519326);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2 >= -362.585)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 5);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger0.modPow(bigInteger1, bigInteger2);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 5);
      float float0 = MathUtils.sign((float) 5);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      double double0 = (-2548.1726763);
      int int1 = MathUtils.compareTo((-1207.373155954676), 1L, (-2548.1726763));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = MathUtils.lcm(1331L, 1331L);
      int[] intArray0 = new int[6];
      intArray0[0] = 176;
      intArray0[1] = 1225;
      intArray0[2] = (-1750);
      intArray0[3] = 175;
      intArray0[4] = 0;
      intArray0[5] = 150;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      short short0 = MathUtils.indicator((short)1381);
      short short1 = MathUtils.indicator((short)1381);
      int int1 = MathUtils.hash(0.0);
      int int2 = MathUtils.pow(0, 533L);
      byte byte0 = MathUtils.indicator((byte)6);
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-1253);
      int int1 = MathUtils.mulAndCheck((-1253), 0);
      int int2 = MathUtils.sign(0);
      double double0 = MathUtils.log(0, 0);
      double double1 = MathUtils.normalizeAngle(353.9495859510826, 0.0);
      BigInteger bigInteger0 = MathUtils.pow((BigInteger) null, (long) 0);
      long long0 = MathUtils.pow(2411L, 0);
      double double2 = MathUtils.round(Double.NaN, 209);
      short short0 = MathUtils.sign((short)0);
      double double3 = MathUtils.factorialLog(209);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      double double1 = MathUtils.cosh(0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 149;
      intArray0[1] = 1746;
      double double2 = MathUtils.distance(intArray0, intArray0);
      long long0 = MathUtils.binomialCoefficient(1746, 0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      double double1 = MathUtils.cosh(0.0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger1, 479001600L);
      BigInteger bigInteger3 = bigInteger2.multiply(bigInteger0);
      BigInteger bigInteger4 = bigInteger0.add(bigInteger2);
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      float float0 = MathUtils.round((-532.0F), 6);
      double double2 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.round((-1846.9509), 0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1847.0);
      doubleArray0[1] = (-1846.9509);
      doubleArray0[2] = (-1847.0);
      doubleArray0[3] = (-1847.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1846.9509);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1847.0));
      double double1 = MathUtils.distance1(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[0];
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray2, doubleArray2);
      int int0 = MathUtils.hash((-1847.0));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,847 <= -1,846.951)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.986821492305628E-8;
      doubleArray0[1] = (-841.686664844185);
      doubleArray0[2] = 1419.90868681;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1809.94206617;
      doubleArray0[6] = (-2461.0);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.indicator((-22.6));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2276.953547);
      doubleArray0[1] = 555.10579509;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-566.47634985);
      doubleArray0[4] = 2537.4828;
      doubleArray0[5] = 0.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (555.106 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = MathUtils.hash(412.2219);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-1485149132), (-1485149132));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -1,485,149,132
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double0 = MathUtils.factorialDouble(0);
      long long0 = 982L;
      long long1 = MathUtils.addAndCheck(982L, 982L);
      double double1 = MathUtils.indicator(4112.15443);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2L, 2L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4L;
      doubleArray0[1] = (double) 4L;
      doubleArray0[2] = (double) 2L;
      doubleArray0[3] = (double) 2L;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3189.0;
      doubleArray1[3] = (double) 2L;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(57.2957763671875, 57.2957763671875, 57.2957763671875);
      float float0 = MathUtils.round(0.0F, (-308));
      int int0 = MathUtils.sign((-2017));
      boolean boolean1 = MathUtils.equalsIncludingNaN((double) Float.NaN, (double) 0.0F);
      long long0 = MathUtils.indicator((long) (-1));
      long long1 = MathUtils.addAndCheck(0L, 0L);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 77;
      intArray0[2] = (-308);
      intArray0[3] = (-1);
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.gcd((-131), (-131));
      int int1 = MathUtils.indicator((-131));
      int int2 = MathUtils.compareTo(0.1538461446762085, (-1.0), 0.0);
      byte byte0 = MathUtils.indicator((byte) (-77));
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte1 = MathUtils.sign((byte) (-1));
      double double2 = MathUtils.factorialLog(150);
      double double3 = MathUtils.round((double) (byte) (-77), (int) (byte) (-1));
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) (byte) (-1), 605.0201058494238, (-2858));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float float0 = MathUtils.sign((-1.0F));
      int int0 = (-2213);
      int int1 = MathUtils.mulAndCheck((-2213), (-2213));
      int int2 = MathUtils.compareTo(4897369, (-2213), 0.0);
      long long0 = MathUtils.factorial(1);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2213), 0);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -2,213, k = 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-303.1), (-2394.17), 723);
      long long0 = MathUtils.lcm((long) 723, (long) 723);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-88));
      int int0 = MathUtils.addAndCheck(238, 238);
      double double0 = MathUtils.scalb(0.0, (byte) (-88));
      boolean boolean0 = MathUtils.equals(0.0, (double) (byte) (-1), 3068.95227498118);
      long long0 = MathUtils.gcd((long) 238, (long) (byte) (-88));
      double double1 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 476;
      doubleArray0[1] = 0.0;
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.lcm((int) (byte) (-1), 238);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.pow(2590, 711L);
      int int3 = MathUtils.sign(961);
      int int4 = MathUtils.mulAndCheck(1548, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 0, 0);
      int int0 = MathUtils.mulAndCheck(0, 132);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.scalb(10.0, 2781);
      byte byte0 = MathUtils.indicator((byte) (-124));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.pow(9, 0);
      int int1 = MathUtils.mulAndCheck(0, 9);
      float float0 = MathUtils.indicator(0.0F);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-434), 177);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -434, k = 177
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = MathUtils.round((-918.857F), 0);
      int int0 = MathUtils.subAndCheck(0, 0);
      double double0 = MathUtils.scalb(0, 0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2020.8221446227817;
      doubleArray0[1] = (-1078.3);
      doubleArray0[2] = 1.1102230246251565E-16;
      doubleArray0[3] = (-493.626362857527);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 406.9615488286;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, doubleArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 63;
      try { 
        MathUtils.pow(63, (-3512299194304650054L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (63^-3,512,299,194,304,650,054)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.16666666666745392, (-112.948303843));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-112.948303843);
      doubleArray0[1] = 0.16666666666745392;
      doubleArray0[2] = 0.16666666666745392;
      doubleArray0[3] = (-112.948303843);
      doubleArray0[4] = 0.16666666666745392;
      doubleArray0[5] = 0.16666666666745392;
      doubleArray0[6] = 0.16666666666745392;
      doubleArray0[7] = (-112.948303843);
      doubleArray0[8] = 0.16666666666745392;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-112.948 < 0.167)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1602), (-1602));
      long long0 = (-411L);
      long long1 = MathUtils.gcd((-411L), (long) (-3204));
      float float0 = MathUtils.indicator((float) 3L);
      int int1 = MathUtils.hash((double) 3L);
      double double0 = MathUtils.sinh(3L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      long long2 = MathUtils.indicator(3L);
      double double1 = 2495.1242;
      double double2 = MathUtils.normalizeAngle(2495.1242, 1.9699272335463627E-8);
      boolean boolean0 = MathUtils.equals((double) (-1602), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-454));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1470L, 1470L);
      int int0 = 2987;
      long long1 = (-254L);
      try { 
        MathUtils.pow(2987, (-254L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,987^-254)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 1172.78098473358;
      doubleArray0[3] = (-2618.7575);
      doubleArray0[4] = 2963.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1084.12377651485);
      double double0 = MathUtils.indicator(0.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(6.283185307179586, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = MathUtils.sign((short)1549);
      double double0 = MathUtils.binomialCoefficientLog(0, (-2636));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2537);
      intArray0[2] = 130;
      intArray0[3] = (-905);
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.indicator(0);
      double double0 = MathUtils.normalizeAngle((-905), 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-0.2213157661395826));
      float float0 = MathUtils.round((float) (-905), (-2537));
      float float1 = MathUtils.sign((float) 0);
      int int3 = (-1021);
      int int4 = MathUtils.gcd(1426, (-1021));
      int int5 = MathUtils.subAndCheck(691, 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 106);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 106
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = MathUtils.sign((-432));
      int int1 = MathUtils.gcd((-1), (-432));
      double[] doubleArray0 = new double[0];
      int int2 = MathUtils.hash(doubleArray0);
      int int3 = 0;
      float float0 = MathUtils.round((float) (-432), 1, 0);
      try { 
        MathUtils.pow((long) (-1), (-1041L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1,041)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 0.0);
      long long0 = MathUtils.mulAndCheck(31L, 31L);
      int int0 = MathUtils.sign((-3299));
      double double1 = MathUtils.log((-1), 0.0);
      long long1 = MathUtils.mulAndCheck(0L, 31L);
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        MathUtils.pow((-889L), (-1354L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-889^-1,354)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      float float0 = MathUtils.round(3267.6F, (-111), 0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = MathUtils.indicator(439);
      boolean boolean0 = MathUtils.equals(1086.4316014, 1086.4316014, 21);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 439;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 21;
      doubleArray0[4] = 1202.7293298423056;
      doubleArray0[5] = 1086.4316014;
      doubleArray0[6] = (double) 21;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-117));
      double double0 = MathUtils.log((byte) (-117), (byte) (-117));
      double double1 = MathUtils.normalizeAngle((-1375.27236), (-0.09088450866185192));
      int int0 = MathUtils.pow((int) (byte) (-117), 0L);
      float float0 = MathUtils.round((float) (byte) (-117), (int) (byte) (-1));
      double[] doubleArray0 = new double[0];
      double double2 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte1 = MathUtils.indicator((byte)110);
      short short0 = (short)2415;
      short short1 = MathUtils.indicator((short)2415);
      double double3 = MathUtils.round(0.11113807559013367, (int) (byte)110, (int) (byte)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double4 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = 1138;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((byte)110, 1138);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 110, k = 1,138
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = (-1782L);
      long long1 = MathUtils.addAndCheck((-3270L), (-1782L));
      long long2 = MathUtils.lcm((-5052L), (-1782L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = bigInteger0.byteValueExact();
      int int0 = bigInteger0.intValue();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 256;
      boolean boolean0 = bigInteger0.isProbablePrime(256);
      short short0 = bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger0);
      try { 
        MathUtils.pow(31, (-50));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (31^-50)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.indicator(0L);
      byte byte0 = MathUtils.sign((byte)69);
      int int0 = 25;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((byte)1, 25);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 25
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(787, 0);
      double double1 = MathUtils.log(0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 787;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double2 = MathUtils.scalb(1425.0, 787);
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.hash((-912.3779041568089));
      long long0 = MathUtils.addAndCheck((long) 787, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(870);
      int int0 = MathUtils.pow(Integer.MIN_VALUE, 724);
      float float0 = MathUtils.indicator(1.0F);
      double double1 = MathUtils.cosh((-1114.4291632484758));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int1 = MathUtils.lcm(Integer.MIN_VALUE, 0);
      long long0 = MathUtils.mulAndCheck((-3641L), (long) 724);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray1 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(3, 3);
      try { 
        MathUtils.pow(2342, (-2086));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (2,342^-2,086)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = MathUtils.hash(362.0);
      double double0 = MathUtils.scalb((-2533.750248464249), 1081516032);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1792.28664), 1497.481078508335);
      double double0 = MathUtils.binomialCoefficientLog(1671, 0);
      double double1 = MathUtils.scalb(1497.481078508335, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 1397);
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(272.765, (-484.48962853482));
      long long0 = MathUtils.lcm((-983L), (-983L));
      double double0 = MathUtils.round((double) (-983L), 0, 0);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      long long2 = MathUtils.addAndCheck(983L, (-983L));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.14285714285714285, 568);
      long long0 = MathUtils.mulAndCheck(1194L, 0L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.addAndCheck((long) 0, (long) 0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-224);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = (-2640.548328716359);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equals((-2640.548328716359), (-2640.548328716359), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2927;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      long long0 = 115L;
      long long1 = MathUtils.mulAndCheck(115L, (long) 2927);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2927;
      doubleArray0[1] = (double) 336605L;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      byte byte0 = (byte) (-54);
      byte byte1 = MathUtils.sign((byte) (-54));
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (2,927 <= 336,605)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = MathUtils.sign(8);
      double double0 = MathUtils.scalb(3.834E-20, 2374);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 8;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      int int2 = MathUtils.indicator(8);
      // Undeclared exception!
      try { 
        MathUtils.round((-2159.598F), 0, (-1999));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -1,999, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 17;
      // Undeclared exception!
      try { 
        MathUtils.round(1059.5F, 17, 17);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 17, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-65.060137428961);
      doubleArray0[3] = (-670.07407480419);
      doubleArray0[4] = 419.42925904665884;
      doubleArray0[5] = (-1433.33);
      doubleArray0[6] = (-3969.0);
      doubleArray0[7] = 4.0;
      doubleArray0[8] = 1341.3235;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly decreasing (-670.074 <= 419.429)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
      int int0 = (-3742);
      int int1 = MathUtils.pow((-3742), 0L);
      long long1 = MathUtils.mulAndCheck((-160L), (long) 1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-160L);
      doubleArray0[3] = (double) (-3742);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (-160L);
      doubleArray0[7] = (double) 0L;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1, 158);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 158
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.gcd((-2530), 3431);
      long long0 = MathUtils.indicator(0L);
      double double0 = MathUtils.sinh(3431);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-2530);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-2530);
      doubleArray0[7] = (double) 3431;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      int int1 = MathUtils.mulAndCheck(1, 1);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, 3.834E-20, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = MathUtils.sign((-1440L));
      long long1 = MathUtils.factorial(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1440L);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (-174.06891333);
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-1440L);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long2 = MathUtils.binomialCoefficient(2135, 0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.304E19);
      int int0 = MathUtils.mulAndCheck(1065, 724);
      long long3 = MathUtils.gcd(120L, 0L);
      int int1 = MathUtils.gcd((-203), 9);
      int int2 = MathUtils.hash(doubleArray0);
      double double1 = MathUtils.round((-1440.0), (-2924));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float float0 = MathUtils.round((-53.96F), (-1134));
      long long0 = MathUtils.subAndCheck(0L, 87178291200L);
      double double0 = MathUtils.round(0.0, 45);
      int int0 = MathUtils.gcd(45, (-1134));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(325L);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.or(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      double double0 = bigInteger1.doubleValue();
      BigInteger bigInteger4 = bigInteger0.abs();
      int int0 = (-1);
      String string0 = bigInteger0.toString((-1));
      BigInteger bigInteger5 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger6 = bigInteger0.max(bigInteger1);
      BigInteger bigInteger7 = MathUtils.pow(bigInteger0, bigInteger0);
      double double1 = MathUtils.cosh(1.0);
      long long0 = MathUtils.addAndCheck(325L, 325L);
      int int1 = 0;
      double double2 = MathUtils.round(2694.386625266, (-1), 0);
      short short0 = (short) (-3344);
      short short1 = MathUtils.indicator((short) (-3344));
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(1.494140625, 0.0, (int) (short) (-3344));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-297));
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      int int0 = (-1875);
      intArray0[1] = (-1875);
      intArray0[2] = (int) (short) (-297);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int2 = MathUtils.addAndCheck(52, (-1438));
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.sign((-4035746434778044925L));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1208));
      float float0 = MathUtils.round((float) (short) (-1208), (-194));
      int int0 = MathUtils.subAndCheck((-194), 0);
      boolean boolean0 = MathUtils.equals((double) (-194), (double) (-194));
      long long0 = MathUtils.indicator((long) (-194));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-906));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-906);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = 3.141592653589793;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round((-1734.204), (int) (short) (-906), 31);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathUtils.sign((-750.68156));
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.lcm((-5160L), 1839L);
      long long1 = 0L;
      long long2 = MathUtils.gcd(0L, 3163080L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3163080L;
      doubleArray0[1] = (double) 3163080L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1839L;
      doubleArray0[4] = (double) 3163080L;
      doubleArray0[5] = (double) 3163080L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,163,080 >= 3,163,080)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = MathUtils.indicator((-1050.4302305518977));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1099));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,099
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = MathUtils.round((-53.96F), (-1143));
      long long0 = MathUtils.subAndCheck((-40L), 87178291200L);
      double double0 = MathUtils.SAFE_MIN;
      int int0 = MathUtils.gcd(45, (-1143));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathUtils.round(1.32422, (-480));
      long long0 = MathUtils.addAndCheck(3358L, 501L);
      boolean boolean0 = MathUtils.equals(311.0, (double) 3859L);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.19999999999923582, 0.0, 0.19999999999923582);
      double double0 = MathUtils.normalizeAngle((-725.3), 2000.28);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 703;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 3880;
      intArray0[5] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      float float0 = MathUtils.sign((float) 0);
      double double1 = MathUtils.binomialCoefficientDouble(2599, 265);
      boolean boolean1 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (double) 0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-795.67935372047), 0.0);
      float float0 = MathUtils.round(4483.0F, 85);
      byte byte0 = MathUtils.indicator((byte)6);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-795.67935372047), 0.6931470632553101, (double) (byte)6);
      long long0 = MathUtils.sign(0L);
      float float1 = MathUtils.round((-682.84015F), (int) (byte)6);
      int[] intArray0 = new int[0];
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = (-1606);
      int int1 = 2672;
      // Undeclared exception!
      try { 
        MathUtils.round(426.03315603445, (-1606), 2672);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 127;
      int int1 = MathUtils.addAndCheck(127, (-1203));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1076);
      doubleArray0[1] = (double) (-1203);
      doubleArray0[2] = (double) (-1203);
      doubleArray0[3] = (double) (-1203);
      doubleArray0[4] = (double) (-1203);
      doubleArray0[5] = (double) 127;
      doubleArray0[6] = (double) 127;
      doubleArray0[7] = (double) (-1203);
      doubleArray0[8] = (double) 127;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-1,076 >= -1,203)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      int int0 = MathUtils.mulAndCheck((-486), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-486);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.304E19);
      int int1 = MathUtils.subAndCheck(0, (-486));
      double double1 = MathUtils.sinh((-486));
      float float0 = MathUtils.indicator((float) 0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 486, 1247.9073971997, 1247.9073971997);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (-1557.52759), (-1557.52759));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger4 = bigInteger0.negate();
      BigInteger bigInteger5 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean1 = MathUtils.equals(2958.7582774, 2958.7582774, 709);
      byte byte0 = MathUtils.sign((byte) (-26));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-733.23566839);
      doubleArray0[1] = 1.7029898543501842E-8;
      doubleArray0[2] = 1.25;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = MathUtils.scalb((-1813.44014246), 1760);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1760;
      doubleArray0[1] = (double) 1760;
      doubleArray0[2] = (double) 1760;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = MathUtils.log(0.5, 0.5);
      float float0 = MathUtils.round(1781.6259F, (-1460));
      double double1 = MathUtils.normalizeAngle(1781.6259F, Double.NEGATIVE_INFINITY);
      boolean boolean0 = MathUtils.equals(1663.6308012477525, (double) Float.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(3.834E-20, 3.834E-20, (-1060.0355236888));
      long long0 = MathUtils.binomialCoefficient(1282, 1282);
      long long1 = MathUtils.addAndCheck(1L, (-202L));
      int int0 = MathUtils.gcd(1282, (-237));
      boolean boolean1 = MathUtils.equals(288.12, (double) (-201L));
      int int1 = MathUtils.mulAndCheck((-237), (-2540));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short short0 = MathUtils.indicator((short)892);
      double double0 = MathUtils.factorialDouble((short)892);
      float float0 = MathUtils.indicator((float) (short)1);
      int int0 = MathUtils.pow(180, (int) (short)1);
      int int1 = MathUtils.addAndCheck(180, 180);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) (short)892;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 360;
      doubleArray0[4] = (double) (short)892;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) (short)1;
      int int2 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.pow((long) 180, (long) (short)1);
      double double1 = 2361.943699169;
      double double2 = MathUtils.round(2361.943699169, 1178);
      double double3 = MathUtils.log(1.0F, 1.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(2361.943699169, 0.0, 180);
      int int3 = MathUtils.pow(1864, (long) (short)892);
      // Undeclared exception!
      try { 
        MathUtils.factorial(5135);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-336);
      intArray0[3] = 112;
      intArray0[4] = 2687;
      intArray0[5] = 0;
      intArray0[6] = 228;
      intArray0[7] = 218;
      intArray0[8] = 4306;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 2.0);
      int int0 = MathUtils.mulAndCheck(978, 978);
      byte byte0 = MathUtils.indicator((byte)22);
      int int1 = 3;
      double double0 = MathUtils.round(0.0, 3);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int2 = MathUtils.addAndCheck((-1822), 1840);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, (double) (byte)22, 72);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(1500, 956484);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1,500, k = 956,484
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = MathUtils.pow(976L, 976L);
      long long1 = MathUtils.mulAndCheck(0L, 976L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 976L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 976L;
      doubleArray0[4] = (-682.4824601);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 976L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (976 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)58);
      int int0 = MathUtils.pow((int) (byte)1, (long) (byte)58);
      double double0 = MathUtils.binomialCoefficientLog(112, 13);
      double double1 = MathUtils.scalb(38.06443637684591, 0);
      int int1 = MathUtils.lcm(1754, 4);
      int int2 = MathUtils.compareTo(0, 4, 3508);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 3508;
      int int3 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = MathUtils.pow(11, 11);
      int int1 = MathUtils.gcd(0, 124);
      boolean boolean0 = MathUtils.equals((double) 0, (-782.8199204219), (double) 124);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 124;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = MathUtils.round(277.38, 1355);
      double double1 = MathUtils.factorialLog(1355);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.indicator((long) 1);
      double double0 = MathUtils.scalb(1, 1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = MathUtils.indicator((-1985));
      float float0 = MathUtils.sign(0.0F);
      boolean boolean0 = MathUtils.equals(0.125, (double) (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double double0 = MathUtils.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorial(4052);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(20);
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = 150.2079;
      double double1 = 1.997844754509471E-9;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(150.2079, 1.997844754509471E-9, (-3789));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1639), 620);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(217, (-1584));
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 217;
      intArray0[2] = 217;
      intArray0[3] = (-1571);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 590.007;
      doubleArray0[1] = 120.0;
      doubleArray0[2] = 5.9604644775390625E-8;
      doubleArray0[3] = (-1956.24416502);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator(153.9082F);
      long long0 = MathUtils.binomialCoefficient(29, (-2010));
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, (-737.96));
      short short0 = MathUtils.sign((short)14);
      int int0 = MathUtils.mulAndCheck((int) (short)1, (int) (short)1);
      double double1 = MathUtils.cosh(1L);
      long long1 = MathUtils.lcm((long) 1, (long) (-2010));
      int[] intArray0 = new int[2];
      intArray0[0] = 29;
      intArray0[1] = (int) (short)14;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      byte byte0 = MathUtils.indicator((byte) (-86));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 84;
      double double0 = MathUtils.factorialDouble(84);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.314240134565475E126;
      doubleArray0[1] = 3.314240134565475E126;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 84;
      doubleArray0[4] = 3.314240134565475E126;
      doubleArray0[5] = 3.314240134565475E126;
      doubleArray0[6] = 3.314240134565475E126;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte)0);
      int int1 = MathUtils.pow(0, (int) (byte)0);
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 3.314240134565475E126);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (3,314,240,134,565,475,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 >= 3,314,240,134,565,475,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1394.28717;
      doubleArray0[2] = 1394.28717;
      doubleArray0[3] = 1030.11603;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6366197723675814;
      doubleArray0[6] = 472.688685039;
      doubleArray0[7] = 2165.4978916;
      int int0 = MathUtils.hash(doubleArray0);
      byte byte0 = MathUtils.sign((byte)101);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long long0 = MathUtils.gcd(6L, (-2062L));
      int int0 = MathUtils.indicator(0);
      double double0 = MathUtils.cosh(2692.9471);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = 2692.9471;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) (-2062L);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double2 = MathUtils.cosh(2L);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double3 = MathUtils.log(0.0, 2.0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long long0 = MathUtils.lcm(6L, 6L);
      long long1 = MathUtils.indicator((-1221L));
      long long2 = 0L;
      long long3 = MathUtils.pow(0L, 0L);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = MathUtils.TWO_PI;
      long long0 = MathUtils.gcd((-754L), (-754L));
      double double1 = MathUtils.factorialLog(19);
      short short0 = MathUtils.sign((short)2419);
      int int0 = MathUtils.pow((int) (short)2419, 19);
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short)1, 6.283185307179586);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)2419;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)2419;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.subAndCheck((-1781504341), 19);
      int int2 = MathUtils.mulAndCheck(2231, (-4186));
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 6.283185307179586);
      long long1 = MathUtils.subAndCheck(0L, (long) (short)1);
      long long2 = MathUtils.mulAndCheck((-1L), 0L);
      long long3 = MathUtils.factorial(19);
      long long4 = MathUtils.lcm((long) 2231, (long) (-1781504360));
      double double3 = MathUtils.binomialCoefficientDouble(743, (-1605));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = MathUtils.gcd((-674), 84);
      short short0 = MathUtils.indicator((short)2793);
      int[] intArray0 = new int[6];
      intArray0[0] = (-674);
      intArray0[1] = (-674);
      intArray0[2] = 0;
      intArray0[3] = (-674);
      intArray0[4] = (-674);
      intArray0[5] = 2;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.scalb(1514.7176496066986, 340);
      double double2 = MathUtils.sinh((-674));
      int int1 = MathUtils.gcd(0, 2753);
  }
}
