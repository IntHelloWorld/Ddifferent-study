/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 04:29:10 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 3.834E-20;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 7;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3036.447223973816);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-3,036.447 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -\u221E)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 66;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      double double0 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1244);
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 21;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = MathUtils.pow(0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2555.241212);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = MathUtils.scalb((-1.0), (-2538));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = MathUtils.lcm(67, 67);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 1023);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = MathUtils.factorialLog(21);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.0), (double) 0L, 875.995324220998);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(0L, 2432902008176640000L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2147483647L, (-3512299194304650054L));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(2028179000, 1717986918);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(1, 7);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = MathUtils.sinh(5.669184079525E-24);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = MathUtils.sinh(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = MathUtils.scalb(1.0, 12);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = MathUtils.round((float) (short)1, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = MathUtils.round((double) 1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = MathUtils.round((-892.409496128412), (-1861));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = MathUtils.round(3.145894820876798E-6, 1780);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 168);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.pow(9193070505571053912L, 50532516495598572L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = MathUtils.pow(3628800L, 0L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = MathUtils.pow(9218868437227405312L, 550);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = MathUtils.pow((long) 4, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = MathUtils.pow((-4194), 4398046511103L);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.pow((int) (byte)1, (long) (short)2224);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.pow(4000, 4000);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.pow(114, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(9.219544613762692E-9, (byte)1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(897, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((int) (byte) (-1), 1204749249);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.log(0.0, 4189.51137);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathUtils.log(400.73, 12L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathUtils.log(12.0, 0.5);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[4] = (double) 1.0F;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.hash((-4228.150191169034));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(10.0, 10.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-880);
      int[] intArray1 = new int[8];
      int int0 = MathUtils.distanceInf(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 529;
      double[] doubleArray1 = new double[9];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 21;
      double[] doubleArray1 = new double[5];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.9841269659586505E-4);
      double[] doubleArray1 = new double[7];
      double double0 = MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1404L), 24L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(31, (-2147483647));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) 693, 177, 693);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1), Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // Underflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (BigInteger) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 1.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(5648769086999809661L, 298L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(569338);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(1073741824);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 21);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 21
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2825.52809);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (short)1, (long) 1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1292L), 0L);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1612L), 6L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (byte)0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(885, Integer.MAX_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(63, 11);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = MathUtils.indicator((-1.0F));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = MathUtils.indicator((float) 0L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = MathUtils.gcd(552, 1442);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.gcd(9, (-3902));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.factorial(9);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1.7168146928204135), 37.2397, 57);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(1.304E19, 1.304E19, 550);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-333.0), (-333.0), 814);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-0.16666666666666666), (-0.12502530217170715), 479291733);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-1511.1), (-1511.1), (-1141));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double) 0, 1.3245471311735498E-8, (-390.5009166019933));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, (double) 125, (double) 125);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(640, 7);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-732));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3512299196452133701L;
      doubleArray0[3] = (double) (-3512299194304650054L);
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 9.313225746154785E-10;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8568.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2190670.0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (2,190,670 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-3,473,408^-3,473,408)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) 126);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        MathUtils.pow(bigInteger0, (-2233L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-2,233)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-1676));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-1,676)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 528);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        MathUtils.pow(441L, (-708L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (441^-708)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = MathUtils.pow(473L, 1098L);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        MathUtils.pow(362880L, (-2126));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (362,880^-2,126)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = MathUtils.pow((-3183605296591799669L), 2740);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        MathUtils.pow((-38), (-282L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-38^-282)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = MathUtils.pow(977, 3641L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        MathUtils.pow((-1772), (-4205));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,772^-4,205)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = MathUtils.pow(234, 4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2381), (-2381));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1244));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = MathUtils.sign((short)2678);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = MathUtils.sign((long) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.sign(455L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = MathUtils.sign((-2982));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.sign(517);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = MathUtils.sign((-583.657F));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = MathUtils.sign((float) 0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = MathUtils.sign(0.5);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.sign((-1986.0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.sign(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-92));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)72);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float float0 = MathUtils.round(2345.6538F, 2, 2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = MathUtils.round((float) 1, 0, 1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = MathUtils.round((float) 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathUtils.round(Double.NaN, 184, 400);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, (-2463.029551669087));
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 2.608E18);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-302932621132653753L), 2935890503282001226L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = MathUtils.lcm(1098L, (-138L));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-9223372036854775808L), (-145L));
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (-2381), (-2254L));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1812908804, 5);
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = MathUtils.lcm(1160L, 0L);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, 834L);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = MathUtils.lcm((-226), 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short short0 = MathUtils.indicator((short)501);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-3474));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long long0 = MathUtils.indicator((long) 640);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long long0 = MathUtils.indicator((-9218868437227405313L));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = MathUtils.indicator((int) (short)1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = MathUtils.indicator((-1736));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float float0 = MathUtils.round((-667.4275F), 0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = MathUtils.indicator((double) (-1945L));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = MathUtils.indicator(8568.0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)126);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long long0 = MathUtils.gcd(122L, 122L);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long long0 = MathUtils.gcd((-138L), 71L);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long long0 = MathUtils.gcd((-1096L), 0L);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long long0 = MathUtils.gcd((-331L), (-2665L));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = MathUtils.gcd(0L, (-747L));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = MathUtils.lcm(4397409, (int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = MathUtils.gcd((-1121), 3750);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = MathUtils.gcd(22, 0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-155));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -155
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(74);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-6));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -6
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(669);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1992));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,992
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 11.591953275521519;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 3.141592653589793);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2366.23, 2366.23, 4576);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1519.383), 1.1102230246251565E-16, 234);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(313.06, 313.06, Integer.MAX_VALUE);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(Double.NaN, 214.42283506559144, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 232, (double) 232);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 517, (double) (byte) (-1), (double) (short)1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(46.40749081, 46.40749081, 46.40749081);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 1190.066);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, 5891.776);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = MathUtils.compareTo((-2.147483616E9), 3563.486847, (-6.714134307725605));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = MathUtils.compareTo((-0.2499999997677497), 8.251545029714408E-9, 226.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = MathUtils.compareTo(12016.0, 521.57128, 0.0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-615), (-615));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -615
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(16, 18);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 16, k = 18
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1846, 66);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(723, (-592));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(11, 7);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(15, 1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(207, 0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientLog(2147483646, (-1));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(2388, 2388);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(237, 234);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(237, (byte)1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(146, 146);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(177, 7);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(328, 225);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(141, 0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(18, 5);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2866, 2866);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (-3697), 1801L);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 2740);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,147,483,648 + -2,147,483,648
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double double0 = MathUtils.round((-1044.9798141696187), 0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double double0 = MathUtils.cosh(0.0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float float0 = MathUtils.round((float) 0, 0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2.0, (-1159.3));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double double0 = MathUtils.sinh(137.43);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 4499201580859392L);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (short)196, 1363, 1666);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,666, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-95.0), 8568.0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = MathUtils.hash((-67.34653057));
  }
}
