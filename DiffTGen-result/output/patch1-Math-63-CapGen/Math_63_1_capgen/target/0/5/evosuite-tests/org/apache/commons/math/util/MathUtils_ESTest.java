/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 29 04:19:56 GMT 2020
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 39;
      boolean boolean0 = MathUtils.equalsIncludingNaN((-423.948), 1347.985, 39);
      int int1 = 35;
      int int2 = MathUtils.gcd(35, 39);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = MathUtils.sign(3.141592653589793);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte byte0 = bigInteger0.byteValueExact();
      int int0 = bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      int int1 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger1.negate();
      BigInteger bigInteger3 = bigInteger0.remainder(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger5 = new BigInteger(byteArray0);
      BigInteger bigInteger6 = MathUtils.pow(bigInteger5, 0);
      int int2 = bigInteger6.compareTo(bigInteger3);
      BigInteger bigInteger7 = bigInteger1.xor(bigInteger6);
      long long0 = MathUtils.binomialCoefficient(0, 0);
      long long1 = MathUtils.pow(1L, (int) (byte)0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1339.72399541);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (double) (byte)0;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      long long2 = MathUtils.pow((long) (byte)0, (long) 0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2146234384, 1699);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = (-1915L);
      int int0 = 1286;
      int int1 = 1234;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(1286, 1234);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = MathUtils.sign((-690L));
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(2801.61204684582, 0.0, 2801.61204684582);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("9j");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.9j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = MathUtils.pow(282, 282);
      double[] doubleArray0 = new double[0];
      int int1 = MathUtils.hash(doubleArray0);
      long long0 = MathUtils.factorial(1);
      double double0 = MathUtils.binomialCoefficientDouble(282, 0);
      long long1 = MathUtils.sign((long) 0);
      int int2 = MathUtils.subAndCheck(114, 2147483646);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-0.7853981633974483);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = Double.NaN;
      doubleArray0[8] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-356.226), (-1.0));
      float float0 = MathUtils.round((-1532.0F), 31, 1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathUtils.sign(689.6336);
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.7029898543501842E-8, 689.6336, 1.7029898543501842E-8);
      int[] intArray0 = new int[9];
      intArray0[0] = 63;
      intArray0[1] = (-1866);
      intArray0[2] = 1387;
      intArray0[3] = (-3468);
      intArray0[4] = 2055;
      intArray0[5] = 709;
      intArray0[6] = (-2112278997);
      intArray0[7] = 901;
      intArray0[8] = 4194304;
      int[] intArray1 = new int[9];
      intArray1[0] = 990;
      intArray1[1] = (-3468);
      intArray1[2] = 1387;
      intArray1[3] = 4194304;
      intArray1[4] = (-1866);
      intArray1[5] = 1;
      intArray1[6] = (-3468);
      intArray1[7] = (-1866);
      intArray1[8] = 1387;
      int int0 = MathUtils.distance1(intArray0, intArray1);
      int int1 = MathUtils.lcm((-3468), (-1231));
      boolean boolean1 = MathUtils.equalsIncludingNaN(2082.0, 3324.277, (-3505.7614885883));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float float0 = MathUtils.indicator((-2040.8739F));
      int int0 = 554;
      int int1 = MathUtils.indicator(554);
      short short0 = MathUtils.sign((short) (-1212));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathUtils.binomialCoefficientDouble(656, 1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (short) (-1212);
      doubleArray1[1] = (double) (short) (-1);
      doubleArray1[2] = (double) (-1.0F);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) (short) (-1);
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 656;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 554;
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray1, doubleArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4171.871999999999;
      doubleArray0[1] = 2.2250738585072014E-308;
      doubleArray0[2] = 0.016;
      doubleArray0[3] = 2.2250738585072014E-308;
      doubleArray0[4] = (-3564.3);
      doubleArray0[5] = (-1518.072);
      doubleArray0[6] = 2736.66821591053;
      doubleArray0[7] = (-1536.9466);
      doubleArray0[8] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.lcm((-197), 19);
      double double1 = MathUtils.cosh((-1518.072));
      long long0 = MathUtils.indicator((long) 3743);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = MathUtils.sign(872.2144F);
      boolean boolean0 = MathUtils.equals((double) 872.2144F, (-0.12502530217170715), (double) 1.0F);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1498.21612, 1498.21612);
      // Undeclared exception!
      try { 
        MathUtils.lcm(Integer.MIN_VALUE, Integer.MIN_VALUE);
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, -2,147,483,648) is 2^31
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1030, (-2309));
      double double1 = MathUtils.factorialLog(1030);
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = MathUtils.TWO_PI;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-3601.767191144176);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = (-3601.767191144176);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-3,601.767 <= 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-20);
      intArray0[1] = 1249;
      intArray0[2] = 124;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-20);
      doubleArray0[2] = (double) (-20);
      doubleArray0[3] = (double) 1249;
      doubleArray0[4] = (double) 1249;
      doubleArray0[5] = (double) (-20);
      doubleArray0[6] = (double) 1249;
      doubleArray0[7] = (double) (-20);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-20 <= -20)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathUtils.sinh(413.0);
      double double1 = MathUtils.scalb((-2398L), 1038);
      int int0 = MathUtils.addAndCheck(0, (-2335));
      double double2 = MathUtils.normalizeAngle((-2335), 2590.6219728367);
      double double3 = MathUtils.sign(2591.0172808287953);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.abs();
      BigInteger bigInteger3 = bigInteger1.not();
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2335);
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd((long) (-2335), (long) 1038);
      double double4 = MathUtils.factorialDouble(2337);
      double double5 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2335);
      doubleArray0[2] = (double) (-2398L);
      doubleArray0[3] = (-464.1533);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-5381.45505859));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2964.8321, 2964.8321);
      int int0 = MathUtils.mulAndCheck((-1915), 11);
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.sinh((-502.0609705));
      double double1 = MathUtils.factorialLog(68);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = MathUtils.equals(0.0, 0.0, 233);
      long long0 = MathUtils.lcm((long) 233, (long) 233);
      int int0 = 162;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0, 233, 162);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 2087.8478835, 1.304E19);
      long long0 = MathUtils.indicator((-1795L));
      int int0 = MathUtils.addAndCheck((-38), (-38));
      int int1 = MathUtils.addAndCheck(2763, (-38));
      long long1 = MathUtils.binomialCoefficient(2763, (-38));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2725;
      doubleArray0[1] = (-1662.4831228871);
      doubleArray0[2] = (double) 2725;
      doubleArray0[3] = 2087.8478835;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (-76);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 2763;
      doubleArray1[1] = (double) (-1795L);
      doubleArray1[2] = (double) 2725;
      doubleArray1[3] = (double) 2725;
      doubleArray1[4] = (double) (-1795L);
      doubleArray1[5] = (double) (-76);
      doubleArray1[6] = (double) (-76);
      doubleArray1[7] = (double) 2725;
      doubleArray1[8] = (double) (-38);
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3125.762;
      doubleArray0[1] = 72.0;
      doubleArray0[2] = 837.8635302962713;
      doubleArray0[3] = (-335.264291);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      long long0 = MathUtils.pow(720L, 720L);
      double double1 = MathUtils.factorialLog(88);
      double double2 = MathUtils.factorialDouble(88);
      short short0 = MathUtils.indicator((short)0);
      short short1 = MathUtils.sign((short)63);
      float float0 = MathUtils.round(0.0F, 88);
      double double3 = MathUtils.normalizeAngle(595.497060992972, 595.497060992972);
      int[] intArray0 = new int[4];
      intArray0[0] = 88;
      intArray0[1] = (int) (short)63;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
      int int1 = MathUtils.sign((int) (short)1);
      double double4 = MathUtils.factorialDouble((short)1);
      try { 
        MathUtils.pow((long) 1, (-1903L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1^-1,903)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-2293);
      int int1 = MathUtils.sign((-2293));
      double[] doubleArray0 = new double[0];
      try { 
        MathUtils.normalizeArray(doubleArray0, 6.0);
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = MathUtils.round(179.167205, 140);
      int int0 = MathUtils.subAndCheck(1160, 1160);
      float float0 = 1.0F;
      float float1 = MathUtils.round(1.0F, 140);
      int int1 = 2000;
      int int2 = MathUtils.gcd(0, 2000);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.divide(bigInteger1);
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = MathUtils.cosh((-1307.5645394));
      double double1 = MathUtils.binomialCoefficientLog(0, 0);
      double double2 = MathUtils.factorialLog(0);
      float float0 = (-275.743F);
      float float1 = MathUtils.sign((-275.743F));
      double double3 = MathUtils.scalb(0, 0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) (-275.743F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (\u221E > -275.743)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(1000);
      long long0 = MathUtils.subAndCheck((-3040L), (-3040L));
      double double1 = MathUtils.binomialCoefficientLog(1000, 1000);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = MathUtils.hash((-1029.184221035));
      float float0 = MathUtils.round((float) 1692432002, 860);
      double double0 = MathUtils.scalb((-440.71162552), (-775));
      int[] intArray0 = new int[5];
      intArray0[0] = (-775);
      intArray0[1] = 860;
      intArray0[2] = 1692432002;
      intArray0[3] = 1692432002;
      intArray0[4] = 860;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
      long long0 = MathUtils.gcd(120L, (-1222L));
      long long1 = MathUtils.subAndCheck((long) (-775), 1288L);
      long long2 = MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)124);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)1;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      boolean boolean0 = bigInteger1.isProbablePrime(136);
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      boolean boolean1 = bigInteger0.equals("f%8zCQG*3A[Zeu_qGT");
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, (long) (byte)124);
      int int0 = MathUtils.sign((int) (byte)1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)124;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)124;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = Float.NaN;
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, (-410), (-410));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -410, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-97));
      // Undeclared exception!
      try { 
        MathUtils.lcm((-3183605296591799669L), 87178291200L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2534.489017;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (0 < 2,534.489)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.round((-426.592415), 616);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-426.592415);
      doubleArray0[1] = (double) 616;
      doubleArray0[2] = (-426.592415);
      doubleArray0[3] = (double) 616;
      doubleArray0[4] = 1139.0;
      doubleArray0[5] = (double) 616;
      doubleArray0[6] = (-426.592415);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 616;
      int int0 = MathUtils.hash(doubleArray1);
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      float float0 = MathUtils.indicator(611.9F);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1082343455;
      doubleArray2[1] = (double) 1082343455;
      doubleArray2[2] = (double) 611.9F;
      boolean boolean1 = MathUtils.equals(doubleArray2, doubleArray1);
      int[] intArray0 = new int[5];
      intArray0[0] = 616;
      intArray0[1] = 1082343455;
      intArray0[2] = (-2951);
      intArray0[3] = 1082343455;
      intArray0[4] = 1082343455;
      int int1 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.round(0.11764700710773468, 0, 0);
      int int1 = 0;
      int int2 = MathUtils.pow(0, 1062L);
      int int3 = 0;
      int int4 = MathUtils.indicator(0);
      boolean boolean0 = MathUtils.equals((double) 1, 0.0, (double) 1);
      double double1 = MathUtils.binomialCoefficientLog(1, 0);
      int int5 = MathUtils.mulAndCheck((-2405), (-2405));
      double double2 = MathUtils.sinh(1062L);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1059), 5784025);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,059, k = 5,784,025
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = MathUtils.gcd(71, 106);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 106;
      doubleArray0[1] = (double) 71;
      doubleArray0[2] = (double) 71;
      doubleArray0[3] = (double) 71;
      doubleArray0[4] = (double) 71;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      double double1 = MathUtils.factorialDouble(241);
      long long0 = MathUtils.sign((-1231L));
      float float0 = MathUtils.indicator(Float.NaN);
      long long1 = MathUtils.subAndCheck(1199L, (long) 71);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      int int1 = MathUtils.pow((-774), (long) 71);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int2 = MathUtils.subAndCheck(241, (-774));
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = MathUtils.indicator((-2121.94F));
      double[] doubleArray0 = new double[0];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.16666666666745392, 0.0);
      long long0 = MathUtils.mulAndCheck((-1229L), (-1229L));
      double double1 = MathUtils.factorialLog(1466);
      int int0 = MathUtils.gcd(1466, 6);
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.16666666666745392, (double) 6, 2694.7731);
      long long1 = MathUtils.indicator(4294967295L);
      int int1 = MathUtils.addAndCheck(0, 70);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathUtils.indicator((-1628.0549008092948));
      long long0 = MathUtils.sign((-192L));
      int int0 = MathUtils.indicator(0);
      long long1 = MathUtils.indicator(0L);
      long long2 = MathUtils.gcd(120L, (-1155L));
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2281;
      int int1 = MathUtils.distance1(intArray0, intArray0);
      int int2 = MathUtils.pow(0, (long) 0);
      long long3 = MathUtils.lcm(720L, (-192L));
      int int3 = (-758);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 1, (-758), 1661);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign((byte)0);
      boolean boolean0 = MathUtils.equals((double) (byte)0, (double) (byte)0);
      int int0 = 7;
      int int1 = MathUtils.mulAndCheck(7, 0);
      double double0 = (-945.73615);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) (byte)0, (-945.73615), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1906.03595, Double.POSITIVE_INFINITY, 2217);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = MathUtils.lcm(5658L, 5658L);
      float float0 = MathUtils.round((float) 5658L, (-2799));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(0);
      boolean boolean0 = MathUtils.equals(1.0, (double) 0);
      int int0 = MathUtils.gcd(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.round((-262.82F), 0, (-2165));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -2,165, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(3098L, 3098L);
      long long1 = MathUtils.addAndCheck(0L, (-2166L));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2166L);
      doubleArray0[1] = (double) (-2166L);
      doubleArray0[2] = (double) 3098L;
      doubleArray0[3] = (double) (-2166L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 3098L;
      doubleArray0[6] = (double) 3098L;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 2427.4;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 81.66744853871, 2427.4);
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(121645100408832000L, 121645100408832000L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = MathUtils.lcm(0L, (-1324L));
      long long1 = MathUtils.sign((-1324L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0L, (double) 0L, 460.3001);
      int int0 = MathUtils.gcd(0, 0);
      long long2 = MathUtils.subAndCheck(346L, 2047L);
      double double0 = MathUtils.sinh(0L);
      double double1 = MathUtils.round((double) 0, 0);
      int int1 = MathUtils.sign((-2852));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 460.3001;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int2 = MathUtils.lcm(0, (-1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)93;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 63);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.factorial(0);
      double double0 = MathUtils.sinh(0.0);
      int int1 = MathUtils.subAndCheck(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("v#Q-P+5:0jL^");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.v#Q-P+5:0jL^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = MathUtils.indicator(0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = MathUtils.indicator(1.0F);
      int int0 = MathUtils.mulAndCheck((-1375), (-3990));
      BigInteger bigInteger0 = BigInteger.ZERO;
      double double0 = bigInteger0.doubleValue();
      int int1 = bigInteger0.bitCount();
      BigInteger bigInteger1 = BigInteger.ZERO;
      int int2 = bigInteger1.intValue();
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.gcd(bigInteger1);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, bigInteger0);
      boolean boolean0 = MathUtils.equals((double) 1.0F, 0.0);
      long long0 = bigInteger0.longValueExact();
      int int3 = bigInteger0.getLowestSetBit();
      BigInteger bigInteger5 = bigInteger0.shiftLeft((-3990));
      BigInteger bigInteger6 = MathUtils.pow(bigInteger0, 0);
      int int4 = MathUtils.indicator(0);
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-948);
      intArray0[2] = (-285);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 17;
      intArray0[0] = 17;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int1 = 102;
      intArray0[3] = 102;
      intArray0[4] = 2926;
      intArray0[5] = 2651;
      intArray0[6] = (-274);
      int int2 = 3868;
      intArray0[7] = 3868;
      intArray0[8] = 1768;
      double double0 = MathUtils.distance(intArray0, intArray0);
      double double1 = MathUtils.normalizeAngle(336.5, (-452.4615));
      double double2 = (-825.28189392264);
      double double3 = MathUtils.sign((-825.28189392264));
      // Undeclared exception!
      try { 
        MathUtils.round((float) 3868, 2651, 102);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 102, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = MathUtils.hash(1.3245471311735498E-8);
      int int1 = MathUtils.pow(1661202005, 1661202005);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.3245471311735498E-8;
      doubleArray0[1] = 1.3245471311735498E-8;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((float) 1661202005);
      int int2 = MathUtils.pow(48, (long) 48);
      long long0 = MathUtils.gcd((long) 0, 1411L);
      int int3 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.equals((double) 0, 535.4670813835165, 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = MathUtils.pow(1L, 87178291200L);
      long long1 = MathUtils.addAndCheck(1L, 87178291200L);
      double double0 = MathUtils.cosh(87178291201L);
      long long2 = MathUtils.pow(0L, 1L);
      double double1 = MathUtils.scalb((-473.44), 565);
      long long3 = MathUtils.gcd(1L, 0L);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double2 = MathUtils.scalb(1L, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, true);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-79));
      double double0 = MathUtils.sign((double) (byte) (-79));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.0);
      try { 
        MathUtils.pow((int) (byte) (-1), (long) (byte) (-79));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-79)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      short short0 = MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 0.0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = (-2810);
      int int1 = MathUtils.lcm((-2810), (-1434));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("ROUND_HALF_DOWN");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.ROUND_HALF_DOWN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.pow(221, (long) 221);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 221;
      doubleArray0[2] = (double) 221;
      doubleArray0[3] = (double) (-588584755);
      doubleArray0[4] = (double) 221;
      doubleArray0[5] = (double) (-588584755);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3446.988;
      doubleArray0[2] = (-99.1598246);
      doubleArray0[3] = 889.3577475682725;
      doubleArray0[4] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2022.857762706;
      doubleArray0[1] = 0.04168701738764507;
      doubleArray0[2] = (-3102.151135635);
      double double0 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.pow(246, 246);
      double double1 = MathUtils.factorialDouble(246);
      int int1 = 5;
      int int2 = MathUtils.gcd(5, (-961));
      int int3 = MathUtils.pow((-961), 1);
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int4 = 0;
      int int5 = MathUtils.mulAndCheck((-1401), 0);
      byte byte0 = (byte) (-42);
      byte byte1 = MathUtils.sign((byte) (-42));
      int int6 = MathUtils.indicator((-2448));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-534));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -534
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(204L, 204L);
      double double0 = MathUtils.sinh(0L);
      long long1 = MathUtils.sign(204L);
      boolean boolean0 = MathUtils.equals(0.0, (double) 1L, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1702.9604832611);
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.gcd((-182), (-2411));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-2175));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1200.1661557501814), (-1200.1661557501814));
      short short1 = MathUtils.indicator((short) (-2175));
      long long0 = MathUtils.addAndCheck((-39L), 0L);
      double double0 = MathUtils.scalb((-1840.837692299), (short) (-1));
      int int0 = MathUtils.sign((int) (short) (-1));
      double double1 = MathUtils.sinh(0.0);
      double double2 = MathUtils.cosh((short) (-1));
      float float0 = MathUtils.indicator(1.0F);
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN(-0.0, 146.7, (int) (short) (-2175));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = MathUtils.pow(0, 0L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0L;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 1622.102;
      int int0 = (-2740);
      // Undeclared exception!
      try { 
        MathUtils.equals(1622.102, 1622.102, (-2740));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1034.54696562;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2211.964);
      doubleArray0[3] = 0.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double double1 = MathUtils.log(1.0, 0.0);
      long long0 = MathUtils.lcm(0L, 0L);
      int int0 = MathUtils.hash(doubleArray0);
      float float0 = MathUtils.round(3991.9858F, 633086421);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.bitLength();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      BigInteger bigInteger4 = bigInteger0.divide(bigInteger1);
      int int2 = MathUtils.addAndCheck((-1596), (-1596));
      long long1 = MathUtils.mulAndCheck((long) 0, (long) (-3192));
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-306.400433115771);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 4470.5548;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1551.881;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2.2250738585072014E-308;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equalsIncludingNaN(1.0, 1.0, 2.2250738585072014E-308);
      int int0 = MathUtils.sign((-1088));
      float float0 = MathUtils.round((float) (-1088), (-1), 0);
      double double0 = MathUtils.round(1.0, 0, 0);
      long long0 = MathUtils.pow((-615L), (long) 0);
      long long1 = MathUtils.indicator((long) 0);
      float float1 = MathUtils.round(1.0F, 1977);
      double double1 = MathUtils.sign(1316.89554);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2423.0);
      long long2 = MathUtils.lcm((long) 0, (long) (-1));
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(57.2957763671875, (-150), (-1));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = MathUtils.lcm(3490, 3490);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1249;
      intArray0[2] = 124;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1249;
      doubleArray0[4] = (double) 1249;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1249;
      doubleArray0[7] = (double) 0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 378);
      long long0 = MathUtils.pow(6L, 6L);
      boolean boolean1 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 378;
      doubleArray0[1] = (double) 46656L;
      doubleArray0[2] = (double) 378;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 378;
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      byte byte0 = MathUtils.indicator((byte) (-11));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 2838L);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 26;
      intArray0[1] = 0;
      intArray0[2] = 79;
      intArray0[3] = 0;
      intArray0[4] = 228;
      intArray0[5] = 360;
      intArray0[6] = 6;
      intArray0[7] = 9;
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(14, 9);
      long long0 = MathUtils.indicator((long) 14);
      int[] intArray0 = new int[5];
      intArray0[0] = 14;
      intArray0[1] = 1500;
      intArray0[2] = 14;
      intArray0[3] = 126;
      intArray0[4] = 126;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, (-1262));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2464.9259;
      MathUtils.checkOrder(doubleArray0);
      double double1 = MathUtils.sign(2464.9259);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      double double2 = MathUtils.cosh(2464.9259);
      int int0 = MathUtils.hash(6.283185307179586);
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 78, 1328798503);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,328,798,503, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = MathUtils.compareTo((-460.0), (-460.0), (-460.0));
      long long0 = MathUtils.subAndCheck((-2754L), (-2754L));
      long long1 = MathUtils.pow(0L, 4499201580859392L);
      int int1 = MathUtils.addAndCheck(256, 0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.19999954120254515;
      doubleArray0[1] = (-2334.186003);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = 1020;
      double double1 = MathUtils.factorialDouble(1020);
      int int1 = (-3678);
      int int2 = MathUtils.addAndCheck(1020, (-3678));
      long long0 = 1413L;
      long long1 = MathUtils.indicator(1413L);
      int int3 = 0;
      int int4 = 0;
      int int5 = MathUtils.pow(0, 0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf((String) null);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 20;
      double double0 = MathUtils.scalb(0.0, 20);
      double double1 = MathUtils.factorialDouble(20);
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.round(0.0F, 226, 20);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 20, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = MathUtils.pow((-914L), 242);
      float float0 = MathUtils.sign((float) 242);
      byte byte0 = MathUtils.indicator((byte) (-29));
      int int0 = MathUtils.compareTo((-3181.8363), (-914L), 0L);
      double double0 = MathUtils.log(0.008333333333329196, 242);
      float float1 = MathUtils.sign(1.0F);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-1.1465163850008975), 962.367255885635, (double) 1.0F);
      double double1 = MathUtils.factorialDouble(1546);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-29);
      intArray0[1] = (-1);
      intArray0[2] = 242;
      intArray0[3] = 242;
      intArray0[4] = (-1);
      intArray0[5] = 242;
      intArray0[6] = (int) (byte) (-1);
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = 1546;
      double double2 = MathUtils.distance(intArray0, intArray0);
      int int1 = MathUtils.sign((-1));
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1493), (-385));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = -1,493, k = -385
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1129.7583852744592);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 338.0399529293;
      doubleArray0[3] = (-1513.1258573417);
      doubleArray0[4] = 2774.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1972.5842548);
      doubleArray0[7] = (-1218.8);
      doubleArray0[8] = (-1564.5323780831);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (338.04 >= -1,513.126)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 4577762542105553359L;
      // Undeclared exception!
      try { 
        MathUtils.lcm(4577762542105553359L, 2087L);
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((-666.589551345117), (-666.589551345117), (-557));
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(0, 0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 0, (-423.9795987257849), 0);
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck((-1030), (-1030));
      int int1 = MathUtils.compareTo((-2975.479), (-2975.479), 6.283185307179586);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-3126.7608035);
      doubleArray0[3] = (double) (-1030);
      doubleArray0[4] = (double) (-1030);
      doubleArray0[5] = (-2975.479);
      doubleArray0[6] = (double) (-1030);
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6.283 >= 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.scalb(3.834E-20, 0);
      int int0 = MathUtils.sign(0);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float1 = MathUtils.round((-598.75684F), (-1094));
      double double1 = MathUtils.round(0.0, (-646));
      double double2 = MathUtils.scalb(0.0, (-646));
      long long0 = MathUtils.pow(0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.log(3231.108477704328, 0.0);
      double double1 = MathUtils.binomialCoefficientDouble(1030, (-2309));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 2404L);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.cosh(110.0);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 110.0;
      doubleArray0[1] = 2.960486013832335E47;
      doubleArray0[2] = 4794.19437873;
      doubleArray0[3] = 110.0;
      doubleArray0[4] = 110.0;
      doubleArray0[5] = 110.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.960486013832335E47;
      doubleArray1[1] = 4794.19437873;
      doubleArray1[2] = 2.960486013832335E47;
      doubleArray1[3] = 110.0;
      doubleArray1[4] = 110.0;
      // Undeclared exception!
      try { 
        MathUtils.distance(doubleArray0, doubleArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.scalb(3.834E-20, 0);
      int int0 = MathUtils.sign(0);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float1 = MathUtils.round((-598.75684F), 0);
      double double1 = MathUtils.round(0.0, (-646));
      double double2 = MathUtils.scalb(0.0, (-646));
      long long0 = MathUtils.pow(0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 613.0479892;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-182.77754758);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-182.77754758);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
      boolean boolean0 = MathUtils.equals(0.0, 613.0479892, 0.0);
      byte byte0 = MathUtils.indicator((byte)0);
      float float0 = MathUtils.round((float) (byte)1, 0);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(1307674368000L, (-1684L));
      byte byte0 = (byte) (-127);
      byte byte1 = MathUtils.indicator((byte) (-127));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-127);
      doubleArray0[1] = 689.297320817;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-127 <= 689.297)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.cosh(20.0);
      double double1 = MathUtils.sinh(2.4258259770489514E8);
      double double2 = MathUtils.normalizeAngle(2.4258259770489514E8, 0.06666666666666667);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.4258259770489514E8;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.06666666666666667;
      doubleArray0[4] = (-2.9354619085788727);
      doubleArray0[5] = 2.4258259770489514E8;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = 2.4258259770489514E8;
      doubleArray0[8] = (-698.989076003313);
      try { 
        MathUtils.normalizeArray(doubleArray0, 679.0);
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.sinh(Double.NaN);
      double double1 = MathUtils.factorialLog(21);
      // Undeclared exception!
      try { 
        MathUtils.factorial(21);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-382);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-382), (-382));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -382
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-4061));
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((short) (-4061));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -4,061
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.5;
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.5, 0.5, 1573);
      double double1 = (-743.541814);
      double double2 = 0.0;
      int int0 = MathUtils.compareTo(0.5, (-743.541814), 0.0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 1573);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 1,573
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.indicator(2021.3548132414);
      float float0 = MathUtils.indicator(1359.852F);
      int int0 = (-2026);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2026), (-2026));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -2,026
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 397L;
      try { 
        MathUtils.pow(397L, (-1000L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (397^-1,000)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = MathUtils.indicator(8);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 2607.4;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      int int1 = MathUtils.hash(doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(1, 1047347872);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 1, k = 1,047,347,872
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(14);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4062.2784733878);
      doubleArray0[1] = 8.71782912E10;
      doubleArray0[2] = 8.71782912E10;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = 8.71782912E10;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-921.851014227), 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-921.851014227);
      doubleArray0[2] = (-921.851014227);
      doubleArray0[3] = (-921.851014227);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-921.851014227);
      doubleArray0[6] = (-921.851014227);
      doubleArray0[7] = (-2059.5519975795);
      doubleArray0[8] = (-921.851014227);
      boolean boolean1 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean2 = MathUtils.equals(doubleArray0, doubleArray0);
      boolean boolean3 = MathUtils.equals(0.0, 0.0, (-921.851014227));
      double double0 = MathUtils.binomialCoefficientDouble(1012, 1012);
      double double1 = MathUtils.normalizeAngle(1.0, (-285.927339825965));
      float float0 = MathUtils.indicator((float) 1012);
      int[] intArray0 = new int[5];
      intArray0[0] = 1012;
      intArray0[1] = 1012;
      intArray0[2] = 1012;
      intArray0[3] = 1012;
      intArray0[4] = 1012;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(1030, 1030);
      int int0 = MathUtils.compareTo(0.0, 310.5504192800001, 2968.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = 0;
      int int1 = 17;
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 0, 17);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 17, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2708.1608117053006;
      doubleArray0[1] = 638.5;
      double double0 = 1.633123935319537E16;
      doubleArray0[2] = 1.633123935319537E16;
      doubleArray0[3] = 0.0;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      double double2 = MathUtils.safeNorm(doubleArray0);
      int int0 = MathUtils.hash(638.5);
      float float0 = MathUtils.sign((float) 1082389504);
      try { 
        MathUtils.pow(1082389504, (-2807));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,082,389,504^-2,807)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.hash((-980.3912561983));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-980.3912561983);
      doubleArray0[1] = 2034.8;
      doubleArray0[2] = (-980.3912561983);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1973378221));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,973,378,221
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = MathUtils.factorialLog(690);
      int int0 = 2082;
      double double1 = MathUtils.round((-3423.1479709917153), 2082);
      double double2 = MathUtils.factorialLog(2082);
      long long0 = MathUtils.binomialCoefficient(690, 0);
      double double3 = (-2674.072972474052);
      boolean boolean0 = MathUtils.equals((-2674.072972474052), 0.07842259109020233, 0.07842259109020233);
      double double4 = MathUtils.sign((double) 2082);
      byte byte0 = MathUtils.indicator((byte) (-84));
      byte byte1 = MathUtils.sign((byte) (-1));
      boolean boolean1 = MathUtils.equalsIncludingNaN(1931.36696809, (double) 0);
      byte byte2 = (byte) (-42);
      byte byte3 = MathUtils.indicator((byte) (-42));
      long long1 = (-951L);
      long long2 = MathUtils.sign((-951L));
      double double5 = 0.0;
      boolean boolean2 = MathUtils.equalsIncludingNaN(0.0, 0.0, 13831.476927465581);
      // Undeclared exception!
      try { 
        MathUtils.factorial((byte) (-1));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)18;
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-52);
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      int int0 = bigInteger0.getLowestSetBit();
      try { 
        MathUtils.pow(bigInteger0, (long) (byte) (-52));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (315,359,232^-52)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      int int0 = 0;
      float float1 = MathUtils.round(0.0F, 0, 0);
      int int1 = MathUtils.addAndCheck(0, 0);
      long long0 = MathUtils.factorial(0);
      double double0 = (-2679.00542);
      boolean boolean0 = MathUtils.equals((double) 1L, (-2679.00542));
      int int2 = 62;
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(0, 62);
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 62
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.sign(2431.42879);
      double double1 = MathUtils.cosh(72.0);
      boolean boolean0 = MathUtils.equalsIncludingNaN((-4014.89386), 0.0, (-4014.89386));
      boolean boolean1 = MathUtils.equalsIncludingNaN(0.0, 0.0, 0.0);
      long long0 = MathUtils.sign((-2318L));
      byte byte0 = MathUtils.sign((byte)68);
      double double2 = MathUtils.scalb((-2289.63937), (byte)1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.indicator((-1802));
      boolean boolean0 = MathUtils.equalsIncludingNaN(2251.61, 2251.61, 0.0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-79));
      double double0 = MathUtils.sign(3.834E-20);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-79);
      doubleArray0[1] = 1.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      try { 
        MathUtils.pow((int) (byte) (-1), (long) (byte) (-79));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-79)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = MathUtils.gcd(4607182418800017408L, 3414L);
      short short0 = MathUtils.indicator((short)1059);
      double double0 = MathUtils.indicator((double) (short)1);
      int int0 = MathUtils.pow(488, 6L);
      double double1 = MathUtils.binomialCoefficientLog((short)1059, 488);
      boolean boolean0 = MathUtils.equalsIncludingNaN(3095.84654461313, 0.0);
      int int1 = 358;
      int int2 = MathUtils.pow(425984000, 358);
      long long1 = MathUtils.mulAndCheck((-58L), (long) 425984000);
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1578));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,578
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short short0 = (short)1590;
      short short1 = MathUtils.sign((short)1590);
      boolean boolean0 = MathUtils.equals(3.834E-20, (double) (short)1590);
      double double0 = (-979.5504891123892);
      boolean boolean1 = MathUtils.equalsIncludingNaN((-979.5504891123892), 303.78941311, 3.834E-20);
      int int0 = MathUtils.indicator((int) (short)1590);
      long long0 = 6402373705728000L;
      int int1 = MathUtils.pow((int) (short)1, 6402373705728000L);
      // Undeclared exception!
      try { 
        MathUtils.factorial((-2940));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -2,940
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1063.248623749;
      doubleArray0[1] = (-2194.99);
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathUtils.cosh((-2194.99));
      long long0 = MathUtils.indicator(1437L);
      byte byte0 = MathUtils.indicator((byte)105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      BigInteger bigInteger3 = bigInteger0.xor(bigInteger1);
      try { 
        MathUtils.pow(bigInteger0, (-729L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (7,595,603,352,112,163,126^-729)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(0L, 0L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = MathUtils.lcm(5946L, 0L);
      byte byte0 = MathUtils.sign((byte)99);
      long long1 = MathUtils.pow(5946L, 1193);
      double double0 = MathUtils.sinh(0L);
      double double1 = MathUtils.log(0L, 5946L);
      double double2 = MathUtils.cosh(0.0);
      float float0 = MathUtils.indicator(0.0F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = MathUtils.compareTo(541.40495463465, 541.40495463465, 0.0);
      double double0 = MathUtils.log(0.0, 1110.0358);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(1.0, 2011.0);
      int int0 = MathUtils.pow(33, (long) 33);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int1 = bigInteger0.intValue();
      int int2 = (-2160);
      try { 
        MathUtils.pow(bigInteger0, (-2160));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,160)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      try { 
        MathUtils.pow(bigInteger0, (-410));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-410)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2719.74);
      doubleArray0[2] = 2340.16418465766;
      doubleArray0[3] = 682.0;
      doubleArray0[4] = 1488.5625722991;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.2250738585072014E-308;
      double double0 = MathUtils.safeNorm(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1547);
      int[] intArray1 = new int[1];
      intArray1[0] = (-1547);
      double double1 = MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = MathUtils.factorialLog(0);
      long long0 = MathUtils.lcm((-1532L), 0L);
      long long1 = MathUtils.subAndCheck((long) 0, (-1532L));
      float float0 = MathUtils.round((float) (-1532L), 795);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = MathUtils.gcd((-2021L), (-2021L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) 2021L, (double) (-2021L), (double) 2021L);
      boolean boolean1 = MathUtils.equals(0.0, 1180.14547, (-1742.4997));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1180.14547;
      doubleArray0[1] = (-1742.4997);
      doubleArray0[2] = (double) (-2021L);
      doubleArray0[3] = (double) 2021L;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2021L;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,180.145 >= -1,742.5)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2670.0);
      doubleArray0[1] = (-3239.8305);
      doubleArray0[2] = 1129.49;
      doubleArray0[3] = (-1000.07835938);
      double double0 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      long long0 = MathUtils.gcd(1420L, 4499201580859392L);
      double double1 = MathUtils.log(1129.49, 10.0);
      int int0 = (-492);
      double double2 = MathUtils.scalb(488.883411298713, (-492));
      double double3 = MathUtils.scalb(0.0, 4);
      try { 
        MathUtils.pow(1420L, (-492));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,420^-492)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 8);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (8 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 268.205314298;
      doubleArray0[1] = 1890.139;
      int int0 = MathUtils.hash(doubleArray0);
      int int1 = MathUtils.gcd(1501729419, 0);
      double double0 = MathUtils.scalb(2538.7659389, 1501729419);
      double double1 = MathUtils.sinh(4.0);
      double double2 = MathUtils.distance1(doubleArray0, doubleArray0);
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (-873.868));
      double double3 = MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
      BigInteger bigInteger2 = bigInteger1.shiftLeft(0);
      BigInteger bigInteger3 = MathUtils.pow(bigInteger1, 0L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float float0 = MathUtils.indicator(0.0F);
      double double0 = MathUtils.sinh(0.14982303977012634);
      int int0 = 0;
      int int1 = (-87);
      // Undeclared exception!
      try { 
        MathUtils.round(1.0F, 0, (-87));
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method -87, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = MathUtils.indicator((-4614.268F));
      // Undeclared exception!
      try { 
        MathUtils.round((-1.0F), 251, 251);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 251, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-1596);
      int int1 = MathUtils.addAndCheck(178, (-1596));
      byte byte0 = MathUtils.sign((byte)0);
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1596), (-1418), (-1596));
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = bigInteger0.getLowestSetBit();
      float float0 = bigInteger0.floatValue();
      BigInteger bigInteger1 = BigInteger.valueOf((-3958705157555305932L));
      BigInteger bigInteger2 = MathUtils.pow(bigInteger0, 708);
      long long0 = MathUtils.sign((long) 708);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 708;
      doubleArray0[2] = (double) 708;
      doubleArray0[3] = (double) 708;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      float float1 = MathUtils.indicator((float) 1L);
      boolean boolean1 = MathUtils.equals(0.05, 1.0);
      double double0 = MathUtils.round((double) 10.0F, 1);
      // Undeclared exception!
      try { 
        MathUtils.factorial(707);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(204L, 204L);
      double double0 = MathUtils.sinh(0L);
      long long1 = MathUtils.sign(204L);
      boolean boolean0 = MathUtils.equals(0.0, (double) 1L, 0.0);
      byte byte0 = MathUtils.sign((byte)0);
      int int0 = MathUtils.gcd((-182), (-2411));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 307.1088366366;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      int int0 = MathUtils.mulAndCheck(31, 9);
      long long0 = MathUtils.sign((long) 279);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)101);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = MathUtils.gcd(2147483648L, 0L);
      boolean boolean0 = MathUtils.equals((double) 2147483648L, 0.0);
      long long1 = MathUtils.gcd(2147483648L, 2147483648L);
      int int0 = (-1);
      try { 
        MathUtils.pow((-1), (-1));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1^-1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = MathUtils.pow(448, 2717);
      int int1 = MathUtils.compareTo(0, (-2729.913218675498), 0.0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      // Undeclared exception!
      try { 
        MathUtils.round((double) 0L, 12, 2415);
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-711);
      intArray0[0] = (-711);
      intArray0[1] = 130;
      intArray0[2] = 1;
      intArray0[3] = 420;
      double double0 = MathUtils.distance(intArray0, intArray0);
      boolean boolean0 = MathUtils.equals(2.356194490192345, 0.0, 1);
      double double1 = MathUtils.round((double) (-711), 1);
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-782));
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -782
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 94);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 94;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.safeNorm(doubleArray0);
      short short0 = MathUtils.indicator((short)0);
      long long0 = MathUtils.pow((long) (short)0, 94);
      int int0 = MathUtils.mulAndCheck((int) (short)0, (int) (short)1);
      double double2 = MathUtils.normalizeAngle(Double.NEGATIVE_INFINITY, 1.3245471311735498E-8);
      short short1 = MathUtils.indicator((short)1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (short)1;
      doubleArray1[4] = (double) (short)0;
      doubleArray1[5] = Double.NaN;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      int int1 = MathUtils.subAndCheck(17, (-3102));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      double double3 = MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.round(0.0F, 0);
      int int1 = MathUtils.subAndCheck(0, (-221));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 221;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 221;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 221;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 310.55041928;
      doubleArray0[2] = 1136.927;
      doubleArray0[3] = 0.041666666666621166;
      double double0 = MathUtils.safeNorm(doubleArray0);
      boolean boolean0 = MathUtils.equals((-6.663542893624021E-14), 310.55041928, (-1297.3026359823));
      int int0 = MathUtils.subAndCheck((-2790), (-2790));
      double double1 = MathUtils.factorialLog(0);
      long long0 = MathUtils.mulAndCheck((long) (-2790), (long) 0);
      long long1 = MathUtils.pow((-377L), 0);
      int int1 = MathUtils.hash(doubleArray0);
      double double2 = MathUtils.indicator(310.55041928);
      double double3 = MathUtils.normalizeAngle(1L, 0.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0, 530);
      double double0 = MathUtils.normalizeAngle(530, (-2257.71));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 1957;
      int int1 = 5496;
      int int2 = MathUtils.lcm(1957, 5496);
      short short0 = (short)0;
      short short1 = MathUtils.indicator((short)0);
      boolean boolean0 = MathUtils.equals((double) 5496, (double) (short)1, 5496);
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = 1433.7658825468372;
      double double1 = MathUtils.log(1433.7658825468372, 6.283185307179586);
      long long0 = 1L;
      long long1 = MathUtils.lcm(1L, 1L);
      double double2 = MathUtils.log(1L, 1L);
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator((byte)0);
      int int0 = 64;
      int int1 = MathUtils.lcm(64, (int) (byte)0);
      double double3 = 0.0;
      double double4 = MathUtils.sign(0.0);
      int int2 = 59;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte)1, 59, mockRandom0);
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = MathUtils.gcd(1420L, 4499201580859392L);
      double double0 = MathUtils.log(1129.49, 10.0);
      double double1 = MathUtils.scalb(Double.NEGATIVE_INFINITY, 383);
      double double2 = MathUtils.scalb(0.0, 4);
      long long1 = MathUtils.pow(1420L, 383);
      long long2 = MathUtils.subAndCheck((long) 383, 4L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = MathUtils.lcm(4503599627370495L, 308L);
      long long1 = MathUtils.pow(1387108685230112460L, 4607182418800017408L);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = MathUtils.lcm(0, 0);
      long long0 = MathUtils.pow((-2623L), 0);
      long long1 = MathUtils.lcm((-2318L), (-971L));
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 55;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      double double0 = MathUtils.round((double) 0, (-472), 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-472);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double1 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)0);
      double double2 = MathUtils.cosh((-3873.4514709376213));
      long long0 = MathUtils.gcd((long) 0, (long) (short)0);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.1921056801463227E-8;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (double) 0L;
      doubleArray2[6] = 3.834E-20;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray2[8] = 0.0;
      double double3 = MathUtils.safeNorm(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1.0F;
      double double0 = MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = MathUtils.indicator(3338.1F);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1166);
      double double0 = MathUtils.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1166);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1166);
      doubleArray0[4] = (double) 3338.1F;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1.0F;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (0 > -1,166)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 2270;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 74;
      intArray0[5] = 214;
      int[] intArray1 = new int[1];
      intArray1[0] = 2270;
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1851.632684286), (-1015.591609894), 1446);
      long long0 = MathUtils.pow((long) 1446, 1446);
      // Undeclared exception!
      try { 
        MathUtils.factorial(1446);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = MathUtils.gcd(1420L, 4499201580859392L);
      double double0 = MathUtils.log(1129.49, 10.0);
      int int0 = (-492);
      double double1 = MathUtils.scalb(488.883411298713, (-492));
      double double2 = MathUtils.scalb(0.0, 4);
      try { 
        MathUtils.pow(1420L, (-492));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (1,420^-492)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.log(1419.4, 728.9);
      float float0 = MathUtils.indicator(0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 1419.4;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathUtils.equals(2.2250738585072014E-308, 728.9, 1419.4);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 728.9;
      doubleArray1[1] = 0.9081766410233905;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 728.9;
      doubleArray1[4] = 728.9;
      boolean boolean2 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      boolean boolean3 = MathUtils.equals(1419.4, 10.0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 307.1088366366;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean1 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2469L), (-2469L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) (-2469L), (double) (-2469L));
      double double0 = MathUtils.cosh(3.141592653589793);
      int int0 = MathUtils.subAndCheck((-526), 0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle((-603.02), (-603.02));
      int[] intArray0 = new int[5];
      intArray0[0] = 664;
      intArray0[1] = 0;
      intArray0[2] = (-2803);
      intArray0[3] = (-2051);
      intArray0[4] = 0;
      int int0 = MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        MathUtils.pow((-2781), (-967L));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-2,781^-967)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 2087.8478835, 1.304E19);
      long long0 = MathUtils.indicator((-1795L));
      int int0 = MathUtils.addAndCheck(0, 0);
      int int1 = MathUtils.addAndCheck(2763, 0);
      long long1 = MathUtils.binomialCoefficient(2763, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2763;
      doubleArray0[1] = (-1662.4831228871);
      doubleArray0[2] = (double) 2763;
      doubleArray0[3] = 2087.8478835;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 2763;
      doubleArray1[1] = (double) (-1795L);
      doubleArray1[2] = (double) 2763;
      doubleArray1[3] = (double) 2763;
      doubleArray1[4] = (double) (-1795L);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 2763;
      doubleArray1[8] = (double) 0;
      double double0 = MathUtils.distance1(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short short0 = (short) (-332);
      short short1 = MathUtils.sign((short) (-332));
      long long0 = MathUtils.indicator((long) (short) (-1));
      // Undeclared exception!
      try { 
        MathUtils.OrderDirection.valueOf("");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math.util.MathUtils.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(0, 0);
      int int2 = (-222);
      try { 
        MathUtils.pow((-222), (long) (-222));
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-222^-222)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = MathUtils.compareTo((-473.775), (-64.19107047947), (-473.775));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = MathUtils.equalsIncludingNaN(2964.8321, 2964.8321);
      int int0 = MathUtils.mulAndCheck((-1915), 0);
      byte byte0 = MathUtils.indicator((byte) (-4));
      float float0 = MathUtils.round(0.0F, (int) (byte) (-4), 0);
      double double0 = MathUtils.sinh((-502.0609705));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-4);
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = MathUtils.indicator(0L);
      int int0 = 1399;
      int int1 = MathUtils.indicator(1399);
      long long1 = MathUtils.binomialCoefficient(0, 0);
      double double0 = MathUtils.round((double) 0, 1399, 0);
      double double1 = MathUtils.normalizeAngle(0, 1L);
      // Undeclared exception!
      try { 
        MathUtils.factorial(2999);
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = MathUtils.compareTo(572.4386719151578, 2.384185791015625E-7, 2.384185791015625E-7);
      float float0 = MathUtils.round((-3975.03F), 1);
      float float1 = MathUtils.indicator((-1938.5978F));
      short short0 = MathUtils.indicator((short)169);
      double double0 = MathUtils.binomialCoefficientLog((short)169, 10);
      double double1 = MathUtils.log((-1382.012), (-3975.0F));
      int int1 = MathUtils.pow(10, 2819561105158720014L);
      double double2 = MathUtils.indicator((double) 1);
      int int2 = MathUtils.compareTo(35.92316834000633, 35.92316834000633, 2755.81237);
      int int3 = MathUtils.sign(1);
      double double3 = MathUtils.scalb(2819561105158720014L, 0);
      float float2 = MathUtils.sign((-1.0F));
      short short1 = MathUtils.sign((short)1);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int4 = MathUtils.indicator((int) (short)1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long long0 = MathUtils.pow(274743689216L, 5);
      double double0 = MathUtils.sign(2099.84499);
      long long1 = MathUtils.gcd(268304384L, 274743689216L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 268304384L;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 274743689216L;
      double double1 = MathUtils.distance1(doubleArray0, doubleArray0);
      float float0 = MathUtils.indicator((-2899.5F));
      long long2 = MathUtils.binomialCoefficient(5, 3);
      double double2 = MathUtils.sign((double) 268304384L);
      double[] doubleArray1 = new double[0];
      double double3 = MathUtils.safeNorm(doubleArray1);
      int int0 = MathUtils.pow(5, 5);
      long long3 = MathUtils.subAndCheck(127L, (long) 5);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, true);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathUtils.TWO_PI;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-3601.767191144176);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = (-3601.767191144176);
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-3,601.767 < 6.283)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = bigInteger3.setBit(50);
      BigInteger bigInteger5 = BigInteger.ONE;
      BigInteger bigInteger6 = bigInteger0.remainder(bigInteger5);
      BigInteger bigInteger7 = bigInteger1.negate();
      String string0 = bigInteger1.toString();
      BigInteger bigInteger8 = bigInteger0.modPow(bigInteger1, bigInteger3);
      byte[] byteArray0 = bigInteger1.toByteArray();
      BigInteger bigInteger9 = MathUtils.pow(bigInteger0, 87178291200L);
      BigInteger bigInteger10 = MathUtils.pow(bigInteger1, bigInteger1);
      int int0 = MathUtils.addAndCheck((-2475), 709);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1766);
      double double0 = MathUtils.safeNorm(doubleArray0);
      double double1 = MathUtils.distance(doubleArray0, doubleArray0);
      short short0 = MathUtils.sign((short)3429);
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (-1766.0));
      long long0 = MathUtils.mulAndCheck(1441L, (-336L));
      boolean boolean0 = MathUtils.equalsIncludingNaN((-518.0584223551), (-1766.0), 1252.066519);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = MathUtils.scalb((-3562.442278), 1000);
      double double1 = MathUtils.factorialDouble(1000);
      long long0 = MathUtils.subAndCheck((-3040L), (-3040L));
      byte byte0 = MathUtils.indicator((byte) (-24));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 1759;
      double double0 = MathUtils.factorialLog(1759);
      int int1 = MathUtils.indicator(1759);
      int int2 = MathUtils.compareTo(11389.78404627433, (-1795.0), 11389.78404627433);
      float float0 = MathUtils.sign((float) 1759);
      MathUtils.OrderDirection[] mathUtils_OrderDirectionArray0 = MathUtils.OrderDirection.values();
      int int3 = MathUtils.pow(3682, 1471L);
      // Undeclared exception!
      try { 
        MathUtils.round((float) 1759, 3682, 3682);
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 3,682, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = MathUtils.lcm(2567, 2567);
      double double0 = MathUtils.normalizeAngle(0.0, 0.0);
      double double1 = MathUtils.indicator((double) 2567);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.valueOf(2567);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      BigInteger bigInteger3 = bigInteger0.setBit(2567);
      boolean boolean0 = bigInteger1.isProbablePrime(2567);
      BigInteger bigInteger4 = MathUtils.pow(bigInteger0, 0);
      boolean boolean1 = bigInteger1.isProbablePrime(3);
      byte byte0 = MathUtils.indicator((byte) (-72));
      BigInteger bigInteger5 = MathUtils.pow(bigInteger2, bigInteger1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2729.6989659514;
      doubleArray0[3] = (double) 3;
      double double2 = MathUtils.distance(doubleArray0, doubleArray0);
      int int1 = MathUtils.hash(doubleArray0);
  }
}
