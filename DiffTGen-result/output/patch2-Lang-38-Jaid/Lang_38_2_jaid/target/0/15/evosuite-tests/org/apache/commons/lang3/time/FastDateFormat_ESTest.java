/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:43:19 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 0, 0, (-719), 2640);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(31, "", 0, 3, (-1), 3, 2, 0, 31, 3, 3);
      simpleTimeZone0.setStartYear(0);
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 3, locale0);
      String string0 = fastDateFormat0.format(0L);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(12, 12, 12, 3822, 12, 543);
      MockDate mockDate1 = new MockDate(12);
      boolean boolean0 = mockDate0.before(mockDate1);
      String string0 = "[";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(3822, 3, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3822
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-2092));
      fieldPosition0.setEndIndex(103);
      // Undeclared exception!
      try { 
        numberFormat0.format(0L, (StringBuffer) null, fieldPosition0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      int int0 = fastDateFormat0.hashCode();
      int int1 = 87;
      int int2 = 98;
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      String string1 = "The validated collection is empty";
      // Undeclared exception!
      try { 
        Charset.forName("The validated collection is empty");
      } catch(IllegalCharsetNameException e) {
         //
         // The validated collection is empty
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      String string0 = "o4[eG}:eQFga%!qCuA";
      Locale locale0 = Locale.PRC;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      String string1 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Chinese");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat2.format((-3213L), stringBuffer0);
      String string1 = fastDateFormat1.format((long) 0);
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(0, ",-08=s9vSB", (-1154), 0, 3, (-1154), 0, 0, 648, 0);
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(3, (TimeZone) simpleTimeZone1, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      long long0 = (-2080L);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      long long1 = 2277L;
      int int0 = 1382;
      int int1 = 0;
      String string0 = "i-r,W| -+c";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("GQn>", timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = (-473);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "1PV1^P1", (-473), 0, 0, 0, 0, 0, (-473), (-1639));
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Locale locale0 = new Locale("1PV1^P1");
      String string0 = simpleTimeZone0.getDisplayName(locale0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      Object object0 = new Object();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("6", (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      String string1 = fastDateFormat0.format(calendar0);
      boolean boolean0 = fastDateFormat0.equals(object0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Object object1 = timeZone0.clone();
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      String string0 = fastDateFormat0.parseToken("QZo=V2E4", intArray0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      boolean boolean0 = locale0.hasExtensions();
      Object object0 = fastDateFormat0.parseObject("7EHs-r[_.5Eh", parsePosition0);
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 0, locale0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(1, (TimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "The validated map is empty";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated map is empty");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The validated character sequence is blank");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("-n9Zb[qys1bLgTnJ##", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(2696);
      StringBuffer stringBuffer1 = decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = stringBuffer1.append(true);
      StringBuffer stringBuffer3 = fastDateFormat0.format((long) 0, stringBuffer0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      String string0 = fastDateFormat0.getPattern();
      boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
      StringBuffer stringBuffer4 = fastDateFormat0.format((long) 2696, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 106;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(106, "O@X~:({ay3mQ5w");
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat0 = new FastDateFormat("O@X~:({ay3mQ5w", simpleTimeZone0, locale0);
      Object object0 = simpleTimeZone0.clone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(88, 106, 97, 88, (-1), 43);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1120);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      Locale locale0 = fastDateFormat0.getLocale();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      int int1 = 14;
      int int2 = 1087;
      String string0 = "%";
      int int3 = (-2778);
      try { 
        fastDateFormat1.parseObject("%");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      String string0 = null;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("RejW(SZ+");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(20, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format(0L);
      Locale locale0 = new Locale("[COQ4c;5o>", "pU&>vR!0[OX(G");
      boolean boolean0 = locale0.hasExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale locale1 = Locale.lookup(linkedList0, list0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      String string1 = fastDateFormat0.format(calendar0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone1 = null;
      try {
        simpleTimeZone1 = new SimpleTimeZone((-334), "pU&>vR!0[OX(G", 0, 3, 2, 0, 2657, 2172, 3, (-2517), (-334));
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 2657
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", (TimeZone) null, locale0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      String string0 = fastDateFormat0.parseToken("QZo=V2E4", intArray0);
      int int1 = 0;
      ParsePosition parsePosition0 = new ParsePosition(0);
      boolean boolean0 = locale0.hasExtensions();
      Object object0 = fastDateFormat0.parseObject("7EHs-r[_.5Eh", parsePosition0);
      boolean boolean1 = locale0.hasExtensions();
      int int2 = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(1, 0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("~Gy6.ehb", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("s(H+:N,*2@';TS");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "&E6e\"P12RJt9GSH{S`K";
      TimeZone timeZone0 = TimeZone.getTimeZone("H}wYP\"oevny(F$+");
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = new FastDateFormat("&E6e\"P12RJt9GSH{S`K", timeZone0, locale0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-1L));
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "1PV1^P1", (-473), 0, 0, 0, 0, 0, (-473), (-1639));
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Locale locale0 = new Locale("1PV1^P1");
      String string0 = simpleTimeZone0.getDisplayName(locale0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
      Object object0 = new Object();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("6", (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      String string1 = fastDateFormat0.format(calendar0);
      boolean boolean0 = fastDateFormat0.equals(object0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Object object1 = timeZone0.clone();
      String string2 = timeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("xNa2!, 1.!4$*0.^axg", "", "");
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      String string1 = fastDateFormat0.parseToken("Phejo\"", intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("SUacJs8yO");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Ee]L.6 w", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("}-", (Locale) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getDisplayVariant();
      String string1 = locale0.getDisplayVariant();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition((-570));
      StringBuffer stringBuffer1 = decimalFormat0.format((-648L), stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format((double) 0, stringBuffer1, fieldPosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-765), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -765
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GkKQW/%U7&C");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(calendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      String string1 = locale0.getDisplayScript();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("so4@xPK+ck", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      String string0 = null;
      int int1 = (-3110);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-3110);
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "me1cC";
      stringArray0[3] = "me1cC";
      stringArray0[4] = null;
      stringArray0[5] = null;
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      MockDate mockDate0 = new MockDate((-2397L));
      StringBuffer stringBuffer0 = new StringBuffer(97);
      FieldPosition fieldPosition0 = new FieldPosition(2406);
      StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = choiceFormat0.format((long) (-3110), stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.format(0L, stringBuffer2);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "me1cC", (-3110), 1, 0, 0, 0, (-3110), 3, 3, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -3110
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "", 1, 1, 1, 60000, 0, 1, 1, 60000);
      int int0 = simpleTimeZone0.getOffset((-698L));
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("8q>AD7n}n", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      int int0 = timeZone0.getOffset((-2619L));
      Locale locale0 = Locale.FRENCH;
      String string0 = locale0.getDisplayName();
      Locale locale1 = locale0.stripExtensions();
      String string1 = locale0.getScript();
      String string2 = locale0.getDisplayName();
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("HX2]#Hs/XDxU|f`(", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.US;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      int int1 = fastDateFormat0.hashCode();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      long long0 = (-74L);
      String string0 = ";j{|'WmQE:";
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat(";j{|'WmQE:");
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \";j{|'WmQE:\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      String string1 = fastDateFormat0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Object object0 = timeZone0.clone();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[]", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1669);
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1669), (-2973), (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2973
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = numberFormat0.format(1518L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat2.applyRules(mockGregorianCalendar0, stringBuffer1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ge.)0");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Instant instant1 = MockInstant.minusSeconds(instant0, 1L);
      Instant instant2 = MockInstant.plusNanos(instant1, 0L);
      Date date0 = Date.from(instant2);
      String string0 = fastDateFormat0.format(date0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      String string1 = fastDateFormat0.getPattern();
      ParsePosition parsePosition0 = new ParsePosition(31);
      Object object0 = fastDateFormat0.parseObject(".NZ[(Ku", parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(1874);
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0);
      FieldPosition fieldPosition0 = new FieldPosition((-599));
      fieldPosition0.setBeginIndex(114);
      fieldPosition0.setBeginIndex(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, (Locale) null);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(3, (Locale) null);
      String string2 = fastDateFormat0.format(589L);
      FastDateFormat fastDateFormat5 = FastDateFormat.getInstance();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.UK;
      String string0 = locale0.getDisplayName(locale1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "\"z|SS";
      Locale locale0 = Locale.GERMANY;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("\"z|SS", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      FieldPosition fieldPosition0 = null;
      // Undeclared exception!
      try { 
        decimalFormat0.format((Object) fastDateFormat0, stringBuffer1, (FieldPosition) null);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = new Locale("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      boolean boolean0 = fastDateFormat0.equals(mockSimpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.TAIWAN;
      String[] stringArray0 = Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      String string0 = Locale.lookupTag(linkedList0, set0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1058, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1058
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "0m:-";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      String string1 = locale0.getDisplayLanguage();
      Locale.setDefault(locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("0m:-", timeZone0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-11));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -11
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$StringLiteral";
      int int0 = (-1824);
      int int1 = 0;
      int int2 = 1744;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$StringLiteral", 0, 0, (-1824), (-1), 0, 0, 0, 0, (-1), 0, 1744);
      String string1 = simpleTimeZone0.getDisplayName();
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, (Locale) null);
      int int3 = fastDateFormat0.getMaxLengthEstimate();
      int int4 = 14;
      SimpleTimeZone simpleTimeZone1 = null;
      try {
        simpleTimeZone1 = new SimpleTimeZone((-1824), "org.apache.commons.lang3.time.FastDateFormat$Pair", (-1183), 1744, 40, 14, 0, 1744, 1969, (-1183), 0, 4662, 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1183
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(15, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 15
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1219);
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setRawOffset(1416);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1219), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1219
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.init();
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, 0, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1224, 6);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 6
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "&i";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&i");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8 X^]!;UU~ofh/W^");
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale1);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Calendar calendar0 = MockCalendar.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'C';
      charArray0[2] = '9';
      charArray0[3] = ' ';
      charArray0[4] = 'U';
      charArray0[5] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition((-704));
      StringBuffer stringBuffer1 = decimalFormat0.format((double) 3, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format(calendar0, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Object) calendar0, stringBuffer2, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      timeZone0.setID("");
      Object object0 = locale0.clone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      String string0 = fastDateFormat0.getPattern();
      String string1 = timeZone0.getDisplayName(true, 0);
      String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-2131), (-601));
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-650);
      TimeZone timeZone0 = TimeZone.getTimeZone("Zr}/");
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-650), (-650), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -650
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-2754);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2754));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2754
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(31, 31, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "uSLG=]vo<mPekdR\"";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("uSLG=]vo<mPekdR\"", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(3267);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3267
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1566), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1566
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "GD~yu8Nl&";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("GD~yu8Nl&");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 122;
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(122, 122, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 122
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 1808, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1808
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format(0L);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TextField";
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TextField");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2, timeZone0);
      Calendar calendar0 = null;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      long long0 = (-275L);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.apache.commons.lang3.time.FastDateFormat$TextField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-1);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("uD9|[", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Unknown class: ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      boolean boolean0 = locale0.hasExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("%V-gViZz4,7", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) null);
      Long long0 = new Long(0L);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      StringBuffer stringBuffer1 = numberFormat0.format((long) 0, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = numberFormat0.format(489.23834, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Object) long0, stringBuffer2, fieldPosition0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null, locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 2;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.UK;
      String string1 = locale0.getDisplayLanguage(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 750;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(750, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 750
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string1 = "s-lz g~g$3^siw";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("s-lz g~g$3^siw");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = new Locale("#cj7[2yosT", "#cj7[2yosT", ",sVN$##~#F-6O76RnA/");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = fastDateFormat0.getPattern();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1463), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1463
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 253;
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$Pair";
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(253, "org.apache.commons.lang3.time.FastDateFormat$Pair", 0, 0, 253, 0, 0, 253, 0, (-316), 4088);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end time -316
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 0, 0, (-719), 2640);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = decimalFormat0.format((long) (-719), stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((long) 2640, stringBuffer1);
      StringBuffer stringBuffer3 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer2);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(31, "", 0, 3, (-1), 3, 2, 0, 31, 3, 3);
      simpleTimeZone0.setStartYear(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 3266, (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = (-1883);
      int int1 = (-189);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1883), (-189));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -189
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      String string1 = fastDateFormat0.getPattern();
      Locale locale0 = null;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 1, (Locale) null);
      ParsePosition parsePosition0 = new ParsePosition(31);
      Object object0 = fastDateFormat0.parseObject(".NZ[(Ku", parsePosition0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer(1874);
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(0);
      StringBuffer stringBuffer1 = fastDateFormat2.format(calendar0, stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition((-599));
      fieldPosition0.setBeginIndex(0);
      fieldPosition0.setBeginIndex(0);
      fieldPosition0.setEndIndex(1);
      // Undeclared exception!
      try { 
        fastDateFormat1.format((Object) fastDateFormat0, stringBuffer1, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TimeZone timeZone0 = null;
      boolean boolean0 = true;
      int int0 = 1312;
      Locale locale0 = Locale.CHINESE;
      String string0 = locale0.getDisplayVariant();
      // Undeclared exception!
      try { 
        locale0.getDisplayLanguage((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField";
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField");
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = new FastDateFormat("org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField", timeZone0, locale0);
      timeZone0.setRawOffset(1);
      String string1 = timeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-462), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -462
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("A?m3yu", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }
}
