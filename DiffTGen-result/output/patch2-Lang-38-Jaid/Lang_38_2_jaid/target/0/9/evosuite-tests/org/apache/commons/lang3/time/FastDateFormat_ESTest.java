/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:43:19 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      Object object0 = fastDateFormat0.clone();
      String string0 = locale0.getDisplayCountry();
      String string1 = fastDateFormat0.format((-2743L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Object object1 = fastDateFormat0.clone();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string2 = fastDateFormat0.format(date0);
      String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      String string4 = "D# qv7";
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object2 = fastDateFormat0.parseObject("D# qv7", parsePosition0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("D# qv7", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      System.setCurrentTimeMillis((-4238L));
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5'", locale1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yHU'jK*P%Guc", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "$Y0zw(";
      Locale locale0 = new Locale("n(", "$Y0zw(", "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("n(", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      int int0 = 1788;
      long long0 = 1L;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MockDate mockDate0 = new MockDate((-951), 95, 9, 3, (-2092));
      StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) stringBuffer1, 2, 320);
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2, end 320, s.length() 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      System.setCurrentTimeMillis(0);
      MockDate mockDate0 = new MockDate(10, 1, 3, (-609), 1, 114);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Date) mockDate0, stringBuffer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "yyyy'\u5E74'M'\u6708'd'\u65E5'";
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5'", timeZone0, locale0);
      int int0 = 106;
      MockDate mockDate0 = new MockDate(1, (-1), 44, (-1), 2, 106);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      try { 
        fastDateFormat0.parseObject("]");
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("'_.+-wV9<8-uQ");
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      String string0 = "";
      int[] intArray0 = new int[4];
      int int0 = (-6036);
      int int1 = (-828);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-828));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -828
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition((-1));
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(1, locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.iterator();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      fastDateFormat0.init();
      String string0 = fastDateFormat0.toString();
      MockDate mockDate0 = new MockDate(0L);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-679));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -679
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      Locale locale1 = fastDateFormat0.getLocale();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
      long long0 = 0L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      int int1 = 946;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DateFormatSymbols dateFormatSymbols0 = mockSimpleDateFormat0.getDateFormatSymbols();
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA;
      boolean boolean0 = timeZone0.observesDaylightTime();
      String string0 = locale0.getScript();
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(743, 743, timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 743
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("r&", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      Locale locale0 = Locale.lookup(linkedList0, list0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("", (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-4));
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      Calendar calendar0 = MockCalendar.getInstance();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      Locale locale1 = Locale.GERMAN;
      String string0 = locale0.getDisplayLanguage(locale1);
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer1 = numberFormat0.format((long) 2, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = fastDateFormat0.applyRules(calendar0, stringBuffer1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) stringBuffer0, stringBuffer2, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.StringBuffer
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockDate mockDate0 = new MockDate(0, 0, 1983);
      // Undeclared exception!
      try { 
        MockGregorianCalendar.from((ZonedDateTime) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.util.MockGregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ROOT;
      String string0 = locale0.getDisplayCountry();
      Set<Character> set0 = locale0.getExtensionKeys();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null, locale0);
      String string1 = "xriaaP.";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("xriaaP.", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      String string0 = "Y";
      int int0 = 40;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(226, "Y", 2, 0, 0, 0, (-211), 1, 0, 226, (-211), 226, (-211));
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: -211
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "jl\\71FOjIf";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("jl9FOjIf");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "FTl";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FTl", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 1;
      String string0 = fastDateFormat0.parseToken("<null>", intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ";=Xt81=\\jbW. yq";
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(";=Xt81=jbW. yq", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(707, "DbQ/rCGamhmLGUc:=");
      simpleTimeZone0.setDSTSavings(707);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("M,*Kzc<DY1v>s", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = mockGregorianCalendar0.getActualMinimum(3);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1600), "org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral");
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "EW5!J$H";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("EW5!J$H", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3425));
      parsePosition0.setErrorIndex((-1154));
      parsePosition0.setIndex(400);
      Object object0 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", parsePosition0);
      int int0 = fastDateFormat0.hashCode();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-724), (-155), 502, 502, 1368);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("MQ|}mHAw-CQ,pN{jKH", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-1412);
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1412), 2123, (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2123
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneId zoneId0 = zoneOffset0.normalized();
      ZoneOffset zoneOffset1 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(100, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "", 1, 2, (-1853), (-1), (-1), 1, 0, 60, 0, 0, 2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = ">v0|XV";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(]Rt4;{|o!'");
      Locale locale0 = Locale.PRC;
      TimeZone.setDefault(simpleTimeZone0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">v0|XV", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = ">v0|XV";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ">v0|XV");
      Locale locale0 = Locale.PRC;
      TimeZone.setDefault(simpleTimeZone0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">v0|XV", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "yHU'jK*P%Guc";
      TimeZone timeZone0 = TimeZone.getDefault();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      FastDateFormat fastDateFormat0 = new FastDateFormat("yHU'jK*P%Guc", timeZone0, (Locale) null);
      String string1 = "u";
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 2;
      intArray0[5] = 3;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("u", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+D{u7=@\"h:inU@r0F6[");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("bwE-4dM8");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "'<Lj'bG&$^78M=T9=Z";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("'<Lj'bG&$^78M=T9=Z");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      String string0 = fastDateFormat0.getPattern();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale1 = Locale.lookup(linkedList0, list0);
      // Undeclared exception!
      try { 
        locale0.getDisplayName((Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) null, locale0);
      String string0 = fastDateFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      String string0 = fastDateFormat0.parseToken("7vFg+^", intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "(S%oinf";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("(S%oinf");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = new Locale("", "/iCCc", "/iCCc");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      int int0 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneId zoneId0 = timeZone0.toZoneId();
      ZoneOffset zoneOffset1 = ZoneOffset.ofHours(0);
      ZoneOffset zoneOffset2 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, (Locale) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Locale locale1 = new Locale("", "", "");
      String string0 = locale0.getDisplayLanguage(locale1);
      MockDate mockDate0 = new MockDate(1);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(3);
      String string2 = fastDateFormat2.format((Date) mockDate0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      simpleTimeZone0.setID("");
      Locale locale2 = Locale.CHINA;
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3, (TimeZone) simpleTimeZone0, locale2);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 3, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 5;
      String string0 = "";
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(5, 5, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1928);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1928), (-1928));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1928
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      String string0 = fastDateFormat0.format(0L);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Locale.setDefault(locale0);
      Object object0 = timeZone0.clone();
      int int0 = timeZone0.getOffset(0, 1, 1, 3, 2, 917);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      String string0 = "O";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("O", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(43);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 43
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2111));
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2111
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Negative values should not be possible", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.forLanguageTag("f;VU4H");
      FastDateFormat fastDateFormat0 = new FastDateFormat("rSv%s~Vsp)@j>{~H|qA", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((long) 0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = locale0.getScript();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1541), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1541
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("H*;-9eR", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = locale0.getDisplayCountry();
      String string1 = locale0.getScript();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1P", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      StringBuffer stringBuffer0 = new StringBuffer(2);
      int int0 = 1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '8';
      charArray0[2] = '+';
      charArray0[3] = 'g';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      StringBuffer stringBuffer2 = stringBuffer0.insert(1, (CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition(3);
      fieldPosition0.setEndIndex(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "", stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "y7N:N+t";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1185), "y7N:N+t");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      simpleTimeZone0.setStartRule(1, 0, 0, 1471);
      Object object0 = simpleTimeZone0.clone();
      int int1 = simpleTimeZone0.getOffset((long) 2);
      // Undeclared exception!
      try { 
        simpleTimeZone0.getOffset(1, (-284), 1, (-1185), 0, (-1185));
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "g}Ny\\";
      TimeZone timeZone0 = TimeZone.getTimeZone("y\"3qB$z*");
      int int0 = 3;
      ZoneId zoneId0 = timeZone0.toZoneId();
      timeZone0.setRawOffset(3);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("g}Ny", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "g}Ny\\";
      TimeZone timeZone0 = TimeZone.getTimeZone("y\"3qB$z*");
      int int0 = 3;
      timeZone0.setRawOffset(3);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("g}Ny", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^kw8tZ3u<x*");
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("^kw8tZ3u<x*", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(1);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
      String string1 = fastDateFormat0.format((Date) mockDate0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 3, timeZone0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("=sa-s", decimalFormatSymbols0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      String string2 = mockGregorianCalendar0.getCalendarType();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat1.applyRules(mockGregorianCalendar0, stringBuffer0);
      Format.Field format_Field0 = null;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(2, (char[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.init();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.iterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      String string0 = locale1.getDisplayName(locale0);
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale1);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      fastDateFormat0.init();
      String string2 = fastDateFormat0.toString();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockDate mockDate0 = new MockDate(0L);
      String string3 = fastDateFormat0.format((Date) mockDate0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("1/1/70 12:00 AM", locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(51);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 51
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-588);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Object object0 = timeZone0.clone();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-588), timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -588
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.GERMAN;
      String string0 = locale0.getDisplayVariant(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "-)Cnz4n\"}@";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("-)Cnz4n\"}@", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<aA%/a}S#eKrFn@Em\"", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("NtD!$0]!u^B'yR7");
      Locale locale0 = Locale.ENGLISH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      MockDate mockDate0 = new MockDate(0, 2, 0, 0, 1766, 1766);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("NtD!$0]!u^B'yR7");
      double double0 = 1.0;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = null;
      // Undeclared exception!
      try { 
        decimalFormat0.format(778.615180298, stringBuffer0, (FieldPosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 3, (TimeZone) null);
      Locale locale0 = Locale.ITALY;
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat2.format(182L, stringBuffer0);
      // Undeclared exception!
      try { 
        decimalFormat0.format((long) 3, stringBuffer1, (FieldPosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1907, 1907, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1907
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.init();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      FastDateFormat fastDateFormat1 = (FastDateFormat)fastDateFormat0.clone();
      String string0 = locale0.getDisplayCountry();
      String string1 = fastDateFormat0.format((-2743L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      FastDateFormat fastDateFormat2 = (FastDateFormat)fastDateFormat1.clone();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string2 = fastDateFormat0.format(date0);
      String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-3202), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -3202
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1913, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1913
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 549;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormatSymbols dateFormatSymbols0 = mockSimpleDateFormat0.getDateFormatSymbols();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(549, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 549
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 44;
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(44, 44, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 44
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      fastDateFormat0.init();
      Locale locale1 = fastDateFormat0.getLocale();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      String string0 = locale0.getDisplayScript();
      intArray0[1] = 2;
      intArray0[2] = 2;
      String string1 = locale1.getDisplayScript(locale0);
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 2;
      String string2 = fastDateFormat0.parseToken("lri#WNw(TS:mt~@ds", intArray0);
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, (TimeZone) null);
      fastDateFormat0.init();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      // Undeclared exception!
      try { 
        fastDateFormat1.applyRules(calendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      Locale locale1 = fastDateFormat0.getLocale();
      String string0 = fastDateFormat0.format(0L);
      MockDate mockDate0 = new MockDate();
      String string1 = "gw&k4oEmSTv3}";
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 3;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = fastDateFormat0.format(1L, stringBuffer0);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, 1757, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1757
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      Object object0 = fastDateFormat0.clone();
      String string0 = locale0.getDisplayCountry();
      String string1 = fastDateFormat0.format((-2743L));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Object object1 = fastDateFormat0.clone();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      String string2 = fastDateFormat0.format(date0);
      String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object2 = fastDateFormat0.parseObject("", parsePosition0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3154), "f;y={d#_d!|h");
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
      String string0 = "#dT9";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      int int0 = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, (-1052));
      // Undeclared exception!
      try { 
        fastDateFormat2.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      MockDate mockDate0 = new MockDate(3);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition1 = new FieldPosition(format_Field0, (-26));
      // Undeclared exception!
      try { 
        choiceFormat0.format((long) 1, stringBuffer1, fieldPosition1);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(286, "");
      Locale locale0 = Locale.UK;
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      mockSimpleDateFormat0.setDateFormatSymbols(dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1590, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1590
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      int int0 = 0;
      int int1 = 45;
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 45, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 45
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      boolean boolean0 = fastDateFormat0.equals(zoneId0);
      int int0 = 0;
      String string0 = zoneId1.getId();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, timeZone0);
      String string1 = fastDateFormat1.format((long) 0);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 3, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 3
         //
         verifyException("java.util.TimeZone", e);
      }
  }
}
