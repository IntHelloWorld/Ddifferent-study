/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:43:16 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      long long0 = 0L;
      String string0 = "5V$";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "5V$", 2, 3, 2, 3, 1, (-386), 0, 1, 724, 3, 3);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 2, (TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("*25'a*2T(^9:yiv1eC");
      String string0 = "o l!?+LG/";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("o l!?+LG/");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "CA7Z1ly$L)p}-5O/d^";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("CA7Z1ly$L)p}-5O/d^");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
      String string0 = "%8SwA<$DFb]";
      int int1 = 0;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":Lg 9'eY{ C=wC @", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string0 = "";
      int int0 = mockGregorianCalendar0.get(3);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      int int1 = (-2354);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-2354));
      fieldPosition0.setEndIndex(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) timeZone0, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: sun.util.calendar.ZoneInfo
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "hn)Mc!WSnq- T9Q^k";
      int[] intArray0 = new int[5];
      intArray0[2] = (-3940);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("hn)Mc!WSnq- T9Q^k");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ZoneId zoneId0 = timeZone0.toZoneId();
      Locale locale0 = new Locale("No date pattern for locale: ");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1, timeZone0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateFormat0.parseObject("No date pattern for locale: ", parsePosition0);
      String string0 = fastDateFormat0.format((long) 2);
      int int0 = fastDateFormat1.getMaxLengthEstimate();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 49;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No date pattern for locale: ";
      stringArray0[1] = "No date pattern for locale: ";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ZoneId zoneId0 = timeZone0.toZoneId();
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1, timeZone0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateFormat0.parseObject("No date pattern for locale: ", parsePosition0);
      String string0 = fastDateFormat1.format((long) 2);
      int int0 = fastDateFormat1.getMaxLengthEstimate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 49;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No date pattern for locale: ";
      stringArray0[1] = "No date pattern for locale: ";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("apb_OTSn*+BLi");
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("c%SR", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "QG?*le;vG", 0, 0, 0, 0, 3, 0, 0, 0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("QG?*le;vG");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^ E>yf\"NF!");
      int int0 = (-455);
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, (-455), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -455
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.trimToSize();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) null, stringBuffer1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3;
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = "";
      String string1 = "";
      int int1 = 2361;
      int int2 = (-2752);
      int int3 = (-57);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseObject("t", (ParsePosition) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "R}Gqf!";
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      String string1 = locale0.getDisplayName();
      FastDateFormat fastDateFormat0 = new FastDateFormat("R}Gqf!", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Date) mockDate0, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      MockDate mockDate0 = new MockDate(2801L);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      String string1 = fastDateFormat0.getPattern();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(31, "", 31, 0, 0, 2, 2, 0, 3, 0, 31);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("12:00:02 AM GMT", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string0 = Locale.lookupTag(linkedList0, linkedHashSet0);
      String string1 = locale0.getDisplayName();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Oar,W-[", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "q=xNu+}Rdtcw4";
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("q=xNu+}Rdtcw4", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      String string0 = "";
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(3);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDateFormat2.parseToken("", intArray0);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ")=#@]&kiSzLi$\\H";
      String string1 = "";
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      String string2 = locale0.getDisplayVariant(locale1);
      FastDateFormat fastDateFormat0 = new FastDateFormat(")=#@]&kiSzLi$H", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey");
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey", timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1538, "");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((-2357L), stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "The pattern must not be null";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The pattern must not be null");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(0L, (StringBuffer) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "ehZj>vBt)/ v2)";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ehZj>vBt)/ v2)", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "v7;[@U]~";
      TimeZone timeZone0 = TimeZone.getTimeZone("v7;[@U]~");
      boolean boolean0 = timeZone0.observesDaylightTime();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("v7;[@U]~", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ">=FFah9^/INIYm.:2z";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">=FFah9^/INIYm.:2z", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2769, 2769, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2769
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
      fastDateFormat0.init();
      Object object0 = fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(object0);
      MockDate mockDate0 = new MockDate(3, 15, (-2626), 3, (-2626));
      Instant instant0 = mockDate0.toInstant();
      String string0 = fastDateFormat0.format((Date) mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("");
      Locale locale1 = fastDateFormat1.getLocale();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("", timeZone0);
      String string1 = fastDateFormat2.format((Date) mockDate0);
      String string2 = "";
      int[] intArray0 = new int[4];
      int int0 = (-397);
      // Undeclared exception!
      try { 
        timeZone0.getOffset(3, 3600000, 0, 0, 0, 7);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      Locale locale0 = fastDateFormat0.getLocale();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Object object0 = fastDateFormat0.clone();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      StringBuffer stringBuffer0 = new StringBuffer(3954);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FieldPosition fieldPosition0 = new FieldPosition(43);
      StringBuffer stringBuffer2 = numberFormat0.format(0.0, stringBuffer1, fieldPosition0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0, stringBuffer2, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-923);
      TimeZone timeZone0 = null;
      String string0 = "1g$}2_PU";
      Locale locale0 = new Locale("1g$}2_PU");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      boolean boolean0 = linkedHashSet0.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-923), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -923
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "Y+)<([^)I";
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Y+)<([^)I", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0, (Locale) null);
      int int0 = (-1668);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "./", 1, (-1668), 1, (-1), (-1668), (-1), (-924), 122, (-924));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-1215);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1215), 0, (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1215
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "#*;y;";
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("#*;y;", locale0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "", 3658, 303, 3, 0, (-1554), (-1), 2, 3, 1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 3658
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&ki>SPEl?! QAwzamEc");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      String string0 = fastDateFormat0.format(1L);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      String string1 = fastDateFormat0.format(calendar0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = mockSimpleDateFormat0.parse("lO1d&K)OK", parsePosition0);
      boolean boolean0 = fastDateFormat0.equals(mockSimpleDateFormat0);
      String string2 = fastDateFormat0.getPattern();
      String string3 = fastDateFormat0.getPattern();
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(356, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 356
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = new Locale("", "", "L:*OD");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      fastDateFormat0.init();
      TimeZone timeZone0 = TimeZone.getTimeZone("L:*OD");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1450), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1450
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("[W'Y1zk#v|@;)", (TimeZone) null, locale0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("[W'Y1zk#v|@;)", dateFormatSymbols0);
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1667), "$zL|<\"a~1+i@");
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "t44+";
      Locale locale0 = Locale.JAPAN;
      String string1 = locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("t44+", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.GERMANY;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, locale0);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 1, locale0);
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        timeZone0.getOffset(2, 0, 0, (-1047), 3793, 0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2012), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2012
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "gBJ$bM~-z64^w%Q+\\I";
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("gBJ$bM~-z64^w%Q+I", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      String string0 = timeZone0.getDisplayName(false, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("0%M<:^]", timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-103), locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -103
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2911, "R2-\"2241@!:{P");
      Locale locale0 = Locale.forLanguageTag("Illegal pattern component: ");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      Locale locale0 = Locale.ITALIAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      String string0 = fastDateFormat0.format(date0);
      String string1 = fastDateFormat0.format(date0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      String string2 = null;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(15, "", 0, 0, (-1946), 0, 0, 0, 0, (-2274), (-2274), 1, (-1946));
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: -1946
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(8);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 8
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      ZoneId zoneId0 = timeZone0.toZoneId();
      Locale locale0 = new Locale("No date pattern for locale: ");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 1, timeZone0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateFormat0.parseObject("No date pattern for locale: ", parsePosition0);
      String string0 = fastDateFormat1.format((long) 2);
      int int0 = fastDateFormat1.getMaxLengthEstimate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 49;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No date pattern for locale: ";
      stringArray0[1] = "No date pattern for locale: ";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ROOT;
      Locale.setDefault(locale0);
      Locale.setDefault(locale0);
      Locale locale1 = locale0.stripExtensions();
      Locale locale2 = Locale.forLanguageTag("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
      String string0 = null;
      Locale locale3 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale3);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1;
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (Locale) null);
      String string0 = "!OhoLOh{$mvI#";
      int int1 = 90;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      fastDateFormat0.init();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1992;
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.setID("");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1992, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1992
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "l#uQ*";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("l#uQ*");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField";
      ParsePosition parsePosition0 = new ParsePosition(1);
      Locale locale0 = Locale.TAIWAN;
      parsePosition0.setIndex(0);
      parsePosition0.setErrorIndex(0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 3, locale0);
      parsePosition0.setIndex((-786));
      parsePosition0.setErrorIndex((-392));
      Object object0 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$TwoDigitYearField", parsePosition0);
      boolean boolean0 = fastDateFormat0.equals((Object) null);
      int int0 = fastDateFormat0.hashCode();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "", 1492, 1758, 1831, 3, 3, (-1), 9, 2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1492
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      Locale locale0 = new Locale("Amz{,'?;5X>E]Gg%o-", "Amz{,'?;5X>E]Gg%o-");
      String[] stringArray0 = Locale.getISOLanguages();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(3, locale0);
      fastDateFormat0.init();
      TimeZone timeZone0 = fastDateFormat1.getTimeZone();
      int int0 = fastDateFormat0.hashCode();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
      MockDate mockDate0 = new MockDate(3123, (-884), (-1623));
      boolean boolean0 = fastDateFormat1.equals(mockDate0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      int int0 = fastDateFormat0.hashCode();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2992), (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2992
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("V=V");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "V=V", 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        choiceFormat0.format((Object) "t~1/SyVASsQ", stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.US;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      String string0 = "::eS";
      Month month0 = Month.APRIL;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(2, month0, (-549), 0, (-394), 337);
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -549
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.ITALIAN;
      String string0 = locale0.getDisplayLanguage(locale1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(1345, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1345
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "[)~Bm7W!";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[)~Bm7W!");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("nY1h;h~?3=u2O");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(1234, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1234
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("#*;y;", locale0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 0;
      Locale locale1 = Locale.US;
      String string0 = locale0.getDisplayName(locale1);
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3, "", 3658, 303, 3, 0, (-1554), (-1), 2, 3, 12);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 3658
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-2404), (-2404));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2404
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(494, Integer.MIN_VALUE);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2147483648
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1077;
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1077, 1077, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1077
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      TimeZone timeZone0 = null;
      Locale locale0 = new Locale("6vOS|h,q7og:cEA N=", "/pT8?`EPHna2Bz", "6vOS|h,q7og:cEA N=");
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, (-703), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, timeZone0);
      Object object0 = fastDateFormat0.clone();
      boolean boolean0 = fastDateFormat0.equals(object0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object1 = fastDateFormat0.parseObject((String) null, parsePosition0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      boolean boolean0 = locale0.hasExtensions();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(4401);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4401
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-2634);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-2634), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2634
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "\"LIE8+9sa");
      Locale locale0 = Locale.TAIWAN;
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, false, 0, locale0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("yf", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format(1L);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 21;
      intArray0[2] = 0;
      String string1 = fastDateFormat0.parseToken("/3M76_oeH0_Eu", intArray0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = (-850);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-850), "%QBV;2n[@<L\"FgKBY", (-990), (-990), 1, 4363, 1, 1, 4363, (-850));
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -990
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 4496;
      Locale locale0 = Locale.forLanguageTag("");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("+Rw8(r6s;6%|l( T");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(524);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 524
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "Dx=+M8vz&";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Dx=+M8vz&");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 3, (-466), (-466), 0, 0);
      int int0 = mockGregorianCalendar0.getWeekYear();
      mockGregorianCalendar0.setTimeInMillis(1361L);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      Locale locale1 = new Locale("");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2, (-466), timeZone0, locale1);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -466
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$TwelveHourField";
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwelveHourField", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      Locale locale2 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]ZB", locale2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-205), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -205
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0aP;Xq");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
      String string0 = fastDateFormat0.getPattern();
      Locale locale1 = new Locale("", "QI(Fj9_N&lywin#", "QI(Fj9_N&lywin#");
      String string1 = locale0.getDisplayLanguage(locale1);
      Object object0 = locale0.clone();
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      String string2 = locale0.getDisplayLanguage(locale2);
      ParsePosition parsePosition0 = new ParsePosition(2520);
      fastDateFormat0.init();
      parsePosition0.setIndex(2520);
      Object object1 = fastDateFormat0.parseObject("0aP;Xq", parsePosition0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2520, 1, 2, 1);
      MockDate mockDate0 = new MockDate(2, 0, 2520);
      mockGregorianCalendar0.setTime(mockDate0);
      String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      Object object2 = fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule", parsePosition0);
      boolean boolean0 = fastDateFormat0.equals("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
      String string4 = fastDateFormat0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale locale3 = Locale.lookup(linkedList0, list0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-12), 0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -12
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
