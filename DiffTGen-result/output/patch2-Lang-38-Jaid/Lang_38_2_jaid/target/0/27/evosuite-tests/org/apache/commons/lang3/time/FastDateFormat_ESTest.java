/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 30 07:49:15 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.stream.IntStream;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField";
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ql", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.close();
      StringBuffer stringBuffer1 = stringBuffer0.append(953.00903F);
      String string0 = "The pattern must not be null";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("The pattern must not be null");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = fastDateFormat0.getPattern();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 3;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "[hOwm&38!p>)-te[meh");
      Locale locale0 = new Locale("~", "{2;\">-c5\"W!fh;i6=");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[hOwm&38!p>)-te[meh", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0);
      int int0 = fastDateFormat0.hashCode();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(0);
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(0, timeZone0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer(3969);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
      StringBuffer stringBuffer1 = stringBuffer0.append(1.0F);
      StringBuffer stringBuffer2 = mockSimpleDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      // Undeclared exception!
      try { 
        mockSimpleDateFormat0.format((Object) fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1);
      String string0 = "The validated map is empty";
      TimeZone timeZone0 = TimeZone.getTimeZone("The validated map is empty");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), (-2479), timeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2479
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "FastDateFormat[";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField");
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("l0b'lCG\"?t", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.ITALIAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 2;
      int int0 = (-1761);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]%P.Q9gd'!", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@/zJbdQa+dOfJE^!aS");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "W_eG`f-i}L";
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("W_eG`f-i}L", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2155), "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      simpleTimeZone0.setStartYear(122);
      String string0 = fastDateFormat0.format((-2546L));
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      Locale locale0 = fastDateFormat0.getLocale();
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2100));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      fastDateFormat0.init();
      int int0 = 2105;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        simpleTimeZone0.setEndRule(8, 12, 1, (-1), false);
      } catch(IllegalArgumentException e) {
         //
         // Illegal end time -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "sX5|S`Rq6N6u0eij";
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("sX5|S`Rq6N6u0eij", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      Locale locale0 = Locale.FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, (-4642), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      String string0 = fastDateFormat0.getPattern();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 3;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "EEEE, MMMM d, yyyy", 2, 2, 521, 2230, 1, (-2610), (-2610), 0, 2);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 521
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.hashCode();
      int int1 = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(0, 0);
      Date date0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("!0jD:wEkAV<C");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = 13;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "%PK+", (-1), 0, 13, (-1), 13, 0, 39, (-1));
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("A*ku|H0%J{<!p", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      String string0 = fastDateFormat0.format(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'F';
      charArray0[2] = 's';
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, charArray0);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, (Locale) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      String string1 = locale0.getDisplayVariant();
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, timeZone0);
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("NWf'@~W");
      MockDate mockDate0 = new MockDate();
      Object object0 = timeZone0.clone();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeZone.setDefault(timeZone1);
      TimeZone.setDefault(timeZone1);
      boolean boolean0 = timeZone0.inDaylightTime(mockDate0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0);
      int int0 = (-527);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-527), locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -527
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2;
      String string0 = "}(EEgW";
      TimeZone timeZone0 = TimeZone.getTimeZone("}(EEgW");
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2, timeZone0);
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      String string1 = "aaTxe[}";
      StringBuffer stringBuffer0 = new StringBuffer("aaTxe[}");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "aaTxe[}");
      StringBuffer stringBuffer2 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
      StringBuffer stringBuffer3 = fastDateFormat0.format(calendar0, stringBuffer2);
      int int1 = (-775);
      int int2 = 0;
      int int3 = 1;
      StringBuffer stringBuffer4 = stringBuffer2.reverse();
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-67), (CharSequence) stringBuffer3);
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -67
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "9~]o[\",";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("9~]o[\",", (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNameRule");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "E[GHthQ UzL");
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("C&>2W)xk`cO*zP`%|h3", (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      boolean boolean0 = linkedList1.removeAll(linkedList0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("DN.|H", (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-3661), (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3661
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "88(c";
      int int0 = (-1296);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1296), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("88(c", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("IZ*v%wW2#%aiZ P", locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockDate mockDate0 = new MockDate(1);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(1, (TimeZone) null);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(322, 1563);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1563
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      String string0 = "vP;]fr";
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("vP;]fr", (int[]) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null);
      String string0 = fastDateFormat0.toString();
      Locale locale0 = Locale.FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, true, (-4642), locale0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "FastDateFormat[";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("FastDateFormat[");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "]";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]");
      int int0 = 0;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1350), "]", 3, (-850), 0, 3, 1, 1, 967, 3);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day -850
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      int int0 = 0;
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(0, 1, locale0);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1809;
      String string0 = fastDateFormat0.parseToken("org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField", intArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "U=O::");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("U=O::", (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Q8f`KzVHzDO+aDUyB+0");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      TimeZone.setDefault(simpleTimeZone0);
      simpleTimeZone0.setStartYear(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = simpleTimeZone0.getDisplayName();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1712), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1712
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, timeZone0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(575, 2700, (-463), 2700, 1, 100);
      String string0 = fastDateFormat0.format((Date) mockDate0);
      String string1 = locale0.getDisplayScript(locale1);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0, locale0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(0, timeZone0, locale1);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "i.ts(V^>";
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("i.ts(V^>", (TimeZone) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">_i()~G");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1000;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1000, 1000, (TimeZone) null, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1000
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 100;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(100, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 100
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      String string0 = locale0.toLanguageTag();
      String string1 = locale0.getDisplayLanguage();
      String string2 = locale0.getDisplayScript((Locale) null);
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "#Y{E8{D+{ ", 3, 0, 1, 0, 0, 0, 2, 415, 9);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) simpleTimeZone0);
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(2, (Locale) null);
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2416), (TimeZone) simpleTimeZone0, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2416
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2783, "");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
      simpleTimeZone0.setStartYear(3);
      fastDateFormat0.init();
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-409), 2, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -409
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(273, "", (-2129), 0, (-2129), 273, (-796), 0, 0, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
      String string0 = fastDateFormat0.format(0L);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 8;
      TimeZone timeZone0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(8, (TimeZone) null, (Locale) null);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 8
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = new FastDateFormat("v)7L*$|U('xov4JIoH+", timeZone0, (Locale) null);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format(calendar0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.forLanguageTag("");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("x#RgU2F[I8M C?^");
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale2 = fastDateFormat0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateFormat0.parseObject("amht)9vo:[", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      long long0 = (-1L);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      Locale locale0 = Locale.ENGLISH;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      int int0 = 963;
      Locale locale1 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale1);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate((-1665L));
      String string0 = fastDateFormat0.format((Date) mockDate0);
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = null;
      try {
        fastDateFormat0 = new FastDateFormat((String) null, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Locale locale0 = Locale.KOREAN;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("", locale0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(1, 7);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      timeZone0.setRawOffset((-1911));
      FastDateFormat fastDateFormat0 = new FastDateFormat("d!z9", timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2, timeZone0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1778), 0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1778
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2525), "");
      simpleTimeZone0.setRawOffset((-2525));
      Locale locale0 = Locale.JAPANESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
      String string0 = locale0.getExtension('u');
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-423));
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -423
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
      String string0 = fastDateFormat0.toString();
      ParsePosition parsePosition0 = new ParsePosition(1223);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      Locale locale0 = fastDateFormat0.getLocale();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      int int0 = 1065;
      String string0 = "ELC+R!HL";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1065, "ELC+R!HL");
      Object object0 = simpleTimeZone0.clone();
      String string1 = "-CFe?W#cuCki]4&g";
      Locale locale0 = new Locale("-CFe?W#cuCki]4&g", "Th)Kz\u0002S/\u0001(:Jx");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 2, (-1721));
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((long) 1065);
      StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-1), 2, (TimeZone) simpleTimeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(14, "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-502), (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -502
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(5, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      boolean boolean0 = fastDateFormat0.equals("");
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3715, "@DgRH%:nT");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2, 777, (TimeZone) simpleTimeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 777
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2037;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      mockSimpleDateFormat0.setNumberFormat(numberFormat0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.setRawOffset(0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(2037, 0, timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2037
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-1), timeZone0, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(Integer.MIN_VALUE, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2147483648
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(2534, timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2534
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = new Locale("37OT!5: ");
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(18, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 18
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateFormat0.parseObject("", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.US;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Set<String> set1 = charset0.aliases();
      String string0 = Locale.lookupTag(linkedList0, set1);
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(31, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = null;
      int int0 = 4735;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, (String) null, (-2020), 113, 113, 113, 113, 4735, 4735, 113, 0, 113, 2437);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 4089;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(4089, 4089, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4089
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = (-408);
      String string0 = "Kw>6(4Wn]P{?y]=iL";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-64), "Kw>6(4Wn]P{?y]=iL");
      // Undeclared exception!
      try { 
        simpleTimeZone0.setDSTSavings((-64));
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: -64
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(0, 1545, locale0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1545
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormatSymbols dateFormatSymbols0 = mockSimpleDateFormat0.getDateFormatSymbols();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("G#tRWXbWcfK?q4T_V", timeZone0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      MockDate mockDate0 = new MockDate(1, 0, 0, 2, (-444), 1);
      Calendar calendar0 = MockCalendar.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("M!gT2S~");
      decimalFormat0.setMaximumFractionDigits(0);
      StringBuffer stringBuffer0 = new StringBuffer("M!gT2S~");
      FieldPosition fieldPosition0 = new FieldPosition(3443);
      StringBuffer stringBuffer1 = stringBuffer0.insert(1, (double) 3443);
      StringBuffer stringBuffer2 = decimalFormat0.format((double) (-444), stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer3 = fastDateFormat0.format((long) (-444), stringBuffer0);
      StringBuffer stringBuffer4 = fastDateFormat0.format(calendar0, stringBuffer2);
      StringBuffer stringBuffer5 = stringBuffer4.append((long) 0);
      IntStream intStream0 = stringBuffer4.codePoints();
      StringBuffer stringBuffer6 = fastDateFormat0.format((Date) mockDate0, stringBuffer4);
      int[] intArray0 = new int[7];
      intArray0[0] = (-444);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3;
      intArray0[4] = 3443;
      intArray0[5] = 0;
      intArray0[6] = (-444);
      // Undeclared exception!
      try { 
        fastDateFormat0.parseToken("", intArray0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
      int int0 = (-3446);
      String string0 = null;
      int int1 = (-2652);
      int int2 = 1;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(80);
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 80
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
