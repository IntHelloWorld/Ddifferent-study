* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.lang3.StringUtils
* Starting client
* Connecting to master process on port 4127
* Analyzing classpath: 
  - /home/hewitt/work/DiffTGen-master/output/Lang_39_simfix/target/build/classes/all0.jar
  - /home/hewitt/work/DiffTGen-master/lib/myprinter.jar
  - /home/hewitt/work/DiffTGen-master/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang3.StringUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 1128
  - Branch 1044
  - Exception 0
  - MutationFactory 874
  - Output 341
  - Method 143
  - MethodNoException 143
  - CBranchFitnessFactory 1044
* Using seed 1585041202244
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%][Progress:===>                          11%] [Cov:>                                  1%][Progress:===>                          11%] [Cov:>                                  2%][Progress:===>                          11%] [Cov:=====>                             15%][Progress:===>                          13%] [Cov:=====>                             15%][Progress:===>                          13%] [Cov:=====>                             16%][Progress:===>                          13%] [Cov:=====>                             17%][Progress:===>                          13%] [Cov:======>                            18%][Progress:====>                         16%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:=>                                 4%][Progress:====>                         16%] [Cov:=====>                             16%][Progress:====>                         16%] [Cov:======>                            18%][Progress:====>                         16%] [Cov:======>                            19%][Progress:====>                         16%] [Cov:=======>                           22%][Progress:====>                         16%] [Cov:========>                          24%][Progress:=====>                        18%] [Cov:>                                  1%][Progress:=====>                        18%] [Cov:=>                                 3%][Progress:=====>                        18%] [Cov:=====>                             15%][Progress:=====>                        18%] [Cov:=====>                             16%][Progress:=====>                        18%] [Cov:=====>                             17%][Progress:=====>                        18%] [Cov:======>                            18%][Progress:=====>                        18%] [Cov:=======>                           20%][Progress:=====>                        18%] [Cov:=======>                           21%][Progress:=======>                      26%] [Cov:>                                  1%][Progress:============>                 40%] [Cov:>                                  2%][Progress:============>                 40%] [Cov:====>                              14%][Progress:============>                 40%] [Cov:=====>                             15%][Progress:============>                 40%] [Cov:=====>                             16%][Progress:============>                 41%] [Cov:>                                  0%][Progress:============>                 43%] [Cov:>                                  1%][Progress:============>                 43%] [Cov:====>                              14%][Progress:============>                 43%] [Cov:=====>                             15%][Progress:============>                 43%] [Cov:=====>                             16%][Progress:=============>                45%] [Cov:=====>                             16%][Progress:==============>               48%] [Cov:>                                  0%][Progress:================>             56%] [Cov:>                                  0%][Progress:================>             56%] [Cov:====>                              12%][Progress:==================>           60%] [Cov:>                                  2%][Progress:==================>           60%] [Cov:=>                                 5%][Progress:==================>           60%] [Cov:=====>                             17%][Progress:==================>           60%] [Cov:======>                            19%][Progress:==================>           60%] [Cov:=======>                           21%][Progress:==================>           60%] [Cov:========>                          23%][Progress:==================>           60%] [Cov:=========>                         26%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=>                                 5%][Progress:==================>           61%] [Cov:======>                            18%][Progress:==================>           61%] [Cov:=======>                           21%][Progress:==================>           61%] [Cov:=======>                           22%][Progress:==================>           61%] [Cov:=========>                         26%][Progress:==================>           61%] [Cov:==========>                        29%][Progress:==================>           63%] [Cov:>                                  0%][Progress:==================>           63%] [Cov:>                                  1%][Progress:==================>           63%] [Cov:====>                              13%][Progress:==================>           63%] [Cov:=====>                             15%][Progress:==================>           63%] [Cov:=====>                             16%][Progress:==================>           63%] [Cov:=====>                             17%][Progress:===================>          66%] [Cov:=>                                 3%][Progress:===================>          66%] [Cov:==>                                6%][Progress:===================>          66%] [Cov:======>                            18%][Progress:===================>          66%] [Cov:=======>                           21%][Progress:===================>          66%] [Cov:========>                          23%][Progress:===================>          66%] [Cov:=========>                         27%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:====================>         68%] [Cov:=>                                 3%][Progress:====================>         68%] [Cov:=>                                 5%][Progress:====================>         68%] [Cov:======>                            18%][Progress:====================>         68%] [Cov:=======>                           20%][Progress:====================>         68%] [Cov:=======>                           22%][Progress:====================>         68%] [Cov:========>                          25%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:>                                  1%][Progress:=====================>        71%] [Cov:=>                                 3%][Progress:=====================>        71%] [Cov:=====>                             16%][Progress:=====================>        71%] [Cov:=====>                             17%][Progress:=====================>        71%] [Cov:======>                            18%][Progress:=====================>        71%] [Cov:=======>                           20%][Progress:=====================>        71%] [Cov:========>                          23%][Progress:=====================>        73%] [Cov:>                                  2%][Progress:=====================>        73%] [Cov:=>                                 5%][Progress:=====================>        73%] [Cov:=====>                             17%][Progress:=====================>        73%] [Cov:=======>                           20%][Progress:=====================>        73%] [Cov:=======>                           21%][Progress:=====================>        73%] [Cov:========>                          25%][Progress:=====================>        73%] [Cov:=========>                         28%][Progress:=====================>        73%] [Cov:===========>                       33%][Progress:======================>       75%] [Cov:=>                                 3%][Progress:======================>       75%] [Cov:==>                                6%][Progress:======================>       75%] [Cov:======>                            18%][Progress:======================>       75%] [Cov:=======>                           21%][Progress:======================>       75%] [Cov:========>                          23%][Progress:======================>       75%] [Cov:=========>                         27%][Progress:======================>       75%] [Cov:==========>                        31%][Progress:======================>       76%] [Cov:=====>                             17%][Progress:======================>       76%] [Cov:======>                            18%][Progress:======================>       76%] [Cov:=======>                           21%][Progress:======================>       76%] [Cov:========>                          24%][Progress:======================>       76%] [Cov:=========>                         26%][Progress:======================>       76%] [Cov:==========>                        30%][Progress:=======================>      78%] [Cov:=======>                           22%][Progress:=======================>      78%] [Cov:========>                          24%][Progress:=======================>      78%] [Cov:=========>                         28%][Progress:=======================>      78%] [Cov:===========>                       32%][Progress:========================>     80%] [Cov:>                                  0%][Progress:========================>     80%] [Cov:====>                              13%][Progress:========================>     80%] [Cov:=====>                             16%][Progress:========================>     80%] [Cov:=====>                             17%][Progress:========================>     80%] [Cov:======>                            19%][Progress:========================>     80%] [Cov:=======>                           22%][Progress:========================>     80%] [Cov:========>                          25%][Progress:========================>     81%] [Cov:>                                  1%][Progress:========================>     81%] [Cov:>                                  2%][Progress:========================>     81%] [Cov:====>                              14%][Progress:========================>     81%] [Cov:=====>                             15%][Progress:========================>     81%] [Cov:=====>                             16%][Progress:========================>     81%] [Cov:=====>                             17%][Progress:===========================>  91%] [Cov:=>                                 4%][Progress:===========================>  91%] [Cov:==>                                7%][Progress:===========================>  91%] [Cov:=======>                           20%][Progress:===========================>  91%] [Cov:========>                          24%][Progress:===========================>  91%] [Cov:=========>                         26%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:============>                      36%][Progress:===========================>  91%] [Cov:============>                      37%][Progress:===========================>  93%] [Cov:>                                  1%][Progress:===========================>  93%] [Cov:=>                                 3%][Progress:===========================>  93%] [Cov:=====>                             16%][Progress:===========================>  93%] [Cov:=====>                             17%][Progress:===========================>  93%] [Cov:======>                            18%][Progress:===========================>  93%] [Cov:=======>                           20%][Progress:===========================>  93%] [Cov:=======>                           22%][Progress:============================> 95%] [Cov:=>                                 3%][Progress:============================> 95%] [Cov:=>                                 5%][Progress:============================> 95%] [Cov:======>                            18%][Progress:============================> 95%] [Cov:=======>                           20%][Progress:============================> 95%] [Cov:=======>                           21%][Progress:============================> 95%] [Cov:========>                          24%][Progress:============================> 95%] [Cov:=========>                         27%][Progress:=============================>98%] [Cov:=>                                 3%][Progress:=============================>98%] [Cov:==>                                7%][Progress:=============================>98%] [Cov:======>                            19%][Progress:=============================>98%] [Cov:=======>                           22%][Progress:=============================>98%] [Cov:========>                          24%][Progress:=============================>98%] [Cov:==========>                        29%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       34%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:==>                                6%][Progress:==============================100%] [Cov:======>                            19%][Progress:==============================100%] [Cov:=======>                           22%][Progress:==============================100%] [Cov:========>                          24%][Progress:==============================100%] [Cov:==========>                        29%][Progress:==============================100%] [Cov:===========>                       34%][MASTER] 17:14:36.153 [logback-1] WARN  ResetExecutor - Stopped resetting of classes due to timeout
[Progress:==============================100%] [Cov:>                                  1%][Progress:==============================100%] [Cov:=>                                 3%][Progress:==============================100%] [Cov:=====>                             15%][Progress:==============================100%] [Cov:=====>                             16%][Progress:==============================100%] [Cov:=====>                             17%][Progress:==============================100%] [Cov:======>                            18%][Progress:==============================100%] [Cov:======>                            19%][Progress:==============================100%] [Cov:===========>                       34%][MASTER] 17:14:48.976 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 12336ms
[Progress:==============================100%] [Cov:============================>      82%]
* Search finished after 76s and 0 generations, 8440 statements, best individual has fitness: 6126.088625412757
[MASTER] 17:14:52.492 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 17 seconds more than allowed.
* Minimizing test suite
[MASTER] 17:16:03.003 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 1128
* Number of covered goals: 1012
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 1044
* Number of covered goals: 887
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 74%
* Total number of goals: 874
* Number of covered goals: 650
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 81%
* Total number of goals: 341
* Number of covered goals: 275
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 143
* Number of covered goals: 143
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 143
* Number of covered goals: 143
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 1044
* Number of covered goals: 766
* Generated 192 tests with total length 2118
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 17:16:31.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 17:16:31.575 [logback-1] WARN  JUnitAnalyzer - Failing test: String string0 = StringUtils.left("9'", 0);
String string1 = "d]J-,^52_p_ne~L";
int int0 = Integer.MAX_VALUE;
String string2 = "";
String string3 = StringUtils.center(string1, int0, string2);
String string4 = "K~orc9Ngjqwvm";
int int1 = (-229);
String string5 = StringUtils.center(string4, int1);
boolean boolean0 = StringUtils.contains(string1, string5);
String string6 = StringUtils.strip(string4);
String string7 = "";
boolean boolean1 = StringUtils.isNumeric(string7);
String string8 = "I";
char char0 = '%';
int int2 = 3;
int int3 = StringUtils.lastIndexOf(string8, char0, int2);
String string9 = "";
String string10 = StringUtils.substringBefore(string6, string9);
char char1 = 'o';
String string11 = StringUtils.leftPad(string0, int2, char1);

[MASTER] 17:16:40.221 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 17:16:40.221 [logback-1] WARN  JUnitAnalyzer - Failing test: String string0 = StringUtils.difference("", "");
String string1 = "Mk~m~[Z}px_";
String string2 = StringUtils.defaultIfEmpty("A>mH{GC%&#Zn=g", "Mk~m~[Z}px_");
int int0 = StringUtils.lastIndexOf("A>mH{GC%&#Zn=g", "9$d2Rw,");
String string3 = "2_j Ta0IWo<;@M";
String string4 = "NoSuchFieldException occurred during 1.6 backcompat code";
int int1 = StringUtils.indexOf("2_j Ta0IWo<;@M", "NoSuchFieldException occurred during 1.6 backcompat code");
String[] stringArray0 = StringUtils.substringsBetween("/q^is", " vs ", (String) null);
int int2 = StringUtils.indexOf((String) null, "NoSuchFieldException occurred during 1.6 backcompat code");
int int3 = Integer.MAX_VALUE;
char char0 = 'Y';
String string5 = StringUtils.center(string4, int3, char0);
String string6 = "H?pf(=?";
boolean boolean0 = StringUtils.containsNone(string6, string3);
String string7 = null;
String string8 = StringUtils.strip(string7);
int int4 = 12;
int int5 = StringUtils.indexOf(string1, string5, int4);

[MASTER] 17:16:58.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test066 -> class java.lang.ArrayIndexOutOfBoundsException: 0
[MASTER] 17:16:58.585 [logback-1] WARN  JUnitAnalyzer - Failing test: boolean boolean0 = StringUtils.isAlphanumeric("0~]DXvc(]n4cbuIbeX");
String string0 = StringUtils.repeat("0~]DXvc(]n4cbuIbeX", "[", 0);
String string1 = StringUtils.abbreviate("[", 4244);
int int0 = StringUtils.indexOf("0~]DXvc(]n4cbuIbeX", '|', (-2481));
boolean boolean1 = StringUtils.containsNone("[", "[");
String[] stringArray0 = StringUtils.split("...", "0~]DXvc(]n4cbuIbeX");
HashSet<JavaVersion> hashSet0 = new HashSet<JavaVersion>((Collection<? extends JavaVersion>) null);

* Writing JUnit test case 'StringUtils_ESTest' to evosuite-tests
* Done!

* Computation finished
